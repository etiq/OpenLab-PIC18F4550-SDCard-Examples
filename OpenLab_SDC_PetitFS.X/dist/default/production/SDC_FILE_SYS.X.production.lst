

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Jan 27 18:38:23 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           	psect	idataBANK1
    58  004FE4                     __pidataBANK1:
    59                           	opt stack 0
    60                           
    61                           ;initializer for _fileName
    62  004FE4  63                 	db	99
    63  004FE5  68                 	db	104
    64  004FE6  65                 	db	101
    65  004FE7  63                 	db	99
    66  004FE8  6B                 	db	107
    67  004FE9  2E                 	db	46
    68  004FEA  74                 	db	116
    69  004FEB  78                 	db	120
    70  004FEC  74                 	db	116
    71  004FED  00                 	db	0
    72                           
    73                           	psect	mediumconst
    74  007D50                     __pmediumconst:
    75                           	opt stack 0
    76  007D50  00                 	db	0
    77  007D51                     create_name@cvt:
    78                           	opt stack 0
    79  007D51  80                 	db	128
    80  007D52  9A                 	db	154
    81  007D53  90                 	db	144
    82  007D54  41                 	db	65
    83  007D55  8E                 	db	142
    84  007D56  41                 	db	65
    85  007D57  8F                 	db	143
    86  007D58  80                 	db	128
    87  007D59  45                 	db	69
    88  007D5A  45                 	db	69
    89  007D5B  45                 	db	69
    90  007D5C  49                 	db	73
    91  007D5D  49                 	db	73
    92  007D5E  49                 	db	73
    93  007D5F  8E                 	db	142
    94  007D60  8F                 	db	143
    95  007D61  90                 	db	144
    96  007D62  92                 	db	146
    97  007D63  92                 	db	146
    98  007D64  4F                 	db	79
    99  007D65  99                 	db	153
   100  007D66  4F                 	db	79
   101  007D67  55                 	db	85
   102  007D68  55                 	db	85
   103  007D69  59                 	db	89
   104  007D6A  99                 	db	153
   105  007D6B  9A                 	db	154
   106  007D6C  9B                 	db	155
   107  007D6D  9C                 	db	156
   108  007D6E  9D                 	db	157
   109  007D6F  9E                 	db	158
   110  007D70  9F                 	db	159
   111  007D71  41                 	db	65
   112  007D72  49                 	db	73
   113  007D73  4F                 	db	79
   114  007D74  55                 	db	85
   115  007D75  A5                 	db	165
   116  007D76  A5                 	db	165
   117  007D77  A6                 	db	166
   118  007D78  A7                 	db	167
   119  007D79  A8                 	db	168
   120  007D7A  A9                 	db	169
   121  007D7B  AA                 	db	170
   122  007D7C  AB                 	db	171
   123  007D7D  AC                 	db	172
   124  007D7E  21                 	db	33
   125  007D7F  AE                 	db	174
   126  007D80  AF                 	db	175
   127  007D81  B0                 	db	176
   128  007D82  B1                 	db	177
   129  007D83  B2                 	db	178
   130  007D84  B3                 	db	179
   131  007D85  B4                 	db	180
   132  007D86  B5                 	db	181
   133  007D87  B6                 	db	182
   134  007D88  B7                 	db	183
   135  007D89  B8                 	db	184
   136  007D8A  B9                 	db	185
   137  007D8B  BA                 	db	186
   138  007D8C  BB                 	db	187
   139  007D8D  BC                 	db	188
   140  007D8E  BD                 	db	189
   141  007D8F  BE                 	db	190
   142  007D90  BF                 	db	191
   143  007D91  C0                 	db	192
   144  007D92  C1                 	db	193
   145  007D93  C2                 	db	194
   146  007D94  C3                 	db	195
   147  007D95  C4                 	db	196
   148  007D96  C5                 	db	197
   149  007D97  C6                 	db	198
   150  007D98  C7                 	db	199
   151  007D99  C8                 	db	200
   152  007D9A  C9                 	db	201
   153  007D9B  CA                 	db	202
   154  007D9C  CB                 	db	203
   155  007D9D  CC                 	db	204
   156  007D9E  CD                 	db	205
   157  007D9F  CE                 	db	206
   158  007DA0  CF                 	db	207
   159  007DA1  D0                 	db	208
   160  007DA2  D1                 	db	209
   161  007DA3  D2                 	db	210
   162  007DA4  D3                 	db	211
   163  007DA5  D4                 	db	212
   164  007DA6  D5                 	db	213
   165  007DA7  D6                 	db	214
   166  007DA8  D7                 	db	215
   167  007DA9  D8                 	db	216
   168  007DAA  D9                 	db	217
   169  007DAB  DA                 	db	218
   170  007DAC  DB                 	db	219
   171  007DAD  DC                 	db	220
   172  007DAE  DD                 	db	221
   173  007DAF  DE                 	db	222
   174  007DB0  DF                 	db	223
   175  007DB1  E0                 	db	224
   176  007DB2  E1                 	db	225
   177  007DB3  E2                 	db	226
   178  007DB4  E3                 	db	227
   179  007DB5  E4                 	db	228
   180  007DB6  E5                 	db	229
   181  007DB7  E6                 	db	230
   182  007DB8  E7                 	db	231
   183  007DB9  E8                 	db	232
   184  007DBA  E9                 	db	233
   185  007DBB  EA                 	db	234
   186  007DBC  EB                 	db	235
   187  007DBD  EC                 	db	236
   188  007DBE  ED                 	db	237
   189  007DBF  EE                 	db	238
   190  007DC0  EF                 	db	239
   191  007DC1  F0                 	db	240
   192  007DC2  F1                 	db	241
   193  007DC3  F2                 	db	242
   194  007DC4  F3                 	db	243
   195  007DC5  F4                 	db	244
   196  007DC6  F5                 	db	245
   197  007DC7  F6                 	db	246
   198  007DC8  F7                 	db	247
   199  007DC9  F8                 	db	248
   200  007DCA  F9                 	db	249
   201  007DCB  FA                 	db	250
   202  007DCC  FB                 	db	251
   203  007DCD  FC                 	db	252
   204  007DCE  FD                 	db	253
   205  007DCF  FE                 	db	254
   206  007DD0  FF                 	db	255
   207  007DD1                     __end_ofcreate_name@cvt:
   208                           	opt stack 0
   209  0000                     _ADCON1	set	4033
   210  0000                     _CMCON	set	4020
   211  0000                     _PIR1bits	set	3998
   212  0000                     _PORTDbits	set	3971
   213  0000                     _SSPBUF	set	4041
   214  0000                     _SSPCON1	set	4038
   215  0000                     _SSPCON1bits	set	4038
   216  0000                     _SSPSTAT	set	4039
   217  0000                     _SSPSTATbits	set	4039
   218  0000                     _TRISAbits	set	3986
   219  0000                     _TRISBbits	set	3987
   220  0000                     _TRISCbits	set	3988
   221  0000                     _TRISDbits	set	3989
   222  0000                     _LATA5	set	31821
   223  0000                     _LATB0	set	31824
   224  0000                     _LATB4	set	31828
   225  0000                     _RD4	set	31772
   226  0000                     _RD5	set	31773
   227  0000                     _TRISA5	set	31893
   228  0000                     _TRISB4	set	31900
   229  007DD1                     __stringdata:
   230                           	opt stack 0
   231  007DD1                     STR_20:
   232  007DD1  0D                 	db	13
   233  007DD2  0A                 	db	10
   234  007DD3  41                 	db	65	;'A'
   235  007DD4  74                 	db	116	;'t'
   236  007DD5  74                 	db	116	;'t'
   237  007DD6  65                 	db	101	;'e'
   238  007DD7  6D                 	db	109	;'m'
   239  007DD8  70                 	db	112	;'p'
   240  007DD9  74                 	db	116	;'t'
   241  007DDA  69                 	db	105	;'i'
   242  007DDB  6E                 	db	110	;'n'
   243  007DDC  67                 	db	103	;'g'
   244  007DDD  20                 	db	32
   245  007DDE  74                 	db	116	;'t'
   246  007DDF  6F                 	db	111	;'o'
   247  007DE0  20                 	db	32
   248  007DE1  55                 	db	85	;'U'
   249  007DE2  4E                 	db	78	;'N'
   250  007DE3  6D                 	db	109	;'m'
   251  007DE4  6F                 	db	111	;'o'
   252  007DE5  75                 	db	117	;'u'
   253  007DE6  6E                 	db	110	;'n'
   254  007DE7  74                 	db	116	;'t'
   255  007DE8  20                 	db	32
   256  007DE9  66                 	db	102	;'f'
   257  007DEA  69                 	db	105	;'i'
   258  007DEB  6C                 	db	108	;'l'
   259  007DEC  65                 	db	101	;'e'
   260  007DED  20                 	db	32
   261  007DEE  73                 	db	115	;'s'
   262  007DEF  79                 	db	121	;'y'
   263  007DF0  73                 	db	115	;'s'
   264  007DF1  74                 	db	116	;'t'
   265  007DF2  65                 	db	101	;'e'
   266  007DF3  6D                 	db	109	;'m'
   267  007DF4  2E                 	db	46
   268  007DF5  0D                 	db	13
   269  007DF6  0A                 	db	10
   270  007DF7  00                 	db	0
   271  007DF8                     STR_21:
   272  007DF8  0D                 	db	13
   273  007DF9  0A                 	db	10
   274  007DFA  45                 	db	69	;'E'
   275  007DFB  72                 	db	114	;'r'
   276  007DFC  72                 	db	114	;'r'
   277  007DFD  6F                 	db	111	;'o'
   278  007DFE  72                 	db	114	;'r'
   279  007DFF  20                 	db	32
   280  007E00  74                 	db	116	;'t'
   281  007E01  72                 	db	114	;'r'
   282  007E02  79                 	db	121	;'y'
   283  007E03  69                 	db	105	;'i'
   284  007E04  6E                 	db	110	;'n'
   285  007E05  67                 	db	103	;'g'
   286  007E06  20                 	db	32
   287  007E07  74                 	db	116	;'t'
   288  007E08  6F                 	db	111	;'o'
   289  007E09  20                 	db	32
   290  007E0A  55                 	db	85	;'U'
   291  007E0B  4E                 	db	78	;'N'
   292  007E0C  6D                 	db	109	;'m'
   293  007E0D  6F                 	db	111	;'o'
   294  007E0E  75                 	db	117	;'u'
   295  007E0F  6E                 	db	110	;'n'
   296  007E10  74                 	db	116	;'t'
   297  007E11  20                 	db	32
   298  007E12  66                 	db	102	;'f'
   299  007E13  69                 	db	105	;'i'
   300  007E14  6C                 	db	108	;'l'
   301  007E15  65                 	db	101	;'e'
   302  007E16  73                 	db	115	;'s'
   303  007E17  79                 	db	121	;'y'
   304  007E18  73                 	db	115	;'s'
   305  007E19  74                 	db	116	;'t'
   306  007E1A  65                 	db	101	;'e'
   307  007E1B  6D                 	db	109	;'m'
   308  007E1C  3B                 	db	59	;';'
   309  007E1D  20                 	db	32
   310  007E1E  00                 	db	0
   311  007E1F                     STR_23:
   312  007E1F  0D                 	db	13
   313  007E20  46                 	db	70	;'F'
   314  007E21  69                 	db	105	;'i'
   315  007E22  6C                 	db	108	;'l'
   316  007E23  65                 	db	101	;'e'
   317  007E24  20                 	db	32
   318  007E25  73                 	db	115	;'s'
   319  007E26  79                 	db	121	;'y'
   320  007E27  73                 	db	115	;'s'
   321  007E28  74                 	db	116	;'t'
   322  007E29  65                 	db	101	;'e'
   323  007E2A  6D                 	db	109	;'m'
   324  007E2B  20                 	db	32
   325  007E2C  73                 	db	115	;'s'
   326  007E2D  75                 	db	117	;'u'
   327  007E2E  63                 	db	99	;'c'
   328  007E2F  63                 	db	99	;'c'
   329  007E30  65                 	db	101	;'e'
   330  007E31  73                 	db	115	;'s'
   331  007E32  66                 	db	102	;'f'
   332  007E33  75                 	db	117	;'u'
   333  007E34  6C                 	db	108	;'l'
   334  007E35  6C                 	db	108	;'l'
   335  007E36  79                 	db	121	;'y'
   336  007E37  20                 	db	32
   337  007E38  75                 	db	117	;'u'
   338  007E39  6E                 	db	110	;'n'
   339  007E3A  6D                 	db	109	;'m'
   340  007E3B  6F                 	db	111	;'o'
   341  007E3C  75                 	db	117	;'u'
   342  007E3D  6E                 	db	110	;'n'
   343  007E3E  74                 	db	116	;'t'
   344  007E3F  65                 	db	101	;'e'
   345  007E40  64                 	db	100	;'d'
   346  007E41  2E                 	db	46
   347  007E42  0D                 	db	13
   348  007E43  0A                 	db	10
   349  007E44  00                 	db	0
   350  007E45                     STR_2:
   351  007E45  0D                 	db	13
   352  007E46  0A                 	db	10
   353  007E47  41                 	db	65	;'A'
   354  007E48  74                 	db	116	;'t'
   355  007E49  74                 	db	116	;'t'
   356  007E4A  65                 	db	101	;'e'
   357  007E4B  6D                 	db	109	;'m'
   358  007E4C  70                 	db	112	;'p'
   359  007E4D  74                 	db	116	;'t'
   360  007E4E  69                 	db	105	;'i'
   361  007E4F  6E                 	db	110	;'n'
   362  007E50  67                 	db	103	;'g'
   363  007E51  20                 	db	32
   364  007E52  74                 	db	116	;'t'
   365  007E53  6F                 	db	111	;'o'
   366  007E54  20                 	db	32
   367  007E55  6D                 	db	109	;'m'
   368  007E56  6F                 	db	111	;'o'
   369  007E57  75                 	db	117	;'u'
   370  007E58  6E                 	db	110	;'n'
   371  007E59  74                 	db	116	;'t'
   372  007E5A  20                 	db	32
   373  007E5B  66                 	db	102	;'f'
   374  007E5C  69                 	db	105	;'i'
   375  007E5D  6C                 	db	108	;'l'
   376  007E5E  65                 	db	101	;'e'
   377  007E5F  20                 	db	32
   378  007E60  73                 	db	115	;'s'
   379  007E61  79                 	db	121	;'y'
   380  007E62  73                 	db	115	;'s'
   381  007E63  74                 	db	116	;'t'
   382  007E64  65                 	db	101	;'e'
   383  007E65  6D                 	db	109	;'m'
   384  007E66  2E                 	db	46
   385  007E67  0D                 	db	13
   386  007E68  0A                 	db	10
   387  007E69  00                 	db	0
   388  007E6A                     STR_17:
   389  007E6A  0D                 	db	13
   390  007E6B  0A                 	db	10
   391  007E6C  45                 	db	69	;'E'
   392  007E6D  72                 	db	114	;'r'
   393  007E6E  72                 	db	114	;'r'
   394  007E6F  6F                 	db	111	;'o'
   395  007E70  72                 	db	114	;'r'
   396  007E71  20                 	db	32
   397  007E72  74                 	db	116	;'t'
   398  007E73  72                 	db	114	;'r'
   399  007E74  79                 	db	121	;'y'
   400  007E75  69                 	db	105	;'i'
   401  007E76  6E                 	db	110	;'n'
   402  007E77  67                 	db	103	;'g'
   403  007E78  20                 	db	32
   404  007E79  74                 	db	116	;'t'
   405  007E7A  6F                 	db	111	;'o'
   406  007E7B  20                 	db	32
   407  007E7C  6D                 	db	109	;'m'
   408  007E7D  6F                 	db	111	;'o'
   409  007E7E  75                 	db	117	;'u'
   410  007E7F  6E                 	db	110	;'n'
   411  007E80  74                 	db	116	;'t'
   412  007E81  20                 	db	32
   413  007E82  66                 	db	102	;'f'
   414  007E83  69                 	db	105	;'i'
   415  007E84  6C                 	db	108	;'l'
   416  007E85  65                 	db	101	;'e'
   417  007E86  73                 	db	115	;'s'
   418  007E87  79                 	db	121	;'y'
   419  007E88  73                 	db	115	;'s'
   420  007E89  74                 	db	116	;'t'
   421  007E8A  65                 	db	101	;'e'
   422  007E8B  6D                 	db	109	;'m'
   423  007E8C  3B                 	db	59	;';'
   424  007E8D  20                 	db	32
   425  007E8E  00                 	db	0
   426  007E8F                     STR_28:
   427  007E8F  0A                 	db	10
   428  007E90  0D                 	db	13
   429  007E91  53                 	db	83	;'S'
   430  007E92  65                 	db	101	;'e'
   431  007E93  74                 	db	116	;'t'
   432  007E94  74                 	db	116	;'t'
   433  007E95  69                 	db	105	;'i'
   434  007E96  6E                 	db	110	;'n'
   435  007E97  67                 	db	103	;'g'
   436  007E98  20                 	db	32
   437  007E99  42                 	db	66	;'B'
   438  007E9A  6C                 	db	108	;'l'
   439  007E9B  6F                 	db	111	;'o'
   440  007E9C  63                 	db	99	;'c'
   441  007E9D  6B                 	db	107	;'k'
   442  007E9E  20                 	db	32
   443  007E9F  53                 	db	83	;'S'
   444  007EA0  69                 	db	105	;'i'
   445  007EA1  7A                 	db	122	;'z'
   446  007EA2  65                 	db	101	;'e'
   447  007EA3  20                 	db	32
   448  007EA4  74                 	db	116	;'t'
   449  007EA5  6F                 	db	111	;'o'
   450  007EA6  20                 	db	32
   451  007EA7  35                 	db	53	;'5'
   452  007EA8  31                 	db	49	;'1'
   453  007EA9  32                 	db	50	;'2'
   454  007EAA  20                 	db	32
   455  007EAB  42                 	db	66	;'B'
   456  007EAC  79                 	db	121	;'y'
   457  007EAD  74                 	db	116	;'t'
   458  007EAE  65                 	db	101	;'e'
   459  007EAF  73                 	db	115	;'s'
   460  007EB0  0A                 	db	10
   461  007EB1  0D                 	db	13
   462  007EB2  00                 	db	0
   463  007EB3                     STR_7:
   464  007EB3  0D                 	db	13
   465  007EB4  0A                 	db	10
   466  007EB5  0D                 	db	13
   467  007EB6  0A                 	db	10
   468  007EB7  53                 	db	83	;'S'
   469  007EB8  74                 	db	116	;'t'
   470  007EB9  61                 	db	97	;'a'
   471  007EBA  72                 	db	114	;'r'
   472  007EBB  74                 	db	116	;'t'
   473  007EBC  69                 	db	105	;'i'
   474  007EBD  6E                 	db	110	;'n'
   475  007EBE  67                 	db	103	;'g'
   476  007EBF  20                 	db	32
   477  007EC0  74                 	db	116	;'t'
   478  007EC1  6F                 	db	111	;'o'
   479  007EC2  20                 	db	32
   480  007EC3  77                 	db	119	;'w'
   481  007EC4  72                 	db	114	;'r'
   482  007EC5  69                 	db	105	;'i'
   483  007EC6  74                 	db	116	;'t'
   484  007EC7  65                 	db	101	;'e'
   485  007EC8  20                 	db	32
   486  007EC9  74                 	db	116	;'t'
   487  007ECA  68                 	db	104	;'h'
   488  007ECB  65                 	db	101	;'e'
   489  007ECC  20                 	db	32
   490  007ECD  66                 	db	102	;'f'
   491  007ECE  69                 	db	105	;'i'
   492  007ECF  6C                 	db	108	;'l'
   493  007ED0  65                 	db	101	;'e'
   494  007ED1  2E                 	db	46
   495  007ED2  0D                 	db	13
   496  007ED3  0A                 	db	10
   497  007ED4  00                 	db	0
   498  007ED5                     STR_10:
   499  007ED5  0D                 	db	13
   500  007ED6  0A                 	db	10
   501  007ED7  45                 	db	69	;'E'
   502  007ED8  72                 	db	114	;'r'
   503  007ED9  72                 	db	114	;'r'
   504  007EDA  6F                 	db	111	;'o'
   505  007EDB  72                 	db	114	;'r'
   506  007EDC  20                 	db	32
   507  007EDD  74                 	db	116	;'t'
   508  007EDE  72                 	db	114	;'r'
   509  007EDF  79                 	db	121	;'y'
   510  007EE0  69                 	db	105	;'i'
   511  007EE1  6E                 	db	110	;'n'
   512  007EE2  67                 	db	103	;'g'
   513  007EE3  20                 	db	32
   514  007EE4  74                 	db	116	;'t'
   515  007EE5  6F                 	db	111	;'o'
   516  007EE6  20                 	db	32
   517  007EE7  77                 	db	119	;'w'
   518  007EE8  72                 	db	114	;'r'
   519  007EE9  69                 	db	105	;'i'
   520  007EEA  74                 	db	116	;'t'
   521  007EEB  65                 	db	101	;'e'
   522  007EEC  20                 	db	32
   523  007EED  74                 	db	116	;'t'
   524  007EEE  6F                 	db	111	;'o'
   525  007EEF  20                 	db	32
   526  007EF0  66                 	db	102	;'f'
   527  007EF1  69                 	db	105	;'i'
   528  007EF2  6C                 	db	108	;'l'
   529  007EF3  65                 	db	101	;'e'
   530  007EF4  3B                 	db	59	;';'
   531  007EF5  20                 	db	32
   532  007EF6  00                 	db	0
   533  007EF7                     STR_12:
   534  007EF7  0D                 	db	13
   535  007EF8  0A                 	db	10
   536  007EF9  0D                 	db	13
   537  007EFA  0A                 	db	10
   538  007EFB  53                 	db	83	;'S'
   539  007EFC  74                 	db	116	;'t'
   540  007EFD  61                 	db	97	;'a'
   541  007EFE  72                 	db	114	;'r'
   542  007EFF  74                 	db	116	;'t'
   543  007F00  69                 	db	105	;'i'
   544  007F01  6E                 	db	110	;'n'
   545  007F02  67                 	db	103	;'g'
   546  007F03  20                 	db	32
   547  007F04  74                 	db	116	;'t'
   548  007F05  6F                 	db	111	;'o'
   549  007F06  20                 	db	32
   550  007F07  72                 	db	114	;'r'
   551  007F08  65                 	db	101	;'e'
   552  007F09  61                 	db	97	;'a'
   553  007F0A  64                 	db	100	;'d'
   554  007F0B  20                 	db	32
   555  007F0C  74                 	db	116	;'t'
   556  007F0D  68                 	db	104	;'h'
   557  007F0E  65                 	db	101	;'e'
   558  007F0F  20                 	db	32
   559  007F10  66                 	db	102	;'f'
   560  007F11  69                 	db	105	;'i'
   561  007F12  6C                 	db	108	;'l'
   562  007F13  65                 	db	101	;'e'
   563  007F14  2E                 	db	46
   564  007F15  0D                 	db	13
   565  007F16  0A                 	db	10
   566  007F17  00                 	db	0
   567  007F18                     STR_13:
   568  007F18  0D                 	db	13
   569  007F19  0A                 	db	10
   570  007F1A  45                 	db	69	;'E'
   571  007F1B  72                 	db	114	;'r'
   572  007F1C  72                 	db	114	;'r'
   573  007F1D  6F                 	db	111	;'o'
   574  007F1E  72                 	db	114	;'r'
   575  007F1F  20                 	db	32
   576  007F20  74                 	db	116	;'t'
   577  007F21  72                 	db	114	;'r'
   578  007F22  79                 	db	121	;'y'
   579  007F23  69                 	db	105	;'i'
   580  007F24  6E                 	db	110	;'n'
   581  007F25  67                 	db	103	;'g'
   582  007F26  20                 	db	32
   583  007F27  74                 	db	116	;'t'
   584  007F28  6F                 	db	111	;'o'
   585  007F29  20                 	db	32
   586  007F2A  72                 	db	114	;'r'
   587  007F2B  65                 	db	101	;'e'
   588  007F2C  61                 	db	97	;'a'
   589  007F2D  64                 	db	100	;'d'
   590  007F2E  20                 	db	32
   591  007F2F  66                 	db	102	;'f'
   592  007F30  69                 	db	105	;'i'
   593  007F31  6C                 	db	108	;'l'
   594  007F32  65                 	db	101	;'e'
   595  007F33  3B                 	db	59	;';'
   596  007F34  20                 	db	32
   597  007F35  00                 	db	0
   598  007F36                     STR_15:
   599  007F36  0D                 	db	13
   600  007F37  0A                 	db	10
   601  007F38  45                 	db	69	;'E'
   602  007F39  72                 	db	114	;'r'
   603  007F3A  72                 	db	114	;'r'
   604  007F3B  6F                 	db	111	;'o'
   605  007F3C  72                 	db	114	;'r'
   606  007F3D  20                 	db	32
   607  007F3E  74                 	db	116	;'t'
   608  007F3F  72                 	db	114	;'r'
   609  007F40  79                 	db	121	;'y'
   610  007F41  69                 	db	105	;'i'
   611  007F42  6E                 	db	110	;'n'
   612  007F43  67                 	db	103	;'g'
   613  007F44  20                 	db	32
   614  007F45  74                 	db	116	;'t'
   615  007F46  6F                 	db	111	;'o'
   616  007F47  20                 	db	32
   617  007F48  6F                 	db	111	;'o'
   618  007F49  70                 	db	112	;'p'
   619  007F4A  65                 	db	101	;'e'
   620  007F4B  6E                 	db	110	;'n'
   621  007F4C  20                 	db	32
   622  007F4D  66                 	db	102	;'f'
   623  007F4E  69                 	db	105	;'i'
   624  007F4F  6C                 	db	108	;'l'
   625  007F50  65                 	db	101	;'e'
   626  007F51  3B                 	db	59	;';'
   627  007F52  20                 	db	32
   628  007F53  00                 	db	0
   629  007F54                     STR_3:
   630  007F54  0D                 	db	13
   631  007F55  0A                 	db	10
   632  007F56  0D                 	db	13
   633  007F57  0A                 	db	10
   634  007F58  41                 	db	65	;'A'
   635  007F59  74                 	db	116	;'t'
   636  007F5A  74                 	db	116	;'t'
   637  007F5B  65                 	db	101	;'e'
   638  007F5C  6D                 	db	109	;'m'
   639  007F5D  70                 	db	112	;'p'
   640  007F5E  74                 	db	116	;'t'
   641  007F5F  69                 	db	105	;'i'
   642  007F60  6E                 	db	110	;'n'
   643  007F61  67                 	db	103	;'g'
   644  007F62  20                 	db	32
   645  007F63  74                 	db	116	;'t'
   646  007F64  6F                 	db	111	;'o'
   647  007F65  20                 	db	32
   648  007F66  6F                 	db	111	;'o'
   649  007F67  70                 	db	112	;'p'
   650  007F68  65                 	db	101	;'e'
   651  007F69  6E                 	db	110	;'n'
   652  007F6A  20                 	db	32
   653  007F6B  66                 	db	102	;'f'
   654  007F6C  69                 	db	105	;'i'
   655  007F6D  6C                 	db	108	;'l'
   656  007F6E  65                 	db	101	;'e'
   657  007F6F  20                 	db	32
   658  007F70  00                 	db	0
   659  007F71                     STR_29:
   660  007F71  0A                 	db	10
   661  007F72  0D                 	db	13
   662  007F73  43                 	db	67	;'C'
   663  007F74  4F                 	db	79	;'O'
   664  007F75  4D                 	db	77	;'M'
   665  007F76  50                 	db	80	;'P'
   666  007F77  4C                 	db	76	;'L'
   667  007F78  45                 	db	69	;'E'
   668  007F79  54                 	db	84	;'T'
   669  007F7A  49                 	db	73	;'I'
   670  007F7B  4E                 	db	78	;'N'
   671  007F7C  47                 	db	71	;'G'
   672  007F7D  20                 	db	32
   673  007F7E  49                 	db	73	;'I'
   674  007F7F  4E                 	db	78	;'N'
   675  007F80  49                 	db	73	;'I'
   676  007F81  54                 	db	84	;'T'
   677  007F82  49                 	db	73	;'I'
   678  007F83  41                 	db	65	;'A'
   679  007F84  4C                 	db	76	;'L'
   680  007F85  49                 	db	73	;'I'
   681  007F86  5A                 	db	90	;'Z'
   682  007F87  41                 	db	65	;'A'
   683  007F88  54                 	db	84	;'T'
   684  007F89  49                 	db	73	;'I'
   685  007F8A  4F                 	db	79	;'O'
   686  007F8B  4E                 	db	78	;'N'
   687  007F8C  00                 	db	0
   688  007F8D                     STR_9:
   689  007F8D  0D                 	db	13
   690  007F8E  0A                 	db	10
   691  007F8F  53                 	db	83	;'S'
   692  007F90  75                 	db	117	;'u'
   693  007F91  63                 	db	99	;'c'
   694  007F92  63                 	db	99	;'c'
   695  007F93  65                 	db	101	;'e'
   696  007F94  73                 	db	115	;'s'
   697  007F95  73                 	db	115	;'s'
   698  007F96  66                 	db	102	;'f'
   699  007F97  75                 	db	117	;'u'
   700  007F98  6C                 	db	108	;'l'
   701  007F99  6C                 	db	108	;'l'
   702  007F9A  79                 	db	121	;'y'
   703  007F9B  20                 	db	32
   704  007F9C  77                 	db	119	;'w'
   705  007F9D  72                 	db	114	;'r'
   706  007F9E  69                 	db	105	;'i'
   707  007F9F  74                 	db	116	;'t'
   708  007FA0  74                 	db	116	;'t'
   709  007FA1  65                 	db	101	;'e'
   710  007FA2  6E                 	db	110	;'n'
   711  007FA3  00                 	db	0
   712  007FA4                     STR_24:
   713  007FA4  0A                 	db	10
   714  007FA5  0D                 	db	13
   715  007FA6  53                 	db	83	;'S'
   716  007FA7  44                 	db	68	;'D'
   717  007FA8  20                 	db	32
   718  007FA9  43                 	db	67	;'C'
   719  007FAA  61                 	db	97	;'a'
   720  007FAB  72                 	db	114	;'r'
   721  007FAC  64                 	db	100	;'d'
   722  007FAD  20                 	db	32
   723  007FAE  49                 	db	73	;'I'
   724  007FAF  6E                 	db	110	;'n'
   725  007FB0  73                 	db	115	;'s'
   726  007FB1  65                 	db	101	;'e'
   727  007FB2  72                 	db	114	;'r'
   728  007FB3  74                 	db	116	;'t'
   729  007FB4  65                 	db	101	;'e'
   730  007FB5  64                 	db	100	;'d'
   731  007FB6  0A                 	db	10
   732  007FB7  0D                 	db	13
   733  007FB8  00                 	db	0
   734  007FB9                     STR_5:
   735  007FB9  4F                 	db	79	;'O'
   736  007FBA  50                 	db	80	;'P'
   737  007FBB  45                 	db	69	;'E'
   738  007FBC  4E                 	db	78	;'N'
   739  007FBD  49                 	db	73	;'I'
   740  007FBE  4E                 	db	78	;'N'
   741  007FBF  47                 	db	71	;'G'
   742  007FC0  20                 	db	32
   743  007FC1  54                 	db	84	;'T'
   744  007FC2  48                 	db	72	;'H'
   745  007FC3  45                 	db	69	;'E'
   746  007FC4  20                 	db	32
   747  007FC5  46                 	db	70	;'F'
   748  007FC6  49                 	db	73	;'I'
   749  007FC7  4C                 	db	76	;'L'
   750  007FC8  45                 	db	69	;'E'
   751  007FC9  00                 	db	0
   752  007FCA                     STR_26:
   753  007FCA  43                 	db	67	;'C'
   754  007FCB  61                 	db	97	;'a'
   755  007FCC  72                 	db	114	;'r'
   756  007FCD  64                 	db	100	;'d'
   757  007FCE  20                 	db	32
   758  007FCF  41                 	db	65	;'A'
   759  007FD0  63                 	db	99	;'c'
   760  007FD1  63                 	db	99	;'c'
   761  007FD2  65                 	db	101	;'e'
   762  007FD3  70                 	db	112	;'p'
   763  007FD4  74                 	db	116	;'t'
   764  007FD5  65                 	db	101	;'e'
   765  007FD6  64                 	db	100	;'d'
   766  007FD7  0A                 	db	10
   767  007FD8  0D                 	db	13
   768  007FD9  00                 	db	0
   769  007FDA                     STR_27:
   770  007FDA  45                 	db	69	;'E'
   771  007FDB  72                 	db	114	;'r'
   772  007FDC  72                 	db	114	;'r'
   773  007FDD  6F                 	db	111	;'o'
   774  007FDE  72                 	db	114	;'r'
   775  007FDF  21                 	db	33
   776  007FE0  21                 	db	33
   777  007FE1  21                 	db	33
   778  007FE2  0A                 	db	10
   779  007FE3  0D                 	db	13
   780  007FE4  00                 	db	0
   781  007FE5                     STR_1:
   782  007FE5  63                 	db	99	;'c'
   783  007FE6  68                 	db	104	;'h'
   784  007FE7  65                 	db	101	;'e'
   785  007FE8  63                 	db	99	;'c'
   786  007FE9  6B                 	db	107	;'k'
   787  007FEA  2E                 	db	46
   788  007FEB  74                 	db	116	;'t'
   789  007FEC  78                 	db	120	;'x'
   790  007FED  74                 	db	116	;'t'
   791  007FEE  00                 	db	0
   792  007FEF                     STR_8:
   793  007FEF  53                 	db	83	;'S'
   794  007FF0  44                 	db	68	;'D'
   795  007FF1  5F                 	db	95	;'_'
   796  007FF2  43                 	db	67	;'C'
   797  007FF3  61                 	db	97	;'a'
   798  007FF4  72                 	db	114	;'r'
   799  007FF5  64                 	db	100	;'d'
   800  007FF6  00                 	db	0
   801  007FF7                     STR_19:
   802  007FF7  0D                 	db	13
   803  007FF8  0A                 	db	10
   804  007FF9  0D                 	db	13
   805  007FFA  0A                 	db	10
   806  007FFB  00                 	db	0
   807  007FFC                     STR_30:
   808  007FFC  2E                 	db	46
   809  007FFD  2E                 	db	46
   810  007FFE  00                 	db	0
   811  007FFF                     __end_of__stringdata:
   812                           	opt stack 0
   813                           
   814                           ; #config settings
   815  007FFF  00                 	db	0	; dummy byte at the end
   816  0000                     
   817                           	psect	cinit
   818  005284                     __pcinit:
   819                           	opt stack 0
   820  005284                     start_initialization:
   821                           	opt stack 0
   822  005284                     __initialization:
   823                           	opt stack 0
   824                           
   825                           ; Clear objects allocated to BIGRAM (1536 bytes)
   826  005284  EE01  F06E         	lfsr	0,__pbssBIGRAM
   827  005288  EE16 F000          	lfsr	1,1536
   828  00528C                     clear_0:
   829  00528C  6AEE               	clrf	postinc0,c
   830  00528E  50E5               	movf	postdec1,w,c
   831  005290  50E1               	movf	fsr1l,w,c
   832  005292  E1FC               	bnz	clear_0
   833  005294  50E2               	movf	fsr1h,w,c
   834  005296  E1FA               	bnz	clear_0
   835                           
   836                           ; Clear objects allocated to BANK1 (100 bytes)
   837  005298  EE01  F000         	lfsr	0,__pbssBANK1
   838  00529C  0E64               	movlw	100
   839  00529E                     clear_1:
   840  00529E  6AEE               	clrf	postinc0,c
   841  0052A0  06E8               	decf	wreg,f,c
   842  0052A2  E1FD               	bnz	clear_1
   843                           
   844                           ; Clear objects allocated to BANK0 (14 bytes)
   845  0052A4  EE00  F0EF         	lfsr	0,__pbssBANK0
   846  0052A8  0E0E               	movlw	14
   847  0052AA                     clear_2:
   848  0052AA  6AEE               	clrf	postinc0,c
   849  0052AC  06E8               	decf	wreg,f,c
   850  0052AE  E1FD               	bnz	clear_2
   851                           
   852                           ; Initialize objects allocated to BANK1 (10 bytes)
   853                           ; load TBLPTR registers with __pidataBANK1
   854  0052B0  0EE4               	movlw	low __pidataBANK1
   855  0052B2  6EF6               	movwf	tblptrl,c
   856  0052B4  0E4F               	movlw	high __pidataBANK1
   857  0052B6  6EF7               	movwf	tblptrh,c
   858  0052B8  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   859  0052BA  6EF8               	movwf	tblptru,c
   860  0052BC  EE01  F064         	lfsr	0,__pdataBANK1
   861  0052C0  EE10 F00A          	lfsr	1,10
   862  0052C4                     copy_data0:
   863  0052C4  0009               	tblrd		*+
   864  0052C6  CFF5 FFEE          	movff	tablat,postinc0
   865  0052CA  50E5               	movf	postdec1,w,c
   866  0052CC  50E1               	movf	fsr1l,w,c
   867  0052CE  E1FA               	bnz	copy_data0
   868  0052D0                     end_of_initialization:
   869                           	opt stack 0
   870  0052D0                     __end_of__initialization:
   871                           	opt stack 0
   872  0052D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   873  0052D2  6EF8               	movwf	tblptru,c
   874  0052D4  0100               	movlb	0
   875  0052D6  EFB0  F030         	goto	_main	;jump to C main() function
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           postdec1	equ	0xFE5
   883                           fsr1h	equ	0xFE2
   884                           fsr1l	equ	0xFE1
   885                           
   886                           	psect	bssBANK0
   887  0000EF                     __pbssBANK0:
   888                           	opt stack 0
   889  0000EF                     _fileSize:
   890                           	opt stack 0
   891  0000EF                     	ds	4
   892  0000F3                     _FatFs:
   893                           	opt stack 0
   894  0000F3                     	ds	2
   895  0000F5                     _flag:
   896                           	opt stack 0
   897  0000F5                     	ds	2
   898  0000F7                     _rd:
   899                           	opt stack 0
   900  0000F7                     	ds	2
   901  0000F9                     _BitCount:
   902                           	opt stack 0
   903  0000F9                     	ds	1
   904  0000FA                     _Result:
   905                           	opt stack 0
   906  0000FA                     	ds	1
   907  0000FB                     _s:
   908                           	opt stack 0
   909  0000FB                     	ds	1
   910  0000FC                     _uartdata:
   911                           	opt stack 0
   912  0000FC                     	ds	1
   913                           tblptru	equ	0xFF8
   914                           tblptrh	equ	0xFF7
   915                           tblptrl	equ	0xFF6
   916                           tablat	equ	0xFF5
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           postdec1	equ	0xFE5
   920                           fsr1h	equ	0xFE2
   921                           fsr1l	equ	0xFE1
   922                           
   923                           	psect	bssBANK1
   924  000100                     __pbssBANK1:
   925                           	opt stack 0
   926  000100                     _folder:
   927                           	opt stack 0
   928  000100                     	ds	48
   929  000130                     _txt:
   930                           	opt stack 0
   931  000130                     	ds	20
   932  000144                     _data_buffer_32:
   933                           	opt stack 0
   934  000144                     	ds	32
   935                           tblptru	equ	0xFF8
   936                           tblptrh	equ	0xFF7
   937                           tblptrl	equ	0xFF6
   938                           tablat	equ	0xFF5
   939                           postinc0	equ	0xFEE
   940                           wreg	equ	0xFE8
   941                           postdec1	equ	0xFE5
   942                           fsr1h	equ	0xFE2
   943                           fsr1l	equ	0xFE1
   944                           
   945                           	psect	dataBANK1
   946  000164                     __pdataBANK1:
   947                           	opt stack 0
   948  000164                     _fileName:
   949                           	opt stack 0
   950  000164                     	ds	10
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1h	equ	0xFE2
   959                           fsr1l	equ	0xFE1
   960                           
   961                           	psect	bssBIGRAM
   962  00016E                     __pbssBIGRAM:
   963                           	opt stack 0
   964  00016E                     _sector_buffer:
   965                           	opt stack 0
   966  00016E                     	ds	512
   967  00036E                     _str:
   968                           	opt stack 0
   969  00036E                     	ds	512
   970  00056E                     disk_readp@arr:
   971                           	opt stack 0
   972  00056E                     	ds	512
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1h	equ	0xFE2
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	cstackBANK0
   984  000060                     __pcstackBANK0:
   985                           	opt stack 0
   986  000060                     follow_path@dj:
   987                           	opt stack 0
   988  000060                     pf_read@rbuff:
   989                           	opt stack 0
   990  000060                     pf_write@p:
   991                           	opt stack 0
   992  000060                     pf_mount@buf:
   993                           	opt stack 0
   994                           
   995                           ; 36 bytes @ 0x0
   996  000060                     	ds	2
   997  000062                     follow_path@dir:
   998                           	opt stack 0
   999  000062                     _pf_read$366:
  1000                           	opt stack 0
  1001  000062                     pf_write@sect:
  1002                           	opt stack 0
  1003                           
  1004                           ; 4 bytes @ 0x2
  1005  000062                     	ds	2
  1006  000064                     pf_read@dr:
  1007                           	opt stack 0
  1008  000064                     follow_path@path:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x4
  1012  000064                     	ds	1
  1013  000065                     pf_read@sect:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x5
  1017  000065                     	ds	1
  1018  000066                     ??_follow_path:
  1019  000066                     pf_write@remain:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x6
  1023  000066                     	ds	3
  1024  000069                     pf_read@remain:
  1025                           	opt stack 0
  1026                           
  1027                           ; 4 bytes @ 0x9
  1028  000069                     	ds	1
  1029  00006A                     follow_path@res:
  1030                           	opt stack 0
  1031  00006A                     pf_write@clst:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0xA
  1035  00006A                     	ds	1
  1036  00006B                     pf_open@path:
  1037                           	opt stack 0
  1038                           
  1039                           ; 2 bytes @ 0xB
  1040  00006B                     	ds	2
  1041  00006D                     ??_pf_open:
  1042  00006D                     pf_read@clst:
  1043                           	opt stack 0
  1044                           
  1045                           ; 4 bytes @ 0xD
  1046  00006D                     	ds	1
  1047  00006E                     pf_write@cs:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0xE
  1051  00006E                     	ds	1
  1052  00006F                     pf_write@wcnt:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0xF
  1056  00006F                     	ds	2
  1057  000071                     pf_read@cs:
  1058                           	opt stack 0
  1059  000071                     pf_write@fs:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x11
  1063  000071                     	ds	1
  1064  000072                     pf_read@rcnt:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x12
  1068  000072                     	ds	2
  1069  000074                     pf_read@fs:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x14
  1073  000074                     	ds	15
  1074  000083                     pf_open@sp:
  1075                           	opt stack 0
  1076                           
  1077                           ; 12 bytes @ 0x23
  1078  000083                     	ds	1
  1079  000084                     pf_mount@tsect:
  1080                           	opt stack 0
  1081                           
  1082                           ; 4 bytes @ 0x24
  1083  000084                     	ds	4
  1084  000088                     pf_mount@mclst:
  1085                           	opt stack 0
  1086                           
  1087                           ; 4 bytes @ 0x28
  1088  000088                     	ds	4
  1089  00008C                     pf_mount@bsect:
  1090                           	opt stack 0
  1091                           
  1092                           ; 4 bytes @ 0x2C
  1093  00008C                     	ds	3
  1094  00008F                     pf_open@dir:
  1095                           	opt stack 0
  1096                           
  1097                           ; 32 bytes @ 0x2F
  1098  00008F                     	ds	1
  1099  000090                     pf_mount@fsize:
  1100                           	opt stack 0
  1101                           
  1102                           ; 4 bytes @ 0x30
  1103  000090                     	ds	4
  1104  000094                     pf_mount@fmt:
  1105                           	opt stack 0
  1106                           
  1107                           ; 1 bytes @ 0x34
  1108  000094                     	ds	27
  1109  0000AF                     pf_open@res:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x4F
  1113  0000AF                     	ds	1
  1114  0000B0                     pf_open@fs:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x50
  1118  0000B0                     	ds	2
  1119  0000B2                     pf_open@dj:
  1120                           	opt stack 0
  1121                           
  1122                           ; 16 bytes @ 0x52
  1123  0000B2                     	ds	16
  1124  0000C2                     main@br:
  1125                           	opt stack 0
  1126                           
  1127                           ; 2 bytes @ 0x62
  1128  0000C2                     	ds	2
  1129  0000C4                     main@FResult:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x64
  1133  0000C4                     	ds	1
  1134  0000C5                     main@fs:
  1135                           	opt stack 0
  1136                           
  1137                           ; 42 bytes @ 0x65
  1138  0000C5                     	ds	42
  1139                           tblptru	equ	0xFF8
  1140                           tblptrh	equ	0xFF7
  1141                           tblptrl	equ	0xFF6
  1142                           tablat	equ	0xFF5
  1143                           postinc0	equ	0xFEE
  1144                           wreg	equ	0xFE8
  1145                           postdec1	equ	0xFE5
  1146                           fsr1h	equ	0xFE2
  1147                           fsr1l	equ	0xFE1
  1148                           
  1149                           	psect	cstackCOMRAM
  1150  000001                     __pcstackCOMRAM:
  1151                           	opt stack 0
  1152  000001                     ?_mem_cmp:
  1153                           	opt stack 0
  1154  000001                     ?_get_clust:
  1155                           	opt stack 0
  1156  000001                     ?___lmul:
  1157                           	opt stack 0
  1158  000001                     ?___lldiv:
  1159                           	opt stack 0
  1160  000001                     WriteSPI_@TempVar:
  1161                           	opt stack 0
  1162  000001                     ReadSPI_@TempVar:
  1163                           	opt stack 0
  1164  000001                     OpenSPI@bus_mode:
  1165                           	opt stack 0
  1166  000001                     WriteSPI@TempVar:
  1167                           	opt stack 0
  1168  000001                     Delay100TCYx@unit:
  1169                           	opt stack 0
  1170  000001                     Delay1KTCYx@unit:
  1171                           	opt stack 0
  1172  000001                     mem_set@dst:
  1173                           	opt stack 0
  1174  000001                     mem_cmp@dst:
  1175                           	opt stack 0
  1176  000001                     get_clust@dir:
  1177                           	opt stack 0
  1178  000001                     readover@a:
  1179                           	opt stack 0
  1180  000001                     ___lmul@multiplier:
  1181                           	opt stack 0
  1182  000001                     ___lldiv@dividend:
  1183                           	opt stack 0
  1184                           
  1185                           ; 4 bytes @ 0x0
  1186  000001                     	ds	1
  1187  000002                     ??_WriteUART:
  1188  000002                     WriteSPI_@data_out:
  1189                           	opt stack 0
  1190  000002                     response@buff:
  1191                           	opt stack 0
  1192  000002                     delay_ms@t:
  1193                           	opt stack 0
  1194  000002                     OpenSPI@smp_phase:
  1195                           	opt stack 0
  1196  000002                     WriteSPI@data_out:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0x1
  1200  000002                     	ds	1
  1201  000003                     delay_ms@i:
  1202                           	opt stack 0
  1203  000003                     WriteUART@uartdata:
  1204                           	opt stack 0
  1205  000003                     OpenSPI@sync_mode:
  1206                           	opt stack 0
  1207  000003                     mem_set@val:
  1208                           	opt stack 0
  1209  000003                     mem_cmp@src:
  1210                           	opt stack 0
  1211  000003                     Command@arg:
  1212                           	opt stack 0
  1213                           
  1214                           ; 4 bytes @ 0x2
  1215  000003                     	ds	1
  1216  000004                     Delay_s@t:
  1217                           	opt stack 0
  1218  000004                     WriteUART@bitcount:
  1219                           	opt stack 0
  1220  000004                     soft_hard_init@i:
  1221                           	opt stack 0
  1222  000004                     dummy_clocks@n:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x3
  1226  000004                     	ds	1
  1227  000005                     ??_get_clust:
  1228  000005                     Delay_s@i:
  1229                           	opt stack 0
  1230  000005                     mem_set@cnt:
  1231                           	opt stack 0
  1232  000005                     mem_cmp@cnt:
  1233                           	opt stack 0
  1234  000005                     putsUART@data:
  1235                           	opt stack 0
  1236  000005                     ___lmul@multiplicand:
  1237                           	opt stack 0
  1238  000005                     ___lldiv@divisor:
  1239                           	opt stack 0
  1240                           
  1241                           ; 4 bytes @ 0x4
  1242  000005                     	ds	1
  1243  000006                     ??_dummy_clocks:
  1244  000006                     soft_hard_init@sync_mode:
  1245                           	opt stack 0
  1246  000006                     Delay_s@j:
  1247                           	opt stack 0
  1248                           
  1249                           ; 1 bytes @ 0x5
  1250  000006                     	ds	1
  1251  000007                     ??_putsUART:
  1252  000007                     ??_mem_cmp:
  1253  000007                     soft_hard_init@bus_mode:
  1254                           	opt stack 0
  1255  000007                     Command@CRCbits:
  1256                           	opt stack 0
  1257  000007                     mem_set@d:
  1258                           	opt stack 0
  1259  000007                     dummy_clocks@i:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x6
  1263  000007                     	ds	1
  1264  000008                     soft_hard_init@smp_phase:
  1265                           	opt stack 0
  1266  000008                     Command@cmd:
  1267                           	opt stack 0
  1268                           
  1269                           ; 1 bytes @ 0x7
  1270  000008                     	ds	1
  1271  000009                     create_name@dj:
  1272                           	opt stack 0
  1273  000009                     reset@i:
  1274                           	opt stack 0
  1275  000009                     disk_readp@rd:
  1276                           	opt stack 0
  1277  000009                     disk_writep@wr:
  1278                           	opt stack 0
  1279  000009                     ___lmul@product:
  1280                           	opt stack 0
  1281  000009                     ___lldiv@quotient:
  1282                           	opt stack 0
  1283                           
  1284                           ; 4 bytes @ 0x8
  1285  000009                     	ds	1
  1286  00000A                     mem_cmp@d:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x9
  1290  00000A                     	ds	1
  1291  00000B                     create_name@path:
  1292                           	opt stack 0
  1293  00000B                     reset@count:
  1294                           	opt stack 0
  1295  00000B                     disk_readp@sector:
  1296                           	opt stack 0
  1297                           
  1298                           ; 4 bytes @ 0xA
  1299  00000B                     	ds	1
  1300  00000C                     mem_cmp@s:
  1301                           	opt stack 0
  1302  00000C                     disk_writep@sc:
  1303                           	opt stack 0
  1304                           
  1305                           ; 4 bytes @ 0xB
  1306  00000C                     	ds	1
  1307  00000D                     ??_create_name:
  1308  00000D                     ?_clust2sect:
  1309                           	opt stack 0
  1310  00000D                     reset@buff:
  1311                           	opt stack 0
  1312  00000D                     ___lldiv@counter:
  1313                           	opt stack 0
  1314  00000D                     get_clust@fs:
  1315                           	opt stack 0
  1316  00000D                     clust2sect@clst:
  1317                           	opt stack 0
  1318                           
  1319                           ; 4 bytes @ 0xC
  1320  00000D                     	ds	1
  1321  00000E                     mem_cmp@r:
  1322                           	opt stack 0
  1323  00000E                     disk_initialize@i:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0xD
  1327  00000E                     	ds	1
  1328  00000F                     disk_readp@offset:
  1329                           	opt stack 0
  1330  00000F                     get_clust@clst:
  1331                           	opt stack 0
  1332                           
  1333                           ; 4 bytes @ 0xE
  1334  00000F                     	ds	1
  1335  000010                     ??_disk_writep:
  1336  000010                     disk_initialize@count1:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0xF
  1340  000010                     	ds	1
  1341  000011                     ??_clust2sect:
  1342  000011                     disk_readp@count:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0x10
  1346  000011                     	ds	1
  1347  000012                     disk_initialize@stat:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x11
  1351  000012                     	ds	1
  1352  000013                     ??_disk_readp:
  1353  000013                     disk_initialize@count2:
  1354                           	opt stack 0
  1355                           
  1356                           ; 2 bytes @ 0x12
  1357  000013                     	ds	1
  1358  000014                     create_name@d:
  1359                           	opt stack 0
  1360  000014                     disk_writep@i:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x13
  1364  000014                     	ds	1
  1365  000015                     disk_initialize@buff:
  1366                           	opt stack 0
  1367  000015                     create_name@p:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x14
  1371  000015                     	ds	1
  1372  000016                     disk_writep@j:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x15
  1376  000016                     	ds	1
  1377  000017                     create_name@ni:
  1378                           	opt stack 0
  1379  000017                     disk_readp@ptr:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x16
  1383  000017                     	ds	1
  1384  000018                     create_name@si:
  1385                           	opt stack 0
  1386  000018                     disk_writep@buff:
  1387                           	opt stack 0
  1388  000018                     disk_readp@start_add:
  1389                           	opt stack 0
  1390                           
  1391                           ; 4 bytes @ 0x17
  1392  000018                     	ds	1
  1393  000019                     create_name@sfn:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x18
  1397  000019                     	ds	1
  1398  00001A                     clust2sect@fs:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x19
  1402  00001A                     	ds	1
  1403  00001B                     create_name@i:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x1A
  1407  00001B                     	ds	1
  1408  00001C                     create_name@c:
  1409                           	opt stack 0
  1410  00001C                     disk_readp@buff:
  1411                           	opt stack 0
  1412  00001C                     dir_rewind@dj:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x1B
  1416  00001C                     	ds	1
  1417  00001D                     disk_readp@length:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x1C
  1421  00001D                     	ds	1
  1422  00001E                     ??_dir_rewind:
  1423                           
  1424                           ; 0 bytes @ 0x1D
  1425  00001E                     	ds	1
  1426  00001F                     ?_get_fat:
  1427                           	opt stack 0
  1428  00001F                     check_fs@buf:
  1429                           	opt stack 0
  1430  00001F                     get_fat@clst:
  1431                           	opt stack 0
  1432                           
  1433                           ; 4 bytes @ 0x1E
  1434  00001F                     	ds	2
  1435  000021                     check_fs@sect:
  1436                           	opt stack 0
  1437                           
  1438                           ; 4 bytes @ 0x20
  1439  000021                     	ds	1
  1440  000022                     _dir_rewind$173:
  1441                           	opt stack 0
  1442                           
  1443                           ; 4 bytes @ 0x21
  1444  000022                     	ds	1
  1445  000023                     ??_get_fat:
  1446                           
  1447                           ; 0 bytes @ 0x22
  1448  000023                     	ds	2
  1449  000025                     ??_check_fs:
  1450                           
  1451                           ; 0 bytes @ 0x24
  1452  000025                     	ds	1
  1453  000026                     dir_rewind@fs:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0x25
  1457  000026                     	ds	2
  1458  000028                     dir_rewind@clst:
  1459                           	opt stack 0
  1460                           
  1461                           ; 4 bytes @ 0x27
  1462  000028                     	ds	1
  1463  000029                     pf_mount@fs:
  1464                           	opt stack 0
  1465                           
  1466                           ; 2 bytes @ 0x28
  1467  000029                     	ds	2
  1468  00002B                     ??_pf_mount:
  1469                           
  1470                           ; 0 bytes @ 0x2A
  1471  00002B                     	ds	14
  1472  000039                     _get_fat$113:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x38
  1476  000039                     	ds	2
  1477  00003B                     get_fat@wc:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x3A
  1481  00003B                     	ds	2
  1482  00003D                     get_fat@ofs:
  1483                           	opt stack 0
  1484                           
  1485                           ; 2 bytes @ 0x3C
  1486  00003D                     	ds	2
  1487  00003F                     get_fat@buf:
  1488                           	opt stack 0
  1489                           
  1490                           ; 4 bytes @ 0x3E
  1491  00003F                     	ds	4
  1492  000043                     get_fat@bc:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x42
  1496  000043                     	ds	2
  1497  000045                     get_fat@fs:
  1498                           	opt stack 0
  1499                           
  1500                           ; 2 bytes @ 0x44
  1501  000045                     	ds	2
  1502  000047                     dir_next@dj:
  1503                           	opt stack 0
  1504  000047                     pf_read@buff:
  1505                           	opt stack 0
  1506  000047                     pf_write@buff:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x46
  1510  000047                     	ds	2
  1511  000049                     ??_dir_next:
  1512  000049                     pf_read@btr:
  1513                           	opt stack 0
  1514  000049                     pf_write@btw:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x48
  1518  000049                     	ds	2
  1519  00004B                     pf_read@br:
  1520                           	opt stack 0
  1521  00004B                     pf_write@bw:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x4A
  1525  00004B                     	ds	2
  1526  00004D                     ??_pf_read:
  1527  00004D                     ??_pf_write:
  1528                           
  1529                           ; 0 bytes @ 0x4C
  1530  00004D                     	ds	3
  1531  000050                     dir_next@fs:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x4F
  1535  000050                     	ds	2
  1536  000052                     dir_next@clst:
  1537                           	opt stack 0
  1538                           
  1539                           ; 4 bytes @ 0x51
  1540  000052                     	ds	4
  1541  000056                     dir_next@i:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x55
  1545  000056                     	ds	2
  1546  000058                     dir_find@dj:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x57
  1550  000058                     	ds	2
  1551  00005A                     dir_find@dir:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x59
  1555  00005A                     	ds	2
  1556  00005C                     ??_dir_find:
  1557                           
  1558                           ; 0 bytes @ 0x5B
  1559  00005C                     	ds	2
  1560  00005E                     dir_find@c:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x5D
  1564  00005E                     	ds	1
  1565  00005F                     dir_find@res:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x5E
  1569  00005F                     	ds	1
  1570  000060                     tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1h	equ	0xFE2
  1578                           fsr1l	equ	0xFE1
  1579                           
  1580                           ; 0 bytes @ 0x5F
  1581 ;;
  1582 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1583 ;;
  1584 ;; *************** function _main *****************
  1585 ;; Defined at:
  1586 ;;		line 131 in file "main.c"
  1587 ;; Parameters:    Size  Location     Type
  1588 ;;		None
  1589 ;; Auto vars:     Size  Location     Type
  1590 ;;  fs             42  101[BANK0 ] struct .
  1591 ;;  br              2   98[BANK0 ] unsigned short 
  1592 ;;  FResult         1  100[BANK0 ] enum E4539
  1593 ;; Return value:  Size  Location     Type
  1594 ;;		None               void
  1595 ;; Registers used:
  1596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1597 ;; Tracked objects:
  1598 ;;		On entry : 0/0
  1599 ;;		On exit  : 0/0
  1600 ;;		Unchanged: 0/0
  1601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1602 ;;      Params:         0       0       0       0       0       0       0       0       0
  1603 ;;      Locals:         0      45       0       0       0       0       0       0       0
  1604 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1605 ;;      Totals:         0      45       0       0       0       0       0       0       0
  1606 ;;Total ram usage:       45 bytes
  1607 ;; Hardware stack levels required when called:   10
  1608 ;; This function calls:
  1609 ;;		_OpenUART
  1610 ;;		_WriteUART
  1611 ;;		_pf_mount
  1612 ;;		_pf_open
  1613 ;;		_pf_read
  1614 ;;		_pf_write
  1615 ;;		_proceed
  1616 ;;		_putsUART
  1617 ;;		_readover
  1618 ;;		_soft_hard_init
  1619 ;; This function is called by:
  1620 ;;		Startup code after reset
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           	psect	text0
  1625  006160                     __ptext0:
  1626                           	opt stack 0
  1627  006160                     _main:
  1628                           	opt stack 21
  1629                           
  1630                           ;main.c: 133: FRESULT FResult;
  1631                           ;main.c: 134: FATFS fs;
  1632                           ;main.c: 135: WORD br;
  1633                           ;main.c: 136: soft_hard_init();
  1634                           
  1635                           ;incstack = 0
  1636  006160  ECCC  F028         	call	_soft_hard_init	;wreg free
  1637                           
  1638                           ;main.c: 137: OpenUART();
  1639  006164  ECE8  F027         	call	_OpenUART	;wreg free
  1640                           
  1641                           ;main.c: 141: putsUART("\r\nAttempting to mount file system.\r\n");
  1642  006168  0E7E               	movlw	high STR_2
  1643  00616A  6E06               	movwf	putsUART@data+1,c
  1644  00616C  0E45               	movlw	low STR_2
  1645  00616E  6E05               	movwf	putsUART@data,c
  1646  006170  EC6D  F029         	call	_putsUART	;wreg free
  1647                           
  1648                           ;main.c: 142: proceed();
  1649  006174  ECF7  F027         	call	_proceed	;wreg free
  1650                           
  1651                           ;main.c: 143: if( (FResult = pf_mount(&fs)) == FR_OK )
  1652  006178  0100               	movlb	0	; () banked
  1653  00617A  0E00               	movlw	high main@fs
  1654  00617C  6E2A               	movwf	pf_mount@fs+1,c
  1655  00617E  0100               	movlb	0	; () banked
  1656  006180  0EC5               	movlw	low main@fs
  1657  006182  6E29               	movwf	pf_mount@fs,c
  1658  006184  ECFD  F03A         	call	_pf_mount	;wreg free
  1659  006188  0100               	movlb	0	; () banked
  1660  00618A  6FC4               	movwf	main@FResult& (0+255),b
  1661  00618C  0100               	movlb	0	; () banked
  1662  00618E  67C4               	tstfsz	main@FResult& (0+255),b
  1663  006190  D0AF               	goto	l4346
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;main.c: 144: {
  1667                           ;main.c: 145: putsUART("\r\n\r\nAttempting to open file ");
  1668  006192  0E7F               	movlw	high STR_3
  1669  006194  6E06               	movwf	putsUART@data+1,c
  1670  006196  0E54               	movlw	low STR_3
  1671  006198  6E05               	movwf	putsUART@data,c
  1672  00619A  EC6D  F029         	call	_putsUART	;wreg free
  1673                           
  1674                           ;main.c: 146: putsUART(fileName);
  1675  00619E  0101               	movlb	1	; () banked
  1676  0061A0  0E01               	movlw	high _fileName
  1677  0061A2  6E06               	movwf	putsUART@data+1,c
  1678  0061A4  0101               	movlb	1	; () banked
  1679  0061A6  0E64               	movlw	low _fileName
  1680  0061A8  6E05               	movwf	putsUART@data,c
  1681  0061AA  EC6D  F029         	call	_putsUART	;wreg free
  1682                           
  1683                           ;main.c: 147: putsUART(".\r\n");
  1684  0061AE  0E7E               	movlw	high (STR_23+34)
  1685  0061B0  6E06               	movwf	putsUART@data+1,c
  1686  0061B2  0E41               	movlw	low (STR_23+34)
  1687  0061B4  6E05               	movwf	putsUART@data,c
  1688  0061B6  EC6D  F029         	call	_putsUART	;wreg free
  1689                           
  1690                           ;main.c: 148: putsUART("OPENING THE FILE");
  1691  0061BA  0E7F               	movlw	high STR_5
  1692  0061BC  6E06               	movwf	putsUART@data+1,c
  1693  0061BE  0EB9               	movlw	low STR_5
  1694  0061C0  6E05               	movwf	putsUART@data,c
  1695  0061C2  EC6D  F029         	call	_putsUART	;wreg free
  1696                           
  1697                           ;main.c: 150: FResult = pf_open("check.txt" );
  1698  0061C6  0E7F               	movlw	high STR_1
  1699  0061C8  0100               	movlb	0	; () banked
  1700  0061CA  6F6C               	movwf	(pf_open@path+1)& (0+255),b
  1701  0061CC  0EE5               	movlw	low STR_1
  1702  0061CE  0100               	movlb	0	; () banked
  1703  0061D0  6F6B               	movwf	pf_open@path& (0+255),b
  1704  0061D2  ECB6  F02F         	call	_pf_open	;wreg free
  1705  0061D6  0100               	movlb	0	; () banked
  1706  0061D8  6FC4               	movwf	main@FResult& (0+255),b
  1707                           
  1708                           ; BSR set to: 0
  1709                           ;main.c: 152: if( FResult == FR_OK )
  1710  0061DA  0100               	movlb	0	; () banked
  1711  0061DC  67C4               	tstfsz	main@FResult& (0+255),b
  1712  0061DE  D076               	goto	l4340
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 153: {
  1716                           ;main.c: 154: putsUART("\r\n\r\nStarting to write the file.\r\n");
  1717  0061E0  0E7E               	movlw	high STR_7
  1718  0061E2  6E06               	movwf	putsUART@data+1,c
  1719  0061E4  0EB3               	movlw	low STR_7
  1720  0061E6  6E05               	movwf	putsUART@data,c
  1721  0061E8  EC6D  F029         	call	_putsUART	;wreg free
  1722                           
  1723                           ;main.c: 157: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  1724  0061EC  0E7F               	movlw	high STR_8
  1725  0061EE  6E48               	movwf	pf_write@buff+1,c
  1726  0061F0  0EEF               	movlw	low STR_8
  1727  0061F2  6E47               	movwf	pf_write@buff,c
  1728  0061F4  0E00               	movlw	0
  1729  0061F6  6E4A               	movwf	pf_write@btw+1,c
  1730  0061F8  0E05               	movlw	5
  1731  0061FA  6E49               	movwf	pf_write@btw,c
  1732  0061FC  0100               	movlb	0	; () banked
  1733  0061FE  0E00               	movlw	high main@br
  1734  006200  6E4C               	movwf	pf_write@bw+1,c
  1735  006202  0100               	movlb	0	; () banked
  1736  006204  0EC2               	movlw	low main@br
  1737  006206  6E4B               	movwf	pf_write@bw,c
  1738  006208  EC4C  F038         	call	_pf_write	;wreg free
  1739  00620C  0100               	movlb	0	; () banked
  1740  00620E  6FC4               	movwf	main@FResult& (0+255),b
  1741  006210  0100               	movlb	0	; () banked
  1742  006212  67C4               	tstfsz	main@FResult& (0+255),b
  1743  006214  D007               	goto	l4316
  1744                           
  1745                           ; BSR set to: 0
  1746                           ;main.c: 158: {
  1747                           ;main.c: 159: putsUART("\r\nSuccessfully written");
  1748  006216  0E7F               	movlw	high STR_9
  1749  006218  6E06               	movwf	putsUART@data+1,c
  1750  00621A  0E8D               	movlw	low STR_9
  1751  00621C  6E05               	movwf	putsUART@data,c
  1752  00621E  EC6D  F029         	call	_putsUART	;wreg free
  1753                           
  1754                           ;main.c: 160: }
  1755  006222  D012               	goto	l4322
  1756  006224                     l4316:
  1757                           
  1758                           ;main.c: 161: else
  1759                           ;main.c: 162: {
  1760                           ;main.c: 163: putsUART("\r\nError trying to write to file; ");
  1761  006224  0E7E               	movlw	high STR_10
  1762  006226  6E06               	movwf	putsUART@data+1,c
  1763  006228  0ED5               	movlw	low STR_10
  1764  00622A  6E05               	movwf	putsUART@data,c
  1765  00622C  EC6D  F029         	call	_putsUART	;wreg free
  1766                           
  1767                           ;main.c: 164: WriteUART(FResult + 0x30);
  1768  006230  0100               	movlb	0	; () banked
  1769  006232  51C4               	movf	main@FResult& (0+255),w,b
  1770  006234  0F30               	addlw	48
  1771  006236  EC90  F028         	call	_WriteUART
  1772                           
  1773                           ;main.c: 165: putsUART(".\r\n");
  1774  00623A  0E7E               	movlw	high (STR_23+34)
  1775  00623C  6E06               	movwf	putsUART@data+1,c
  1776  00623E  0E41               	movlw	low (STR_23+34)
  1777  006240  6E05               	movwf	putsUART@data,c
  1778  006242  EC6D  F029         	call	_putsUART	;wreg free
  1779  006246                     l368:
  1780  006246  D7FF               	goto	l368
  1781  006248                     l4322:
  1782                           
  1783                           ;main.c: 168: }
  1784                           ;main.c: 170: putsUART("\r\n\r\nStarting to read the file.\r\n");
  1785  006248  0E7E               	movlw	high STR_12
  1786  00624A  6E06               	movwf	putsUART@data+1,c
  1787  00624C  0EF7               	movlw	low STR_12
  1788  00624E  6E05               	movwf	putsUART@data,c
  1789  006250  EC6D  F029         	call	_putsUART	;wreg free
  1790                           
  1791                           ;main.c: 174: {
  1792                           ;main.c: 175: readover(1);
  1793                           
  1794                           ;main.c: 173: do
  1795  006254  0E00               	movlw	0
  1796  006256  6E02               	movwf	readover@a+1,c
  1797  006258  0E01               	movlw	1
  1798  00625A  6E01               	movwf	readover@a,c
  1799  00625C  ECED  F027         	call	_readover	;wreg free
  1800                           
  1801                           ;main.c: 177: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  1802  006260  0101               	movlb	1	; () banked
  1803  006262  0E01               	movlw	high _data_buffer_32
  1804  006264  6E48               	movwf	pf_read@buff+1,c
  1805  006266  0101               	movlb	1	; () banked
  1806  006268  0E44               	movlw	low _data_buffer_32
  1807  00626A  6E47               	movwf	pf_read@buff,c
  1808  00626C  0E00               	movlw	0
  1809  00626E  6E4A               	movwf	pf_read@btr+1,c
  1810  006270  0E1F               	movlw	31
  1811  006272  6E49               	movwf	pf_read@btr,c
  1812  006274  0100               	movlb	0	; () banked
  1813  006276  0E00               	movlw	high main@br
  1814  006278  6E4C               	movwf	pf_read@br+1,c
  1815  00627A  0100               	movlb	0	; () banked
  1816  00627C  0EC2               	movlw	low main@br
  1817  00627E  6E4B               	movwf	pf_read@br,c
  1818  006280  EC1E  F036         	call	_pf_read	;wreg free
  1819  006284  0100               	movlb	0	; () banked
  1820  006286  6FC4               	movwf	main@FResult& (0+255),b
  1821  006288  0100               	movlb	0	; () banked
  1822  00628A  67C4               	tstfsz	main@FResult& (0+255),b
  1823  00628C  D00D               	goto	l4332
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;main.c: 178: {
  1827                           ;main.c: 180: data_buffer_32[br] = 0;
  1828  00628E  0101               	movlb	1	; () banked
  1829  006290  0E44               	movlw	low _data_buffer_32
  1830  006292  0100               	movlb	0	; () banked
  1831  006294  25C2               	addwf	main@br& (0+255),w,b
  1832  006296  6ED9               	movwf	fsr2l,c
  1833  006298  0101               	movlb	1	; () banked
  1834  00629A  0E01               	movlw	high _data_buffer_32
  1835  00629C  0100               	movlb	0	; () banked
  1836  00629E  21C3               	addwfc	(main@br+1)& (0+255),w,b
  1837  0062A0  6EDA               	movwf	fsr2h,c
  1838  0062A2  0E00               	movlw	0
  1839  0062A4  6EDF               	movwf	indf2,c
  1840                           
  1841                           ;main.c: 181: break;
  1842  0062A6  D036               	goto	l4352
  1843  0062A8                     l4332:
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 184: else
  1847                           ;main.c: 185: {
  1848                           ;main.c: 186: putsUART("\r\nError trying to read file; ");
  1849  0062A8  0E7F               	movlw	high STR_13
  1850  0062AA  6E06               	movwf	putsUART@data+1,c
  1851  0062AC  0E18               	movlw	low STR_13
  1852  0062AE  6E05               	movwf	putsUART@data,c
  1853  0062B0  EC6D  F029         	call	_putsUART	;wreg free
  1854                           
  1855                           ;main.c: 187: WriteUART(FResult + 0x30);
  1856  0062B4  0100               	movlb	0	; () banked
  1857  0062B6  51C4               	movf	main@FResult& (0+255),w,b
  1858  0062B8  0F30               	addlw	48
  1859  0062BA  EC90  F028         	call	_WriteUART
  1860                           
  1861                           ;main.c: 188: putsUART(".\r\n");
  1862  0062BE  0E7E               	movlw	high (STR_23+34)
  1863  0062C0  6E06               	movwf	putsUART@data+1,c
  1864  0062C2  0E41               	movlw	low (STR_23+34)
  1865  0062C4  6E05               	movwf	putsUART@data,c
  1866  0062C6  EC6D  F029         	call	_putsUART	;wreg free
  1867  0062CA                     l375:
  1868  0062CA  D7FF               	goto	l375
  1869  0062CC                     l4340:
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;main.c: 194: else
  1873                           ;main.c: 195: {
  1874                           ;main.c: 196: putsUART("\r\nError trying to open file; ");
  1875  0062CC  0E7F               	movlw	high STR_15
  1876  0062CE  6E06               	movwf	putsUART@data+1,c
  1877  0062D0  0E36               	movlw	low STR_15
  1878  0062D2  6E05               	movwf	putsUART@data,c
  1879  0062D4  EC6D  F029         	call	_putsUART	;wreg free
  1880                           
  1881                           ;main.c: 197: WriteUART(FResult + 0x30);
  1882  0062D8  0100               	movlb	0	; () banked
  1883  0062DA  51C4               	movf	main@FResult& (0+255),w,b
  1884  0062DC  0F30               	addlw	48
  1885  0062DE  EC90  F028         	call	_WriteUART
  1886                           
  1887                           ;main.c: 198: putsUART(".\r\n");
  1888  0062E2  0E7E               	movlw	high (STR_23+34)
  1889  0062E4  6E06               	movwf	putsUART@data+1,c
  1890  0062E6  0E41               	movlw	low (STR_23+34)
  1891  0062E8  6E05               	movwf	putsUART@data,c
  1892  0062EA  EC6D  F029         	call	_putsUART	;wreg free
  1893  0062EE                     l379:
  1894  0062EE  D7FF               	goto	l379
  1895  0062F0                     l4346:
  1896                           
  1897                           ;main.c: 203: else
  1898                           ;main.c: 204: {
  1899                           ;main.c: 205: putsUART("\r\nError trying to mount filesystem; ");
  1900  0062F0  0E7E               	movlw	high STR_17
  1901  0062F2  6E06               	movwf	putsUART@data+1,c
  1902  0062F4  0E6A               	movlw	low STR_17
  1903  0062F6  6E05               	movwf	putsUART@data,c
  1904  0062F8  EC6D  F029         	call	_putsUART	;wreg free
  1905                           
  1906                           ;main.c: 206: WriteUART(FResult + 0x30);
  1907  0062FC  0100               	movlb	0	; () banked
  1908  0062FE  51C4               	movf	main@FResult& (0+255),w,b
  1909  006300  0F30               	addlw	48
  1910  006302  EC90  F028         	call	_WriteUART
  1911                           
  1912                           ;main.c: 207: putsUART(".\r\n");
  1913  006306  0E7E               	movlw	high (STR_23+34)
  1914  006308  6E06               	movwf	putsUART@data+1,c
  1915  00630A  0E41               	movlw	low (STR_23+34)
  1916  00630C  6E05               	movwf	putsUART@data,c
  1917  00630E  EC6D  F029         	call	_putsUART	;wreg free
  1918  006312                     l383:
  1919  006312  D7FF               	goto	l383
  1920  006314                     l4352:
  1921                           
  1922                           ;main.c: 210: }
  1923                           ;main.c: 212: putsUART("\r\n\r\n");
  1924  006314  0E7F               	movlw	high STR_19
  1925  006316  6E06               	movwf	putsUART@data+1,c
  1926  006318  0EF7               	movlw	low STR_19
  1927  00631A  6E05               	movwf	putsUART@data,c
  1928  00631C  EC6D  F029         	call	_putsUART	;wreg free
  1929                           
  1930                           ;main.c: 218: putsUART("\r\nAttempting to UNmount file system.\r\n");
  1931  006320  0E7D               	movlw	high STR_20
  1932  006322  6E06               	movwf	putsUART@data+1,c
  1933  006324  0ED1               	movlw	low STR_20
  1934  006326  6E05               	movwf	putsUART@data,c
  1935  006328  EC6D  F029         	call	_putsUART	;wreg free
  1936                           
  1937                           ;main.c: 222: if( FResult != FR_OK )
  1938  00632C  0100               	movlb	0	; () banked
  1939  00632E  51C4               	movf	main@FResult& (0+255),w,b
  1940  006330  B4D8               	btfsc	status,2,c
  1941  006332  D012               	goto	l4362
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;main.c: 223: {
  1945                           ;main.c: 224: putsUART("\r\nError trying to UNmount filesystem; ");
  1946  006334  0E7D               	movlw	high STR_21
  1947  006336  6E06               	movwf	putsUART@data+1,c
  1948  006338  0EF8               	movlw	low STR_21
  1949  00633A  6E05               	movwf	putsUART@data,c
  1950  00633C  EC6D  F029         	call	_putsUART	;wreg free
  1951                           
  1952                           ;main.c: 225: WriteUART(FResult + 0x30);
  1953  006340  0100               	movlb	0	; () banked
  1954  006342  51C4               	movf	main@FResult& (0+255),w,b
  1955  006344  0F30               	addlw	48
  1956  006346  EC90  F028         	call	_WriteUART
  1957                           
  1958                           ;main.c: 226: putsUART(".\r\n");
  1959  00634A  0E7E               	movlw	high (STR_23+34)
  1960  00634C  6E06               	movwf	putsUART@data+1,c
  1961  00634E  0E41               	movlw	low (STR_23+34)
  1962  006350  6E05               	movwf	putsUART@data,c
  1963  006352  EC6D  F029         	call	_putsUART	;wreg free
  1964  006356                     l387:
  1965  006356  D7FF               	goto	l387
  1966  006358                     l4362:
  1967                           
  1968                           ;main.c: 229: }
  1969                           ;main.c: 231: putsUART("\r\File system succesfully unmounted.\r\n");
  1970  006358  0E7E               	movlw	high STR_23
  1971  00635A  6E06               	movwf	putsUART@data+1,c
  1972  00635C  0E1F               	movlw	low STR_23
  1973  00635E  6E05               	movwf	putsUART@data,c
  1974  006360  EC6D  F029         	call	_putsUART	;wreg free
  1975  006364                     l390:
  1976  006364  D7FF               	goto	l390
  1977  006366                     __end_of_main:
  1978                           	opt stack 0
  1979                           tblptru	equ	0xFF8
  1980                           tblptrh	equ	0xFF7
  1981                           tblptrl	equ	0xFF6
  1982                           tablat	equ	0xFF5
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           postdec1	equ	0xFE5
  1986                           fsr1h	equ	0xFE2
  1987                           fsr1l	equ	0xFE1
  1988                           indf2	equ	0xFDF
  1989                           fsr2h	equ	0xFDA
  1990                           fsr2l	equ	0xFD9
  1991                           status	equ	0xFD8
  1992                           
  1993 ;; *************** function _soft_hard_init *****************
  1994 ;; Defined at:
  1995 ;;		line 35 in file "main.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;		None
  1998 ;; Auto vars:     Size  Location     Type
  1999 ;;  i               2    3[COMRAM] int 
  2000 ;;  smp_phase       1    7[COMRAM] unsigned char 
  2001 ;;  bus_mode        1    6[COMRAM] unsigned char 
  2002 ;;  sync_mode       1    5[COMRAM] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;		None               void
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2012 ;;      Params:         0       0       0       0       0       0       0       0       0
  2013 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2014 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2015 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2016 ;;Total ram usage:        5 bytes
  2017 ;; Hardware stack levels used:    1
  2018 ;; Hardware stack levels required when called:    1
  2019 ;; This function calls:
  2020 ;;		_OpenSPI
  2021 ;; This function is called by:
  2022 ;;		_main
  2023 ;; This function uses a non-reentrant model
  2024 ;;
  2025                           
  2026                           	psect	text1
  2027  005198                     __ptext1:
  2028                           	opt stack 0
  2029  005198                     _soft_hard_init:
  2030                           	opt stack 29
  2031                           
  2032                           ;main.c: 37: unsigned char sync_mode=0;
  2033                           
  2034                           ;incstack = 0
  2035  005198  0E00               	movlw	0
  2036  00519A  6E06               	movwf	soft_hard_init@sync_mode,c
  2037                           
  2038                           ;main.c: 38: unsigned char bus_mode=0;
  2039  00519C  0E00               	movlw	0
  2040  00519E  6E07               	movwf	soft_hard_init@bus_mode,c
  2041                           
  2042                           ;main.c: 39: unsigned char smp_phase=0;
  2043  0051A0  0E00               	movlw	0
  2044  0051A2  6E08               	movwf	soft_hard_init@smp_phase,c
  2045                           
  2046                           ;main.c: 40: int i = 0;
  2047  0051A4  0E00               	movlw	0
  2048  0051A6  6E05               	movwf	soft_hard_init@i+1,c
  2049  0051A8  0E00               	movlw	0
  2050  0051AA  6E04               	movwf	soft_hard_init@i,c
  2051                           
  2052                           ;main.c: 42: (SSPCON1 &=0xDF);
  2053  0051AC  9AC6               	bcf	4038,5,c	;volatile
  2054                           
  2055                           ;main.c: 44: ADCON1 = 0X0F;
  2056  0051AE  0E0F               	movlw	15
  2057  0051B0  6EC1               	movwf	4033,c	;volatile
  2058                           
  2059                           ;main.c: 45: CMCON |= 7;
  2060  0051B2  0E07               	movlw	7
  2061  0051B4  12B4               	iorwf	4020,f,c	;volatile
  2062                           
  2063                           ;main.c: 47: TRISA5 = 0;
  2064  0051B6  9A92               	bcf	3986,5,c	;volatile
  2065                           
  2066                           ;main.c: 48: LATA5 = 0;
  2067  0051B8  9A89               	bcf	3977,5,c	;volatile
  2068                           
  2069                           ;main.c: 49: TRISB4 = 0;
  2070  0051BA  9893               	bcf	3987,4,c	;volatile
  2071                           
  2072                           ;main.c: 51: sync_mode = 0b00000010;
  2073  0051BC  0E02               	movlw	2
  2074  0051BE  6E06               	movwf	soft_hard_init@sync_mode,c
  2075                           
  2076                           ;main.c: 52: bus_mode = 0b00000000;
  2077  0051C0  0E00               	movlw	0
  2078  0051C2  6E07               	movwf	soft_hard_init@bus_mode,c
  2079                           
  2080                           ;main.c: 53: smp_phase = 0b00000000;
  2081  0051C4  0E00               	movlw	0
  2082  0051C6  6E08               	movwf	soft_hard_init@smp_phase,c
  2083                           
  2084                           ;main.c: 54: OpenSPI(sync_mode, bus_mode, smp_phase);
  2085  0051C8  C007  F001         	movff	soft_hard_init@bus_mode,OpenSPI@bus_mode
  2086  0051CC  C008  F002         	movff	soft_hard_init@smp_phase,OpenSPI@smp_phase
  2087  0051D0  5006               	movf	soft_hard_init@sync_mode,w,c
  2088  0051D2  EC17  F029         	call	_OpenSPI
  2089  0051D6  0012               	return	
  2090  0051D8                     __end_of_soft_hard_init:
  2091                           	opt stack 0
  2092                           tblptru	equ	0xFF8
  2093                           tblptrh	equ	0xFF7
  2094                           tblptrl	equ	0xFF6
  2095                           tablat	equ	0xFF5
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           postdec1	equ	0xFE5
  2099                           fsr1h	equ	0xFE2
  2100                           fsr1l	equ	0xFE1
  2101                           indf2	equ	0xFDF
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _OpenSPI *****************
  2107 ;; Defined at:
  2108 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi_open.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  sync_mode       1    wreg     unsigned char 
  2111 ;;  bus_mode        1    0[COMRAM] unsigned char 
  2112 ;;  smp_phase       1    1[COMRAM] unsigned char 
  2113 ;; Auto vars:     Size  Location     Type
  2114 ;;  sync_mode       1    2[COMRAM] unsigned char 
  2115 ;; Return value:  Size  Location     Type
  2116 ;;		None               void
  2117 ;; Registers used:
  2118 ;;		wreg, status,2, status,0
  2119 ;; Tracked objects:
  2120 ;;		On entry : 0/0
  2121 ;;		On exit  : 0/0
  2122 ;;		Unchanged: 0/0
  2123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2124 ;;      Params:         2       0       0       0       0       0       0       0       0
  2125 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2126 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2127 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2128 ;;Total ram usage:        3 bytes
  2129 ;; Hardware stack levels used:    1
  2130 ;; This function calls:
  2131 ;;		Nothing
  2132 ;; This function is called by:
  2133 ;;		_soft_hard_init
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text2
  2138  00522E                     __ptext2:
  2139                           	opt stack 0
  2140  00522E                     _OpenSPI:
  2141                           	opt stack 29
  2142                           
  2143                           ;incstack = 0
  2144                           ;OpenSPI@sync_mode stored from wreg
  2145  00522E  6E03               	movwf	OpenSPI@sync_mode,c
  2146  005230  0E3F               	movlw	63
  2147  005232  16C7               	andwf	4039,f,c	;volatile
  2148  005234  0E00               	movlw	0
  2149  005236  6EC6               	movwf	4038,c	;volatile
  2150  005238  5003               	movf	OpenSPI@sync_mode,w,c
  2151  00523A  12C6               	iorwf	4038,f,c	;volatile
  2152  00523C  5002               	movf	OpenSPI@smp_phase,w,c
  2153  00523E  12C7               	iorwf	4039,f,c	;volatile
  2154  005240  D005               	goto	l3674
  2155  005242                     l618:
  2156  005242  8CC7               	bsf	4039,6,c	;volatile
  2157  005244  D013               	goto	l3678
  2158  005246                     l620:
  2159  005246  8CC7               	bsf	4039,6,c	;volatile
  2160  005248                     l621:
  2161  005248  88C6               	bsf	4038,4,c	;volatile
  2162  00524A  D010               	goto	l3678
  2163  00524C                     l3674:
  2164  00524C  5001               	movf	OpenSPI@bus_mode,w,c
  2165                           
  2166                           ; Switch size 1, requested type "space"
  2167                           ; Number of cases is 3, Range of values is 0 to 3
  2168                           ; switch strategies available:
  2169                           ; Name         Instructions Cycles
  2170                           ; simple_byte           10     6 (average)
  2171                           ;	Chosen strategy is simple_byte
  2172  00524E  0A00               	xorlw	0	; case 0
  2173  005250  B4D8               	btfsc	status,2,c
  2174  005252  D7F7               	goto	l618
  2175  005254  0A02               	xorlw	2	; case 2
  2176  005256  B4D8               	btfsc	status,2,c
  2177  005258  D7F6               	goto	l620
  2178  00525A  0A01               	xorlw	1	; case 3
  2179  00525C  B4D8               	btfsc	status,2,c
  2180  00525E  D7F4               	goto	l621
  2181  005260  D005               	goto	l3678
  2182  005262                     l624:
  2183  005262  8A92               	bsf	3986,5,c	;volatile
  2184  005264                     l626:
  2185  005264  8293               	bsf	3987,1,c	;volatile
  2186  005266  D00A               	goto	l625
  2187  005268                     l627:
  2188  005268  9293               	bcf	3987,1,c	;volatile
  2189  00526A  D008               	goto	l625
  2190  00526C                     l3678:
  2191  00526C  5003               	movf	OpenSPI@sync_mode,w,c
  2192                           
  2193                           ; Switch size 1, requested type "space"
  2194                           ; Number of cases is 2, Range of values is 4 to 5
  2195                           ; switch strategies available:
  2196                           ; Name         Instructions Cycles
  2197                           ; simple_byte            7     4 (average)
  2198                           ;	Chosen strategy is simple_byte
  2199  00526E  0A04               	xorlw	4	; case 4
  2200  005270  B4D8               	btfsc	status,2,c
  2201  005272  D7F7               	goto	l624
  2202  005274  0A01               	xorlw	1	; case 5
  2203  005276  B4D8               	btfsc	status,2,c
  2204  005278  D7F5               	goto	l626
  2205  00527A  D7F6               	goto	l627
  2206  00527C                     l625:
  2207  00527C  8093               	bsf	3987,0,c	;volatile
  2208  00527E  9E94               	bcf	3988,7,c	;volatile
  2209  005280  8AC6               	bsf	4038,5,c	;volatile
  2210  005282  0012               	return	
  2211  005284                     __end_of_OpenSPI:
  2212                           	opt stack 0
  2213                           tblptru	equ	0xFF8
  2214                           tblptrh	equ	0xFF7
  2215                           tblptrl	equ	0xFF6
  2216                           tablat	equ	0xFF5
  2217                           postinc0	equ	0xFEE
  2218                           wreg	equ	0xFE8
  2219                           postdec1	equ	0xFE5
  2220                           fsr1h	equ	0xFE2
  2221                           fsr1l	equ	0xFE1
  2222                           indf2	equ	0xFDF
  2223                           fsr2h	equ	0xFDA
  2224                           fsr2l	equ	0xFD9
  2225                           status	equ	0xFD8
  2226                           
  2227 ;; *************** function _readover *****************
  2228 ;; Defined at:
  2229 ;;		line 19 in file "diskio.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  a               2    0[COMRAM] int 
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;		None
  2234 ;; Return value:  Size  Location     Type
  2235 ;;		None               void
  2236 ;; Registers used:
  2237 ;;		None
  2238 ;; Tracked objects:
  2239 ;;		On entry : 0/0
  2240 ;;		On exit  : 0/0
  2241 ;;		Unchanged: 0/0
  2242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2243 ;;      Params:         2       0       0       0       0       0       0       0       0
  2244 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2245 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2246 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2247 ;;Total ram usage:        2 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; This function calls:
  2250 ;;		Nothing
  2251 ;; This function is called by:
  2252 ;;		_main
  2253 ;; This function uses a non-reentrant model
  2254 ;;
  2255                           
  2256                           	psect	text3
  2257  004FDA                     __ptext3:
  2258                           	opt stack 0
  2259  004FDA                     _readover:
  2260                           	opt stack 30
  2261                           
  2262                           ;diskio.c: 21: flag = a;
  2263                           
  2264                           ;incstack = 0
  2265  004FDA  C001  F0F5         	movff	readover@a,_flag
  2266  004FDE  C002  F0F6         	movff	readover@a+1,_flag+1
  2267  004FE2  0012               	return	
  2268  004FE4                     __end_of_readover:
  2269                           	opt stack 0
  2270                           tblptru	equ	0xFF8
  2271                           tblptrh	equ	0xFF7
  2272                           tblptrl	equ	0xFF6
  2273                           tablat	equ	0xFF5
  2274                           postinc0	equ	0xFEE
  2275                           wreg	equ	0xFE8
  2276                           postdec1	equ	0xFE5
  2277                           fsr1h	equ	0xFE2
  2278                           fsr1l	equ	0xFE1
  2279                           indf2	equ	0xFDF
  2280                           fsr2h	equ	0xFDA
  2281                           fsr2l	equ	0xFD9
  2282                           status	equ	0xFD8
  2283                           
  2284 ;; *************** function _pf_write *****************
  2285 ;; Defined at:
  2286 ;;		line 919 in file "pff.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  buff            2   70[COMRAM] PTR const void 
  2289 ;;		 -> STR_8(8), 
  2290 ;;  btw             2   72[COMRAM] unsigned int 
  2291 ;;  bw              2   74[COMRAM] PTR unsigned int 
  2292 ;;		 -> main@br(2), 
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  clst            4   10[BANK0 ] unsigned long 
  2295 ;;  remain          4    6[BANK0 ] unsigned long 
  2296 ;;  sect            4    2[BANK0 ] unsigned long 
  2297 ;;  fs              2   17[BANK0 ] PTR struct .
  2298 ;;		 -> main@fs(42), NULL(0), 
  2299 ;;  wcnt            2   15[BANK0 ] unsigned int 
  2300 ;;  p               2    0[BANK0 ] PTR const unsigned char 
  2301 ;;		 -> STR_8(8), 
  2302 ;;  cs              1   14[BANK0 ] unsigned char 
  2303 ;; Return value:  Size  Location     Type
  2304 ;;                  1    wreg      enum E43
  2305 ;; Registers used:
  2306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2307 ;; Tracked objects:
  2308 ;;		On entry : 0/0
  2309 ;;		On exit  : 0/0
  2310 ;;		Unchanged: 0/0
  2311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2312 ;;      Params:         6       0       0       0       0       0       0       0       0
  2313 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2314 ;;      Temps:          8       0       0       0       0       0       0       0       0
  2315 ;;      Totals:        14      19       0       0       0       0       0       0       0
  2316 ;;Total ram usage:       33 bytes
  2317 ;; Hardware stack levels used:    1
  2318 ;; Hardware stack levels required when called:    6
  2319 ;; This function calls:
  2320 ;;		_clust2sect
  2321 ;;		_disk_writep
  2322 ;;		_get_fat
  2323 ;; This function is called by:
  2324 ;;		_main
  2325 ;; This function uses a non-reentrant model
  2326 ;;
  2327                           
  2328                           	psect	text4
  2329  007098                     __ptext4:
  2330                           	opt stack 0
  2331  007098                     _pf_write:
  2332                           	opt stack 24
  2333                           
  2334                           ;pff.c: 925: DWORD clst;
  2335                           ;pff.c: 926: DWORD sect, remain;
  2336                           ;pff.c: 927: const BYTE *p = buff;
  2337                           
  2338                           ;incstack = 0
  2339  007098  0100               	movlb	0	; () banked
  2340  00709A  C048  F061         	movff	pf_write@buff+1,pf_write@p+1
  2341  00709E  0100               	movlb	0	; () banked
  2342  0070A0  C047  F060         	movff	pf_write@buff,pf_write@p
  2343                           
  2344                           ;pff.c: 928: BYTE cs;
  2345                           ;pff.c: 929: UINT wcnt;
  2346                           ;pff.c: 930: FATFS *fs = FatFs;
  2347  0070A4  0100               	movlb	0	; () banked
  2348  0070A6  C0F4  F072         	movff	_FatFs+1,pf_write@fs+1
  2349  0070AA  0100               	movlb	0	; () banked
  2350  0070AC  C0F3  F071         	movff	_FatFs,pf_write@fs
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;pff.c: 933: *bw = 0;
  2354  0070B0  C04B  FFD9         	movff	pf_write@bw,fsr2l
  2355  0070B4  C04C  FFDA         	movff	pf_write@bw+1,fsr2h
  2356  0070B8  0E00               	movlw	0
  2357  0070BA  6EDE               	movwf	postinc2,c
  2358  0070BC  0E00               	movlw	0
  2359  0070BE  6EDD               	movwf	postdec2,c
  2360                           
  2361                           ; BSR set to: 0
  2362                           ;pff.c: 934: if (!fs) return FR_NOT_ENABLED;
  2363  0070C0  0100               	movlb	0	; () banked
  2364  0070C2  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2365  0070C4  1171               	iorwf	pf_write@fs& (0+255),w,b
  2366  0070C6  A4D8               	btfss	status,2,c
  2367  0070C8  D002               	goto	l4026
  2368                           
  2369                           ; BSR set to: 0
  2370  0070CA  0E05               	movlw	5
  2371  0070CC  D295               	goto	l209
  2372  0070CE                     l4026:
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;pff.c: 935: if (!(fs->flag & 0x01))
  2376  0070CE  0100               	movlb	0	; () banked
  2377  0070D0  EE20 F001          	lfsr	2,1
  2378  0070D4  0100               	movlb	0	; () banked
  2379  0070D6  5171               	movf	pf_write@fs& (0+255),w,b
  2380  0070D8  26D9               	addwf	fsr2l,f,c
  2381  0070DA  0100               	movlb	0	; () banked
  2382  0070DC  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2383  0070DE  22DA               	addwfc	fsr2h,f,c
  2384  0070E0  50DF               	movf	indf2,w,c
  2385  0070E2  6E4D               	movwf	??_pf_write& (0+255),c
  2386  0070E4  B04D               	btfsc	??_pf_write,0,c
  2387  0070E6  D002               	goto	l4032
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;pff.c: 936: return FR_NOT_OPENED;
  2391  0070E8  0E04               	movlw	4
  2392  0070EA  D286               	goto	l209
  2393  0070EC                     l4032:
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;pff.c: 938: if (!btw) {
  2397  0070EC  504A               	movf	pf_write@btw+1,w,c
  2398  0070EE  1049               	iorwf	pf_write@btw,w,c
  2399  0070F0  A4D8               	btfss	status,2,c
  2400  0070F2  D02C               	goto	l4052
  2401                           
  2402                           ; BSR set to: 0
  2403                           ;pff.c: 939: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  2404  0070F4  0100               	movlb	0	; () banked
  2405  0070F6  EE20 F001          	lfsr	2,1
  2406  0070FA  0100               	movlb	0	; () banked
  2407  0070FC  5171               	movf	pf_write@fs& (0+255),w,b
  2408  0070FE  26D9               	addwf	fsr2l,f,c
  2409  007100  0100               	movlb	0	; () banked
  2410  007102  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2411  007104  22DA               	addwfc	fsr2h,f,c
  2412  007106  50DF               	movf	indf2,w,c
  2413  007108  6E4D               	movwf	??_pf_write& (0+255),c
  2414  00710A  AC4D               	btfss	??_pf_write,6,c
  2415  00710C  D013               	goto	l4044
  2416                           
  2417                           ; BSR set to: 0
  2418  00710E  0E00               	movlw	0
  2419  007110  6E0B               	movwf	disk_writep@wr+2,c
  2420  007112  0E00               	movlw	0
  2421  007114  6E0A               	movwf	disk_writep@wr+1,c
  2422  007116  0E00               	movlw	0
  2423  007118  6E09               	movwf	disk_writep@wr,c
  2424  00711A  0E00               	movlw	0
  2425  00711C  6E0C               	movwf	disk_writep@sc,c
  2426  00711E  0E00               	movlw	0
  2427  007120  6E0D               	movwf	disk_writep@sc+1,c
  2428  007122  0E00               	movlw	0
  2429  007124  6E0E               	movwf	disk_writep@sc+2,c
  2430  007126  0E00               	movlw	0
  2431  007128  6E0F               	movwf	disk_writep@sc+3,c
  2432  00712A  EC9A  F02B         	call	_disk_writep	;wreg free
  2433  00712E  0900               	iorlw	0
  2434  007130  A4D8               	btfss	status,2,c
  2435  007132  D245               	goto	u4150
  2436  007134                     l4044:
  2437                           
  2438                           ;pff.c: 940: fs->flag &= ~0x40;
  2439  007134  0100               	movlb	0	; () banked
  2440  007136  EE20 F001          	lfsr	2,1
  2441  00713A  0100               	movlb	0	; () banked
  2442  00713C  5171               	movf	pf_write@fs& (0+255),w,b
  2443  00713E  26D9               	addwf	fsr2l,f,c
  2444  007140  0100               	movlb	0	; () banked
  2445  007142  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2446  007144  22DA               	addwfc	fsr2h,f,c
  2447  007146  0EBF               	movlw	191
  2448  007148  16DF               	andwf	indf2,f,c
  2449  00714A  D255               	goto	l4138
  2450  00714C                     l4052:
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;pff.c: 943: if (!(fs->flag & 0x40))
  2454  00714C  0100               	movlb	0	; () banked
  2455  00714E  EE20 F001          	lfsr	2,1
  2456  007152  0100               	movlb	0	; () banked
  2457  007154  5171               	movf	pf_write@fs& (0+255),w,b
  2458  007156  26D9               	addwf	fsr2l,f,c
  2459  007158  0100               	movlb	0	; () banked
  2460  00715A  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2461  00715C  22DA               	addwfc	fsr2h,f,c
  2462  00715E  50DF               	movf	indf2,w,c
  2463  007160  6E4D               	movwf	??_pf_write& (0+255),c
  2464  007162  BC4D               	btfsc	??_pf_write,6,c
  2465  007164  D013               	goto	l213
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;pff.c: 944: fs->fptr &= 0xFFFFFE00;
  2469  007166  0100               	movlb	0	; () banked
  2470  007168  EE20 F016          	lfsr	2,22
  2471  00716C  0100               	movlb	0	; () banked
  2472  00716E  5171               	movf	pf_write@fs& (0+255),w,b
  2473  007170  26D9               	addwf	fsr2l,f,c
  2474  007172  0100               	movlb	0	; () banked
  2475  007174  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2476  007176  22DA               	addwfc	fsr2h,f,c
  2477  007178  0E00               	movlw	0
  2478  00717A  16DE               	andwf	postinc2,f,c
  2479  00717C  0EFE               	movlw	254
  2480  00717E  16DE               	andwf	postinc2,f,c
  2481  007180  0EFF               	movlw	255
  2482  007182  16DE               	andwf	postinc2,f,c
  2483  007184  0EFF               	movlw	255
  2484  007186  16DD               	andwf	postdec2,f,c
  2485  007188  52DD               	movf	postdec2,f,c
  2486  00718A  52DD               	movf	postdec2,f,c
  2487  00718C                     l213:
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;pff.c: 945: }
  2491                           ;pff.c: 946: remain = fs->fsize - fs->fptr;
  2492  00718C  0100               	movlb	0	; () banked
  2493  00718E  EE20 F01A          	lfsr	2,26
  2494  007192  0100               	movlb	0	; () banked
  2495  007194  5171               	movf	pf_write@fs& (0+255),w,b
  2496  007196  26D9               	addwf	fsr2l,f,c
  2497  007198  0100               	movlb	0	; () banked
  2498  00719A  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2499  00719C  22DA               	addwfc	fsr2h,f,c
  2500  00719E  CFDE F04D          	movff	postinc2,??_pf_write
  2501  0071A2  CFDE F04E          	movff	postinc2,??_pf_write+1
  2502  0071A6  CFDE F04F          	movff	postinc2,??_pf_write+2
  2503  0071AA  CFDE F050          	movff	postinc2,??_pf_write+3
  2504  0071AE  0100               	movlb	0	; () banked
  2505  0071B0  EE20 F016          	lfsr	2,22
  2506  0071B4  0100               	movlb	0	; () banked
  2507  0071B6  5171               	movf	pf_write@fs& (0+255),w,b
  2508  0071B8  26D9               	addwf	fsr2l,f,c
  2509  0071BA  0100               	movlb	0	; () banked
  2510  0071BC  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2511  0071BE  22DA               	addwfc	fsr2h,f,c
  2512  0071C0  CFDE F051          	movff	postinc2,??_pf_write+4
  2513  0071C4  CFDE F052          	movff	postinc2,??_pf_write+5
  2514  0071C8  CFDE F053          	movff	postinc2,??_pf_write+6
  2515  0071CC  CFDE F054          	movff	postinc2,??_pf_write+7
  2516  0071D0  1E51               	comf	??_pf_write+4,f,c
  2517  0071D2  1E52               	comf	??_pf_write+5,f,c
  2518  0071D4  1E53               	comf	??_pf_write+6,f,c
  2519  0071D6  1E54               	comf	??_pf_write+7,f,c
  2520  0071D8  2A51               	incf	??_pf_write+4,f,c
  2521  0071DA  0E00               	movlw	0
  2522  0071DC  2252               	addwfc	??_pf_write+5,f,c
  2523  0071DE  2253               	addwfc	??_pf_write+6,f,c
  2524  0071E0  2254               	addwfc	??_pf_write+7,f,c
  2525  0071E2  504D               	movf	??_pf_write,w,c
  2526  0071E4  2451               	addwf	??_pf_write+4,w,c
  2527  0071E6  0100               	movlb	0	; () banked
  2528  0071E8  6F66               	movwf	pf_write@remain& (0+255),b
  2529  0071EA  504E               	movf	??_pf_write+1,w,c
  2530  0071EC  2052               	addwfc	??_pf_write+5,w,c
  2531  0071EE  0100               	movlb	0	; () banked
  2532  0071F0  6F67               	movwf	(pf_write@remain+1)& (0+255),b
  2533  0071F2  504F               	movf	??_pf_write+2,w,c
  2534  0071F4  2053               	addwfc	??_pf_write+6,w,c
  2535  0071F6  0100               	movlb	0	; () banked
  2536  0071F8  6F68               	movwf	(pf_write@remain+2)& (0+255),b
  2537  0071FA  5050               	movf	??_pf_write+3,w,c
  2538  0071FC  2054               	addwfc	??_pf_write+7,w,c
  2539  0071FE  0100               	movlb	0	; () banked
  2540  007200  6F69               	movwf	(pf_write@remain+3)& (0+255),b
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;pff.c: 947: if (btw > remain) btw = (UINT)remain;
  2544  007202  5049               	movf	pf_write@btw,w,c
  2545  007204  6E4D               	movwf	??_pf_write& (0+255),c
  2546  007206  504A               	movf	pf_write@btw+1,w,c
  2547  007208  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  2548  00720A  6A4F               	clrf	(??_pf_write+2)& (0+255),c
  2549  00720C  6A50               	clrf	(??_pf_write+3)& (0+255),c
  2550  00720E  504D               	movf	??_pf_write,w,c
  2551  007210  0100               	movlb	0	; () banked
  2552  007212  5D66               	subwf	pf_write@remain& (0+255),w,b
  2553  007214  504E               	movf	??_pf_write+1,w,c
  2554  007216  0100               	movlb	0	; () banked
  2555  007218  5967               	subwfb	(pf_write@remain+1)& (0+255),w,b
  2556  00721A  504F               	movf	??_pf_write+2,w,c
  2557  00721C  0100               	movlb	0	; () banked
  2558  00721E  5968               	subwfb	(pf_write@remain+2)& (0+255),w,b
  2559  007220  5050               	movf	??_pf_write+3,w,c
  2560  007222  0100               	movlb	0	; () banked
  2561  007224  5969               	subwfb	(pf_write@remain+3)& (0+255),w,b
  2562  007226  B0D8               	btfsc	status,0,c
  2563  007228  D1E2               	goto	l4136
  2564                           
  2565                           ; BSR set to: 0
  2566  00722A  C066  F049         	movff	pf_write@remain,pf_write@btw
  2567  00722E  C067  F04A         	movff	pf_write@remain+1,pf_write@btw+1
  2568  007232  D1DD               	goto	l4136
  2569  007234                     l4060:
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;pff.c: 950: if ((UINT)fs->fptr % 512 == 0) {
  2573  007234  0EFF               	movlw	255
  2574  007236  6E4D               	movwf	??_pf_write& (0+255),c
  2575  007238  0E01               	movlw	1
  2576  00723A  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  2577  00723C  0100               	movlb	0	; () banked
  2578  00723E  EE20 F016          	lfsr	2,22
  2579  007242  0100               	movlb	0	; () banked
  2580  007244  5171               	movf	pf_write@fs& (0+255),w,b
  2581  007246  26D9               	addwf	fsr2l,f,c
  2582  007248  0100               	movlb	0	; () banked
  2583  00724A  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2584  00724C  22DA               	addwfc	fsr2h,f,c
  2585  00724E  CFDE F04F          	movff	postinc2,??_pf_write+2
  2586  007252  CFDD F050          	movff	postdec2,??_pf_write+3
  2587  007256  504D               	movf	??_pf_write,w,c
  2588  007258  164F               	andwf	??_pf_write+2,f,c
  2589  00725A  504E               	movf	??_pf_write+1,w,c
  2590  00725C  1650               	andwf	??_pf_write+3,f,c
  2591  00725E  5050               	movf	??_pf_write+3,w,c
  2592  007260  104F               	iorwf	??_pf_write+2,w,c
  2593  007262  A4D8               	btfss	status,2,c
  2594  007264  D109               	goto	l218
  2595                           
  2596                           ; BSR set to: 0
  2597                           ;pff.c: 951: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  2598  007266  0100               	movlb	0	; () banked
  2599  007268  EE20 F016          	lfsr	2,22
  2600  00726C  0100               	movlb	0	; () banked
  2601  00726E  5171               	movf	pf_write@fs& (0+255),w,b
  2602  007270  26D9               	addwf	fsr2l,f,c
  2603  007272  0100               	movlb	0	; () banked
  2604  007274  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2605  007276  22DA               	addwfc	fsr2h,f,c
  2606  007278  CFDE F04D          	movff	postinc2,??_pf_write
  2607  00727C  CFDE F04E          	movff	postinc2,??_pf_write+1
  2608  007280  CFDE F04F          	movff	postinc2,??_pf_write+2
  2609  007284  CFDE F050          	movff	postinc2,??_pf_write+3
  2610  007288  0E0A               	movlw	10
  2611  00728A  D005               	goto	u4060
  2612  00728C                     u4065:
  2613  00728C  90D8               	bcf	status,0,c
  2614  00728E  3250               	rrcf	??_pf_write+3,f,c
  2615  007290  324F               	rrcf	??_pf_write+2,f,c
  2616  007292  324E               	rrcf	??_pf_write+1,f,c
  2617  007294  324D               	rrcf	??_pf_write,f,c
  2618  007296                     u4060:
  2619  007296  2EE8               	decfsz	wreg,f,c
  2620  007298  D7F9               	goto	u4065
  2621  00729A  0100               	movlb	0	; () banked
  2622  00729C  EE20 F002          	lfsr	2,2
  2623  0072A0  0100               	movlb	0	; () banked
  2624  0072A2  5171               	movf	pf_write@fs& (0+255),w,b
  2625  0072A4  26D9               	addwf	fsr2l,f,c
  2626  0072A6  0100               	movlb	0	; () banked
  2627  0072A8  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2628  0072AA  22DA               	addwfc	fsr2h,f,c
  2629  0072AC  50DF               	movf	indf2,w,c
  2630  0072AE  6E51               	movwf	(??_pf_write+4)& (0+255),c
  2631  0072B0  0451               	decf	??_pf_write+4,w,c
  2632  0072B2  144D               	andwf	??_pf_write,w,c
  2633  0072B4  0100               	movlb	0	; () banked
  2634  0072B6  6F6E               	movwf	pf_write@cs& (0+255),b
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;pff.c: 952: if (!cs) {
  2638  0072B8  0100               	movlb	0	; () banked
  2639  0072BA  676E               	tstfsz	pf_write@cs& (0+255),b
  2640  0072BC  D070               	goto	l4082
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;pff.c: 953: if (fs->fptr == 0)
  2644  0072BE  0100               	movlb	0	; () banked
  2645  0072C0  EE20 F016          	lfsr	2,22
  2646  0072C4  0100               	movlb	0	; () banked
  2647  0072C6  5171               	movf	pf_write@fs& (0+255),w,b
  2648  0072C8  26D9               	addwf	fsr2l,f,c
  2649  0072CA  0100               	movlb	0	; () banked
  2650  0072CC  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2651  0072CE  22DA               	addwfc	fsr2h,f,c
  2652  0072D0  CFDE F04D          	movff	postinc2,??_pf_write
  2653  0072D4  CFDE F04E          	movff	postinc2,??_pf_write+1
  2654  0072D8  CFDE F04F          	movff	postinc2,??_pf_write+2
  2655  0072DC  CFDE F050          	movff	postinc2,??_pf_write+3
  2656  0072E0  5050               	movf	??_pf_write+3,w,c
  2657  0072E2  104D               	iorwf	??_pf_write,w,c
  2658  0072E4  104E               	iorwf	??_pf_write+1,w,c
  2659  0072E6  104F               	iorwf	??_pf_write+2,w,c
  2660  0072E8  A4D8               	btfss	status,2,c
  2661  0072EA  D016               	goto	l4070
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;pff.c: 954: clst = fs->org_clust;
  2665  0072EC  0100               	movlb	0	; () banked
  2666  0072EE  EE20 F01E          	lfsr	2,30
  2667  0072F2  0100               	movlb	0	; () banked
  2668  0072F4  5171               	movf	pf_write@fs& (0+255),w,b
  2669  0072F6  26D9               	addwf	fsr2l,f,c
  2670  0072F8  0100               	movlb	0	; () banked
  2671  0072FA  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2672  0072FC  22DA               	addwfc	fsr2h,f,c
  2673  0072FE  0100               	movlb	0	; () banked
  2674  007300  CFDE F06A          	movff	postinc2,pf_write@clst
  2675  007304  0100               	movlb	0	; () banked
  2676  007306  CFDE F06B          	movff	postinc2,pf_write@clst+1
  2677  00730A  0100               	movlb	0	; () banked
  2678  00730C  CFDE F06C          	movff	postinc2,pf_write@clst+2
  2679  007310  0100               	movlb	0	; () banked
  2680  007312  CFDE F06D          	movff	postinc2,pf_write@clst+3
  2681  007316  D01B               	goto	l4072
  2682  007318                     l4070:
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;pff.c: 955: else
  2686                           ;pff.c: 956: clst = get_fat(fs->curr_clust);
  2687  007318  0100               	movlb	0	; () banked
  2688  00731A  EE20 F022          	lfsr	2,34
  2689  00731E  0100               	movlb	0	; () banked
  2690  007320  5171               	movf	pf_write@fs& (0+255),w,b
  2691  007322  26D9               	addwf	fsr2l,f,c
  2692  007324  0100               	movlb	0	; () banked
  2693  007326  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2694  007328  22DA               	addwfc	fsr2h,f,c
  2695  00732A  CFDE F01F          	movff	postinc2,get_fat@clst
  2696  00732E  CFDE F020          	movff	postinc2,get_fat@clst+1
  2697  007332  CFDE F021          	movff	postinc2,get_fat@clst+2
  2698  007336  CFDE F022          	movff	postinc2,get_fat@clst+3
  2699  00733A  EC35  F034         	call	_get_fat	;wreg free
  2700  00733E  C01F  F06A         	movff	?_get_fat,pf_write@clst
  2701  007342  C020  F06B         	movff	?_get_fat+1,pf_write@clst+1
  2702  007346  C021  F06C         	movff	?_get_fat+2,pf_write@clst+2
  2703  00734A  C022  F06D         	movff	?_get_fat+3,pf_write@clst+3
  2704  00734E                     l4072:
  2705                           
  2706                           ;pff.c: 957: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  2707  00734E  0E02               	movlw	2
  2708  007350  6E4D               	movwf	??_pf_write& (0+255),c
  2709  007352  6A4E               	clrf	(??_pf_write+1)& (0+255),c
  2710  007354  6A4F               	clrf	(??_pf_write+2)& (0+255),c
  2711  007356  6A50               	clrf	(??_pf_write+3)& (0+255),c
  2712  007358  504D               	movf	??_pf_write,w,c
  2713  00735A  0100               	movlb	0	; () banked
  2714  00735C  5D6A               	subwf	pf_write@clst& (0+255),w,b
  2715  00735E  504E               	movf	??_pf_write+1,w,c
  2716  007360  0100               	movlb	0	; () banked
  2717  007362  596B               	subwfb	(pf_write@clst+1)& (0+255),w,b
  2718  007364  504F               	movf	??_pf_write+2,w,c
  2719  007366  0100               	movlb	0	; () banked
  2720  007368  596C               	subwfb	(pf_write@clst+2)& (0+255),w,b
  2721  00736A  5050               	movf	??_pf_write+3,w,c
  2722  00736C  0100               	movlb	0	; () banked
  2723  00736E  596D               	subwfb	(pf_write@clst+3)& (0+255),w,b
  2724  007370  A0D8               	btfss	status,0,c
  2725  007372  D125               	goto	u4150
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;pff.c: 958: fs->curr_clust = clst;
  2729                           
  2730                           ; BSR set to: 0
  2731                           
  2732                           ; BSR set to: 0
  2733                           
  2734                           ; BSR set to: 0
  2735                           
  2736                           ; BSR set to: 0
  2737  007374  0100               	movlb	0	; () banked
  2738  007376  EE20 F022          	lfsr	2,34
  2739  00737A  0100               	movlb	0	; () banked
  2740  00737C  5171               	movf	pf_write@fs& (0+255),w,b
  2741  00737E  26D9               	addwf	fsr2l,f,c
  2742  007380  0100               	movlb	0	; () banked
  2743  007382  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2744  007384  22DA               	addwfc	fsr2h,f,c
  2745  007386  0100               	movlb	0	; () banked
  2746  007388  C06A  FFDE         	movff	pf_write@clst,postinc2
  2747  00738C  0100               	movlb	0	; () banked
  2748  00738E  C06B  FFDE         	movff	pf_write@clst+1,postinc2
  2749  007392  0100               	movlb	0	; () banked
  2750  007394  C06C  FFDE         	movff	pf_write@clst+2,postinc2
  2751  007398  0100               	movlb	0	; () banked
  2752  00739A  C06D  FFDE         	movff	pf_write@clst+3,postinc2
  2753  00739E                     l4082:
  2754                           
  2755                           ; BSR set to: 0
  2756                           ;pff.c: 959: }
  2757                           ;pff.c: 960: sect = clust2sect(fs->curr_clust);
  2758  00739E  0100               	movlb	0	; () banked
  2759  0073A0  EE20 F022          	lfsr	2,34
  2760  0073A4  0100               	movlb	0	; () banked
  2761  0073A6  5171               	movf	pf_write@fs& (0+255),w,b
  2762  0073A8  26D9               	addwf	fsr2l,f,c
  2763  0073AA  0100               	movlb	0	; () banked
  2764  0073AC  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2765  0073AE  22DA               	addwfc	fsr2h,f,c
  2766  0073B0  CFDE F00D          	movff	postinc2,clust2sect@clst
  2767  0073B4  CFDE F00E          	movff	postinc2,clust2sect@clst+1
  2768  0073B8  CFDE F00F          	movff	postinc2,clust2sect@clst+2
  2769  0073BC  CFDE F010          	movff	postinc2,clust2sect@clst+3
  2770  0073C0  ECB5  F02A         	call	_clust2sect	;wreg free
  2771  0073C4  C00D  F062         	movff	?_clust2sect,pf_write@sect
  2772  0073C8  C00E  F063         	movff	?_clust2sect+1,pf_write@sect+1
  2773  0073CC  C00F  F064         	movff	?_clust2sect+2,pf_write@sect+2
  2774  0073D0  C010  F065         	movff	?_clust2sect+3,pf_write@sect+3
  2775                           
  2776                           ;pff.c: 961: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  2777  0073D4  0100               	movlb	0	; () banked
  2778  0073D6  5165               	movf	(pf_write@sect+3)& (0+255),w,b
  2779  0073D8  1162               	iorwf	pf_write@sect& (0+255),w,b
  2780  0073DA  1163               	iorwf	(pf_write@sect+1)& (0+255),w,b
  2781  0073DC  1164               	iorwf	(pf_write@sect+2)& (0+255),w,b
  2782  0073DE  B4D8               	btfsc	status,2,c
  2783  0073E0  D0EE               	goto	u4150
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;pff.c: 962: fs->dsect = sect + cs;
  2787                           
  2788                           ; BSR set to: 0
  2789                           
  2790                           ; BSR set to: 0
  2791                           
  2792                           ; BSR set to: 0
  2793                           
  2794                           ; BSR set to: 0
  2795  0073E2  0100               	movlb	0	; () banked
  2796  0073E4  516E               	movf	pf_write@cs& (0+255),w,b
  2797  0073E6  0100               	movlb	0	; () banked
  2798  0073E8  2562               	addwf	pf_write@sect& (0+255),w,b
  2799  0073EA  6E4D               	movwf	??_pf_write& (0+255),c
  2800  0073EC  0E00               	movlw	0
  2801  0073EE  0100               	movlb	0	; () banked
  2802  0073F0  2163               	addwfc	(pf_write@sect+1)& (0+255),w,b
  2803  0073F2  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  2804  0073F4  0E00               	movlw	0
  2805  0073F6  0100               	movlb	0	; () banked
  2806  0073F8  2164               	addwfc	(pf_write@sect+2)& (0+255),w,b
  2807  0073FA  6E4F               	movwf	(??_pf_write+2)& (0+255),c
  2808  0073FC  0E00               	movlw	0
  2809  0073FE  0100               	movlb	0	; () banked
  2810  007400  2165               	addwfc	(pf_write@sect+3)& (0+255),w,b
  2811  007402  6E50               	movwf	(??_pf_write+3)& (0+255),c
  2812  007404  0100               	movlb	0	; () banked
  2813  007406  EE20 F026          	lfsr	2,38
  2814  00740A  0100               	movlb	0	; () banked
  2815  00740C  5171               	movf	pf_write@fs& (0+255),w,b
  2816  00740E  26D9               	addwf	fsr2l,f,c
  2817  007410  0100               	movlb	0	; () banked
  2818  007412  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2819  007414  22DA               	addwfc	fsr2h,f,c
  2820  007416  C04D  FFDE         	movff	??_pf_write,postinc2
  2821  00741A  C04E  FFDE         	movff	??_pf_write+1,postinc2
  2822  00741E  C04F  FFDE         	movff	??_pf_write+2,postinc2
  2823  007422  C050  FFDD         	movff	??_pf_write+3,postdec2
  2824  007426  06D9               	decf	fsr2l,f,c
  2825  007428  06D9               	decf	fsr2l,f,c
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;pff.c: 963: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  2829  00742A  0E00               	movlw	0
  2830  00742C  6E0B               	movwf	disk_writep@wr+2,c
  2831  00742E  0E00               	movlw	0
  2832  007430  6E0A               	movwf	disk_writep@wr+1,c
  2833  007432  0E00               	movlw	0
  2834  007434  6E09               	movwf	disk_writep@wr,c
  2835  007436  0100               	movlb	0	; () banked
  2836  007438  EE20 F026          	lfsr	2,38
  2837  00743C  0100               	movlb	0	; () banked
  2838  00743E  5171               	movf	pf_write@fs& (0+255),w,b
  2839  007440  26D9               	addwf	fsr2l,f,c
  2840  007442  0100               	movlb	0	; () banked
  2841  007444  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2842  007446  22DA               	addwfc	fsr2h,f,c
  2843  007448  CFDE F00C          	movff	postinc2,disk_writep@sc
  2844  00744C  CFDE F00D          	movff	postinc2,disk_writep@sc+1
  2845  007450  CFDE F00E          	movff	postinc2,disk_writep@sc+2
  2846  007454  CFDE F00F          	movff	postinc2,disk_writep@sc+3
  2847  007458  EC9A  F02B         	call	_disk_writep	;wreg free
  2848  00745C  0900               	iorlw	0
  2849  00745E  A4D8               	btfss	status,2,c
  2850  007460  D0AE               	goto	u4150
  2851                           
  2852                           ;pff.c: 964: fs->flag |= 0x40;
  2853                           
  2854                           ; BSR set to: 0
  2855                           
  2856                           ; BSR set to: 0
  2857                           
  2858                           ; BSR set to: 0
  2859  007462  0100               	movlb	0	; () banked
  2860  007464  EE20 F001          	lfsr	2,1
  2861  007468  0100               	movlb	0	; () banked
  2862  00746A  5171               	movf	pf_write@fs& (0+255),w,b
  2863  00746C  26D9               	addwf	fsr2l,f,c
  2864  00746E  0100               	movlb	0	; () banked
  2865  007470  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2866  007472  22DA               	addwfc	fsr2h,f,c
  2867  007474  0E00               	movlw	0
  2868  007476  8CDB               	bsf	plusw2,6,c
  2869  007478                     l218:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;pff.c: 965: }
  2873                           ;pff.c: 966: wcnt = 512 - (UINT)fs->fptr % 512;
  2874  007478  0EFF               	movlw	255
  2875  00747A  6E4D               	movwf	??_pf_write& (0+255),c
  2876  00747C  0E01               	movlw	1
  2877  00747E  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  2878  007480  0100               	movlb	0	; () banked
  2879  007482  EE20 F016          	lfsr	2,22
  2880  007486  0100               	movlb	0	; () banked
  2881  007488  5171               	movf	pf_write@fs& (0+255),w,b
  2882  00748A  26D9               	addwf	fsr2l,f,c
  2883  00748C  0100               	movlb	0	; () banked
  2884  00748E  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2885  007490  22DA               	addwfc	fsr2h,f,c
  2886  007492  CFDE F04F          	movff	postinc2,??_pf_write+2
  2887  007496  CFDD F050          	movff	postdec2,??_pf_write+3
  2888  00749A  504D               	movf	??_pf_write,w,c
  2889  00749C  164F               	andwf	??_pf_write+2,f,c
  2890  00749E  504E               	movf	??_pf_write+1,w,c
  2891  0074A0  1650               	andwf	??_pf_write+3,f,c
  2892  0074A2  1E4F               	comf	??_pf_write+2,f,c
  2893  0074A4  1E50               	comf	??_pf_write+3,f,c
  2894  0074A6  4A4F               	infsnz	??_pf_write+2,f,c
  2895  0074A8  2A50               	incf	??_pf_write+3,f,c
  2896  0074AA  0E00               	movlw	0
  2897  0074AC  244F               	addwf	??_pf_write+2,w,c
  2898  0074AE  0100               	movlb	0	; () banked
  2899  0074B0  6F6F               	movwf	pf_write@wcnt& (0+255),b
  2900  0074B2  0E02               	movlw	2
  2901  0074B4  2050               	addwfc	??_pf_write+3,w,c
  2902  0074B6  0100               	movlb	0	; () banked
  2903  0074B8  6F70               	movwf	(pf_write@wcnt+1)& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;pff.c: 967: if (wcnt > btw)wcnt = btw;
  2907  0074BA  0100               	movlb	0	; () banked
  2908  0074BC  516F               	movf	pf_write@wcnt& (0+255),w,b
  2909  0074BE  5C49               	subwf	pf_write@btw,w,c
  2910  0074C0  0100               	movlb	0	; () banked
  2911  0074C2  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  2912  0074C4  584A               	subwfb	pf_write@btw+1,w,c
  2913  0074C6  B0D8               	btfsc	status,0,c
  2914  0074C8  D004               	goto	l4108
  2915                           
  2916                           ; BSR set to: 0
  2917  0074CA  C049  F06F         	movff	pf_write@btw,pf_write@wcnt
  2918  0074CE  C04A  F070         	movff	pf_write@btw+1,pf_write@wcnt+1
  2919  0074D2                     l4108:
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;pff.c: 968: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  2923  0074D2  0E00               	movlw	low (__mediumconst shr (0+16))
  2924  0074D4  6E0B               	movwf	disk_writep@wr+2,c
  2925  0074D6  0100               	movlb	0	; () banked
  2926  0074D8  C061  F00A         	movff	pf_write@p+1,disk_writep@wr+1
  2927  0074DC  0100               	movlb	0	; () banked
  2928  0074DE  C060  F009         	movff	pf_write@p,disk_writep@wr
  2929  0074E2  0100               	movlb	0	; () banked
  2930  0074E4  EE20 F026          	lfsr	2,38
  2931  0074E8  0100               	movlb	0	; () banked
  2932  0074EA  5171               	movf	pf_write@fs& (0+255),w,b
  2933  0074EC  26D9               	addwf	fsr2l,f,c
  2934  0074EE  0100               	movlb	0	; () banked
  2935  0074F0  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2936  0074F2  22DA               	addwfc	fsr2h,f,c
  2937  0074F4  CFDE F00C          	movff	postinc2,disk_writep@sc
  2938  0074F8  CFDE F00D          	movff	postinc2,disk_writep@sc+1
  2939  0074FC  CFDE F00E          	movff	postinc2,disk_writep@sc+2
  2940  007500  CFDE F00F          	movff	postinc2,disk_writep@sc+3
  2941  007504  EC9A  F02B         	call	_disk_writep	;wreg free
  2942  007508  0900               	iorlw	0
  2943  00750A  A4D8               	btfss	status,2,c
  2944  00750C  D058               	goto	u4150
  2945                           
  2946                           ;pff.c: 969: fs->fptr += wcnt; p += wcnt;
  2947                           
  2948                           ; BSR set to: 0
  2949                           
  2950                           ; BSR set to: 0
  2951                           
  2952                           ; BSR set to: 0
  2953  00750E  0100               	movlb	0	; () banked
  2954  007510  EE20 F016          	lfsr	2,22
  2955  007514  0100               	movlb	0	; () banked
  2956  007516  5171               	movf	pf_write@fs& (0+255),w,b
  2957  007518  26D9               	addwf	fsr2l,f,c
  2958  00751A  0100               	movlb	0	; () banked
  2959  00751C  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2960  00751E  22DA               	addwfc	fsr2h,f,c
  2961  007520  0100               	movlb	0	; () banked
  2962  007522  516F               	movf	pf_write@wcnt& (0+255),w,b
  2963  007524  26DE               	addwf	postinc2,f,c
  2964  007526  0100               	movlb	0	; () banked
  2965  007528  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  2966  00752A  22DE               	addwfc	postinc2,f,c
  2967  00752C  0E00               	movlw	0
  2968  00752E  22DE               	addwfc	postinc2,f,c
  2969  007530  22DD               	addwfc	postdec2,f,c
  2970  007532  52DD               	movf	postdec2,f,c
  2971  007534  52DD               	movf	postdec2,f,c
  2972                           
  2973                           ; BSR set to: 0
  2974  007536  0100               	movlb	0	; () banked
  2975  007538  516F               	movf	pf_write@wcnt& (0+255),w,b
  2976  00753A  0100               	movlb	0	; () banked
  2977  00753C  2760               	addwf	pf_write@p& (0+255),f,b
  2978  00753E  0100               	movlb	0	; () banked
  2979  007540  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  2980  007542  0100               	movlb	0	; () banked
  2981  007544  2361               	addwfc	(pf_write@p+1)& (0+255),f,b
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;pff.c: 970: btw -= wcnt; *bw += wcnt;
  2985  007546  0100               	movlb	0	; () banked
  2986  007548  516F               	movf	pf_write@wcnt& (0+255),w,b
  2987  00754A  5E49               	subwf	pf_write@btw,f,c
  2988  00754C  0100               	movlb	0	; () banked
  2989  00754E  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  2990  007550  5A4A               	subwfb	pf_write@btw+1,f,c
  2991                           
  2992                           ; BSR set to: 0
  2993  007552  C04B  FFD9         	movff	pf_write@bw,fsr2l
  2994  007556  C04C  FFDA         	movff	pf_write@bw+1,fsr2h
  2995  00755A  0100               	movlb	0	; () banked
  2996  00755C  516F               	movf	pf_write@wcnt& (0+255),w,b
  2997  00755E  26DE               	addwf	postinc2,f,c
  2998  007560  0100               	movlb	0	; () banked
  2999  007562  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  3000  007564  22DD               	addwfc	postdec2,f,c
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;pff.c: 971: if ((UINT)fs->fptr % 512 == 0) {
  3004  007566  0EFF               	movlw	255
  3005  007568  6E4D               	movwf	??_pf_write& (0+255),c
  3006  00756A  0E01               	movlw	1
  3007  00756C  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  3008  00756E  0100               	movlb	0	; () banked
  3009  007570  EE20 F016          	lfsr	2,22
  3010  007574  0100               	movlb	0	; () banked
  3011  007576  5171               	movf	pf_write@fs& (0+255),w,b
  3012  007578  26D9               	addwf	fsr2l,f,c
  3013  00757A  0100               	movlb	0	; () banked
  3014  00757C  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  3015  00757E  22DA               	addwfc	fsr2h,f,c
  3016  007580  CFDE F04F          	movff	postinc2,??_pf_write+2
  3017  007584  CFDD F050          	movff	postdec2,??_pf_write+3
  3018  007588  504D               	movf	??_pf_write,w,c
  3019  00758A  164F               	andwf	??_pf_write+2,f,c
  3020  00758C  504E               	movf	??_pf_write+1,w,c
  3021  00758E  1650               	andwf	??_pf_write+3,f,c
  3022  007590  5050               	movf	??_pf_write+3,w,c
  3023  007592  104F               	iorwf	??_pf_write+2,w,c
  3024  007594  A4D8               	btfss	status,2,c
  3025  007596  D02B               	goto	l4136
  3026                           
  3027                           ; BSR set to: 0
  3028                           ;pff.c: 972: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  3029  007598  0E00               	movlw	0
  3030  00759A  6E0B               	movwf	disk_writep@wr+2,c
  3031  00759C  0E00               	movlw	0
  3032  00759E  6E0A               	movwf	disk_writep@wr+1,c
  3033  0075A0  0E00               	movlw	0
  3034  0075A2  6E09               	movwf	disk_writep@wr,c
  3035  0075A4  0E00               	movlw	0
  3036  0075A6  6E0C               	movwf	disk_writep@sc,c
  3037  0075A8  0E00               	movlw	0
  3038  0075AA  6E0D               	movwf	disk_writep@sc+1,c
  3039  0075AC  0E00               	movlw	0
  3040  0075AE  6E0E               	movwf	disk_writep@sc+2,c
  3041  0075B0  0E00               	movlw	0
  3042  0075B2  6E0F               	movwf	disk_writep@sc+3,c
  3043  0075B4  EC9A  F02B         	call	_disk_writep	;wreg free
  3044  0075B8  0900               	iorlw	0
  3045  0075BA  B4D8               	btfsc	status,2,c
  3046  0075BC  D00D               	goto	l4134
  3047  0075BE                     u4150:
  3048  0075BE  0100               	movlb	0	; () banked
  3049  0075C0  EE20 F001          	lfsr	2,1
  3050  0075C4  0100               	movlb	0	; () banked
  3051  0075C6  5171               	movf	pf_write@fs& (0+255),w,b
  3052  0075C8  26D9               	addwf	fsr2l,f,c
  3053  0075CA  0100               	movlb	0	; () banked
  3054  0075CC  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  3055  0075CE  22DA               	addwfc	fsr2h,f,c
  3056  0075D0  0E00               	movlw	0
  3057  0075D2  6EDF               	movwf	indf2,c
  3058                           
  3059                           ; BSR set to: 0
  3060  0075D4  0E01               	movlw	1
  3061  0075D6  D010               	goto	l209
  3062  0075D8                     l4134:
  3063                           
  3064                           ;pff.c: 973: fs->flag &= ~0x40;
  3065  0075D8  0100               	movlb	0	; () banked
  3066  0075DA  EE20 F001          	lfsr	2,1
  3067  0075DE  0100               	movlb	0	; () banked
  3068  0075E0  5171               	movf	pf_write@fs& (0+255),w,b
  3069  0075E2  26D9               	addwf	fsr2l,f,c
  3070  0075E4  0100               	movlb	0	; () banked
  3071  0075E6  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  3072  0075E8  22DA               	addwfc	fsr2h,f,c
  3073  0075EA  0EBF               	movlw	191
  3074  0075EC  16DF               	andwf	indf2,f,c
  3075  0075EE                     l4136:
  3076                           
  3077                           ; BSR set to: 0
  3078  0075EE  504A               	movf	pf_write@btw+1,w,c
  3079  0075F0  1049               	iorwf	pf_write@btw,w,c
  3080  0075F2  A4D8               	btfss	status,2,c
  3081  0075F4  D61F               	goto	l4060
  3082  0075F6                     l4138:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;pff.c: 974: }
  3086                           ;pff.c: 975: }
  3087                           ;pff.c: 977: return FR_OK;
  3088  0075F6  0E00               	movlw	0
  3089  0075F8                     l209:
  3090                           
  3091                           ; BSR set to: 0
  3092  0075F8  0012               	return	
  3093  0075FA                     __end_of_pf_write:
  3094                           	opt stack 0
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postdec1	equ	0xFE5
  3102                           fsr1h	equ	0xFE2
  3103                           fsr1l	equ	0xFE1
  3104                           indf2	equ	0xFDF
  3105                           postinc2	equ	0xFDE
  3106                           postdec2	equ	0xFDD
  3107                           plusw2	equ	0xFDB
  3108                           fsr2h	equ	0xFDA
  3109                           fsr2l	equ	0xFD9
  3110                           status	equ	0xFD8
  3111                           
  3112 ;; *************** function _disk_writep *****************
  3113 ;; Defined at:
  3114 ;;		line 259 in file "diskio.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  wr              3    8[COMRAM] PTR const unsigned char 
  3117 ;;		 -> STR_8(8), ROM(32767), 
  3118 ;;  sc              4   11[COMRAM] unsigned long 
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;  j               2   21[COMRAM] int 
  3121 ;;  i               2   19[COMRAM] int 
  3122 ;;  buff            1   23[COMRAM] unsigned char 
  3123 ;;  res             1    0        enum E14
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      enum E73
  3126 ;; Registers used:
  3127 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3133 ;;      Params:         7       0       0       0       0       0       0       0       0
  3134 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3135 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3136 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3137 ;;Total ram usage:       16 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    3
  3140 ;; This function calls:
  3141 ;;		_Command
  3142 ;;		_Delay_s
  3143 ;;		_WriteSPI_
  3144 ;;		_dummy_clocks
  3145 ;;		_proceed
  3146 ;;		_response
  3147 ;; This function is called by:
  3148 ;;		_pf_write
  3149 ;; This function uses a non-reentrant model
  3150 ;;
  3151                           
  3152                           	psect	text5
  3153  005734                     __ptext5:
  3154                           	opt stack 0
  3155  005734                     _disk_writep:
  3156                           	opt stack 26
  3157                           
  3158                           ;diskio.c: 264: DRESULT res;
  3159                           ;diskio.c: 266: unsigned char buff;
  3160                           ;diskio.c: 267: int i=0,j;
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;incstack = 0
  3164  005734  0E00               	movlw	0
  3165  005736  6E15               	movwf	disk_writep@i+1,c
  3166  005738  0E00               	movlw	0
  3167  00573A  6E14               	movwf	disk_writep@i,c
  3168                           
  3169                           ;diskio.c: 269: Delay_s(1);
  3170  00573C  0E01               	movlw	1
  3171  00573E  EC4E  F028         	call	_Delay_s
  3172                           
  3173                           ;diskio.c: 271: dummy_clocks(8);
  3174  005742  0E00               	movlw	0
  3175  005744  6E05               	movwf	dummy_clocks@n+1,c
  3176  005746  0E08               	movlw	8
  3177  005748  6E04               	movwf	dummy_clocks@n,c
  3178  00574A  ECAD  F028         	call	_dummy_clocks	;wreg free
  3179                           
  3180                           ;diskio.c: 272: Command(0X58, sc*512, 0X00);
  3181  00574E  C00C  F010         	movff	disk_writep@sc,??_disk_writep
  3182  005752  C00D  F011         	movff	disk_writep@sc+1,??_disk_writep+1
  3183  005756  C00E  F012         	movff	disk_writep@sc+2,??_disk_writep+2
  3184  00575A  C00F  F013         	movff	disk_writep@sc+3,??_disk_writep+3
  3185  00575E  0E09               	movlw	9
  3186  005760                     u3375:
  3187  005760  90D8               	bcf	status,0,c
  3188  005762  3610               	rlcf	??_disk_writep,f,c
  3189  005764  3611               	rlcf	??_disk_writep+1,f,c
  3190  005766  3612               	rlcf	??_disk_writep+2,f,c
  3191  005768  3613               	rlcf	??_disk_writep+3,f,c
  3192  00576A  2EE8               	decfsz	wreg,f,c
  3193  00576C  D7F9               	goto	u3375
  3194  00576E  C010  F003         	movff	??_disk_writep,Command@arg
  3195  005772  C011  F004         	movff	??_disk_writep+1,Command@arg+1
  3196  005776  C012  F005         	movff	??_disk_writep+2,Command@arg+2
  3197  00577A  C013  F006         	movff	??_disk_writep+3,Command@arg+3
  3198  00577E  0E00               	movlw	0
  3199  005780  6E07               	movwf	Command@CRCbits,c
  3200  005782  0E58               	movlw	88
  3201  005784  EC78  F028         	call	_Command
  3202                           
  3203                           ;diskio.c: 273: proceed();
  3204  005788  ECF7  F027         	call	_proceed	;wreg free
  3205  00578C                     l3620:
  3206                           
  3207                           ;diskio.c: 275: buff = response();
  3208  00578C  ECFD  F027         	call	_response	;wreg free
  3209  005790  6E18               	movwf	disk_writep@buff,c
  3210                           
  3211                           ;diskio.c: 276: }while(buff!=0x00);
  3212  005792  6618               	tstfsz	disk_writep@buff,c
  3213  005794  D7FB               	goto	l3620
  3214                           
  3215                           ;diskio.c: 279: Delay_s(2);
  3216  005796  0E02               	movlw	2
  3217  005798  EC4E  F028         	call	_Delay_s
  3218                           
  3219                           ;diskio.c: 281: dummy_clocks(8);
  3220  00579C  0E00               	movlw	0
  3221  00579E  6E05               	movwf	dummy_clocks@n+1,c
  3222  0057A0  0E08               	movlw	8
  3223  0057A2  6E04               	movwf	dummy_clocks@n,c
  3224  0057A4  ECAD  F028         	call	_dummy_clocks	;wreg free
  3225                           
  3226                           ;diskio.c: 283: WriteSPI_(0XFE);
  3227  0057A8  0EFE               	movlw	254
  3228  0057AA  EC1C  F028         	call	_WriteSPI_
  3229                           
  3230                           ;diskio.c: 285: for(j=0;j<512;j++)
  3231  0057AE  0E00               	movlw	0
  3232  0057B0  6E17               	movwf	disk_writep@j+1,c
  3233  0057B2  0E00               	movlw	0
  3234  0057B4  6E16               	movwf	disk_writep@j,c
  3235  0057B6  5017               	movf	disk_writep@j+1,w,c
  3236  0057B8  0A80               	xorlw	128
  3237  0057BA  0F7E               	addlw	-130
  3238  0057BC  0E00               	movlw	0
  3239  0057BE  B4D8               	btfsc	status,2,c
  3240  0057C0  5C16               	subwf	disk_writep@j,w,c
  3241  0057C2  B0D8               	btfsc	status,0,c
  3242  0057C4  D022               	goto	l3646
  3243                           
  3244                           ;diskio.c: 286: {
  3245                           ;diskio.c: 287: if(*wr!='\0')
  3246  0057C6  C009  FFF6         	movff	disk_writep@wr,tblptrl
  3247  0057CA  C00A  FFF7         	movff	disk_writep@wr+1,tblptrh
  3248  0057CE  C00B  FFF8         	movff	disk_writep@wr+2,tblptru
  3249  0057D2  0008               	tblrd		*
  3250  0057D4  50F5               	movf	tablat,w,c
  3251  0057D6  0900               	iorlw	0
  3252  0057D8  B4D8               	btfsc	status,2,c
  3253  0057DA  D011               	goto	l3640
  3254                           
  3255                           ;diskio.c: 288: {
  3256                           ;diskio.c: 289: WriteSPI_(*wr);
  3257  0057DC  C009  FFF6         	movff	disk_writep@wr,tblptrl
  3258  0057E0  C00A  FFF7         	movff	disk_writep@wr+1,tblptrh
  3259  0057E4  C00B  FFF8         	movff	disk_writep@wr+2,tblptru
  3260  0057E8  0008               	tblrd		*
  3261  0057EA  50F5               	movf	tablat,w,c
  3262  0057EC  EC1C  F028         	call	_WriteSPI_
  3263                           
  3264                           ;diskio.c: 290: wr++;
  3265  0057F0  0E01               	movlw	1
  3266  0057F2  2609               	addwf	disk_writep@wr,f,c
  3267  0057F4  0E00               	movlw	0
  3268  0057F6  220A               	addwfc	disk_writep@wr+1,f,c
  3269  0057F8  0E00               	movlw	0
  3270  0057FA  220B               	addwfc	disk_writep@wr+2,f,c
  3271                           
  3272                           ;diskio.c: 291: }
  3273  0057FC  D003               	goto	l3642
  3274  0057FE                     l3640:
  3275                           
  3276                           ;diskio.c: 292: else
  3277                           ;diskio.c: 293: WriteSPI_(0x00);
  3278  0057FE  0E00               	movlw	0
  3279  005800  EC1C  F028         	call	_WriteSPI_
  3280  005804                     l3642:
  3281  005804  4A16               	infsnz	disk_writep@j,f,c
  3282  005806  2A17               	incf	disk_writep@j+1,f,c
  3283  005808  D7D6               	goto	L1
  3284  00580A                     l3646:
  3285                           
  3286                           ;diskio.c: 294: }
  3287                           ;diskio.c: 295: WriteSPI_(0XFF);
  3288  00580A  0EFF               	movlw	255
  3289  00580C  EC1C  F028         	call	_WriteSPI_
  3290                           
  3291                           ;diskio.c: 296: WriteSPI_(0XFF);
  3292  005810  0EFF               	movlw	255
  3293  005812  EC1C  F028         	call	_WriteSPI_
  3294                           
  3295                           ;diskio.c: 298: proceed();
  3296  005816  ECF7  F027         	call	_proceed	;wreg free
  3297                           
  3298                           ;diskio.c: 300: Delay_s(1);
  3299  00581A  0E01               	movlw	1
  3300  00581C  EC4E  F028         	call	_Delay_s
  3301                           
  3302                           ;diskio.c: 301: dummy_clocks(8);
  3303  005820  0E00               	movlw	0
  3304  005822  6E05               	movwf	dummy_clocks@n+1,c
  3305  005824  0E08               	movlw	8
  3306  005826  6E04               	movwf	dummy_clocks@n,c
  3307  005828  ECAD  F028         	call	_dummy_clocks	;wreg free
  3308                           
  3309                           ;diskio.c: 303: Command(0X4D,0X00000000,0X00);
  3310  00582C  0E00               	movlw	0
  3311  00582E  6E03               	movwf	Command@arg,c
  3312  005830  0E00               	movlw	0
  3313  005832  6E04               	movwf	Command@arg+1,c
  3314  005834  0E00               	movlw	0
  3315  005836  6E05               	movwf	Command@arg+2,c
  3316  005838  0E00               	movlw	0
  3317  00583A  6E06               	movwf	Command@arg+3,c
  3318  00583C  0E00               	movlw	0
  3319  00583E  6E07               	movwf	Command@CRCbits,c
  3320  005840  0E4D               	movlw	77
  3321  005842  EC78  F028         	call	_Command
  3322                           
  3323                           ;diskio.c: 304: proceed();
  3324  005846  ECF7  F027         	call	_proceed	;wreg free
  3325  00584A                     l3656:
  3326                           
  3327                           ;diskio.c: 306: buff = response();
  3328  00584A  ECFD  F027         	call	_response	;wreg free
  3329  00584E  6E18               	movwf	disk_writep@buff,c
  3330                           
  3331                           ;diskio.c: 307: }while(buff!=0x00);
  3332  005850  6618               	tstfsz	disk_writep@buff,c
  3333  005852  D7FB               	goto	l3656
  3334                           
  3335                           ;diskio.c: 309: return RES_OK;
  3336  005854  0E00               	movlw	0
  3337  005856  0012               	return	
  3338  005858                     __end_of_disk_writep:
  3339                           	opt stack 0
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           postinc0	equ	0xFEE
  3345                           wreg	equ	0xFE8
  3346                           postdec1	equ	0xFE5
  3347                           fsr1h	equ	0xFE2
  3348                           fsr1l	equ	0xFE1
  3349                           indf2	equ	0xFDF
  3350                           postinc2	equ	0xFDE
  3351                           postdec2	equ	0xFDD
  3352                           plusw2	equ	0xFDB
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function _pf_read *****************
  3358 ;; Defined at:
  3359 ;;		line 863 in file "pff.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  buff            2   70[COMRAM] PTR void 
  3362 ;;		 -> data_buffer_32(32), 
  3363 ;;  btr             2   72[COMRAM] unsigned int 
  3364 ;;  br              2   74[COMRAM] PTR unsigned int 
  3365 ;;		 -> main@br(2), 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;  clst            4   13[BANK0 ] unsigned long 
  3368 ;;  remain          4    9[BANK0 ] unsigned long 
  3369 ;;  sect            4    5[BANK0 ] unsigned long 
  3370 ;;  fs              2   20[BANK0 ] PTR struct .
  3371 ;;		 -> main@fs(42), NULL(0), 
  3372 ;;  rcnt            2   18[BANK0 ] unsigned int 
  3373 ;;  rbuff           2    0[BANK0 ] PTR unsigned char 
  3374 ;;		 -> data_buffer_32(32), 
  3375 ;;  cs              1   17[BANK0 ] unsigned char 
  3376 ;;  dr              1    4[BANK0 ] enum E73
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      enum E43
  3379 ;; Registers used:
  3380 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3386 ;;      Params:         6       0       0       0       0       0       0       0       0
  3387 ;;      Locals:         0      22       0       0       0       0       0       0       0
  3388 ;;      Temps:          8       0       0       0       0       0       0       0       0
  3389 ;;      Totals:        14      22       0       0       0       0       0       0       0
  3390 ;;Total ram usage:       36 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    6
  3393 ;; This function calls:
  3394 ;;		_clust2sect
  3395 ;;		_disk_readp
  3396 ;;		_get_fat
  3397 ;; This function is called by:
  3398 ;;		_main
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text6
  3403  006C3C                     __ptext6:
  3404                           	opt stack 0
  3405  006C3C                     _pf_read:
  3406                           	opt stack 24
  3407                           
  3408                           ;pff.c: 869: DRESULT dr;
  3409                           ;pff.c: 870: DWORD clst;
  3410                           ;pff.c: 871: DWORD sect, remain;
  3411                           ;pff.c: 872: UINT rcnt;
  3412                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  3413                           
  3414                           ;incstack = 0
  3415  006C3C  0100               	movlb	0	; () banked
  3416  006C3E  C048  F061         	movff	pf_read@buff+1,pf_read@rbuff+1
  3417  006C42  0100               	movlb	0	; () banked
  3418  006C44  C047  F060         	movff	pf_read@buff,pf_read@rbuff
  3419                           
  3420                           ;pff.c: 874: FATFS *fs = FatFs;
  3421  006C48  0100               	movlb	0	; () banked
  3422  006C4A  C0F4  F075         	movff	_FatFs+1,pf_read@fs+1
  3423  006C4E  0100               	movlb	0	; () banked
  3424  006C50  C0F3  F074         	movff	_FatFs,pf_read@fs
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;pff.c: 877: *br = 0;
  3428  006C54  C04B  FFD9         	movff	pf_read@br,fsr2l
  3429  006C58  C04C  FFDA         	movff	pf_read@br+1,fsr2h
  3430  006C5C  0E00               	movlw	0
  3431  006C5E  6EDE               	movwf	postinc2,c
  3432  006C60  0E00               	movlw	0
  3433  006C62  6EDD               	movwf	postdec2,c
  3434                           
  3435                           ; BSR set to: 0
  3436                           ;pff.c: 878: if (!fs) return FR_NOT_ENABLED;
  3437  006C64  0100               	movlb	0	; () banked
  3438  006C66  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3439  006C68  1174               	iorwf	pf_read@fs& (0+255),w,b
  3440  006C6A  A4D8               	btfss	status,2,c
  3441  006C6C  D002               	goto	l3936
  3442                           
  3443                           ; BSR set to: 0
  3444  006C6E  0E05               	movlw	5
  3445  006C70  D212               	goto	l188
  3446  006C72                     l3936:
  3447                           
  3448                           ; BSR set to: 0
  3449                           ;pff.c: 879: if (!(fs->flag & 0x01))
  3450  006C72  0100               	movlb	0	; () banked
  3451  006C74  EE20 F001          	lfsr	2,1
  3452  006C78  0100               	movlb	0	; () banked
  3453  006C7A  5174               	movf	pf_read@fs& (0+255),w,b
  3454  006C7C  26D9               	addwf	fsr2l,f,c
  3455  006C7E  0100               	movlb	0	; () banked
  3456  006C80  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3457  006C82  22DA               	addwfc	fsr2h,f,c
  3458  006C84  50DF               	movf	indf2,w,c
  3459  006C86  6E4D               	movwf	??_pf_read& (0+255),c
  3460  006C88  B04D               	btfsc	??_pf_read,0,c
  3461  006C8A  D002               	goto	l3942
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;pff.c: 880: return FR_NOT_OPENED;
  3465  006C8C  0E04               	movlw	4
  3466  006C8E  D203               	goto	l188
  3467  006C90                     l3942:
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;pff.c: 882: remain = fs->fsize - fs->fptr;
  3471  006C90  0100               	movlb	0	; () banked
  3472  006C92  EE20 F01A          	lfsr	2,26
  3473  006C96  0100               	movlb	0	; () banked
  3474  006C98  5174               	movf	pf_read@fs& (0+255),w,b
  3475  006C9A  26D9               	addwf	fsr2l,f,c
  3476  006C9C  0100               	movlb	0	; () banked
  3477  006C9E  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3478  006CA0  22DA               	addwfc	fsr2h,f,c
  3479  006CA2  CFDE F04D          	movff	postinc2,??_pf_read
  3480  006CA6  CFDE F04E          	movff	postinc2,??_pf_read+1
  3481  006CAA  CFDE F04F          	movff	postinc2,??_pf_read+2
  3482  006CAE  CFDE F050          	movff	postinc2,??_pf_read+3
  3483  006CB2  0100               	movlb	0	; () banked
  3484  006CB4  EE20 F016          	lfsr	2,22
  3485  006CB8  0100               	movlb	0	; () banked
  3486  006CBA  5174               	movf	pf_read@fs& (0+255),w,b
  3487  006CBC  26D9               	addwf	fsr2l,f,c
  3488  006CBE  0100               	movlb	0	; () banked
  3489  006CC0  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3490  006CC2  22DA               	addwfc	fsr2h,f,c
  3491  006CC4  CFDE F051          	movff	postinc2,??_pf_read+4
  3492  006CC8  CFDE F052          	movff	postinc2,??_pf_read+5
  3493  006CCC  CFDE F053          	movff	postinc2,??_pf_read+6
  3494  006CD0  CFDE F054          	movff	postinc2,??_pf_read+7
  3495  006CD4  1E51               	comf	??_pf_read+4,f,c
  3496  006CD6  1E52               	comf	??_pf_read+5,f,c
  3497  006CD8  1E53               	comf	??_pf_read+6,f,c
  3498  006CDA  1E54               	comf	??_pf_read+7,f,c
  3499  006CDC  2A51               	incf	??_pf_read+4,f,c
  3500  006CDE  0E00               	movlw	0
  3501  006CE0  2252               	addwfc	??_pf_read+5,f,c
  3502  006CE2  2253               	addwfc	??_pf_read+6,f,c
  3503  006CE4  2254               	addwfc	??_pf_read+7,f,c
  3504  006CE6  504D               	movf	??_pf_read,w,c
  3505  006CE8  2451               	addwf	??_pf_read+4,w,c
  3506  006CEA  0100               	movlb	0	; () banked
  3507  006CEC  6F69               	movwf	pf_read@remain& (0+255),b
  3508  006CEE  504E               	movf	??_pf_read+1,w,c
  3509  006CF0  2052               	addwfc	??_pf_read+5,w,c
  3510  006CF2  0100               	movlb	0	; () banked
  3511  006CF4  6F6A               	movwf	(pf_read@remain+1)& (0+255),b
  3512  006CF6  504F               	movf	??_pf_read+2,w,c
  3513  006CF8  2053               	addwfc	??_pf_read+6,w,c
  3514  006CFA  0100               	movlb	0	; () banked
  3515  006CFC  6F6B               	movwf	(pf_read@remain+2)& (0+255),b
  3516  006CFE  5050               	movf	??_pf_read+3,w,c
  3517  006D00  2054               	addwfc	??_pf_read+7,w,c
  3518  006D02  0100               	movlb	0	; () banked
  3519  006D04  6F6C               	movwf	(pf_read@remain+3)& (0+255),b
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;pff.c: 883: if (btr > remain) btr = (UINT)remain;
  3523  006D06  5049               	movf	pf_read@btr,w,c
  3524  006D08  6E4D               	movwf	??_pf_read& (0+255),c
  3525  006D0A  504A               	movf	pf_read@btr+1,w,c
  3526  006D0C  6E4E               	movwf	(??_pf_read+1)& (0+255),c
  3527  006D0E  6A4F               	clrf	(??_pf_read+2)& (0+255),c
  3528  006D10  6A50               	clrf	(??_pf_read+3)& (0+255),c
  3529  006D12  504D               	movf	??_pf_read,w,c
  3530  006D14  0100               	movlb	0	; () banked
  3531  006D16  5D69               	subwf	pf_read@remain& (0+255),w,b
  3532  006D18  504E               	movf	??_pf_read+1,w,c
  3533  006D1A  0100               	movlb	0	; () banked
  3534  006D1C  596A               	subwfb	(pf_read@remain+1)& (0+255),w,b
  3535  006D1E  504F               	movf	??_pf_read+2,w,c
  3536  006D20  0100               	movlb	0	; () banked
  3537  006D22  596B               	subwfb	(pf_read@remain+2)& (0+255),w,b
  3538  006D24  5050               	movf	??_pf_read+3,w,c
  3539  006D26  0100               	movlb	0	; () banked
  3540  006D28  596C               	subwfb	(pf_read@remain+3)& (0+255),w,b
  3541  006D2A  B0D8               	btfsc	status,0,c
  3542  006D2C  D1AF               	goto	l4010
  3543                           
  3544                           ; BSR set to: 0
  3545  006D2E  C069  F049         	movff	pf_read@remain,pf_read@btr
  3546  006D32  C06A  F04A         	movff	pf_read@remain+1,pf_read@btr+1
  3547  006D36  D1AA               	goto	l4010
  3548  006D38                     l3948:
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;pff.c: 886: if ((fs->fptr % 512) == 0) {
  3552  006D38  0100               	movlb	0	; () banked
  3553  006D3A  EE20 F016          	lfsr	2,22
  3554  006D3E  0100               	movlb	0	; () banked
  3555  006D40  5174               	movf	pf_read@fs& (0+255),w,b
  3556  006D42  26D9               	addwf	fsr2l,f,c
  3557  006D44  0100               	movlb	0	; () banked
  3558  006D46  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3559  006D48  22DA               	addwfc	fsr2h,f,c
  3560  006D4A  0EFF               	movlw	255
  3561  006D4C  14DE               	andwf	postinc2,w,c
  3562  006D4E  6E4D               	movwf	??_pf_read& (0+255),c
  3563  006D50  0E01               	movlw	1
  3564  006D52  14DE               	andwf	postinc2,w,c
  3565  006D54  6E4E               	movwf	(??_pf_read+1)& (0+255),c
  3566  006D56  0E00               	movlw	0
  3567  006D58  14DE               	andwf	postinc2,w,c
  3568  006D5A  6E4F               	movwf	(??_pf_read+2)& (0+255),c
  3569  006D5C  0E00               	movlw	0
  3570  006D5E  14DE               	andwf	postinc2,w,c
  3571  006D60  6E50               	movwf	(??_pf_read+3)& (0+255),c
  3572  006D62  5050               	movf	??_pf_read+3,w,c
  3573  006D64  104D               	iorwf	??_pf_read,w,c
  3574  006D66  104E               	iorwf	??_pf_read+1,w,c
  3575  006D68  104F               	iorwf	??_pf_read+2,w,c
  3576  006D6A  A4D8               	btfss	status,2,c
  3577  006D6C  D0E2               	goto	l193
  3578                           
  3579                           ; BSR set to: 0
  3580                           ;pff.c: 887: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  3581  006D6E  0100               	movlb	0	; () banked
  3582  006D70  EE20 F016          	lfsr	2,22
  3583  006D74  0100               	movlb	0	; () banked
  3584  006D76  5174               	movf	pf_read@fs& (0+255),w,b
  3585  006D78  26D9               	addwf	fsr2l,f,c
  3586  006D7A  0100               	movlb	0	; () banked
  3587  006D7C  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3588  006D7E  22DA               	addwfc	fsr2h,f,c
  3589  006D80  CFDE F04D          	movff	postinc2,??_pf_read
  3590  006D84  CFDE F04E          	movff	postinc2,??_pf_read+1
  3591  006D88  CFDE F04F          	movff	postinc2,??_pf_read+2
  3592  006D8C  CFDE F050          	movff	postinc2,??_pf_read+3
  3593  006D90  0E0A               	movlw	10
  3594  006D92  D005               	goto	u3890
  3595  006D94                     u3895:
  3596  006D94  90D8               	bcf	status,0,c
  3597  006D96  3250               	rrcf	??_pf_read+3,f,c
  3598  006D98  324F               	rrcf	??_pf_read+2,f,c
  3599  006D9A  324E               	rrcf	??_pf_read+1,f,c
  3600  006D9C  324D               	rrcf	??_pf_read,f,c
  3601  006D9E                     u3890:
  3602  006D9E  2EE8               	decfsz	wreg,f,c
  3603  006DA0  D7F9               	goto	u3895
  3604  006DA2  0100               	movlb	0	; () banked
  3605  006DA4  EE20 F002          	lfsr	2,2
  3606  006DA8  0100               	movlb	0	; () banked
  3607  006DAA  5174               	movf	pf_read@fs& (0+255),w,b
  3608  006DAC  26D9               	addwf	fsr2l,f,c
  3609  006DAE  0100               	movlb	0	; () banked
  3610  006DB0  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3611  006DB2  22DA               	addwfc	fsr2h,f,c
  3612  006DB4  50DF               	movf	indf2,w,c
  3613  006DB6  6E51               	movwf	(??_pf_read+4)& (0+255),c
  3614  006DB8  0451               	decf	??_pf_read+4,w,c
  3615  006DBA  144D               	andwf	??_pf_read,w,c
  3616  006DBC  0100               	movlb	0	; () banked
  3617  006DBE  6F71               	movwf	pf_read@cs& (0+255),b
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;pff.c: 888: if (!cs) {
  3621  006DC0  0100               	movlb	0	; () banked
  3622  006DC2  6771               	tstfsz	pf_read@cs& (0+255),b
  3623  006DC4  D070               	goto	l3970
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;pff.c: 889: if (fs->fptr == 0)
  3627  006DC6  0100               	movlb	0	; () banked
  3628  006DC8  EE20 F016          	lfsr	2,22
  3629  006DCC  0100               	movlb	0	; () banked
  3630  006DCE  5174               	movf	pf_read@fs& (0+255),w,b
  3631  006DD0  26D9               	addwf	fsr2l,f,c
  3632  006DD2  0100               	movlb	0	; () banked
  3633  006DD4  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3634  006DD6  22DA               	addwfc	fsr2h,f,c
  3635  006DD8  CFDE F04D          	movff	postinc2,??_pf_read
  3636  006DDC  CFDE F04E          	movff	postinc2,??_pf_read+1
  3637  006DE0  CFDE F04F          	movff	postinc2,??_pf_read+2
  3638  006DE4  CFDE F050          	movff	postinc2,??_pf_read+3
  3639  006DE8  5050               	movf	??_pf_read+3,w,c
  3640  006DEA  104D               	iorwf	??_pf_read,w,c
  3641  006DEC  104E               	iorwf	??_pf_read+1,w,c
  3642  006DEE  104F               	iorwf	??_pf_read+2,w,c
  3643  006DF0  A4D8               	btfss	status,2,c
  3644  006DF2  D016               	goto	l3958
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;pff.c: 890: clst = fs->org_clust;
  3648  006DF4  0100               	movlb	0	; () banked
  3649  006DF6  EE20 F01E          	lfsr	2,30
  3650  006DFA  0100               	movlb	0	; () banked
  3651  006DFC  5174               	movf	pf_read@fs& (0+255),w,b
  3652  006DFE  26D9               	addwf	fsr2l,f,c
  3653  006E00  0100               	movlb	0	; () banked
  3654  006E02  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3655  006E04  22DA               	addwfc	fsr2h,f,c
  3656  006E06  0100               	movlb	0	; () banked
  3657  006E08  CFDE F06D          	movff	postinc2,pf_read@clst
  3658  006E0C  0100               	movlb	0	; () banked
  3659  006E0E  CFDE F06E          	movff	postinc2,pf_read@clst+1
  3660  006E12  0100               	movlb	0	; () banked
  3661  006E14  CFDE F06F          	movff	postinc2,pf_read@clst+2
  3662  006E18  0100               	movlb	0	; () banked
  3663  006E1A  CFDE F070          	movff	postinc2,pf_read@clst+3
  3664  006E1E  D01B               	goto	l3960
  3665  006E20                     l3958:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;pff.c: 891: else
  3669                           ;pff.c: 892: clst = get_fat(fs->curr_clust);
  3670  006E20  0100               	movlb	0	; () banked
  3671  006E22  EE20 F022          	lfsr	2,34
  3672  006E26  0100               	movlb	0	; () banked
  3673  006E28  5174               	movf	pf_read@fs& (0+255),w,b
  3674  006E2A  26D9               	addwf	fsr2l,f,c
  3675  006E2C  0100               	movlb	0	; () banked
  3676  006E2E  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3677  006E30  22DA               	addwfc	fsr2h,f,c
  3678  006E32  CFDE F01F          	movff	postinc2,get_fat@clst
  3679  006E36  CFDE F020          	movff	postinc2,get_fat@clst+1
  3680  006E3A  CFDE F021          	movff	postinc2,get_fat@clst+2
  3681  006E3E  CFDE F022          	movff	postinc2,get_fat@clst+3
  3682  006E42  EC35  F034         	call	_get_fat	;wreg free
  3683  006E46  C01F  F06D         	movff	?_get_fat,pf_read@clst
  3684  006E4A  C020  F06E         	movff	?_get_fat+1,pf_read@clst+1
  3685  006E4E  C021  F06F         	movff	?_get_fat+2,pf_read@clst+2
  3686  006E52  C022  F070         	movff	?_get_fat+3,pf_read@clst+3
  3687  006E56                     l3960:
  3688                           
  3689                           ;pff.c: 893: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  3690  006E56  0E02               	movlw	2
  3691  006E58  6E4D               	movwf	??_pf_read& (0+255),c
  3692  006E5A  6A4E               	clrf	(??_pf_read+1)& (0+255),c
  3693  006E5C  6A4F               	clrf	(??_pf_read+2)& (0+255),c
  3694  006E5E  6A50               	clrf	(??_pf_read+3)& (0+255),c
  3695  006E60  504D               	movf	??_pf_read,w,c
  3696  006E62  0100               	movlb	0	; () banked
  3697  006E64  5D6D               	subwf	pf_read@clst& (0+255),w,b
  3698  006E66  504E               	movf	??_pf_read+1,w,c
  3699  006E68  0100               	movlb	0	; () banked
  3700  006E6A  596E               	subwfb	(pf_read@clst+1)& (0+255),w,b
  3701  006E6C  504F               	movf	??_pf_read+2,w,c
  3702  006E6E  0100               	movlb	0	; () banked
  3703  006E70  596F               	subwfb	(pf_read@clst+2)& (0+255),w,b
  3704  006E72  5050               	movf	??_pf_read+3,w,c
  3705  006E74  0100               	movlb	0	; () banked
  3706  006E76  5970               	subwfb	(pf_read@clst+3)& (0+255),w,b
  3707  006E78  A0D8               	btfss	status,0,c
  3708  006E7A  D0CF               	goto	u3960
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;pff.c: 894: fs->curr_clust = clst;
  3712                           
  3713                           ; BSR set to: 0
  3714                           
  3715                           ; BSR set to: 0
  3716                           
  3717                           ; BSR set to: 0
  3718                           
  3719                           ; BSR set to: 0
  3720  006E7C  0100               	movlb	0	; () banked
  3721  006E7E  EE20 F022          	lfsr	2,34
  3722  006E82  0100               	movlb	0	; () banked
  3723  006E84  5174               	movf	pf_read@fs& (0+255),w,b
  3724  006E86  26D9               	addwf	fsr2l,f,c
  3725  006E88  0100               	movlb	0	; () banked
  3726  006E8A  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3727  006E8C  22DA               	addwfc	fsr2h,f,c
  3728  006E8E  0100               	movlb	0	; () banked
  3729  006E90  C06D  FFDE         	movff	pf_read@clst,postinc2
  3730  006E94  0100               	movlb	0	; () banked
  3731  006E96  C06E  FFDE         	movff	pf_read@clst+1,postinc2
  3732  006E9A  0100               	movlb	0	; () banked
  3733  006E9C  C06F  FFDE         	movff	pf_read@clst+2,postinc2
  3734  006EA0  0100               	movlb	0	; () banked
  3735  006EA2  C070  FFDE         	movff	pf_read@clst+3,postinc2
  3736  006EA6                     l3970:
  3737                           
  3738                           ; BSR set to: 0
  3739                           ;pff.c: 895: }
  3740                           ;pff.c: 896: sect = clust2sect(fs->curr_clust);
  3741  006EA6  0100               	movlb	0	; () banked
  3742  006EA8  EE20 F022          	lfsr	2,34
  3743  006EAC  0100               	movlb	0	; () banked
  3744  006EAE  5174               	movf	pf_read@fs& (0+255),w,b
  3745  006EB0  26D9               	addwf	fsr2l,f,c
  3746  006EB2  0100               	movlb	0	; () banked
  3747  006EB4  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3748  006EB6  22DA               	addwfc	fsr2h,f,c
  3749  006EB8  CFDE F00D          	movff	postinc2,clust2sect@clst
  3750  006EBC  CFDE F00E          	movff	postinc2,clust2sect@clst+1
  3751  006EC0  CFDE F00F          	movff	postinc2,clust2sect@clst+2
  3752  006EC4  CFDE F010          	movff	postinc2,clust2sect@clst+3
  3753  006EC8  ECB5  F02A         	call	_clust2sect	;wreg free
  3754  006ECC  C00D  F065         	movff	?_clust2sect,pf_read@sect
  3755  006ED0  C00E  F066         	movff	?_clust2sect+1,pf_read@sect+1
  3756  006ED4  C00F  F067         	movff	?_clust2sect+2,pf_read@sect+2
  3757  006ED8  C010  F068         	movff	?_clust2sect+3,pf_read@sect+3
  3758                           
  3759                           ;pff.c: 897: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  3760  006EDC  0100               	movlb	0	; () banked
  3761  006EDE  5168               	movf	(pf_read@sect+3)& (0+255),w,b
  3762  006EE0  1165               	iorwf	pf_read@sect& (0+255),w,b
  3763  006EE2  1166               	iorwf	(pf_read@sect+1)& (0+255),w,b
  3764  006EE4  1167               	iorwf	(pf_read@sect+2)& (0+255),w,b
  3765  006EE6  B4D8               	btfsc	status,2,c
  3766  006EE8  D098               	goto	u3960
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;pff.c: 898: fs->dsect = sect + cs;
  3770                           
  3771                           ; BSR set to: 0
  3772                           
  3773                           ; BSR set to: 0
  3774                           
  3775                           ; BSR set to: 0
  3776                           
  3777                           ; BSR set to: 0
  3778  006EEA  0100               	movlb	0	; () banked
  3779  006EEC  5171               	movf	pf_read@cs& (0+255),w,b
  3780  006EEE  0100               	movlb	0	; () banked
  3781  006EF0  2565               	addwf	pf_read@sect& (0+255),w,b
  3782  006EF2  6E4D               	movwf	??_pf_read& (0+255),c
  3783  006EF4  0E00               	movlw	0
  3784  006EF6  0100               	movlb	0	; () banked
  3785  006EF8  2166               	addwfc	(pf_read@sect+1)& (0+255),w,b
  3786  006EFA  6E4E               	movwf	(??_pf_read+1)& (0+255),c
  3787  006EFC  0E00               	movlw	0
  3788  006EFE  0100               	movlb	0	; () banked
  3789  006F00  2167               	addwfc	(pf_read@sect+2)& (0+255),w,b
  3790  006F02  6E4F               	movwf	(??_pf_read+2)& (0+255),c
  3791  006F04  0E00               	movlw	0
  3792  006F06  0100               	movlb	0	; () banked
  3793  006F08  2168               	addwfc	(pf_read@sect+3)& (0+255),w,b
  3794  006F0A  6E50               	movwf	(??_pf_read+3)& (0+255),c
  3795  006F0C  0100               	movlb	0	; () banked
  3796  006F0E  EE20 F026          	lfsr	2,38
  3797  006F12  0100               	movlb	0	; () banked
  3798  006F14  5174               	movf	pf_read@fs& (0+255),w,b
  3799  006F16  26D9               	addwf	fsr2l,f,c
  3800  006F18  0100               	movlb	0	; () banked
  3801  006F1A  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3802  006F1C  22DA               	addwfc	fsr2h,f,c
  3803  006F1E  C04D  FFDE         	movff	??_pf_read,postinc2
  3804  006F22  C04E  FFDE         	movff	??_pf_read+1,postinc2
  3805  006F26  C04F  FFDE         	movff	??_pf_read+2,postinc2
  3806  006F2A  C050  FFDD         	movff	??_pf_read+3,postdec2
  3807  006F2E  06D9               	decf	fsr2l,f,c
  3808  006F30  06D9               	decf	fsr2l,f,c
  3809  006F32                     l193:
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;pff.c: 899: }
  3813                           ;pff.c: 900: rcnt = 512 - (UINT)fs->fptr % 512;
  3814  006F32  0EFF               	movlw	255
  3815  006F34  6E4D               	movwf	??_pf_read& (0+255),c
  3816  006F36  0E01               	movlw	1
  3817  006F38  6E4E               	movwf	(??_pf_read+1)& (0+255),c
  3818  006F3A  0100               	movlb	0	; () banked
  3819  006F3C  EE20 F016          	lfsr	2,22
  3820  006F40  0100               	movlb	0	; () banked
  3821  006F42  5174               	movf	pf_read@fs& (0+255),w,b
  3822  006F44  26D9               	addwf	fsr2l,f,c
  3823  006F46  0100               	movlb	0	; () banked
  3824  006F48  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3825  006F4A  22DA               	addwfc	fsr2h,f,c
  3826  006F4C  CFDE F04F          	movff	postinc2,??_pf_read+2
  3827  006F50  CFDD F050          	movff	postdec2,??_pf_read+3
  3828  006F54  504D               	movf	??_pf_read,w,c
  3829  006F56  164F               	andwf	??_pf_read+2,f,c
  3830  006F58  504E               	movf	??_pf_read+1,w,c
  3831  006F5A  1650               	andwf	??_pf_read+3,f,c
  3832  006F5C  1E4F               	comf	??_pf_read+2,f,c
  3833  006F5E  1E50               	comf	??_pf_read+3,f,c
  3834  006F60  4A4F               	infsnz	??_pf_read+2,f,c
  3835  006F62  2A50               	incf	??_pf_read+3,f,c
  3836  006F64  0E00               	movlw	0
  3837  006F66  244F               	addwf	??_pf_read+2,w,c
  3838  006F68  0100               	movlb	0	; () banked
  3839  006F6A  6F72               	movwf	pf_read@rcnt& (0+255),b
  3840  006F6C  0E02               	movlw	2
  3841  006F6E  2050               	addwfc	??_pf_read+3,w,c
  3842  006F70  0100               	movlb	0	; () banked
  3843  006F72  6F73               	movwf	(pf_read@rcnt+1)& (0+255),b
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;pff.c: 901: if (rcnt > btr) rcnt = btr;
  3847  006F74  0100               	movlb	0	; () banked
  3848  006F76  5172               	movf	pf_read@rcnt& (0+255),w,b
  3849  006F78  5C49               	subwf	pf_read@btr,w,c
  3850  006F7A  0100               	movlb	0	; () banked
  3851  006F7C  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3852  006F7E  584A               	subwfb	pf_read@btr+1,w,c
  3853  006F80  B0D8               	btfsc	status,0,c
  3854  006F82  D004               	goto	l3986
  3855                           
  3856                           ; BSR set to: 0
  3857  006F84  C049  F072         	movff	pf_read@btr,pf_read@rcnt
  3858  006F88  C04A  F073         	movff	pf_read@btr+1,pf_read@rcnt+1
  3859  006F8C                     l3986:
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;pff.c: 902: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  3863  006F8C  5048               	movf	pf_read@buff+1,w,c
  3864  006F8E  1047               	iorwf	pf_read@buff,w,c
  3865  006F90  B4D8               	btfsc	status,2,c
  3866  006F92  D007               	goto	l3990
  3867                           
  3868                           ; BSR set to: 0
  3869  006F94  0100               	movlb	0	; () banked
  3870  006F96  C061  F063         	movff	pf_read@rbuff+1,_pf_read$366+1
  3871  006F9A  0100               	movlb	0	; () banked
  3872  006F9C  C060  F062         	movff	pf_read@rbuff,_pf_read$366
  3873  006FA0  D006               	goto	l3992
  3874  006FA2                     l3990:
  3875                           
  3876                           ; BSR set to: 0
  3877  006FA2  0E00               	movlw	0
  3878  006FA4  0100               	movlb	0	; () banked
  3879  006FA6  6F63               	movwf	(_pf_read$366+1)& (0+255),b
  3880  006FA8  0E00               	movlw	0
  3881  006FAA  0100               	movlb	0	; () banked
  3882  006FAC  6F62               	movwf	_pf_read$366& (0+255),b
  3883  006FAE                     l3992:
  3884                           
  3885                           ; BSR set to: 0
  3886  006FAE  0100               	movlb	0	; () banked
  3887  006FB0  C063  F00A         	movff	_pf_read$366+1,disk_readp@rd+1
  3888  006FB4  0100               	movlb	0	; () banked
  3889  006FB6  C062  F009         	movff	_pf_read$366,disk_readp@rd
  3890  006FBA  0100               	movlb	0	; () banked
  3891  006FBC  EE20 F026          	lfsr	2,38
  3892  006FC0  0100               	movlb	0	; () banked
  3893  006FC2  5174               	movf	pf_read@fs& (0+255),w,b
  3894  006FC4  26D9               	addwf	fsr2l,f,c
  3895  006FC6  0100               	movlb	0	; () banked
  3896  006FC8  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3897  006FCA  22DA               	addwfc	fsr2h,f,c
  3898  006FCC  CFDE F00B          	movff	postinc2,disk_readp@sector
  3899  006FD0  CFDE F00C          	movff	postinc2,disk_readp@sector+1
  3900  006FD4  CFDE F00D          	movff	postinc2,disk_readp@sector+2
  3901  006FD8  CFDE F00E          	movff	postinc2,disk_readp@sector+3
  3902  006FDC  0100               	movlb	0	; () banked
  3903  006FDE  EE20 F016          	lfsr	2,22
  3904  006FE2  0100               	movlb	0	; () banked
  3905  006FE4  5174               	movf	pf_read@fs& (0+255),w,b
  3906  006FE6  26D9               	addwf	fsr2l,f,c
  3907  006FE8  0100               	movlb	0	; () banked
  3908  006FEA  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3909  006FEC  22DA               	addwfc	fsr2h,f,c
  3910  006FEE  CFDE F04D          	movff	postinc2,??_pf_read
  3911  006FF2  CFDD F04E          	movff	postdec2,??_pf_read+1
  3912  006FF6  0EFF               	movlw	255
  3913  006FF8  144D               	andwf	??_pf_read,w,c
  3914  006FFA  6E0F               	movwf	disk_readp@offset,c
  3915  006FFC  0E01               	movlw	1
  3916  006FFE  144E               	andwf	??_pf_read+1,w,c
  3917  007000  6E10               	movwf	disk_readp@offset+1,c
  3918  007002  C072  F011         	movff	pf_read@rcnt,disk_readp@count
  3919  007006  C073  F012         	movff	pf_read@rcnt+1,disk_readp@count+1
  3920  00700A  ECBA  F032         	call	_disk_readp	;wreg free
  3921  00700E  0100               	movlb	0	; () banked
  3922  007010  6F64               	movwf	pf_read@dr& (0+255),b
  3923                           
  3924                           ; BSR set to: 0
  3925                           ;pff.c: 903: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  3926  007012  0100               	movlb	0	; () banked
  3927  007014  5164               	movf	pf_read@dr& (0+255),w,b
  3928  007016  B4D8               	btfsc	status,2,c
  3929  007018  D00D               	goto	l4002
  3930  00701A                     u3960:
  3931                           
  3932                           ; BSR set to: 0
  3933  00701A  0100               	movlb	0	; () banked
  3934  00701C  EE20 F001          	lfsr	2,1
  3935  007020  0100               	movlb	0	; () banked
  3936  007022  5174               	movf	pf_read@fs& (0+255),w,b
  3937  007024  26D9               	addwf	fsr2l,f,c
  3938  007026  0100               	movlb	0	; () banked
  3939  007028  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3940  00702A  22DA               	addwfc	fsr2h,f,c
  3941  00702C  0E00               	movlw	0
  3942  00702E  6EDF               	movwf	indf2,c
  3943                           
  3944                           ; BSR set to: 0
  3945  007030  0E01               	movlw	1
  3946  007032  D031               	goto	l188
  3947  007034                     l4002:
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;pff.c: 904: fs->fptr += rcnt; rbuff += rcnt;
  3951  007034  0100               	movlb	0	; () banked
  3952  007036  EE20 F016          	lfsr	2,22
  3953  00703A  0100               	movlb	0	; () banked
  3954  00703C  5174               	movf	pf_read@fs& (0+255),w,b
  3955  00703E  26D9               	addwf	fsr2l,f,c
  3956  007040  0100               	movlb	0	; () banked
  3957  007042  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3958  007044  22DA               	addwfc	fsr2h,f,c
  3959  007046  0100               	movlb	0	; () banked
  3960  007048  5172               	movf	pf_read@rcnt& (0+255),w,b
  3961  00704A  26DE               	addwf	postinc2,f,c
  3962  00704C  0100               	movlb	0	; () banked
  3963  00704E  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3964  007050  22DE               	addwfc	postinc2,f,c
  3965  007052  0E00               	movlw	0
  3966  007054  22DE               	addwfc	postinc2,f,c
  3967  007056  22DD               	addwfc	postdec2,f,c
  3968  007058  52DD               	movf	postdec2,f,c
  3969  00705A  52DD               	movf	postdec2,f,c
  3970                           
  3971                           ; BSR set to: 0
  3972  00705C  0100               	movlb	0	; () banked
  3973  00705E  5172               	movf	pf_read@rcnt& (0+255),w,b
  3974  007060  0100               	movlb	0	; () banked
  3975  007062  2760               	addwf	pf_read@rbuff& (0+255),f,b
  3976  007064  0100               	movlb	0	; () banked
  3977  007066  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3978  007068  0100               	movlb	0	; () banked
  3979  00706A  2361               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  3980                           
  3981                           ; BSR set to: 0
  3982                           ;pff.c: 905: btr -= rcnt; *br += rcnt;
  3983  00706C  0100               	movlb	0	; () banked
  3984  00706E  5172               	movf	pf_read@rcnt& (0+255),w,b
  3985  007070  5E49               	subwf	pf_read@btr,f,c
  3986  007072  0100               	movlb	0	; () banked
  3987  007074  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3988  007076  5A4A               	subwfb	pf_read@btr+1,f,c
  3989                           
  3990                           ; BSR set to: 0
  3991  007078  C04B  FFD9         	movff	pf_read@br,fsr2l
  3992  00707C  C04C  FFDA         	movff	pf_read@br+1,fsr2h
  3993  007080  0100               	movlb	0	; () banked
  3994  007082  5172               	movf	pf_read@rcnt& (0+255),w,b
  3995  007084  26DE               	addwf	postinc2,f,c
  3996  007086  0100               	movlb	0	; () banked
  3997  007088  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3998  00708A  22DD               	addwfc	postdec2,f,c
  3999  00708C                     l4010:
  4000                           
  4001                           ; BSR set to: 0
  4002  00708C  504A               	movf	pf_read@btr+1,w,c
  4003  00708E  1049               	iorwf	pf_read@btr,w,c
  4004  007090  A4D8               	btfss	status,2,c
  4005  007092  D652               	goto	l3948
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;pff.c: 906: }
  4009                           ;pff.c: 908: return FR_OK;
  4010                           
  4011                           ; BSR set to: 0
  4012  007094  0E00               	movlw	0
  4013  007096                     l188:
  4014                           
  4015                           ; BSR set to: 0
  4016  007096  0012               	return	
  4017  007098                     __end_of_pf_read:
  4018                           	opt stack 0
  4019                           tblptru	equ	0xFF8
  4020                           tblptrh	equ	0xFF7
  4021                           tblptrl	equ	0xFF6
  4022                           tablat	equ	0xFF5
  4023                           postinc0	equ	0xFEE
  4024                           wreg	equ	0xFE8
  4025                           postdec1	equ	0xFE5
  4026                           fsr1h	equ	0xFE2
  4027                           fsr1l	equ	0xFE1
  4028                           indf2	equ	0xFDF
  4029                           postinc2	equ	0xFDE
  4030                           postdec2	equ	0xFDD
  4031                           plusw2	equ	0xFDB
  4032                           fsr2h	equ	0xFDA
  4033                           fsr2l	equ	0xFD9
  4034                           status	equ	0xFD8
  4035                           
  4036 ;; *************** function _pf_open *****************
  4037 ;; Defined at:
  4038 ;;		line 829 in file "pff.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  path            2   11[BANK0 ] PTR const unsigned char 
  4041 ;;		 -> STR_6(10), 
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;  dir            32   47[BANK0 ] unsigned char [32]
  4044 ;;  dj             16   82[BANK0 ] struct .
  4045 ;;  sp             12   35[BANK0 ] unsigned char [12]
  4046 ;;  fs              2   80[BANK0 ] PTR struct .
  4047 ;;		 -> main@fs(42), NULL(0), 
  4048 ;;  res             1   79[BANK0 ] enum E43
  4049 ;; Return value:  Size  Location     Type
  4050 ;;                  1    wreg      enum E43
  4051 ;; Registers used:
  4052 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4058 ;;      Params:         0       2       0       0       0       0       0       0       0
  4059 ;;      Locals:         0      63       0       0       0       0       0       0       0
  4060 ;;      Temps:          0      22       0       0       0       0       0       0       0
  4061 ;;      Totals:         0      87       0       0       0       0       0       0       0
  4062 ;;Total ram usage:       87 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    9
  4065 ;; This function calls:
  4066 ;;		_follow_path
  4067 ;;		_get_clust
  4068 ;; This function is called by:
  4069 ;;		_main
  4070 ;; This function uses a non-reentrant model
  4071 ;;
  4072                           
  4073                           	psect	text7
  4074  005F6C                     __ptext7:
  4075                           	opt stack 0
  4076  005F6C                     _pf_open:
  4077                           	opt stack 21
  4078                           
  4079                           ;pff.c: 833: FRESULT res;
  4080                           ;pff.c: 834: DIR dj;
  4081                           ;pff.c: 835: BYTE sp[12], dir[32];
  4082                           ;pff.c: 836: FATFS *fs = FatFs;
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;incstack = 0
  4086  005F6C  0100               	movlb	0	; () banked
  4087  005F6E  C0F4  F0B1         	movff	_FatFs+1,pf_open@fs+1
  4088  005F72  0100               	movlb	0	; () banked
  4089  005F74  C0F3  F0B0         	movff	_FatFs,pf_open@fs
  4090                           
  4091                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  4092  005F78  0100               	movlb	0	; () banked
  4093  005F7A  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4094  005F7C  11B0               	iorwf	pf_open@fs& (0+255),w,b
  4095  005F7E  A4D8               	btfss	status,2,c
  4096  005F80  D002               	goto	l3894
  4097                           
  4098                           ; BSR set to: 0
  4099  005F82  0E05               	movlw	5
  4100  005F84  D0EC               	goto	l180
  4101  005F86                     l3894:
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;pff.c: 840: fs->flag = 0;
  4105  005F86  0100               	movlb	0	; () banked
  4106  005F88  EE20 F001          	lfsr	2,1
  4107  005F8C  0100               	movlb	0	; () banked
  4108  005F8E  51B0               	movf	pf_open@fs& (0+255),w,b
  4109  005F90  26D9               	addwf	fsr2l,f,c
  4110  005F92  0100               	movlb	0	; () banked
  4111  005F94  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4112  005F96  22DA               	addwfc	fsr2h,f,c
  4113  005F98  0E00               	movlw	0
  4114  005F9A  6EDF               	movwf	indf2,c
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;pff.c: 841: dj.fn = sp;
  4118  005F9C  0100               	movlb	0	; () banked
  4119  005F9E  0E00               	movlw	high pf_open@sp
  4120  005FA0  0100               	movlb	0	; () banked
  4121  005FA2  6FB5               	movwf	(pf_open@dj+3)& (0+255),b
  4122  005FA4  0100               	movlb	0	; () banked
  4123  005FA6  0E83               	movlw	low pf_open@sp
  4124  005FA8  0100               	movlb	0	; () banked
  4125  005FAA  6FB4               	movwf	(pf_open@dj+2)& (0+255),b
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;pff.c: 842: res = follow_path(&dj, dir, "check.txt" );
  4129  005FAC  0100               	movlb	0	; () banked
  4130  005FAE  0E00               	movlw	high pf_open@dj
  4131  005FB0  0100               	movlb	0	; () banked
  4132  005FB2  6F61               	movwf	(follow_path@dj+1)& (0+255),b
  4133  005FB4  0100               	movlb	0	; () banked
  4134  005FB6  0EB2               	movlw	low pf_open@dj
  4135  005FB8  0100               	movlb	0	; () banked
  4136  005FBA  6F60               	movwf	follow_path@dj& (0+255),b
  4137  005FBC  0100               	movlb	0	; () banked
  4138  005FBE  0E00               	movlw	high pf_open@dir
  4139  005FC0  0100               	movlb	0	; () banked
  4140  005FC2  6F63               	movwf	(follow_path@dir+1)& (0+255),b
  4141  005FC4  0100               	movlb	0	; () banked
  4142  005FC6  0E8F               	movlw	low pf_open@dir
  4143  005FC8  0100               	movlb	0	; () banked
  4144  005FCA  6F62               	movwf	follow_path@dir& (0+255),b
  4145  005FCC  0E7F               	movlw	high STR_1
  4146  005FCE  0100               	movlb	0	; () banked
  4147  005FD0  6F65               	movwf	(follow_path@path+1)& (0+255),b
  4148  005FD2  0EE5               	movlw	low STR_1
  4149  005FD4  0100               	movlb	0	; () banked
  4150  005FD6  6F64               	movwf	follow_path@path& (0+255),b
  4151  005FD8  EC11  F02E         	call	_follow_path	;wreg free
  4152  005FDC  0100               	movlb	0	; () banked
  4153  005FDE  6FAF               	movwf	pf_open@res& (0+255),b
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;pff.c: 843: if (res != FR_OK) return res;
  4157  005FE0  0100               	movlb	0	; () banked
  4158  005FE2  51AF               	movf	pf_open@res& (0+255),w,b
  4159  005FE4  B4D8               	btfsc	status,2,c
  4160  005FE6  D003               	goto	l3906
  4161                           
  4162                           ; BSR set to: 0
  4163  005FE8  0100               	movlb	0	; () banked
  4164  005FEA  51AF               	movf	pf_open@res& (0+255),w,b
  4165  005FEC  D0B8               	goto	l180
  4166  005FEE                     l3906:
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  4170  005FEE  0100               	movlb	0	; () banked
  4171  005FF0  518F               	movf	pf_open@dir& (0+255),w,b
  4172  005FF2  B4D8               	btfsc	status,2,c
  4173  005FF4  D003               	goto	l3910
  4174                           
  4175                           ; BSR set to: 0
  4176  005FF6  0100               	movlb	0	; () banked
  4177  005FF8  A99A               	btfss	(pf_open@dir+11)& (0+255),4,b
  4178  005FFA  D002               	goto	l3914
  4179  005FFC                     l3910:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;pff.c: 845: return FR_NO_FILE;
  4183  005FFC  0E03               	movlw	3
  4184  005FFE  D0AF               	goto	l180
  4185  006000                     l3914:
  4186                           
  4187                           ; BSR set to: 0
  4188                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  4189  006000  0100               	movlb	0	; () banked
  4190  006002  0E00               	movlw	high pf_open@dir
  4191  006004  6E02               	movwf	get_clust@dir+1,c
  4192  006006  0100               	movlb	0	; () banked
  4193  006008  0E8F               	movlw	low pf_open@dir
  4194  00600A  6E01               	movwf	get_clust@dir,c
  4195  00600C  EC50  F02A         	call	_get_clust	;wreg free
  4196  006010  C001  F06D         	movff	?_get_clust,??_pf_open
  4197  006014  C002  F06E         	movff	?_get_clust+1,??_pf_open+1
  4198  006018  C003  F06F         	movff	?_get_clust+2,??_pf_open+2
  4199  00601C  C004  F070         	movff	?_get_clust+3,??_pf_open+3
  4200  006020  0100               	movlb	0	; () banked
  4201  006022  EE20 F01E          	lfsr	2,30
  4202  006026  0100               	movlb	0	; () banked
  4203  006028  51B0               	movf	pf_open@fs& (0+255),w,b
  4204  00602A  26D9               	addwf	fsr2l,f,c
  4205  00602C  0100               	movlb	0	; () banked
  4206  00602E  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4207  006030  22DA               	addwfc	fsr2h,f,c
  4208  006032  C06D  FFDE         	movff	??_pf_open,postinc2
  4209  006036  C06E  FFDE         	movff	??_pf_open+1,postinc2
  4210  00603A  C06F  FFDE         	movff	??_pf_open+2,postinc2
  4211  00603E  C070  FFDD         	movff	??_pf_open+3,postdec2
  4212  006042  06D9               	decf	fsr2l,f,c
  4213  006044  06D9               	decf	fsr2l,f,c
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  4217  006046  0100               	movlb	0	; () banked
  4218  006048  51AC               	movf	(pf_open@dir+29)& (0+255),w,b
  4219  00604A  0100               	movlb	0	; () banked
  4220  00604C  6F6E               	movwf	(??_pf_open+1)& (0+255),b
  4221  00604E  6B6D               	clrf	??_pf_open& (0+255),b
  4222  006050  0100               	movlb	0	; () banked
  4223  006052  C0AD  F06F         	movff	pf_open@dir+30,??_pf_open+2
  4224  006056  0100               	movlb	0	; () banked
  4225  006058  6B70               	clrf	(??_pf_open+3)& (0+255),b
  4226  00605A  6B71               	clrf	(??_pf_open+4)& (0+255),b
  4227  00605C  6B72               	clrf	(??_pf_open+5)& (0+255),b
  4228  00605E  C070  F072         	movff	??_pf_open+3,??_pf_open+5
  4229  006062  C06F  F071         	movff	??_pf_open+2,??_pf_open+4
  4230  006066  0100               	movlb	0	; () banked
  4231  006068  6B70               	clrf	(??_pf_open+3)& (0+255),b
  4232  00606A  6B6F               	clrf	(??_pf_open+2)& (0+255),b
  4233  00606C  0100               	movlb	0	; () banked
  4234  00606E  C0AE  F073         	movff	pf_open@dir+31,??_pf_open+6
  4235  006072  0100               	movlb	0	; () banked
  4236  006074  6B74               	clrf	(??_pf_open+7)& (0+255),b
  4237  006076  6B75               	clrf	(??_pf_open+8)& (0+255),b
  4238  006078  6B76               	clrf	(??_pf_open+9)& (0+255),b
  4239  00607A  C073  F076         	movff	??_pf_open+6,??_pf_open+9
  4240  00607E  0100               	movlb	0	; () banked
  4241  006080  6B75               	clrf	(??_pf_open+8)& (0+255),b
  4242  006082  6B74               	clrf	(??_pf_open+7)& (0+255),b
  4243  006084  6B73               	clrf	(??_pf_open+6)& (0+255),b
  4244  006086  0100               	movlb	0	; () banked
  4245  006088  516F               	movf	(??_pf_open+2)& (0+255),w,b
  4246  00608A  0100               	movlb	0	; () banked
  4247  00608C  1173               	iorwf	(??_pf_open+6)& (0+255),w,b
  4248  00608E  0100               	movlb	0	; () banked
  4249  006090  6F77               	movwf	(??_pf_open+10)& (0+255),b
  4250  006092  0100               	movlb	0	; () banked
  4251  006094  5170               	movf	(??_pf_open+3)& (0+255),w,b
  4252  006096  0100               	movlb	0	; () banked
  4253  006098  1174               	iorwf	(??_pf_open+7)& (0+255),w,b
  4254  00609A  0100               	movlb	0	; () banked
  4255  00609C  6F78               	movwf	(??_pf_open+11)& (0+255),b
  4256  00609E  0100               	movlb	0	; () banked
  4257  0060A0  5171               	movf	(??_pf_open+4)& (0+255),w,b
  4258  0060A2  0100               	movlb	0	; () banked
  4259  0060A4  1175               	iorwf	(??_pf_open+8)& (0+255),w,b
  4260  0060A6  0100               	movlb	0	; () banked
  4261  0060A8  6F79               	movwf	(??_pf_open+12)& (0+255),b
  4262  0060AA  0100               	movlb	0	; () banked
  4263  0060AC  5172               	movf	(??_pf_open+5)& (0+255),w,b
  4264  0060AE  0100               	movlb	0	; () banked
  4265  0060B0  1176               	iorwf	(??_pf_open+9)& (0+255),w,b
  4266  0060B2  0100               	movlb	0	; () banked
  4267  0060B4  6F7A               	movwf	(??_pf_open+13)& (0+255),b
  4268  0060B6  0100               	movlb	0	; () banked
  4269  0060B8  516D               	movf	??_pf_open& (0+255),w,b
  4270  0060BA  0100               	movlb	0	; () banked
  4271  0060BC  1177               	iorwf	(??_pf_open+10)& (0+255),w,b
  4272  0060BE  0100               	movlb	0	; () banked
  4273  0060C0  6F7B               	movwf	(??_pf_open+14)& (0+255),b
  4274  0060C2  0100               	movlb	0	; () banked
  4275  0060C4  516E               	movf	(??_pf_open+1)& (0+255),w,b
  4276  0060C6  0100               	movlb	0	; () banked
  4277  0060C8  1178               	iorwf	(??_pf_open+11)& (0+255),w,b
  4278  0060CA  0100               	movlb	0	; () banked
  4279  0060CC  6F7C               	movwf	(??_pf_open+15)& (0+255),b
  4280  0060CE  0E00               	movlw	0
  4281  0060D0  0100               	movlb	0	; () banked
  4282  0060D2  1179               	iorwf	(??_pf_open+12)& (0+255),w,b
  4283  0060D4  0100               	movlb	0	; () banked
  4284  0060D6  6F7D               	movwf	(??_pf_open+16)& (0+255),b
  4285  0060D8  0E00               	movlw	0
  4286  0060DA  0100               	movlb	0	; () banked
  4287  0060DC  117A               	iorwf	(??_pf_open+13)& (0+255),w,b
  4288  0060DE  0100               	movlb	0	; () banked
  4289  0060E0  6F7E               	movwf	(??_pf_open+17)& (0+255),b
  4290  0060E2  0100               	movlb	0	; () banked
  4291  0060E4  51AB               	movf	(pf_open@dir+28)& (0+255),w,b
  4292  0060E6  0100               	movlb	0	; () banked
  4293  0060E8  117B               	iorwf	(??_pf_open+14)& (0+255),w,b
  4294  0060EA  0100               	movlb	0	; () banked
  4295  0060EC  6F7F               	movwf	(??_pf_open+18)& (0+255),b
  4296  0060EE  0100               	movlb	0	; () banked
  4297  0060F0  517C               	movf	(??_pf_open+15)& (0+255),w,b
  4298  0060F2  0100               	movlb	0	; () banked
  4299  0060F4  6F80               	movwf	(??_pf_open+19)& (0+255),b
  4300  0060F6  0100               	movlb	0	; () banked
  4301  0060F8  517D               	movf	(??_pf_open+16)& (0+255),w,b
  4302  0060FA  0100               	movlb	0	; () banked
  4303  0060FC  6F81               	movwf	(??_pf_open+20)& (0+255),b
  4304  0060FE  0100               	movlb	0	; () banked
  4305  006100  517E               	movf	(??_pf_open+17)& (0+255),w,b
  4306  006102  0100               	movlb	0	; () banked
  4307  006104  6F82               	movwf	(??_pf_open+21)& (0+255),b
  4308  006106  0100               	movlb	0	; () banked
  4309  006108  EE20 F01A          	lfsr	2,26
  4310  00610C  0100               	movlb	0	; () banked
  4311  00610E  51B0               	movf	pf_open@fs& (0+255),w,b
  4312  006110  26D9               	addwf	fsr2l,f,c
  4313  006112  0100               	movlb	0	; () banked
  4314  006114  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4315  006116  22DA               	addwfc	fsr2h,f,c
  4316  006118  C07F  FFDE         	movff	??_pf_open+18,postinc2
  4317  00611C  C080  FFDE         	movff	??_pf_open+19,postinc2
  4318  006120  C081  FFDE         	movff	??_pf_open+20,postinc2
  4319  006124  C082  FFDD         	movff	??_pf_open+21,postdec2
  4320  006128  06D9               	decf	fsr2l,f,c
  4321  00612A  06D9               	decf	fsr2l,f,c
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;pff.c: 849: fs->fptr = 0;
  4325  00612C  0100               	movlb	0	; () banked
  4326  00612E  EE20 F016          	lfsr	2,22
  4327  006132  0100               	movlb	0	; () banked
  4328  006134  51B0               	movf	pf_open@fs& (0+255),w,b
  4329  006136  26D9               	addwf	fsr2l,f,c
  4330  006138  0100               	movlb	0	; () banked
  4331  00613A  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4332  00613C  22DA               	addwfc	fsr2h,f,c
  4333  00613E  6ADE               	clrf	postinc2,c
  4334  006140  6ADE               	clrf	postinc2,c
  4335  006142  6ADE               	clrf	postinc2,c
  4336  006144  6ADD               	clrf	postdec2,c
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;pff.c: 850: fs->flag = 0x01;
  4340  006146  0100               	movlb	0	; () banked
  4341  006148  EE20 F001          	lfsr	2,1
  4342  00614C  0100               	movlb	0	; () banked
  4343  00614E  51B0               	movf	pf_open@fs& (0+255),w,b
  4344  006150  26D9               	addwf	fsr2l,f,c
  4345  006152  0100               	movlb	0	; () banked
  4346  006154  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4347  006156  22DA               	addwfc	fsr2h,f,c
  4348  006158  0E01               	movlw	1
  4349  00615A  6EDF               	movwf	indf2,c
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;pff.c: 852: return FR_OK;
  4353  00615C  0E00               	movlw	0
  4354  00615E                     l180:
  4355                           
  4356                           ; BSR set to: 0
  4357  00615E  0012               	return	
  4358  006160                     __end_of_pf_open:
  4359                           	opt stack 0
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           postinc0	equ	0xFEE
  4365                           wreg	equ	0xFE8
  4366                           postdec1	equ	0xFE5
  4367                           fsr1h	equ	0xFE2
  4368                           fsr1l	equ	0xFE1
  4369                           indf2	equ	0xFDF
  4370                           postinc2	equ	0xFDE
  4371                           postdec2	equ	0xFDD
  4372                           plusw2	equ	0xFDB
  4373                           fsr2h	equ	0xFDA
  4374                           fsr2l	equ	0xFD9
  4375                           status	equ	0xFD8
  4376                           
  4377 ;; *************** function _follow_path *****************
  4378 ;; Defined at:
  4379 ;;		line 680 in file "pff.c"
  4380 ;; Parameters:    Size  Location     Type
  4381 ;;  dj              2    0[BANK0 ] PTR struct .
  4382 ;;		 -> pf_open@dj(16), 
  4383 ;;  dir             2    2[BANK0 ] PTR unsigned char 
  4384 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  4385 ;;  path            2    4[BANK0 ] PTR const unsigned char 
  4386 ;;		 -> STR_1(10), 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;  res             1   10[BANK0 ] enum E43
  4389 ;; Return value:  Size  Location     Type
  4390 ;;                  1    wreg      enum E43
  4391 ;; Registers used:
  4392 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4398 ;;      Params:         0       6       0       0       0       0       0       0       0
  4399 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4400 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4401 ;;      Totals:         0      11       0       0       0       0       0       0       0
  4402 ;;Total ram usage:       11 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    8
  4405 ;; This function calls:
  4406 ;;		_create_name
  4407 ;;		_dir_find
  4408 ;;		_dir_rewind
  4409 ;;		_get_clust
  4410 ;; This function is called by:
  4411 ;;		_pf_open
  4412 ;;		_pf_opendir
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text8
  4417  005C22                     __ptext8:
  4418                           	opt stack 0
  4419  005C22                     _follow_path:
  4420                           	opt stack 21
  4421                           
  4422                           ;pff.c: 686: FRESULT res;
  4423                           ;pff.c: 689: while (*path == ' ') path++;
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;incstack = 0
  4427  005C22  D003               	goto	l3440
  4428  005C24                     l3438:
  4429  005C24  0100               	movlb	0	; () banked
  4430  005C26  4B64               	infsnz	follow_path@path& (0+255),f,b
  4431  005C28  2B65               	incf	(follow_path@path+1)& (0+255),f,b
  4432  005C2A                     l3440:
  4433  005C2A  0100               	movlb	0	; () banked
  4434  005C2C  C064  FFF6         	movff	follow_path@path,tblptrl
  4435  005C30  0100               	movlb	0	; () banked
  4436  005C32  C065  FFF7         	movff	follow_path@path+1,tblptrh
  4437  005C36                     	if	0	;tblptru may be non-zero
  4438  005C36                     	endif
  4439  005C36                     	if	0	;tblptru may be non-zero
  4440  005C36                     	endif
  4441  005C36  0008               	tblrd		*
  4442  005C38  50F5               	movf	tablat,w,c
  4443  005C3A  0A20               	xorlw	32
  4444  005C3C  B4D8               	btfsc	status,2,c
  4445  005C3E  D7F2               	goto	l3438
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;pff.c: 690: if (*path == '/') path++;
  4449                           
  4450                           ; BSR set to: 0
  4451  005C40  0100               	movlb	0	; () banked
  4452  005C42  C064  FFF6         	movff	follow_path@path,tblptrl
  4453  005C46  0100               	movlb	0	; () banked
  4454  005C48  C065  FFF7         	movff	follow_path@path+1,tblptrh
  4455  005C4C                     	if	0	;tblptru may be non-zero
  4456  005C4C                     	endif
  4457  005C4C                     	if	0	;tblptru may be non-zero
  4458  005C4C                     	endif
  4459  005C4C  0008               	tblrd		*
  4460  005C4E  50F5               	movf	tablat,w,c
  4461  005C50  0A2F               	xorlw	47
  4462  005C52  A4D8               	btfss	status,2,c
  4463  005C54  D003               	goto	l3446
  4464                           
  4465                           ; BSR set to: 0
  4466  005C56  0100               	movlb	0	; () banked
  4467  005C58  4B64               	infsnz	follow_path@path& (0+255),f,b
  4468  005C5A  2B65               	incf	(follow_path@path+1)& (0+255),f,b
  4469  005C5C                     l3446:
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;pff.c: 691: dj->sclust = 0;
  4473  005C5C  0100               	movlb	0	; () banked
  4474  005C5E  EE20 F004          	lfsr	2,4
  4475  005C62  0100               	movlb	0	; () banked
  4476  005C64  5160               	movf	follow_path@dj& (0+255),w,b
  4477  005C66  26D9               	addwf	fsr2l,f,c
  4478  005C68  0100               	movlb	0	; () banked
  4479  005C6A  5161               	movf	(follow_path@dj+1)& (0+255),w,b
  4480  005C6C  22DA               	addwfc	fsr2h,f,c
  4481  005C6E  6ADE               	clrf	postinc2,c
  4482  005C70  6ADE               	clrf	postinc2,c
  4483  005C72  6ADE               	clrf	postinc2,c
  4484  005C74  6ADD               	clrf	postdec2,c
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  4488  005C76  0E20               	movlw	32
  4489  005C78  0100               	movlb	0	; () banked
  4490  005C7A  C064  FFF6         	movff	follow_path@path,tblptrl
  4491  005C7E  0100               	movlb	0	; () banked
  4492  005C80  C065  FFF7         	movff	follow_path@path+1,tblptrh
  4493  005C84                     	if	0	;tblptru may be non-zero
  4494  005C84                     	endif
  4495  005C84                     	if	0	;tblptru may be non-zero
  4496  005C84                     	endif
  4497  005C84  0008               	tblrd		*
  4498  005C86  CFF5 F066          	movff	tablat,??_follow_path
  4499  005C8A  0100               	movlb	0	; () banked
  4500  005C8C  5D66               	subwf	??_follow_path& (0+255),w,b
  4501  005C8E  B0D8               	btfsc	status,0,c
  4502  005C90  D011               	goto	l3454
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;pff.c: 694: res = dir_rewind(dj);
  4506  005C92  0100               	movlb	0	; () banked
  4507  005C94  C061  F01D         	movff	follow_path@dj+1,dir_rewind@dj+1
  4508  005C98  0100               	movlb	0	; () banked
  4509  005C9A  C060  F01C         	movff	follow_path@dj,dir_rewind@dj
  4510  005C9E  EC2C  F02C         	call	_dir_rewind	;wreg free
  4511  005CA2  0100               	movlb	0	; () banked
  4512  005CA4  6F6A               	movwf	follow_path@res& (0+255),b
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;pff.c: 695: dir[0] = 0;
  4516  005CA6  C062  FFD9         	movff	follow_path@dir,fsr2l
  4517  005CAA  C063  FFDA         	movff	follow_path@dir+1,fsr2h
  4518  005CAE  0E00               	movlw	0
  4519  005CB0  6EDF               	movwf	indf2,c
  4520                           
  4521                           ;pff.c: 697: } else {
  4522  005CB2  D071               	goto	l3476
  4523  005CB4                     l3454:
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;pff.c: 699: res = create_name(dj, &path);
  4527  005CB4  0100               	movlb	0	; () banked
  4528  005CB6  C061  F00A         	movff	follow_path@dj+1,create_name@dj+1
  4529  005CBA  0100               	movlb	0	; () banked
  4530  005CBC  C060  F009         	movff	follow_path@dj,create_name@dj
  4531  005CC0  0100               	movlb	0	; () banked
  4532  005CC2  0E00               	movlw	high follow_path@path
  4533  005CC4  6E0C               	movwf	create_name@path+1,c
  4534  005CC6  0100               	movlb	0	; () banked
  4535  005CC8  0E64               	movlw	low follow_path@path
  4536  005CCA  6E0B               	movwf	create_name@path,c
  4537  005CCC  ECC8  F02C         	call	_create_name	;wreg free
  4538  005CD0  0100               	movlb	0	; () banked
  4539  005CD2  6F6A               	movwf	follow_path@res& (0+255),b
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;pff.c: 700: if (res != FR_OK) break;
  4543  005CD4  0100               	movlb	0	; () banked
  4544  005CD6  516A               	movf	follow_path@res& (0+255),w,b
  4545  005CD8  A4D8               	btfss	status,2,c
  4546  005CDA  D05D               	goto	l3476
  4547                           
  4548                           ; BSR set to: 0
  4549                           ;pff.c: 701: res = dir_find(dj, dir);
  4550                           
  4551                           ; BSR set to: 0
  4552                           
  4553                           ; BSR set to: 0
  4554  005CDC  0100               	movlb	0	; () banked
  4555  005CDE  C061  F059         	movff	follow_path@dj+1,dir_find@dj+1
  4556  005CE2  0100               	movlb	0	; () banked
  4557  005CE4  C060  F058         	movff	follow_path@dj,dir_find@dj
  4558  005CE8  0100               	movlb	0	; () banked
  4559  005CEA  C063  F05B         	movff	follow_path@dir+1,dir_find@dir+1
  4560  005CEE  0100               	movlb	0	; () banked
  4561  005CF0  C062  F05A         	movff	follow_path@dir,dir_find@dir
  4562  005CF4  EC1F  F02B         	call	_dir_find	;wreg free
  4563  005CF8  0100               	movlb	0	; () banked
  4564  005CFA  6F6A               	movwf	follow_path@res& (0+255),b
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;pff.c: 702: if (res != FR_OK) break;
  4568  005CFC  0100               	movlb	0	; () banked
  4569  005CFE  516A               	movf	follow_path@res& (0+255),w,b
  4570  005D00  A4D8               	btfss	status,2,c
  4571  005D02  D049               	goto	l3476
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;pff.c: 703: if (dj->fn[11]) break;
  4575                           
  4576                           ; BSR set to: 0
  4577                           
  4578                           ; BSR set to: 0
  4579  005D04  0100               	movlb	0	; () banked
  4580  005D06  EE20 F002          	lfsr	2,2
  4581  005D0A  0100               	movlb	0	; () banked
  4582  005D0C  5160               	movf	follow_path@dj& (0+255),w,b
  4583  005D0E  26D9               	addwf	fsr2l,f,c
  4584  005D10  0100               	movlb	0	; () banked
  4585  005D12  5161               	movf	(follow_path@dj+1)& (0+255),w,b
  4586  005D14  22DA               	addwfc	fsr2h,f,c
  4587  005D16  EE10 F00B          	lfsr	1,11
  4588  005D1A  50DE               	movf	postinc2,w,c
  4589  005D1C  26E1               	addwf	fsr1l,f,c
  4590  005D1E  50DD               	movf	postdec2,w,c
  4591  005D20  22E2               	addwfc	fsr1h,f,c
  4592  005D22  50E7               	movf	indf1,w,c
  4593  005D24  A4D8               	btfss	status,2,c
  4594  005D26  D037               	goto	l3476
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  4598                           
  4599                           ; BSR set to: 0
  4600                           
  4601                           ; BSR set to: 0
  4602  005D28  0100               	movlb	0	; () banked
  4603  005D2A  EE20 F00B          	lfsr	2,11
  4604  005D2E  0100               	movlb	0	; () banked
  4605  005D30  5162               	movf	follow_path@dir& (0+255),w,b
  4606  005D32  26D9               	addwf	fsr2l,f,c
  4607  005D34  0100               	movlb	0	; () banked
  4608  005D36  5163               	movf	(follow_path@dir+1)& (0+255),w,b
  4609  005D38  22DA               	addwfc	fsr2h,f,c
  4610  005D3A  50DF               	movf	indf2,w,c
  4611  005D3C  0100               	movlb	0	; () banked
  4612  005D3E  6F66               	movwf	??_follow_path& (0+255),b
  4613  005D40  0100               	movlb	0	; () banked
  4614  005D42  B966               	btfsc	??_follow_path& (0+255),4,b
  4615  005D44  D004               	goto	l3474
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;pff.c: 705: res = FR_NO_FILE; break;
  4619  005D46  0E03               	movlw	3
  4620  005D48  0100               	movlb	0	; () banked
  4621  005D4A  6F6A               	movwf	follow_path@res& (0+255),b
  4622  005D4C  D024               	goto	l3476
  4623  005D4E                     l3474:
  4624                           
  4625                           ; BSR set to: 0
  4626                           ;pff.c: 706: }
  4627                           ;pff.c: 707: dj->sclust = get_clust(dir);
  4628  005D4E  0100               	movlb	0	; () banked
  4629  005D50  C063  F002         	movff	follow_path@dir+1,get_clust@dir+1
  4630  005D54  0100               	movlb	0	; () banked
  4631  005D56  C062  F001         	movff	follow_path@dir,get_clust@dir
  4632  005D5A  EC50  F02A         	call	_get_clust	;wreg free
  4633  005D5E  C001  F066         	movff	?_get_clust,??_follow_path
  4634  005D62  C002  F067         	movff	?_get_clust+1,??_follow_path+1
  4635  005D66  C003  F068         	movff	?_get_clust+2,??_follow_path+2
  4636  005D6A  C004  F069         	movff	?_get_clust+3,??_follow_path+3
  4637  005D6E  0100               	movlb	0	; () banked
  4638  005D70  EE20 F004          	lfsr	2,4
  4639  005D74  0100               	movlb	0	; () banked
  4640  005D76  5160               	movf	follow_path@dj& (0+255),w,b
  4641  005D78  26D9               	addwf	fsr2l,f,c
  4642  005D7A  0100               	movlb	0	; () banked
  4643  005D7C  5161               	movf	(follow_path@dj+1)& (0+255),w,b
  4644  005D7E  22DA               	addwfc	fsr2h,f,c
  4645  005D80  C066  FFDE         	movff	??_follow_path,postinc2
  4646  005D84  C067  FFDE         	movff	??_follow_path+1,postinc2
  4647  005D88  C068  FFDE         	movff	??_follow_path+2,postinc2
  4648  005D8C  C069  FFDD         	movff	??_follow_path+3,postdec2
  4649  005D90  06D9               	decf	fsr2l,f,c
  4650  005D92  06D9               	decf	fsr2l,f,c
  4651                           
  4652                           ;pff.c: 708: }
  4653  005D94  D78F               	goto	l3454
  4654  005D96                     l3476:
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;pff.c: 709: }
  4658                           ;pff.c: 711: return res;
  4659  005D96  0100               	movlb	0	; () banked
  4660  005D98  516A               	movf	follow_path@res& (0+255),w,b
  4661                           
  4662                           ; BSR set to: 0
  4663                           
  4664                           ; BSR set to: 0
  4665  005D9A  0012               	return	
  4666  005D9C                     __end_of_follow_path:
  4667                           	opt stack 0
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           postinc0	equ	0xFEE
  4673                           wreg	equ	0xFE8
  4674                           indf1	equ	0xFE7
  4675                           postdec1	equ	0xFE5
  4676                           fsr1h	equ	0xFE2
  4677                           fsr1l	equ	0xFE1
  4678                           indf2	equ	0xFDF
  4679                           postinc2	equ	0xFDE
  4680                           postdec2	equ	0xFDD
  4681                           plusw2	equ	0xFDB
  4682                           fsr2h	equ	0xFDA
  4683                           fsr2l	equ	0xFD9
  4684                           status	equ	0xFD8
  4685                           
  4686 ;; *************** function _get_clust *****************
  4687 ;; Defined at:
  4688 ;;		line 414 in file "pff.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;  dir             2    0[COMRAM] PTR unsigned char 
  4691 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;  clst            4   14[COMRAM] unsigned long 
  4694 ;;  fs              2   12[COMRAM] PTR struct .
  4695 ;;		 -> main@fs(42), NULL(0), 
  4696 ;; Return value:  Size  Location     Type
  4697 ;;                  4    0[COMRAM] unsigned long 
  4698 ;; Registers used:
  4699 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4700 ;; Tracked objects:
  4701 ;;		On entry : 0/0
  4702 ;;		On exit  : 0/0
  4703 ;;		Unchanged: 0/0
  4704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4705 ;;      Params:         4       0       0       0       0       0       0       0       0
  4706 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4707 ;;      Temps:          8       0       0       0       0       0       0       0       0
  4708 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4709 ;;Total ram usage:       18 bytes
  4710 ;; Hardware stack levels used:    1
  4711 ;; This function calls:
  4712 ;;		Nothing
  4713 ;; This function is called by:
  4714 ;;		_follow_path
  4715 ;;		_pf_open
  4716 ;;		_pf_opendir
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text9
  4721  0054A0                     __ptext9:
  4722                           	opt stack 0
  4723  0054A0                     _get_clust:
  4724                           	opt stack 29
  4725                           
  4726                           ;pff.c: 418: FATFS *fs = FatFs;
  4727                           
  4728                           ; BSR set to: 0
  4729                           ;incstack = 0
  4730  0054A0  0100               	movlb	0	; () banked
  4731  0054A2  C0F4  F00E         	movff	_FatFs+1,get_clust@fs+1
  4732  0054A6  0100               	movlb	0	; () banked
  4733  0054A8  C0F3  F00D         	movff	_FatFs,get_clust@fs
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  4737  0054AC  0E00               	movlw	0
  4738  0054AE  6E0F               	movwf	get_clust@clst,c
  4739  0054B0  0E00               	movlw	0
  4740  0054B2  6E10               	movwf	get_clust@clst+1,c
  4741  0054B4  0E00               	movlw	0
  4742  0054B6  6E11               	movwf	get_clust@clst+2,c
  4743  0054B8  0E00               	movlw	0
  4744  0054BA  6E12               	movwf	get_clust@clst+3,c
  4745                           
  4746                           ; BSR set to: 0
  4747  0054BC  0E03               	movlw	3
  4748  0054BE  C00D  FFD9         	movff	get_clust@fs,fsr2l
  4749  0054C2  C00E  FFDA         	movff	get_clust@fs+1,fsr2h
  4750  0054C6  62DF               	cpfseq	indf2,c
  4751  0054C8  D025               	goto	l3308
  4752                           
  4753                           ; BSR set to: 0
  4754                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  4755                           
  4756                           ; BSR set to: 0
  4757  0054CA  EE20 F015          	lfsr	2,21
  4758  0054CE  5001               	movf	get_clust@dir,w,c
  4759  0054D0  26D9               	addwf	fsr2l,f,c
  4760  0054D2  5002               	movf	get_clust@dir+1,w,c
  4761  0054D4  22DA               	addwfc	fsr2h,f,c
  4762  0054D6  50DF               	movf	indf2,w,c
  4763  0054D8  6E05               	movwf	??_get_clust& (0+255),c
  4764  0054DA  5005               	movf	??_get_clust,w,c
  4765  0054DC  6E07               	movwf	(??_get_clust+2)& (0+255),c
  4766  0054DE  6A06               	clrf	(??_get_clust+1)& (0+255),c
  4767  0054E0  EE20 F014          	lfsr	2,20
  4768  0054E4  5001               	movf	get_clust@dir,w,c
  4769  0054E6  26D9               	addwf	fsr2l,f,c
  4770  0054E8  5002               	movf	get_clust@dir+1,w,c
  4771  0054EA  22DA               	addwfc	fsr2h,f,c
  4772  0054EC  50DF               	movf	indf2,w,c
  4773  0054EE  6E08               	movwf	(??_get_clust+3)& (0+255),c
  4774  0054F0  5008               	movf	??_get_clust+3,w,c
  4775  0054F2  1206               	iorwf	??_get_clust+1,f,c
  4776  0054F4  0E00               	movlw	0
  4777  0054F6  1207               	iorwf	??_get_clust+2,f,c
  4778  0054F8  C006  F00F         	movff	??_get_clust+1,get_clust@clst
  4779  0054FC  C007  F010         	movff	??_get_clust+2,get_clust@clst+1
  4780  005500  6A11               	clrf	get_clust@clst+2,c
  4781  005502  6A12               	clrf	get_clust@clst+3,c
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;pff.c: 424: clst <<= 16;
  4785  005504  0E10               	movlw	16
  4786  005506                     u2935:
  4787  005506  90D8               	bcf	status,0,c
  4788  005508  360F               	rlcf	get_clust@clst,f,c
  4789  00550A  3610               	rlcf	get_clust@clst+1,f,c
  4790  00550C  3611               	rlcf	get_clust@clst+2,f,c
  4791  00550E  3612               	rlcf	get_clust@clst+3,f,c
  4792  005510  2EE8               	decfsz	wreg,f,c
  4793  005512  D7F9               	goto	u2935
  4794  005514                     l3308:
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;pff.c: 425: }
  4798                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  4799  005514  EE20 F01B          	lfsr	2,27
  4800  005518  5001               	movf	get_clust@dir,w,c
  4801  00551A  26D9               	addwf	fsr2l,f,c
  4802  00551C  5002               	movf	get_clust@dir+1,w,c
  4803  00551E  22DA               	addwfc	fsr2h,f,c
  4804  005520  50DF               	movf	indf2,w,c
  4805  005522  6E05               	movwf	??_get_clust& (0+255),c
  4806  005524  5005               	movf	??_get_clust,w,c
  4807  005526  6E07               	movwf	(??_get_clust+2)& (0+255),c
  4808  005528  6A06               	clrf	(??_get_clust+1)& (0+255),c
  4809  00552A  EE20 F01A          	lfsr	2,26
  4810  00552E  5001               	movf	get_clust@dir,w,c
  4811  005530  26D9               	addwf	fsr2l,f,c
  4812  005532  5002               	movf	get_clust@dir+1,w,c
  4813  005534  22DA               	addwfc	fsr2h,f,c
  4814  005536  50DF               	movf	indf2,w,c
  4815  005538  6E08               	movwf	(??_get_clust+3)& (0+255),c
  4816  00553A  5008               	movf	??_get_clust+3,w,c
  4817  00553C  1006               	iorwf	??_get_clust+1,w,c
  4818  00553E  6E09               	movwf	(??_get_clust+4)& (0+255),c
  4819  005540  5007               	movf	??_get_clust+2,w,c
  4820  005542  6E0A               	movwf	(??_get_clust+5)& (0+255),c
  4821  005544  6A0B               	clrf	(??_get_clust+6)& (0+255),c
  4822  005546  6A0C               	clrf	(??_get_clust+7)& (0+255),c
  4823  005548  5009               	movf	??_get_clust+4,w,c
  4824  00554A  120F               	iorwf	get_clust@clst,f,c
  4825  00554C  500A               	movf	??_get_clust+5,w,c
  4826  00554E  1210               	iorwf	get_clust@clst+1,f,c
  4827  005550  500B               	movf	??_get_clust+6,w,c
  4828  005552  1211               	iorwf	get_clust@clst+2,f,c
  4829  005554  500C               	movf	??_get_clust+7,w,c
  4830  005556  1212               	iorwf	get_clust@clst+3,f,c
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;pff.c: 428: return clst;
  4834  005558  C00F  F001         	movff	get_clust@clst,?_get_clust
  4835  00555C  C010  F002         	movff	get_clust@clst+1,?_get_clust+1
  4836  005560  C011  F003         	movff	get_clust@clst+2,?_get_clust+2
  4837  005564  C012  F004         	movff	get_clust@clst+3,?_get_clust+3
  4838                           
  4839                           ; BSR set to: 0
  4840                           
  4841                           ; BSR set to: 0
  4842  005568  0012               	return	
  4843  00556A                     __end_of_get_clust:
  4844                           	opt stack 0
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           indf1	equ	0xFE7
  4852                           postdec1	equ	0xFE5
  4853                           fsr1h	equ	0xFE2
  4854                           fsr1l	equ	0xFE1
  4855                           indf2	equ	0xFDF
  4856                           postinc2	equ	0xFDE
  4857                           postdec2	equ	0xFDD
  4858                           plusw2	equ	0xFDB
  4859                           fsr2h	equ	0xFDA
  4860                           fsr2l	equ	0xFD9
  4861                           status	equ	0xFD8
  4862                           
  4863 ;; *************** function _dir_find *****************
  4864 ;; Defined at:
  4865 ;;		line 510 in file "pff.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  dj              2   87[COMRAM] PTR struct .
  4868 ;;		 -> pf_open@dj(16), 
  4869 ;;  dir             2   89[COMRAM] PTR unsigned char 
  4870 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  res             1   94[COMRAM] enum E43
  4873 ;;  c               1   93[COMRAM] unsigned char 
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  1    wreg      enum E43
  4876 ;; Registers used:
  4877 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4883 ;;      Params:         4       0       0       0       0       0       0       0       0
  4884 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4885 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4886 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4887 ;;Total ram usage:        8 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    7
  4890 ;; This function calls:
  4891 ;;		_dir_next
  4892 ;;		_dir_rewind
  4893 ;;		_disk_readp
  4894 ;;		_mem_cmp
  4895 ;; This function is called by:
  4896 ;;		_follow_path
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           	psect	text10
  4901  00563E                     __ptext10:
  4902                           	opt stack 0
  4903  00563E                     _dir_find:
  4904                           	opt stack 21
  4905                           
  4906                           ;pff.c: 515: FRESULT res;
  4907                           ;pff.c: 516: BYTE c;
  4908                           ;pff.c: 519: res = dir_rewind(dj);
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;incstack = 0
  4912  00563E  C059  F01D         	movff	dir_find@dj+1,dir_rewind@dj+1
  4913  005642  C058  F01C         	movff	dir_find@dj,dir_rewind@dj
  4914  005646  EC2C  F02C         	call	_dir_rewind	;wreg free
  4915  00564A  6E5F               	movwf	dir_find@res,c
  4916                           
  4917                           ;pff.c: 520: if (res != FR_OK) return res;
  4918  00564C  505F               	movf	dir_find@res,w,c
  4919  00564E  A4D8               	btfss	status,2,c
  4920  005650  D06F               	goto	l3344
  4921  005652                     l3322:
  4922                           
  4923                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  4924                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  4925  005652  C05B  F00A         	movff	dir_find@dir+1,disk_readp@rd+1
  4926  005656  C05A  F009         	movff	dir_find@dir,disk_readp@rd
  4927  00565A  EE20 F00C          	lfsr	2,12
  4928  00565E  5058               	movf	dir_find@dj,w,c
  4929  005660  26D9               	addwf	fsr2l,f,c
  4930  005662  5059               	movf	dir_find@dj+1,w,c
  4931  005664  22DA               	addwfc	fsr2h,f,c
  4932  005666  CFDE F00B          	movff	postinc2,disk_readp@sector
  4933  00566A  CFDE F00C          	movff	postinc2,disk_readp@sector+1
  4934  00566E  CFDE F00D          	movff	postinc2,disk_readp@sector+2
  4935  005672  CFDE F00E          	movff	postinc2,disk_readp@sector+3
  4936  005676  C058  FFD9         	movff	dir_find@dj,fsr2l
  4937  00567A  C059  FFDA         	movff	dir_find@dj+1,fsr2h
  4938  00567E  CFDE F05C          	movff	postinc2,??_dir_find
  4939  005682  CFDD F05D          	movff	postdec2,??_dir_find+1
  4940  005686  0E0F               	movlw	15
  4941  005688  165C               	andwf	??_dir_find,f,c
  4942  00568A  0E00               	movlw	0
  4943  00568C  165D               	andwf	??_dir_find+1,f,c
  4944  00568E  0E05               	movlw	5
  4945  005690                     u2955:
  4946  005690  90D8               	bcf	status,0,c
  4947  005692  365C               	rlcf	??_dir_find,f,c
  4948  005694  365D               	rlcf	??_dir_find+1,f,c
  4949  005696  2EE8               	decfsz	wreg,f,c
  4950  005698  D7FB               	goto	u2955
  4951  00569A  C05C  F00F         	movff	??_dir_find,disk_readp@offset
  4952  00569E  C05D  F010         	movff	??_dir_find+1,disk_readp@offset+1
  4953  0056A2  0E00               	movlw	0
  4954  0056A4  6E12               	movwf	disk_readp@count+1,c
  4955  0056A6  0E20               	movlw	32
  4956  0056A8  6E11               	movwf	disk_readp@count,c
  4957  0056AA  ECBA  F032         	call	_disk_readp	;wreg free
  4958  0056AE  0900               	iorlw	0
  4959  0056B0  B4D8               	btfsc	status,2,c
  4960  0056B2  D002               	goto	u2960
  4961  0056B4  0E01               	movlw	1
  4962  0056B6  D001               	goto	u2966
  4963  0056B8                     u2960:
  4964  0056B8  0E00               	movlw	0
  4965  0056BA                     u2966:
  4966  0056BA  6E5F               	movwf	dir_find@res,c
  4967                           
  4968                           ;pff.c: 525: if (res != FR_OK) break;
  4969  0056BC  505F               	movf	dir_find@res,w,c
  4970  0056BE  A4D8               	btfss	status,2,c
  4971  0056C0  D037               	goto	l3344
  4972                           
  4973                           ;pff.c: 526: c = dir[0];
  4974  0056C2  C05A  FFD9         	movff	dir_find@dir,fsr2l
  4975  0056C6  C05B  FFDA         	movff	dir_find@dir+1,fsr2h
  4976  0056CA  50DF               	movf	indf2,w,c
  4977  0056CC  6E5E               	movwf	dir_find@c,c
  4978                           
  4979                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  4980  0056CE  665E               	tstfsz	dir_find@c,c
  4981  0056D0  D003               	goto	l3334
  4982  0056D2  0E03               	movlw	3
  4983  0056D4  6E5F               	movwf	dir_find@res,c
  4984  0056D6  D02C               	goto	l3344
  4985  0056D8                     l3334:
  4986                           
  4987                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  4988  0056D8  EE20 F00B          	lfsr	2,11
  4989  0056DC  505A               	movf	dir_find@dir,w,c
  4990  0056DE  26D9               	addwf	fsr2l,f,c
  4991  0056E0  505B               	movf	dir_find@dir+1,w,c
  4992  0056E2  22DA               	addwfc	fsr2h,f,c
  4993  0056E4  50DF               	movf	indf2,w,c
  4994  0056E6  6E5C               	movwf	??_dir_find& (0+255),c
  4995  0056E8  B65C               	btfsc	??_dir_find,3,c
  4996  0056EA  D018               	goto	l3340
  4997  0056EC  C05B  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  4998  0056F0  C05A  F001         	movff	dir_find@dir,mem_cmp@dst
  4999  0056F4  EE20 F002          	lfsr	2,2
  5000  0056F8  5058               	movf	dir_find@dj,w,c
  5001  0056FA  26D9               	addwf	fsr2l,f,c
  5002  0056FC  5059               	movf	dir_find@dj+1,w,c
  5003  0056FE  22DA               	addwfc	fsr2h,f,c
  5004  005700  CFDE F003          	movff	postinc2,mem_cmp@src
  5005  005704  CFDD F004          	movff	postdec2,mem_cmp@src+1
  5006  005708  0E00               	movlw	0
  5007  00570A  6E06               	movwf	mem_cmp@cnt+1,c
  5008  00570C  0E0B               	movlw	11
  5009  00570E  6E05               	movwf	mem_cmp@cnt,c
  5010  005710  EC99  F029         	call	_mem_cmp	;wreg free
  5011  005714  5002               	movf	?_mem_cmp+1,w,c
  5012  005716  1001               	iorwf	?_mem_cmp,w,c
  5013  005718  B4D8               	btfsc	status,2,c
  5014  00571A  D00A               	goto	l3344
  5015  00571C                     l3340:
  5016                           
  5017                           ;pff.c: 530: res = dir_next(dj);
  5018  00571C  C059  F048         	movff	dir_find@dj+1,dir_next@dj+1
  5019  005720  C058  F047         	movff	dir_find@dj,dir_next@dj
  5020  005724  ECB3  F031         	call	_dir_next	;wreg free
  5021  005728  6E5F               	movwf	dir_find@res,c
  5022                           
  5023                           ;pff.c: 531: } while (res == FR_OK);
  5024  00572A  505F               	movf	dir_find@res,w,c
  5025  00572C  B4D8               	btfsc	status,2,c
  5026  00572E  D791               	goto	l3322
  5027  005730                     l3344:
  5028                           
  5029                           ;pff.c: 533: return res;
  5030  005730  505F               	movf	dir_find@res,w,c
  5031  005732  0012               	return	
  5032  005734                     __end_of_dir_find:
  5033                           	opt stack 0
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           postinc0	equ	0xFEE
  5039                           wreg	equ	0xFE8
  5040                           indf1	equ	0xFE7
  5041                           postdec1	equ	0xFE5
  5042                           fsr1h	equ	0xFE2
  5043                           fsr1l	equ	0xFE1
  5044                           indf2	equ	0xFDF
  5045                           postinc2	equ	0xFDE
  5046                           postdec2	equ	0xFDD
  5047                           plusw2	equ	0xFDB
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _mem_cmp *****************
  5053 ;; Defined at:
  5054 ;;		line 336 in file "pff.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  dst             2    0[COMRAM] PTR const void 
  5057 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  5058 ;;  src             2    2[COMRAM] PTR const void 
  5059 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  5060 ;;  cnt             2    4[COMRAM] int 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  r               2   13[COMRAM] int 
  5063 ;;  s               2   11[COMRAM] PTR const unsigned char 
  5064 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  5065 ;;  d               2    9[COMRAM] PTR const unsigned char 
  5066 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  2    0[COMRAM] int 
  5069 ;; Registers used:
  5070 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5076 ;;      Params:         6       0       0       0       0       0       0       0       0
  5077 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5078 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5079 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5080 ;;Total ram usage:       15 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; This function calls:
  5083 ;;		Nothing
  5084 ;; This function is called by:
  5085 ;;		_dir_find
  5086 ;; This function uses a non-reentrant model
  5087 ;;
  5088                           
  5089                           	psect	text11
  5090  005332                     __ptext11:
  5091                           	opt stack 0
  5092  005332                     _mem_cmp:
  5093                           	opt stack 27
  5094                           
  5095                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  5096                           
  5097                           ;incstack = 0
  5098  005332  C002  F00B         	movff	mem_cmp@dst+1,mem_cmp@d+1
  5099  005336  C001  F00A         	movff	mem_cmp@dst,mem_cmp@d
  5100  00533A  C004  F00D         	movff	mem_cmp@src+1,mem_cmp@s+1
  5101  00533E  C003  F00C         	movff	mem_cmp@src,mem_cmp@s
  5102                           
  5103                           ;pff.c: 338: int r = 0;
  5104  005342  0E00               	movlw	0
  5105  005344  6E0F               	movwf	mem_cmp@r+1,c
  5106  005346  0E00               	movlw	0
  5107  005348  6E0E               	movwf	mem_cmp@r,c
  5108  00534A                     l3214:
  5109  00534A  0605               	decf	mem_cmp@cnt,f,c
  5110  00534C  A0D8               	btfss	status,0,c
  5111  00534E  0606               	decf	mem_cmp@cnt+1,f,c
  5112  005350  2805               	incf	mem_cmp@cnt& (0+255),w,c
  5113  005352  B4D8               	btfsc	status,2,c
  5114  005354  2806               	incf	(mem_cmp@cnt+1)& (0+255),w,c
  5115  005356  B4D8               	btfsc	status,2,c
  5116  005358  D01F               	goto	l21
  5117  00535A  C00C  FFD9         	movff	mem_cmp@s,fsr2l
  5118  00535E  C00D  FFDA         	movff	mem_cmp@s+1,fsr2h
  5119  005362  4A0C               	infsnz	mem_cmp@s,f,c
  5120  005364  2A0D               	incf	mem_cmp@s+1,f,c
  5121  005366  50DF               	movf	indf2,w,c
  5122  005368  6E07               	movwf	??_mem_cmp& (0+255),c
  5123  00536A  6A08               	clrf	(??_mem_cmp+1)& (0+255),c
  5124  00536C  1E07               	comf	??_mem_cmp,f,c
  5125  00536E  1E08               	comf	??_mem_cmp+1,f,c
  5126  005370  4A07               	infsnz	??_mem_cmp,f,c
  5127  005372  2A08               	incf	??_mem_cmp+1,f,c
  5128  005374  C00A  FFD9         	movff	mem_cmp@d,fsr2l
  5129  005378  C00B  FFDA         	movff	mem_cmp@d+1,fsr2h
  5130  00537C  4A0A               	infsnz	mem_cmp@d,f,c
  5131  00537E  2A0B               	incf	mem_cmp@d+1,f,c
  5132  005380  50DF               	movf	indf2,w,c
  5133  005382  6E09               	movwf	(??_mem_cmp+2)& (0+255),c
  5134  005384  5009               	movf	??_mem_cmp+2,w,c
  5135  005386  2407               	addwf	??_mem_cmp,w,c
  5136  005388  6E0E               	movwf	mem_cmp@r,c
  5137  00538A  0E00               	movlw	0
  5138  00538C  2008               	addwfc	??_mem_cmp+1,w,c
  5139  00538E  6E0F               	movwf	mem_cmp@r+1,c
  5140  005390  500F               	movf	(mem_cmp@r+1)& (0+255),w,c
  5141  005392  100E               	iorwf	mem_cmp@r& (0+255),w,c
  5142  005394  B4D8               	btfsc	status,2,c
  5143  005396  D7D9               	goto	l3214
  5144  005398                     l21:
  5145                           
  5146                           ;pff.c: 340: return r;
  5147  005398  C00E  F001         	movff	mem_cmp@r,?_mem_cmp
  5148  00539C  C00F  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  5149  0053A0  0012               	return	
  5150  0053A2                     __end_of_mem_cmp:
  5151                           	opt stack 0
  5152                           tblptru	equ	0xFF8
  5153                           tblptrh	equ	0xFF7
  5154                           tblptrl	equ	0xFF6
  5155                           tablat	equ	0xFF5
  5156                           postinc0	equ	0xFEE
  5157                           wreg	equ	0xFE8
  5158                           indf1	equ	0xFE7
  5159                           postdec1	equ	0xFE5
  5160                           fsr1h	equ	0xFE2
  5161                           fsr1l	equ	0xFE1
  5162                           indf2	equ	0xFDF
  5163                           postinc2	equ	0xFDE
  5164                           postdec2	equ	0xFDD
  5165                           plusw2	equ	0xFDB
  5166                           fsr2h	equ	0xFDA
  5167                           fsr2l	equ	0xFD9
  5168                           status	equ	0xFD8
  5169                           
  5170 ;; *************** function _dir_rewind *****************
  5171 ;; Defined at:
  5172 ;;		line 437 in file "pff.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;  dj              2   27[COMRAM] PTR struct .
  5175 ;;		 -> pf_open@dj(16), 
  5176 ;; Auto vars:     Size  Location     Type
  5177 ;;  clst            4   39[COMRAM] unsigned long 
  5178 ;;  fs              2   37[COMRAM] PTR struct .
  5179 ;;		 -> main@fs(42), NULL(0), 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      enum E43
  5182 ;; Registers used:
  5183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5189 ;;      Params:         2       0       0       0       0       0       0       0       0
  5190 ;;      Locals:        10       0       0       0       0       0       0       0       0
  5191 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5192 ;;      Totals:        16       0       0       0       0       0       0       0       0
  5193 ;;Total ram usage:       16 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    2
  5196 ;; This function calls:
  5197 ;;		_clust2sect
  5198 ;; This function is called by:
  5199 ;;		_dir_find
  5200 ;;		_follow_path
  5201 ;;		_pf_opendir
  5202 ;;		_pf_readdir
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text12
  5207  005858                     __ptext12:
  5208                           	opt stack 0
  5209  005858                     _dir_rewind:
  5210                           	opt stack 26
  5211                           
  5212                           ;pff.c: 441: DWORD clst;
  5213                           ;pff.c: 442: FATFS *fs = FatFs;
  5214                           
  5215                           ;incstack = 0
  5216  005858  0100               	movlb	0	; () banked
  5217  00585A  C0F4  F027         	movff	_FatFs+1,dir_rewind@fs+1
  5218  00585E  0100               	movlb	0	; () banked
  5219  005860  C0F3  F026         	movff	_FatFs,dir_rewind@fs
  5220                           
  5221                           ; BSR set to: 0
  5222                           ;pff.c: 445: dj->index = 0;
  5223  005864  C01C  FFD9         	movff	dir_rewind@dj,fsr2l
  5224  005868  C01D  FFDA         	movff	dir_rewind@dj+1,fsr2h
  5225  00586C  0E00               	movlw	0
  5226  00586E  6EDE               	movwf	postinc2,c
  5227  005870  0E00               	movlw	0
  5228  005872  6EDD               	movwf	postdec2,c
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;pff.c: 446: clst = dj->sclust;
  5232  005874  EE20 F004          	lfsr	2,4
  5233  005878  501C               	movf	dir_rewind@dj,w,c
  5234  00587A  26D9               	addwf	fsr2l,f,c
  5235  00587C  501D               	movf	dir_rewind@dj+1,w,c
  5236  00587E  22DA               	addwfc	fsr2h,f,c
  5237  005880  CFDE F028          	movff	postinc2,dir_rewind@clst
  5238  005884  CFDE F029          	movff	postinc2,dir_rewind@clst+1
  5239  005888  CFDE F02A          	movff	postinc2,dir_rewind@clst+2
  5240  00588C  CFDE F02B          	movff	postinc2,dir_rewind@clst+3
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  5244  005890  0428               	decf	dir_rewind@clst,w,c
  5245  005892  1029               	iorwf	dir_rewind@clst+1,w,c
  5246  005894  102A               	iorwf	dir_rewind@clst+2,w,c
  5247  005896  102B               	iorwf	dir_rewind@clst+3,w,c
  5248  005898  B4D8               	btfsc	status,2,c
  5249  00589A  D018               	goto	l3228
  5250                           
  5251                           ; BSR set to: 0
  5252  00589C  EE20 F006          	lfsr	2,6
  5253  0058A0  5026               	movf	dir_rewind@fs,w,c
  5254  0058A2  26D9               	addwf	fsr2l,f,c
  5255  0058A4  5027               	movf	dir_rewind@fs+1,w,c
  5256  0058A6  22DA               	addwfc	fsr2h,f,c
  5257  0058A8  CFDE F01E          	movff	postinc2,??_dir_rewind
  5258  0058AC  CFDE F01F          	movff	postinc2,??_dir_rewind+1
  5259  0058B0  CFDE F020          	movff	postinc2,??_dir_rewind+2
  5260  0058B4  CFDE F021          	movff	postinc2,??_dir_rewind+3
  5261  0058B8  501E               	movf	??_dir_rewind,w,c
  5262  0058BA  5C28               	subwf	dir_rewind@clst,w,c
  5263  0058BC  501F               	movf	??_dir_rewind+1,w,c
  5264  0058BE  5829               	subwfb	dir_rewind@clst+1,w,c
  5265  0058C0  5020               	movf	??_dir_rewind+2,w,c
  5266  0058C2  582A               	subwfb	dir_rewind@clst+2,w,c
  5267  0058C4  5021               	movf	??_dir_rewind+3,w,c
  5268  0058C6  582B               	subwfb	dir_rewind@clst+3,w,c
  5269  0058C8  A0D8               	btfss	status,0,c
  5270  0058CA  D002               	goto	l3232
  5271  0058CC                     l3228:
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;pff.c: 448: return FR_DISK_ERR;
  5275  0058CC  0E01               	movlw	1
  5276  0058CE  D05F               	goto	l60
  5277  0058D0                     l3232:
  5278                           
  5279                           ; BSR set to: 0
  5280  0058D0  502B               	movf	dir_rewind@clst+3,w,c
  5281  0058D2  1028               	iorwf	dir_rewind@clst,w,c
  5282  0058D4  1029               	iorwf	dir_rewind@clst+1,w,c
  5283  0058D6  102A               	iorwf	dir_rewind@clst+2,w,c
  5284  0058D8  A4D8               	btfss	status,2,c
  5285  0058DA  D015               	goto	l61
  5286                           
  5287                           ; BSR set to: 0
  5288  0058DC  0E03               	movlw	3
  5289  0058DE  C026  FFD9         	movff	dir_rewind@fs,fsr2l
  5290  0058E2  C027  FFDA         	movff	dir_rewind@fs+1,fsr2h
  5291  0058E6  62DF               	cpfseq	indf2,c
  5292  0058E8  D00E               	goto	l61
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  5296                           
  5297                           ; BSR set to: 0
  5298  0058EA  EE20 F00E          	lfsr	2,14
  5299  0058EE  5026               	movf	dir_rewind@fs,w,c
  5300  0058F0  26D9               	addwf	fsr2l,f,c
  5301  0058F2  5027               	movf	dir_rewind@fs+1,w,c
  5302  0058F4  22DA               	addwfc	fsr2h,f,c
  5303  0058F6  CFDE F028          	movff	postinc2,dir_rewind@clst
  5304  0058FA  CFDE F029          	movff	postinc2,dir_rewind@clst+1
  5305  0058FE  CFDE F02A          	movff	postinc2,dir_rewind@clst+2
  5306  005902  CFDE F02B          	movff	postinc2,dir_rewind@clst+3
  5307  005906                     l61:
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  5311  005906  EE20 F008          	lfsr	2,8
  5312  00590A  501C               	movf	dir_rewind@dj,w,c
  5313  00590C  26D9               	addwf	fsr2l,f,c
  5314  00590E  501D               	movf	dir_rewind@dj+1,w,c
  5315  005910  22DA               	addwfc	fsr2h,f,c
  5316  005912  C028  FFDE         	movff	dir_rewind@clst,postinc2
  5317  005916  C029  FFDE         	movff	dir_rewind@clst+1,postinc2
  5318  00591A  C02A  FFDE         	movff	dir_rewind@clst+2,postinc2
  5319  00591E  C02B  FFDE         	movff	dir_rewind@clst+3,postinc2
  5320                           
  5321                           ; BSR set to: 0
  5322  005922  502B               	movf	dir_rewind@clst+3,w,c
  5323  005924  1028               	iorwf	dir_rewind@clst,w,c
  5324  005926  1029               	iorwf	dir_rewind@clst+1,w,c
  5325  005928  102A               	iorwf	dir_rewind@clst+2,w,c
  5326  00592A  A4D8               	btfss	status,2,c
  5327  00592C  D00F               	goto	l3242
  5328                           
  5329                           ; BSR set to: 0
  5330  00592E  EE20 F00E          	lfsr	2,14
  5331  005932  5026               	movf	dir_rewind@fs,w,c
  5332  005934  26D9               	addwf	fsr2l,f,c
  5333  005936  5027               	movf	dir_rewind@fs+1,w,c
  5334  005938  22DA               	addwfc	fsr2h,f,c
  5335  00593A  CFDE F022          	movff	postinc2,_dir_rewind$173
  5336  00593E  CFDE F023          	movff	postinc2,_dir_rewind$173+1
  5337  005942  CFDE F024          	movff	postinc2,_dir_rewind$173+2
  5338  005946  CFDE F025          	movff	postinc2,_dir_rewind$173+3
  5339  00594A  D012               	goto	l3244
  5340  00594C                     l3242:
  5341                           
  5342                           ; BSR set to: 0
  5343  00594C  C028  F00D         	movff	dir_rewind@clst,clust2sect@clst
  5344  005950  C029  F00E         	movff	dir_rewind@clst+1,clust2sect@clst+1
  5345  005954  C02A  F00F         	movff	dir_rewind@clst+2,clust2sect@clst+2
  5346  005958  C02B  F010         	movff	dir_rewind@clst+3,clust2sect@clst+3
  5347  00595C  ECB5  F02A         	call	_clust2sect	;wreg free
  5348  005960  C00D  F022         	movff	?_clust2sect,_dir_rewind$173
  5349  005964  C00E  F023         	movff	?_clust2sect+1,_dir_rewind$173+1
  5350  005968  C00F  F024         	movff	?_clust2sect+2,_dir_rewind$173+2
  5351  00596C  C010  F025         	movff	?_clust2sect+3,_dir_rewind$173+3
  5352  005970                     l3244:
  5353  005970  EE20 F00C          	lfsr	2,12
  5354  005974  501C               	movf	dir_rewind@dj,w,c
  5355  005976  26D9               	addwf	fsr2l,f,c
  5356  005978  501D               	movf	dir_rewind@dj+1,w,c
  5357  00597A  22DA               	addwfc	fsr2h,f,c
  5358  00597C  C022  FFDE         	movff	_dir_rewind$173,postinc2
  5359  005980  C023  FFDE         	movff	_dir_rewind$173+1,postinc2
  5360  005984  C024  FFDE         	movff	_dir_rewind$173+2,postinc2
  5361  005988  C025  FFDE         	movff	_dir_rewind$173+3,postinc2
  5362                           
  5363                           ;pff.c: 454: return FR_OK;
  5364  00598C  0E00               	movlw	0
  5365  00598E                     l60:
  5366  00598E  0012               	return	
  5367  005990                     __end_of_dir_rewind:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           postinc0	equ	0xFEE
  5374                           wreg	equ	0xFE8
  5375                           indf1	equ	0xFE7
  5376                           postdec1	equ	0xFE5
  5377                           fsr1h	equ	0xFE2
  5378                           fsr1l	equ	0xFE1
  5379                           indf2	equ	0xFDF
  5380                           postinc2	equ	0xFDE
  5381                           postdec2	equ	0xFDD
  5382                           plusw2	equ	0xFDB
  5383                           fsr2h	equ	0xFDA
  5384                           fsr2l	equ	0xFD9
  5385                           status	equ	0xFD8
  5386                           
  5387 ;; *************** function _dir_next *****************
  5388 ;; Defined at:
  5389 ;;		line 465 in file "pff.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  dj              2   70[COMRAM] PTR struct .
  5392 ;;		 -> pf_open@dj(16), 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;  clst            4   81[COMRAM] unsigned long 
  5395 ;;  i               2   85[COMRAM] unsigned short 
  5396 ;;  fs              2   79[COMRAM] PTR struct .
  5397 ;;		 -> main@fs(42), NULL(0), 
  5398 ;; Return value:  Size  Location     Type
  5399 ;;                  1    wreg      enum E43
  5400 ;; Registers used:
  5401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5402 ;; Tracked objects:
  5403 ;;		On entry : 0/0
  5404 ;;		On exit  : 0/0
  5405 ;;		Unchanged: 0/0
  5406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5407 ;;      Params:         2       0       0       0       0       0       0       0       0
  5408 ;;      Locals:         8       0       0       0       0       0       0       0       0
  5409 ;;      Temps:          7       0       0       0       0       0       0       0       0
  5410 ;;      Totals:        17       0       0       0       0       0       0       0       0
  5411 ;;Total ram usage:       17 bytes
  5412 ;; Hardware stack levels used:    1
  5413 ;; Hardware stack levels required when called:    6
  5414 ;; This function calls:
  5415 ;;		_clust2sect
  5416 ;;		_get_fat
  5417 ;; This function is called by:
  5418 ;;		_dir_find
  5419 ;;		_dir_read
  5420 ;;		_pf_readdir
  5421 ;; This function uses a non-reentrant model
  5422 ;;
  5423                           
  5424                           	psect	text13
  5425  006366                     __ptext13:
  5426                           	opt stack 0
  5427  006366                     _dir_next:
  5428                           	opt stack 21
  5429                           
  5430                           ;pff.c: 469: DWORD clst;
  5431                           ;pff.c: 470: WORD i;
  5432                           ;pff.c: 471: FATFS *fs = FatFs;
  5433                           
  5434                           ;incstack = 0
  5435  006366  0100               	movlb	0	; () banked
  5436  006368  C0F4  F051         	movff	_FatFs+1,dir_next@fs+1
  5437  00636C  0100               	movlb	0	; () banked
  5438  00636E  C0F3  F050         	movff	_FatFs,dir_next@fs
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;pff.c: 474: i = dj->index + 1;
  5442  006372  C047  FFD9         	movff	dir_next@dj,fsr2l
  5443  006376  C048  FFDA         	movff	dir_next@dj+1,fsr2h
  5444  00637A  CFDE F049          	movff	postinc2,??_dir_next
  5445  00637E  CFDD F04A          	movff	postdec2,??_dir_next+1
  5446  006382  0E01               	movlw	1
  5447  006384  2449               	addwf	??_dir_next,w,c
  5448  006386  6E56               	movwf	dir_next@i,c
  5449  006388  0E00               	movlw	0
  5450  00638A  204A               	addwfc	??_dir_next+1,w,c
  5451  00638C  6E57               	movwf	dir_next@i+1,c
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;pff.c: 475: if (!i || !dj->sect)
  5455  00638E  5057               	movf	dir_next@i+1,w,c
  5456  006390  1056               	iorwf	dir_next@i,w,c
  5457  006392  B4D8               	btfsc	status,2,c
  5458  006394  D0B3               	goto	u2910
  5459                           
  5460                           ; BSR set to: 0
  5461  006396  EE20 F00C          	lfsr	2,12
  5462  00639A  5047               	movf	dir_next@dj,w,c
  5463  00639C  26D9               	addwf	fsr2l,f,c
  5464  00639E  5048               	movf	dir_next@dj+1,w,c
  5465  0063A0  22DA               	addwfc	fsr2h,f,c
  5466  0063A2  CFDE F049          	movff	postinc2,??_dir_next
  5467  0063A6  CFDE F04A          	movff	postinc2,??_dir_next+1
  5468  0063AA  CFDE F04B          	movff	postinc2,??_dir_next+2
  5469  0063AE  CFDE F04C          	movff	postinc2,??_dir_next+3
  5470  0063B2  504C               	movf	??_dir_next+3,w,c
  5471  0063B4  1049               	iorwf	??_dir_next,w,c
  5472  0063B6  104A               	iorwf	??_dir_next+1,w,c
  5473  0063B8  104B               	iorwf	??_dir_next+2,w,c
  5474  0063BA  B4D8               	btfsc	status,2,c
  5475                           
  5476                           ; BSR set to: 0
  5477  0063BC  D09F               	goto	u2910
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;pff.c: 478: if (!(i % 16)) {
  5481                           
  5482                           ; BSR set to: 0
  5483                           
  5484                           ; BSR set to: 0
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;pff.c: 476: return FR_NO_FILE;
  5488  0063BE  0E0F               	movlw	15
  5489  0063C0  1456               	andwf	dir_next@i,w,c
  5490  0063C2  6E49               	movwf	??_dir_next& (0+255),c
  5491  0063C4  0E00               	movlw	0
  5492  0063C6  1457               	andwf	dir_next@i+1,w,c
  5493  0063C8  6E4A               	movwf	(??_dir_next+1)& (0+255),c
  5494  0063CA  504A               	movf	??_dir_next+1,w,c
  5495  0063CC  1049               	iorwf	??_dir_next,w,c
  5496  0063CE  A4D8               	btfss	status,2,c
  5497  0063D0  D0C7               	goto	l3292
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;pff.c: 479: dj->sect++;
  5501  0063D2  EE20 F00C          	lfsr	2,12
  5502  0063D6  5047               	movf	dir_next@dj,w,c
  5503  0063D8  26D9               	addwf	fsr2l,f,c
  5504  0063DA  5048               	movf	dir_next@dj+1,w,c
  5505  0063DC  22DA               	addwfc	fsr2h,f,c
  5506  0063DE  2ADE               	incf	postinc2,f,c
  5507  0063E0  0E00               	movlw	0
  5508  0063E2  22DE               	addwfc	postinc2,f,c
  5509  0063E4  22DE               	addwfc	postinc2,f,c
  5510  0063E6  22DD               	addwfc	postdec2,f,c
  5511                           
  5512                           ;pff.c: 481: if (dj->clust == 0) {
  5513  0063E8  EE20 F008          	lfsr	2,8
  5514  0063EC  5047               	movf	dir_next@dj,w,c
  5515  0063EE  26D9               	addwf	fsr2l,f,c
  5516  0063F0  5048               	movf	dir_next@dj+1,w,c
  5517  0063F2  22DA               	addwfc	fsr2h,f,c
  5518  0063F4  CFDE F049          	movff	postinc2,??_dir_next
  5519  0063F8  CFDE F04A          	movff	postinc2,??_dir_next+1
  5520  0063FC  CFDE F04B          	movff	postinc2,??_dir_next+2
  5521  006400  CFDE F04C          	movff	postinc2,??_dir_next+3
  5522  006404  504C               	movf	??_dir_next+3,w,c
  5523  006406  1049               	iorwf	??_dir_next,w,c
  5524  006408  104A               	iorwf	??_dir_next+1,w,c
  5525  00640A  104B               	iorwf	??_dir_next+2,w,c
  5526  00640C  A4D8               	btfss	status,2,c
  5527  00640E  D011               	goto	l3272
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;pff.c: 482: if (i >= fs->n_rootdir)
  5531  006410  EE20 F004          	lfsr	2,4
  5532  006414  5050               	movf	dir_next@fs,w,c
  5533  006416  26D9               	addwf	fsr2l,f,c
  5534  006418  5051               	movf	dir_next@fs+1,w,c
  5535  00641A  22DA               	addwfc	fsr2h,f,c
  5536  00641C  CFDE F049          	movff	postinc2,??_dir_next
  5537  006420  CFDD F04A          	movff	postdec2,??_dir_next+1
  5538  006424  5049               	movf	??_dir_next,w,c
  5539  006426  5C56               	subwf	dir_next@i,w,c
  5540  006428  504A               	movf	??_dir_next+1,w,c
  5541  00642A  5857               	subwfb	dir_next@i+1,w,c
  5542  00642C  A0D8               	btfss	status,0,c
  5543  00642E  D098               	goto	l3292
  5544  006430  D065               	goto	u2910
  5545  006432                     l3272:
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;pff.c: 485: else {
  5549                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  5550  006432  C056  F049         	movff	dir_next@i,??_dir_next
  5551  006436  C057  F04A         	movff	dir_next@i+1,??_dir_next+1
  5552  00643A  0E04               	movlw	4
  5553  00643C  6E4B               	movwf	(??_dir_next+2)& (0+255),c
  5554  00643E                     u2885:
  5555  00643E  90D8               	bcf	status,0,c
  5556  006440  324A               	rrcf	??_dir_next+1,f,c
  5557  006442  3249               	rrcf	??_dir_next,f,c
  5558  006444  2E4B               	decfsz	(??_dir_next+2)& (0+255),f,c
  5559  006446  D7FB               	goto	u2885
  5560  006448  0EFF               	movlw	255
  5561  00644A  6E4C               	movwf	(??_dir_next+3)& (0+255),c
  5562  00644C  0EFF               	movlw	255
  5563  00644E  6E4D               	movwf	(??_dir_next+4)& (0+255),c
  5564  006450  EE20 F002          	lfsr	2,2
  5565  006454  5050               	movf	dir_next@fs,w,c
  5566  006456  26D9               	addwf	fsr2l,f,c
  5567  006458  5051               	movf	dir_next@fs+1,w,c
  5568  00645A  22DA               	addwfc	fsr2h,f,c
  5569  00645C  50DF               	movf	indf2,w,c
  5570  00645E  6E4E               	movwf	(??_dir_next+5)& (0+255),c
  5571  006460  6A4F               	clrf	(??_dir_next+6)& (0+255),c
  5572  006462  504C               	movf	??_dir_next+3,w,c
  5573  006464  264E               	addwf	??_dir_next+5,f,c
  5574  006466  504D               	movf	??_dir_next+4,w,c
  5575  006468  224F               	addwfc	??_dir_next+6,f,c
  5576  00646A  5049               	movf	??_dir_next,w,c
  5577  00646C  164E               	andwf	??_dir_next+5,f,c
  5578  00646E  504A               	movf	??_dir_next+1,w,c
  5579  006470  164F               	andwf	??_dir_next+6,f,c
  5580  006472  504F               	movf	??_dir_next+6,w,c
  5581  006474  104E               	iorwf	??_dir_next+5,w,c
  5582  006476  A4D8               	btfss	status,2,c
  5583  006478  D073               	goto	l3292
  5584                           
  5585                           ; BSR set to: 0
  5586                           ;pff.c: 487: clst = get_fat(dj->clust);
  5587  00647A  EE20 F008          	lfsr	2,8
  5588  00647E  5047               	movf	dir_next@dj,w,c
  5589  006480  26D9               	addwf	fsr2l,f,c
  5590  006482  5048               	movf	dir_next@dj+1,w,c
  5591  006484  22DA               	addwfc	fsr2h,f,c
  5592  006486  CFDE F01F          	movff	postinc2,get_fat@clst
  5593  00648A  CFDE F020          	movff	postinc2,get_fat@clst+1
  5594  00648E  CFDE F021          	movff	postinc2,get_fat@clst+2
  5595  006492  CFDE F022          	movff	postinc2,get_fat@clst+3
  5596  006496  EC35  F034         	call	_get_fat	;wreg free
  5597  00649A  C01F  F052         	movff	?_get_fat,dir_next@clst
  5598  00649E  C020  F053         	movff	?_get_fat+1,dir_next@clst+1
  5599  0064A2  C021  F054         	movff	?_get_fat+2,dir_next@clst+2
  5600  0064A6  C022  F055         	movff	?_get_fat+3,dir_next@clst+3
  5601                           
  5602                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  5603  0064AA  0E02               	movlw	2
  5604  0064AC  6E49               	movwf	??_dir_next& (0+255),c
  5605  0064AE  6A4A               	clrf	(??_dir_next+1)& (0+255),c
  5606  0064B0  6A4B               	clrf	(??_dir_next+2)& (0+255),c
  5607  0064B2  6A4C               	clrf	(??_dir_next+3)& (0+255),c
  5608  0064B4  5049               	movf	??_dir_next,w,c
  5609  0064B6  5C52               	subwf	dir_next@clst,w,c
  5610  0064B8  504A               	movf	??_dir_next+1,w,c
  5611  0064BA  5853               	subwfb	dir_next@clst+1,w,c
  5612  0064BC  504B               	movf	??_dir_next+2,w,c
  5613  0064BE  5854               	subwfb	dir_next@clst+2,w,c
  5614  0064C0  504C               	movf	??_dir_next+3,w,c
  5615  0064C2  5855               	subwfb	dir_next@clst+3,w,c
  5616  0064C4  B0D8               	btfsc	status,0,c
  5617  0064C6  D002               	goto	l3282
  5618  0064C8  0E01               	movlw	1
  5619  0064CA  D053               	goto	l73
  5620  0064CC                     l3282:
  5621                           
  5622                           ;pff.c: 489: if (clst >= fs->n_fatent)
  5623  0064CC  EE20 F006          	lfsr	2,6
  5624  0064D0  5050               	movf	dir_next@fs,w,c
  5625  0064D2  26D9               	addwf	fsr2l,f,c
  5626  0064D4  5051               	movf	dir_next@fs+1,w,c
  5627  0064D6  22DA               	addwfc	fsr2h,f,c
  5628  0064D8  CFDE F049          	movff	postinc2,??_dir_next
  5629  0064DC  CFDE F04A          	movff	postinc2,??_dir_next+1
  5630  0064E0  CFDE F04B          	movff	postinc2,??_dir_next+2
  5631  0064E4  CFDE F04C          	movff	postinc2,??_dir_next+3
  5632  0064E8  5049               	movf	??_dir_next,w,c
  5633  0064EA  5C52               	subwf	dir_next@clst,w,c
  5634  0064EC  504A               	movf	??_dir_next+1,w,c
  5635  0064EE  5853               	subwfb	dir_next@clst+1,w,c
  5636  0064F0  504B               	movf	??_dir_next+2,w,c
  5637  0064F2  5854               	subwfb	dir_next@clst+2,w,c
  5638  0064F4  504C               	movf	??_dir_next+3,w,c
  5639  0064F6  5855               	subwfb	dir_next@clst+3,w,c
  5640  0064F8  A0D8               	btfss	status,0,c
  5641  0064FA  D002               	goto	l3288
  5642  0064FC                     u2910:
  5643                           
  5644                           ;pff.c: 490: return FR_NO_FILE;
  5645  0064FC  0E03               	movlw	3
  5646  0064FE  D039               	goto	l73
  5647  006500                     l3288:
  5648                           
  5649                           ;pff.c: 491: dj->clust = clst;
  5650  006500  EE20 F008          	lfsr	2,8
  5651  006504  5047               	movf	dir_next@dj,w,c
  5652  006506  26D9               	addwf	fsr2l,f,c
  5653  006508  5048               	movf	dir_next@dj+1,w,c
  5654  00650A  22DA               	addwfc	fsr2h,f,c
  5655  00650C  C052  FFDE         	movff	dir_next@clst,postinc2
  5656  006510  C053  FFDE         	movff	dir_next@clst+1,postinc2
  5657  006514  C054  FFDE         	movff	dir_next@clst+2,postinc2
  5658  006518  C055  FFDE         	movff	dir_next@clst+3,postinc2
  5659                           
  5660                           ;pff.c: 492: dj->sect = clust2sect(clst);
  5661  00651C  C052  F00D         	movff	dir_next@clst,clust2sect@clst
  5662  006520  C053  F00E         	movff	dir_next@clst+1,clust2sect@clst+1
  5663  006524  C054  F00F         	movff	dir_next@clst+2,clust2sect@clst+2
  5664  006528  C055  F010         	movff	dir_next@clst+3,clust2sect@clst+3
  5665  00652C  ECB5  F02A         	call	_clust2sect	;wreg free
  5666  006530  C00D  F049         	movff	?_clust2sect,??_dir_next
  5667  006534  C00E  F04A         	movff	?_clust2sect+1,??_dir_next+1
  5668  006538  C00F  F04B         	movff	?_clust2sect+2,??_dir_next+2
  5669  00653C  C010  F04C         	movff	?_clust2sect+3,??_dir_next+3
  5670  006540  EE20 F00C          	lfsr	2,12
  5671  006544  5047               	movf	dir_next@dj,w,c
  5672  006546  26D9               	addwf	fsr2l,f,c
  5673  006548  5048               	movf	dir_next@dj+1,w,c
  5674  00654A  22DA               	addwfc	fsr2h,f,c
  5675  00654C  C049  FFDE         	movff	??_dir_next,postinc2
  5676  006550  C04A  FFDE         	movff	??_dir_next+1,postinc2
  5677  006554  C04B  FFDE         	movff	??_dir_next+2,postinc2
  5678  006558  C04C  FFDD         	movff	??_dir_next+3,postdec2
  5679  00655C  06D9               	decf	fsr2l,f,c
  5680  00655E  06D9               	decf	fsr2l,f,c
  5681  006560                     l3292:
  5682                           
  5683                           ;pff.c: 493: }
  5684                           ;pff.c: 494: }
  5685                           ;pff.c: 495: }
  5686                           ;pff.c: 497: dj->index = i;
  5687  006560  C047  FFD9         	movff	dir_next@dj,fsr2l
  5688  006564  C048  FFDA         	movff	dir_next@dj+1,fsr2h
  5689  006568  C056  FFDE         	movff	dir_next@i,postinc2
  5690  00656C  C057  FFDD         	movff	dir_next@i+1,postdec2
  5691                           
  5692                           ;pff.c: 499: return FR_OK;
  5693  006570  0E00               	movlw	0
  5694  006572                     l73:
  5695  006572  0012               	return	
  5696  006574                     __end_of_dir_next:
  5697                           	opt stack 0
  5698                           tblptru	equ	0xFF8
  5699                           tblptrh	equ	0xFF7
  5700                           tblptrl	equ	0xFF6
  5701                           tablat	equ	0xFF5
  5702                           postinc0	equ	0xFEE
  5703                           wreg	equ	0xFE8
  5704                           indf1	equ	0xFE7
  5705                           postdec1	equ	0xFE5
  5706                           fsr1h	equ	0xFE2
  5707                           fsr1l	equ	0xFE1
  5708                           indf2	equ	0xFDF
  5709                           postinc2	equ	0xFDE
  5710                           postdec2	equ	0xFDD
  5711                           plusw2	equ	0xFDB
  5712                           fsr2h	equ	0xFDA
  5713                           fsr2l	equ	0xFD9
  5714                           status	equ	0xFD8
  5715                           
  5716 ;; *************** function _get_fat *****************
  5717 ;; Defined at:
  5718 ;;		line 350 in file "pff.c"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;  clst            4   30[COMRAM] unsigned long 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  bc              2   66[COMRAM] unsigned int 
  5723 ;;  ofs             2   60[COMRAM] unsigned int 
  5724 ;;  wc              2   58[COMRAM] unsigned int 
  5725 ;;  buf             4   62[COMRAM] unsigned char [4]
  5726 ;;  fs              2   68[COMRAM] PTR struct .
  5727 ;;		 -> main@fs(42), NULL(0), 
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  4   30[COMRAM] unsigned long 
  5730 ;; Registers used:
  5731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5737 ;;      Params:         4       0       0       0       0       0       0       0       0
  5738 ;;      Locals:        14       0       0       0       0       0       0       0       0
  5739 ;;      Temps:         22       0       0       0       0       0       0       0       0
  5740 ;;      Totals:        40       0       0       0       0       0       0       0       0
  5741 ;;Total ram usage:       40 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    5
  5744 ;; This function calls:
  5745 ;;		_disk_readp
  5746 ;; This function is called by:
  5747 ;;		_dir_next
  5748 ;;		_pf_read
  5749 ;;		_pf_write
  5750 ;;		_pf_lseek
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text14
  5755  00686A                     __ptext14:
  5756                           	opt stack 0
  5757  00686A                     _get_fat:
  5758                           	opt stack 24
  5759                           
  5760                           ;pff.c: 354: BYTE buf[4];
  5761                           ;pff.c: 355: FATFS *fs = FatFs;
  5762                           
  5763                           ;incstack = 0
  5764  00686A  0100               	movlb	0	; () banked
  5765  00686C  C0F4  F046         	movff	_FatFs+1,get_fat@fs+1
  5766  006870  0100               	movlb	0	; () banked
  5767  006872  C0F3  F045         	movff	_FatFs,get_fat@fs
  5768                           
  5769                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  5770  006876  0E02               	movlw	2
  5771  006878  5C1F               	subwf	get_fat@clst,w,c
  5772  00687A  0E00               	movlw	0
  5773  00687C  5820               	subwfb	get_fat@clst+1,w,c
  5774  00687E  0E00               	movlw	0
  5775  006880  5821               	subwfb	get_fat@clst+2,w,c
  5776  006882  0E00               	movlw	0
  5777  006884  5822               	subwfb	get_fat@clst+3,w,c
  5778  006886  A0D8               	btfss	status,0,c
  5779  006888  D1D0               	goto	l3186
  5780                           
  5781                           ; BSR set to: 0
  5782  00688A  EE20 F006          	lfsr	2,6
  5783  00688E  5045               	movf	get_fat@fs,w,c
  5784  006890  26D9               	addwf	fsr2l,f,c
  5785  006892  5046               	movf	get_fat@fs+1,w,c
  5786  006894  22DA               	addwfc	fsr2h,f,c
  5787  006896  CFDE F023          	movff	postinc2,??_get_fat
  5788  00689A  CFDE F024          	movff	postinc2,??_get_fat+1
  5789  00689E  CFDE F025          	movff	postinc2,??_get_fat+2
  5790  0068A2  CFDE F026          	movff	postinc2,??_get_fat+3
  5791  0068A6  5023               	movf	??_get_fat,w,c
  5792  0068A8  5C1F               	subwf	get_fat@clst,w,c
  5793  0068AA  5024               	movf	??_get_fat+1,w,c
  5794  0068AC  5820               	subwfb	get_fat@clst+1,w,c
  5795  0068AE  5025               	movf	??_get_fat+2,w,c
  5796  0068B0  5821               	subwfb	get_fat@clst+2,w,c
  5797  0068B2  5026               	movf	??_get_fat+3,w,c
  5798  0068B4  5822               	subwfb	get_fat@clst+3,w,c
  5799  0068B6  A0D8               	btfss	status,0,c
  5800  0068B8  D1AA               	goto	l3184
  5801                           
  5802                           ; BSR set to: 0
  5803  0068BA  D1B7               	goto	l3186
  5804  0068BC                     l30:
  5805                           
  5806                           ;pff.c: 363: UINT wc, bc, ofs;
  5807                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  5808  0068BC  C01F  F043         	movff	get_fat@clst,get_fat@bc
  5809  0068C0  C020  F044         	movff	get_fat@clst+1,get_fat@bc+1
  5810  0068C4  90D8               	bcf	status,0,c
  5811  0068C6  3044               	rrcf	get_fat@bc+1,w,c
  5812  0068C8  6E24               	movwf	(??_get_fat+1)& (0+255),c
  5813  0068CA  3043               	rrcf	get_fat@bc,w,c
  5814  0068CC  6E23               	movwf	??_get_fat& (0+255),c
  5815  0068CE  5023               	movf	??_get_fat,w,c
  5816  0068D0  2643               	addwf	get_fat@bc,f,c
  5817  0068D2  5024               	movf	??_get_fat+1,w,c
  5818  0068D4  2244               	addwfc	get_fat@bc+1,f,c
  5819                           
  5820                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  5821  0068D6  0EFF               	movlw	255
  5822  0068D8  1443               	andwf	get_fat@bc,w,c
  5823  0068DA  6E3D               	movwf	get_fat@ofs,c
  5824  0068DC  0E01               	movlw	1
  5825  0068DE  1444               	andwf	get_fat@bc+1,w,c
  5826  0068E0  6E3E               	movwf	get_fat@ofs+1,c
  5827  0068E2  0E09               	movlw	9
  5828  0068E4  6E23               	movwf	??_get_fat& (0+255),c
  5829  0068E6                     u2645:
  5830  0068E6  90D8               	bcf	status,0,c
  5831  0068E8  3244               	rrcf	get_fat@bc+1,f,c
  5832  0068EA  3243               	rrcf	get_fat@bc,f,c
  5833  0068EC  2E23               	decfsz	??_get_fat& (0+255),f,c
  5834  0068EE  D7FB               	goto	u2645
  5835                           
  5836                           ;pff.c: 367: if (ofs != 511) {
  5837  0068F0  283D               	incf	get_fat@ofs,w,c
  5838  0068F2  B4D8               	btfsc	status,2,c
  5839  0068F4  043E               	decf	get_fat@ofs+1,w,c
  5840  0068F6  B4D8               	btfsc	status,2,c
  5841  0068F8  D029               	goto	l3146
  5842                           
  5843                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  5844  0068FA  0E00               	movlw	high get_fat@buf
  5845  0068FC  6E0A               	movwf	disk_readp@rd+1,c
  5846  0068FE  0E3F               	movlw	low get_fat@buf
  5847  006900  6E09               	movwf	disk_readp@rd,c
  5848  006902  EE20 F00A          	lfsr	2,10
  5849  006906  5045               	movf	get_fat@fs,w,c
  5850  006908  26D9               	addwf	fsr2l,f,c
  5851  00690A  5046               	movf	get_fat@fs+1,w,c
  5852  00690C  22DA               	addwfc	fsr2h,f,c
  5853  00690E  CFDE F023          	movff	postinc2,??_get_fat
  5854  006912  CFDE F024          	movff	postinc2,??_get_fat+1
  5855  006916  CFDE F025          	movff	postinc2,??_get_fat+2
  5856  00691A  CFDE F026          	movff	postinc2,??_get_fat+3
  5857  00691E  5043               	movf	get_fat@bc,w,c
  5858  006920  2423               	addwf	??_get_fat,w,c
  5859  006922  6E0B               	movwf	disk_readp@sector,c
  5860  006924  5044               	movf	get_fat@bc+1,w,c
  5861  006926  2024               	addwfc	??_get_fat+1,w,c
  5862  006928  6E0C               	movwf	disk_readp@sector+1,c
  5863  00692A  0E00               	movlw	0
  5864  00692C  2025               	addwfc	??_get_fat+2,w,c
  5865  00692E  6E0D               	movwf	disk_readp@sector+2,c
  5866  006930  0E00               	movlw	0
  5867  006932  2026               	addwfc	??_get_fat+3,w,c
  5868  006934  6E0E               	movwf	disk_readp@sector+3,c
  5869  006936  C03D  F00F         	movff	get_fat@ofs,disk_readp@offset
  5870  00693A  C03E  F010         	movff	get_fat@ofs+1,disk_readp@offset+1
  5871  00693E  0E00               	movlw	0
  5872  006940  6E12               	movwf	disk_readp@count+1,c
  5873  006942  0E02               	movlw	2
  5874  006944  6E11               	movwf	disk_readp@count,c
  5875  006946  ECBA  F032         	call	_disk_readp	;wreg free
  5876  00694A  D05E               	goto	L5
  5877  00694C                     l3146:
  5878                           
  5879                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  5880  00694C  0E00               	movlw	high get_fat@buf
  5881  00694E  6E0A               	movwf	disk_readp@rd+1,c
  5882  006950  0E3F               	movlw	low get_fat@buf
  5883  006952  6E09               	movwf	disk_readp@rd,c
  5884  006954  EE20 F00A          	lfsr	2,10
  5885  006958  5045               	movf	get_fat@fs,w,c
  5886  00695A  26D9               	addwf	fsr2l,f,c
  5887  00695C  5046               	movf	get_fat@fs+1,w,c
  5888  00695E  22DA               	addwfc	fsr2h,f,c
  5889  006960  CFDE F023          	movff	postinc2,??_get_fat
  5890  006964  CFDE F024          	movff	postinc2,??_get_fat+1
  5891  006968  CFDE F025          	movff	postinc2,??_get_fat+2
  5892  00696C  CFDE F026          	movff	postinc2,??_get_fat+3
  5893  006970  5043               	movf	get_fat@bc,w,c
  5894  006972  2423               	addwf	??_get_fat,w,c
  5895  006974  6E0B               	movwf	disk_readp@sector,c
  5896  006976  5044               	movf	get_fat@bc+1,w,c
  5897  006978  2024               	addwfc	??_get_fat+1,w,c
  5898  00697A  6E0C               	movwf	disk_readp@sector+1,c
  5899  00697C  0E00               	movlw	0
  5900  00697E  2025               	addwfc	??_get_fat+2,w,c
  5901  006980  6E0D               	movwf	disk_readp@sector+2,c
  5902  006982  0E00               	movlw	0
  5903  006984  2026               	addwfc	??_get_fat+3,w,c
  5904  006986  6E0E               	movwf	disk_readp@sector+3,c
  5905  006988  0E01               	movlw	1
  5906  00698A  6E10               	movwf	disk_readp@offset+1,c
  5907  00698C  680F               	setf	disk_readp@offset,c
  5908  00698E  0E00               	movlw	0
  5909  006990  6E12               	movwf	disk_readp@count+1,c
  5910  006992  0E01               	movlw	1
  5911  006994  6E11               	movwf	disk_readp@count,c
  5912  006996  ECBA  F032         	call	_disk_readp	;wreg free
  5913  00699A  0900               	iorlw	0
  5914  00699C  A4D8               	btfss	status,2,c
  5915  00699E  D145               	goto	l3186
  5916                           
  5917                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  5918  0069A0  0E00               	movlw	high (get_fat@buf+1)
  5919  0069A2  6E0A               	movwf	disk_readp@rd+1,c
  5920  0069A4  0E40               	movlw	low (get_fat@buf+1)
  5921  0069A6  6E09               	movwf	disk_readp@rd,c
  5922  0069A8  EE20 F00A          	lfsr	2,10
  5923  0069AC  5045               	movf	get_fat@fs,w,c
  5924  0069AE  26D9               	addwf	fsr2l,f,c
  5925  0069B0  5046               	movf	get_fat@fs+1,w,c
  5926  0069B2  22DA               	addwfc	fsr2h,f,c
  5927  0069B4  CFDE F023          	movff	postinc2,??_get_fat
  5928  0069B8  CFDE F024          	movff	postinc2,??_get_fat+1
  5929  0069BC  CFDE F025          	movff	postinc2,??_get_fat+2
  5930  0069C0  CFDE F026          	movff	postinc2,??_get_fat+3
  5931  0069C4  5043               	movf	get_fat@bc,w,c
  5932  0069C6  2423               	addwf	??_get_fat,w,c
  5933  0069C8  6E27               	movwf	(??_get_fat+4)& (0+255),c
  5934  0069CA  5044               	movf	get_fat@bc+1,w,c
  5935  0069CC  2024               	addwfc	??_get_fat+1,w,c
  5936  0069CE  6E28               	movwf	(??_get_fat+5)& (0+255),c
  5937  0069D0  0E00               	movlw	0
  5938  0069D2  2025               	addwfc	??_get_fat+2,w,c
  5939  0069D4  6E29               	movwf	(??_get_fat+6)& (0+255),c
  5940  0069D6  0E00               	movlw	0
  5941  0069D8  2026               	addwfc	??_get_fat+3,w,c
  5942  0069DA  6E2A               	movwf	(??_get_fat+7)& (0+255),c
  5943  0069DC  0E01               	movlw	1
  5944  0069DE  2427               	addwf	??_get_fat+4,w,c
  5945  0069E0  6E0B               	movwf	disk_readp@sector,c
  5946  0069E2  0E00               	movlw	0
  5947  0069E4  2028               	addwfc	??_get_fat+5,w,c
  5948  0069E6  6E0C               	movwf	disk_readp@sector+1,c
  5949  0069E8  0E00               	movlw	0
  5950  0069EA  2029               	addwfc	??_get_fat+6,w,c
  5951  0069EC  6E0D               	movwf	disk_readp@sector+2,c
  5952  0069EE  0E00               	movlw	0
  5953  0069F0  202A               	addwfc	??_get_fat+7,w,c
  5954  0069F2  6E0E               	movwf	disk_readp@sector+3,c
  5955  0069F4  0E00               	movlw	0
  5956  0069F6  6E10               	movwf	disk_readp@offset+1,c
  5957  0069F8  0E00               	movlw	0
  5958  0069FA  6E0F               	movwf	disk_readp@offset,c
  5959  0069FC  0E00               	movlw	0
  5960  0069FE  6E12               	movwf	disk_readp@count+1,c
  5961  006A00  0E01               	movlw	1
  5962  006A02  6E11               	movwf	disk_readp@count,c
  5963  006A04  ECBA  F032         	call	_disk_readp	;wreg free
  5964  006A08                     L5:
  5965  006A08  0900               	iorlw	0
  5966  006A0A  A4D8               	btfss	status,2,c
  5967  006A0C  D10E               	goto	l3186
  5968                           
  5969                           ;pff.c: 372: }
  5970                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  5971  006A0E  5040               	movf	get_fat@buf+1,w,c
  5972  006A10  6E3C               	movwf	get_fat@wc+1,c
  5973  006A12  503F               	movf	get_fat@buf,w,c
  5974  006A14  6E3B               	movwf	get_fat@wc,c
  5975                           
  5976                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  5977  006A16  B01F               	btfsc	get_fat@clst,0,c
  5978  006A18  D007               	goto	l3160
  5979  006A1A  0EFF               	movlw	255
  5980  006A1C  143B               	andwf	get_fat@wc,w,c
  5981  006A1E  6E39               	movwf	_get_fat$113,c
  5982  006A20  0E0F               	movlw	15
  5983  006A22  143C               	andwf	get_fat@wc+1,w,c
  5984  006A24  6E3A               	movwf	_get_fat$113+1,c
  5985  006A26  D00F               	goto	l3162
  5986  006A28                     l3160:
  5987  006A28  C03B  F023         	movff	get_fat@wc,??_get_fat
  5988  006A2C  C03C  F024         	movff	get_fat@wc+1,??_get_fat+1
  5989  006A30  0E04               	movlw	4
  5990  006A32  6E25               	movwf	(??_get_fat+2)& (0+255),c
  5991  006A34                     u2705:
  5992  006A34  90D8               	bcf	status,0,c
  5993  006A36  3224               	rrcf	??_get_fat+1,f,c
  5994  006A38  3223               	rrcf	??_get_fat,f,c
  5995  006A3A  2E25               	decfsz	(??_get_fat+2)& (0+255),f,c
  5996  006A3C  D7FB               	goto	u2705
  5997  006A3E  C023  F039         	movff	??_get_fat,_get_fat$113
  5998  006A42  C024  F03A         	movff	??_get_fat+1,_get_fat$113+1
  5999  006A46                     l3162:
  6000  006A46  C039  F01F         	movff	_get_fat$113,?_get_fat
  6001  006A4A  C03A  F020         	movff	_get_fat$113+1,?_get_fat+1
  6002  006A4E  D04F               	goto	L3
  6003  006A50                     l3166:
  6004                           
  6005                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  6006  006A50  0E00               	movlw	high get_fat@buf
  6007  006A52  6E0A               	movwf	disk_readp@rd+1,c
  6008  006A54  0E3F               	movlw	low get_fat@buf
  6009  006A56  6E09               	movwf	disk_readp@rd,c
  6010  006A58  EE20 F00A          	lfsr	2,10
  6011  006A5C  5045               	movf	get_fat@fs,w,c
  6012  006A5E  26D9               	addwf	fsr2l,f,c
  6013  006A60  5046               	movf	get_fat@fs+1,w,c
  6014  006A62  22DA               	addwfc	fsr2h,f,c
  6015  006A64  CFDE F023          	movff	postinc2,??_get_fat
  6016  006A68  CFDE F024          	movff	postinc2,??_get_fat+1
  6017  006A6C  CFDE F025          	movff	postinc2,??_get_fat+2
  6018  006A70  CFDE F026          	movff	postinc2,??_get_fat+3
  6019  006A74  C01F  F027         	movff	get_fat@clst,??_get_fat+4
  6020  006A78  C020  F028         	movff	get_fat@clst+1,??_get_fat+5
  6021  006A7C  C021  F029         	movff	get_fat@clst+2,??_get_fat+6
  6022  006A80  C022  F02A         	movff	get_fat@clst+3,??_get_fat+7
  6023  006A84  C028  F027         	movff	??_get_fat+5,??_get_fat+4
  6024  006A88  C029  F028         	movff	??_get_fat+6,??_get_fat+5
  6025  006A8C  C02A  F029         	movff	??_get_fat+7,??_get_fat+6
  6026  006A90  6A2A               	clrf	??_get_fat+7,c
  6027  006A92  5023               	movf	??_get_fat,w,c
  6028  006A94  2427               	addwf	??_get_fat+4,w,c
  6029  006A96  6E0B               	movwf	disk_readp@sector,c
  6030  006A98  5024               	movf	??_get_fat+1,w,c
  6031  006A9A  2028               	addwfc	??_get_fat+5,w,c
  6032  006A9C  6E0C               	movwf	disk_readp@sector+1,c
  6033  006A9E  5025               	movf	??_get_fat+2,w,c
  6034  006AA0  2029               	addwfc	??_get_fat+6,w,c
  6035  006AA2  6E0D               	movwf	disk_readp@sector+2,c
  6036  006AA4  5026               	movf	??_get_fat+3,w,c
  6037  006AA6  202A               	addwfc	??_get_fat+7,w,c
  6038  006AA8  6E0E               	movwf	disk_readp@sector+3,c
  6039  006AAA  0EFF               	movlw	255
  6040  006AAC  141F               	andwf	get_fat@clst,w,c
  6041  006AAE  6E2B               	movwf	(??_get_fat+8)& (0+255),c
  6042  006AB0  0E00               	movlw	0
  6043  006AB2  1420               	andwf	get_fat@clst+1,w,c
  6044  006AB4  6E2C               	movwf	(??_get_fat+9)& (0+255),c
  6045  006AB6  90D8               	bcf	status,0,c
  6046  006AB8  342B               	rlcf	??_get_fat+8,w,c
  6047  006ABA  6E0F               	movwf	disk_readp@offset,c
  6048  006ABC  342C               	rlcf	??_get_fat+9,w,c
  6049  006ABE  6E10               	movwf	disk_readp@offset+1,c
  6050  006AC0  0E00               	movlw	0
  6051  006AC2  6E12               	movwf	disk_readp@count+1,c
  6052  006AC4  0E02               	movlw	2
  6053  006AC6  6E11               	movwf	disk_readp@count,c
  6054  006AC8  ECBA  F032         	call	_disk_readp	;wreg free
  6055  006ACC  0900               	iorlw	0
  6056  006ACE  A4D8               	btfss	status,2,c
  6057  006AD0  D0AC               	goto	l3186
  6058                           
  6059                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  6060  006AD2  503F               	movf	get_fat@buf,w,c
  6061  006AD4  C040  F023         	movff	get_fat@buf+1,??_get_fat
  6062  006AD8  6A24               	clrf	(??_get_fat+1)& (0+255),c
  6063  006ADA  C023  F024         	movff	??_get_fat,??_get_fat+1
  6064  006ADE  6A23               	clrf	??_get_fat,c
  6065  006AE0  1223               	iorwf	??_get_fat,f,c
  6066  006AE2  0E00               	movlw	0
  6067  006AE4  1224               	iorwf	??_get_fat+1,f,c
  6068  006AE6  C023  F01F         	movff	??_get_fat,?_get_fat
  6069  006AEA  C024  F020         	movff	??_get_fat+1,?_get_fat+1
  6070  006AEE                     L3:
  6071  006AEE  6A21               	clrf	?_get_fat+2,c
  6072  006AF0  6A22               	clrf	?_get_fat+3,c
  6073  006AF2  D0A3               	goto	l28
  6074  006AF4                     l3174:
  6075                           
  6076                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  6077  006AF4  0E00               	movlw	high get_fat@buf
  6078  006AF6  6E0A               	movwf	disk_readp@rd+1,c
  6079  006AF8  0E3F               	movlw	low get_fat@buf
  6080  006AFA  6E09               	movwf	disk_readp@rd,c
  6081  006AFC  EE20 F00A          	lfsr	2,10
  6082  006B00  5045               	movf	get_fat@fs,w,c
  6083  006B02  26D9               	addwf	fsr2l,f,c
  6084  006B04  5046               	movf	get_fat@fs+1,w,c
  6085  006B06  22DA               	addwfc	fsr2h,f,c
  6086  006B08  CFDE F023          	movff	postinc2,??_get_fat
  6087  006B0C  CFDE F024          	movff	postinc2,??_get_fat+1
  6088  006B10  CFDE F025          	movff	postinc2,??_get_fat+2
  6089  006B14  CFDE F026          	movff	postinc2,??_get_fat+3
  6090  006B18  C01F  F027         	movff	get_fat@clst,??_get_fat+4
  6091  006B1C  C020  F028         	movff	get_fat@clst+1,??_get_fat+5
  6092  006B20  C021  F029         	movff	get_fat@clst+2,??_get_fat+6
  6093  006B24  C022  F02A         	movff	get_fat@clst+3,??_get_fat+7
  6094  006B28  0E08               	movlw	8
  6095  006B2A  D005               	goto	u2720
  6096  006B2C                     u2725:
  6097  006B2C  90D8               	bcf	status,0,c
  6098  006B2E  322A               	rrcf	??_get_fat+7,f,c
  6099  006B30  3229               	rrcf	??_get_fat+6,f,c
  6100  006B32  3228               	rrcf	??_get_fat+5,f,c
  6101  006B34  3227               	rrcf	??_get_fat+4,f,c
  6102  006B36                     u2720:
  6103  006B36  2EE8               	decfsz	wreg,f,c
  6104  006B38  D7F9               	goto	u2725
  6105  006B3A  5023               	movf	??_get_fat,w,c
  6106  006B3C  2427               	addwf	??_get_fat+4,w,c
  6107  006B3E  6E0B               	movwf	disk_readp@sector,c
  6108  006B40  5024               	movf	??_get_fat+1,w,c
  6109  006B42  2028               	addwfc	??_get_fat+5,w,c
  6110  006B44  6E0C               	movwf	disk_readp@sector+1,c
  6111  006B46  5025               	movf	??_get_fat+2,w,c
  6112  006B48  2029               	addwfc	??_get_fat+6,w,c
  6113  006B4A  6E0D               	movwf	disk_readp@sector+2,c
  6114  006B4C  5026               	movf	??_get_fat+3,w,c
  6115  006B4E  202A               	addwfc	??_get_fat+7,w,c
  6116  006B50  6E0E               	movwf	disk_readp@sector+3,c
  6117  006B52  0E7F               	movlw	127
  6118  006B54  141F               	andwf	get_fat@clst,w,c
  6119  006B56  6E2B               	movwf	(??_get_fat+8)& (0+255),c
  6120  006B58  0E00               	movlw	0
  6121  006B5A  1420               	andwf	get_fat@clst+1,w,c
  6122  006B5C  6E2C               	movwf	(??_get_fat+9)& (0+255),c
  6123  006B5E  90D8               	bcf	status,0,c
  6124  006B60  362B               	rlcf	??_get_fat+8,f,c
  6125  006B62  362C               	rlcf	??_get_fat+9,f,c
  6126  006B64  90D8               	bcf	status,0,c
  6127  006B66  362B               	rlcf	??_get_fat+8,f,c
  6128  006B68  362C               	rlcf	??_get_fat+9,f,c
  6129  006B6A  C02B  F00F         	movff	??_get_fat+8,disk_readp@offset
  6130  006B6E  C02C  F010         	movff	??_get_fat+9,disk_readp@offset+1
  6131  006B72  0E00               	movlw	0
  6132  006B74  6E12               	movwf	disk_readp@count+1,c
  6133  006B76  0E04               	movlw	4
  6134  006B78  6E11               	movwf	disk_readp@count,c
  6135  006B7A  ECBA  F032         	call	_disk_readp	;wreg free
  6136  006B7E  0900               	iorlw	0
  6137  006B80  A4D8               	btfss	status,2,c
  6138  006B82  D053               	goto	l3186
  6139                           
  6140                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  6141  006B84  5040               	movf	get_fat@buf+1,w,c
  6142  006B86  6E24               	movwf	(??_get_fat+1)& (0+255),c
  6143  006B88  6A23               	clrf	??_get_fat& (0+255),c
  6144  006B8A  C041  F025         	movff	get_fat@buf+2,??_get_fat+2
  6145  006B8E  6A26               	clrf	(??_get_fat+3)& (0+255),c
  6146  006B90  6A27               	clrf	(??_get_fat+4)& (0+255),c
  6147  006B92  6A28               	clrf	(??_get_fat+5)& (0+255),c
  6148  006B94  C026  F028         	movff	??_get_fat+3,??_get_fat+5
  6149  006B98  C025  F027         	movff	??_get_fat+2,??_get_fat+4
  6150  006B9C  6A26               	clrf	??_get_fat+3,c
  6151  006B9E  6A25               	clrf	??_get_fat+2,c
  6152  006BA0  C042  F029         	movff	get_fat@buf+3,??_get_fat+6
  6153  006BA4  6A2A               	clrf	(??_get_fat+7)& (0+255),c
  6154  006BA6  6A2B               	clrf	(??_get_fat+8)& (0+255),c
  6155  006BA8  6A2C               	clrf	(??_get_fat+9)& (0+255),c
  6156  006BAA  C029  F02C         	movff	??_get_fat+6,??_get_fat+9
  6157  006BAE  6A2B               	clrf	??_get_fat+8,c
  6158  006BB0  6A2A               	clrf	??_get_fat+7,c
  6159  006BB2  6A29               	clrf	??_get_fat+6,c
  6160  006BB4  5025               	movf	??_get_fat+2,w,c
  6161  006BB6  1029               	iorwf	??_get_fat+6,w,c
  6162  006BB8  6E2D               	movwf	(??_get_fat+10)& (0+255),c
  6163  006BBA  5026               	movf	??_get_fat+3,w,c
  6164  006BBC  102A               	iorwf	??_get_fat+7,w,c
  6165  006BBE  6E2E               	movwf	(??_get_fat+11)& (0+255),c
  6166  006BC0  5027               	movf	??_get_fat+4,w,c
  6167  006BC2  102B               	iorwf	??_get_fat+8,w,c
  6168  006BC4  6E2F               	movwf	(??_get_fat+12)& (0+255),c
  6169  006BC6  5028               	movf	??_get_fat+5,w,c
  6170  006BC8  102C               	iorwf	??_get_fat+9,w,c
  6171  006BCA  6E30               	movwf	(??_get_fat+13)& (0+255),c
  6172  006BCC  5023               	movf	??_get_fat,w,c
  6173  006BCE  102D               	iorwf	??_get_fat+10,w,c
  6174  006BD0  6E31               	movwf	(??_get_fat+14)& (0+255),c
  6175  006BD2  5024               	movf	??_get_fat+1,w,c
  6176  006BD4  102E               	iorwf	??_get_fat+11,w,c
  6177  006BD6  6E32               	movwf	(??_get_fat+15)& (0+255),c
  6178  006BD8  0E00               	movlw	0
  6179  006BDA  102F               	iorwf	??_get_fat+12,w,c
  6180  006BDC  6E33               	movwf	(??_get_fat+16)& (0+255),c
  6181  006BDE  0E00               	movlw	0
  6182  006BE0  1030               	iorwf	??_get_fat+13,w,c
  6183  006BE2  6E34               	movwf	(??_get_fat+17)& (0+255),c
  6184  006BE4  503F               	movf	get_fat@buf,w,c
  6185  006BE6  1031               	iorwf	??_get_fat+14,w,c
  6186  006BE8  6E35               	movwf	(??_get_fat+18)& (0+255),c
  6187  006BEA  5032               	movf	??_get_fat+15,w,c
  6188  006BEC  6E36               	movwf	(??_get_fat+19)& (0+255),c
  6189  006BEE  5033               	movf	??_get_fat+16,w,c
  6190  006BF0  6E37               	movwf	(??_get_fat+20)& (0+255),c
  6191  006BF2  5034               	movf	??_get_fat+17,w,c
  6192  006BF4  6E38               	movwf	(??_get_fat+21)& (0+255),c
  6193  006BF6  0EFF               	movlw	255
  6194  006BF8  1435               	andwf	??_get_fat+18,w,c
  6195  006BFA  6E1F               	movwf	?_get_fat,c
  6196  006BFC  0EFF               	movlw	255
  6197  006BFE  1436               	andwf	??_get_fat+19,w,c
  6198  006C00  6E20               	movwf	?_get_fat+1,c
  6199  006C02  0EFF               	movlw	255
  6200  006C04  1437               	andwf	??_get_fat+20,w,c
  6201  006C06  6E21               	movwf	?_get_fat+2,c
  6202  006C08  0E0F               	movlw	15
  6203  006C0A  1438               	andwf	??_get_fat+21,w,c
  6204  006C0C  D015               	goto	L4
  6205  006C0E                     l3184:
  6206  006C0E  C045  FFD9         	movff	get_fat@fs,fsr2l
  6207  006C12  C046  FFDA         	movff	get_fat@fs+1,fsr2h
  6208  006C16  50DF               	movf	indf2,w,c
  6209                           
  6210                           ; Switch size 1, requested type "space"
  6211                           ; Number of cases is 3, Range of values is 1 to 3
  6212                           ; switch strategies available:
  6213                           ; Name         Instructions Cycles
  6214                           ; simple_byte           10     6 (average)
  6215                           ;	Chosen strategy is simple_byte
  6216  006C18  0A01               	xorlw	1	; case 1
  6217  006C1A  B4D8               	btfsc	status,2,c
  6218  006C1C  D64F               	goto	l30
  6219  006C1E  0A03               	xorlw	3	; case 2
  6220  006C20  B4D8               	btfsc	status,2,c
  6221  006C22  D716               	goto	l3166
  6222  006C24  0A01               	xorlw	1	; case 3
  6223  006C26  B4D8               	btfsc	status,2,c
  6224  006C28  D765               	goto	l3174
  6225  006C2A                     l3186:
  6226                           
  6227                           ;pff.c: 389: return 1;
  6228  006C2A  0E01               	movlw	1
  6229  006C2C  6E1F               	movwf	?_get_fat,c
  6230  006C2E  0E00               	movlw	0
  6231  006C30  6E20               	movwf	?_get_fat+1,c
  6232  006C32  0E00               	movlw	0
  6233  006C34  6E21               	movwf	?_get_fat+2,c
  6234  006C36  0E00               	movlw	0
  6235  006C38                     L4:
  6236  006C38  6E22               	movwf	?_get_fat+3,c
  6237  006C3A                     l28:
  6238  006C3A  0012               	return	
  6239  006C3C                     __end_of_get_fat:
  6240                           	opt stack 0
  6241                           tblptru	equ	0xFF8
  6242                           tblptrh	equ	0xFF7
  6243                           tblptrl	equ	0xFF6
  6244                           tablat	equ	0xFF5
  6245                           postinc0	equ	0xFEE
  6246                           wreg	equ	0xFE8
  6247                           indf1	equ	0xFE7
  6248                           postdec1	equ	0xFE5
  6249                           fsr1h	equ	0xFE2
  6250                           fsr1l	equ	0xFE1
  6251                           indf2	equ	0xFDF
  6252                           postinc2	equ	0xFDE
  6253                           postdec2	equ	0xFDD
  6254                           plusw2	equ	0xFDB
  6255                           fsr2h	equ	0xFDA
  6256                           fsr2l	equ	0xFD9
  6257                           status	equ	0xFD8
  6258                           
  6259 ;; *************** function _clust2sect *****************
  6260 ;; Defined at:
  6261 ;;		line 400 in file "pff.c"
  6262 ;; Parameters:    Size  Location     Type
  6263 ;;  clst            4   12[COMRAM] unsigned long 
  6264 ;; Auto vars:     Size  Location     Type
  6265 ;;  fs              2   25[COMRAM] PTR struct .
  6266 ;;		 -> main@fs(42), NULL(0), 
  6267 ;; Return value:  Size  Location     Type
  6268 ;;                  4   12[COMRAM] unsigned long 
  6269 ;; Registers used:
  6270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6271 ;; Tracked objects:
  6272 ;;		On entry : 0/0
  6273 ;;		On exit  : 0/0
  6274 ;;		Unchanged: 0/0
  6275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6276 ;;      Params:         4       0       0       0       0       0       0       0       0
  6277 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6278 ;;      Temps:          9       0       0       0       0       0       0       0       0
  6279 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6280 ;;Total ram usage:       15 bytes
  6281 ;; Hardware stack levels used:    1
  6282 ;; Hardware stack levels required when called:    1
  6283 ;; This function calls:
  6284 ;;		___lmul
  6285 ;; This function is called by:
  6286 ;;		_dir_rewind
  6287 ;;		_dir_next
  6288 ;;		_pf_read
  6289 ;;		_pf_write
  6290 ;;		_pf_lseek
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text15
  6295  00556A                     __ptext15:
  6296                           	opt stack 0
  6297  00556A                     _clust2sect:
  6298                           	opt stack 28
  6299                           
  6300                           ;pff.c: 404: FATFS *fs = FatFs;
  6301                           
  6302                           ;incstack = 0
  6303  00556A  0100               	movlb	0	; () banked
  6304  00556C  C0F4  F01B         	movff	_FatFs+1,clust2sect@fs+1
  6305  005570  0100               	movlb	0	; () banked
  6306  005572  C0F3  F01A         	movff	_FatFs,clust2sect@fs
  6307                           
  6308                           ;pff.c: 407: clst -= 2;
  6309  005576  0E02               	movlw	2
  6310  005578  5E0D               	subwf	clust2sect@clst,f,c
  6311  00557A  0E00               	movlw	0
  6312  00557C  5A0E               	subwfb	clust2sect@clst+1,f,c
  6313  00557E  5A0F               	subwfb	clust2sect@clst+2,f,c
  6314  005580  5A10               	subwfb	clust2sect@clst+3,f,c
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  6318  005582  EE20 F006          	lfsr	2,6
  6319  005586  501A               	movf	clust2sect@fs,w,c
  6320  005588  26D9               	addwf	fsr2l,f,c
  6321  00558A  501B               	movf	clust2sect@fs+1,w,c
  6322  00558C  22DA               	addwfc	fsr2h,f,c
  6323  00558E  0EFE               	movlw	254
  6324  005590  24DE               	addwf	postinc2,w,c
  6325  005592  6E11               	movwf	??_clust2sect& (0+255),c
  6326  005594  0EFF               	movlw	255
  6327  005596  20DE               	addwfc	postinc2,w,c
  6328  005598  6E12               	movwf	(??_clust2sect+1)& (0+255),c
  6329  00559A  0EFF               	movlw	255
  6330  00559C  20DE               	addwfc	postinc2,w,c
  6331  00559E  6E13               	movwf	(??_clust2sect+2)& (0+255),c
  6332  0055A0  0EFF               	movlw	255
  6333  0055A2  20DE               	addwfc	postinc2,w,c
  6334  0055A4  6E14               	movwf	(??_clust2sect+3)& (0+255),c
  6335  0055A6  5011               	movf	??_clust2sect,w,c
  6336  0055A8  5C0D               	subwf	clust2sect@clst,w,c
  6337  0055AA  5012               	movf	??_clust2sect+1,w,c
  6338  0055AC  580E               	subwfb	clust2sect@clst+1,w,c
  6339  0055AE  5013               	movf	??_clust2sect+2,w,c
  6340  0055B0  580F               	subwfb	clust2sect@clst+2,w,c
  6341  0055B2  5014               	movf	??_clust2sect+3,w,c
  6342  0055B4  5810               	subwfb	clust2sect@clst+3,w,c
  6343  0055B6  A0D8               	btfss	status,0,c
  6344  0055B8  D008               	goto	l3198
  6345                           
  6346                           ; BSR set to: 0
  6347  0055BA  0E00               	movlw	0
  6348  0055BC  6E0D               	movwf	?_clust2sect,c
  6349  0055BE  0E00               	movlw	0
  6350  0055C0  6E0E               	movwf	?_clust2sect+1,c
  6351  0055C2  0E00               	movlw	0
  6352  0055C4  6E0F               	movwf	?_clust2sect+2,c
  6353  0055C6  0E00               	movlw	0
  6354  0055C8  D038               	goto	L6
  6355  0055CA                     l3198:
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  6359  0055CA  EE20 F012          	lfsr	2,18
  6360  0055CE  501A               	movf	clust2sect@fs,w,c
  6361  0055D0  26D9               	addwf	fsr2l,f,c
  6362  0055D2  501B               	movf	clust2sect@fs+1,w,c
  6363  0055D4  22DA               	addwfc	fsr2h,f,c
  6364  0055D6  CFDE F011          	movff	postinc2,??_clust2sect
  6365  0055DA  CFDE F012          	movff	postinc2,??_clust2sect+1
  6366  0055DE  CFDE F013          	movff	postinc2,??_clust2sect+2
  6367  0055E2  CFDE F014          	movff	postinc2,??_clust2sect+3
  6368  0055E6  EE20 F002          	lfsr	2,2
  6369  0055EA  501A               	movf	clust2sect@fs,w,c
  6370  0055EC  26D9               	addwf	fsr2l,f,c
  6371  0055EE  501B               	movf	clust2sect@fs+1,w,c
  6372  0055F0  22DA               	addwfc	fsr2h,f,c
  6373  0055F2  50DF               	movf	indf2,w,c
  6374  0055F4  6E15               	movwf	(??_clust2sect+4)& (0+255),c
  6375  0055F6  5015               	movf	??_clust2sect+4,w,c
  6376  0055F8  6E01               	movwf	___lmul@multiplier,c
  6377  0055FA  6A02               	clrf	___lmul@multiplier+1,c
  6378  0055FC  6A03               	clrf	___lmul@multiplier+2,c
  6379  0055FE  6A04               	clrf	___lmul@multiplier+3,c
  6380  005600  C00D  F005         	movff	clust2sect@clst,___lmul@multiplicand
  6381  005604  C00E  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  6382  005608  C00F  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  6383  00560C  C010  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  6384  005610  ECEC  F028         	call	___lmul	;wreg free
  6385  005614  C001  F016         	movff	?___lmul,??_clust2sect+5
  6386  005618  C002  F017         	movff	?___lmul+1,??_clust2sect+6
  6387  00561C  C003  F018         	movff	?___lmul+2,??_clust2sect+7
  6388  005620  C004  F019         	movff	?___lmul+3,??_clust2sect+8
  6389  005624  5011               	movf	??_clust2sect,w,c
  6390  005626  2416               	addwf	??_clust2sect+5,w,c
  6391  005628  6E0D               	movwf	?_clust2sect,c
  6392  00562A  5012               	movf	??_clust2sect+1,w,c
  6393  00562C  2017               	addwfc	??_clust2sect+6,w,c
  6394  00562E  6E0E               	movwf	?_clust2sect+1,c
  6395  005630  5013               	movf	??_clust2sect+2,w,c
  6396  005632  2018               	addwfc	??_clust2sect+7,w,c
  6397  005634  6E0F               	movwf	?_clust2sect+2,c
  6398  005636  5014               	movf	??_clust2sect+3,w,c
  6399  005638  2019               	addwfc	??_clust2sect+8,w,c
  6400  00563A                     L6:
  6401  00563A  6E10               	movwf	?_clust2sect+3,c
  6402  00563C  0012               	return	
  6403  00563E                     __end_of_clust2sect:
  6404                           	opt stack 0
  6405                           tblptru	equ	0xFF8
  6406                           tblptrh	equ	0xFF7
  6407                           tblptrl	equ	0xFF6
  6408                           tablat	equ	0xFF5
  6409                           postinc0	equ	0xFEE
  6410                           wreg	equ	0xFE8
  6411                           indf1	equ	0xFE7
  6412                           postdec1	equ	0xFE5
  6413                           fsr1h	equ	0xFE2
  6414                           fsr1l	equ	0xFE1
  6415                           indf2	equ	0xFDF
  6416                           postinc2	equ	0xFDE
  6417                           postdec2	equ	0xFDD
  6418                           plusw2	equ	0xFDB
  6419                           fsr2h	equ	0xFDA
  6420                           fsr2l	equ	0xFD9
  6421                           status	equ	0xFD8
  6422                           
  6423 ;; *************** function _create_name *****************
  6424 ;; Defined at:
  6425 ;;		line 581 in file "pff.c"
  6426 ;; Parameters:    Size  Location     Type
  6427 ;;  dj              2    8[COMRAM] PTR struct .
  6428 ;;		 -> pf_open@dj(16), 
  6429 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  6430 ;;		 -> follow_path@path(2), 
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;  d               1   19[COMRAM] unsigned char 
  6433 ;;  sfn             2   24[COMRAM] PTR unsigned char 
  6434 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6435 ;;  p               2   20[COMRAM] PTR const unsigned char 
  6436 ;;		 -> STR_1(10), 
  6437 ;;  c               1   27[COMRAM] unsigned char 
  6438 ;;  i               1   26[COMRAM] unsigned char 
  6439 ;;  si              1   23[COMRAM] unsigned char 
  6440 ;;  ni              1   22[COMRAM] unsigned char 
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  1    wreg      enum E43
  6443 ;; Registers used:
  6444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6450 ;;      Params:         4       0       0       0       0       0       0       0       0
  6451 ;;      Locals:         9       0       0       0       0       0       0       0       0
  6452 ;;      Temps:          7       0       0       0       0       0       0       0       0
  6453 ;;      Totals:        20       0       0       0       0       0       0       0       0
  6454 ;;Total ram usage:       20 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    1
  6457 ;; This function calls:
  6458 ;;		_mem_set
  6459 ;; This function is called by:
  6460 ;;		_follow_path
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           	psect	text16
  6465  005990                     __ptext16:
  6466                           	opt stack 0
  6467  005990                     _create_name:
  6468                           	opt stack 27
  6469                           
  6470                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  6471                           ;pff.c: 587: const char *p;
  6472                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  6473                           ;pff.c: 595: sfn = dj->fn;
  6474                           
  6475                           ;incstack = 0
  6476  005990  EE20 F002          	lfsr	2,2
  6477  005994  5009               	movf	create_name@dj,w,c
  6478  005996  26D9               	addwf	fsr2l,f,c
  6479  005998  500A               	movf	create_name@dj+1,w,c
  6480  00599A  22DA               	addwfc	fsr2h,f,c
  6481  00599C  CFDE F019          	movff	postinc2,create_name@sfn
  6482  0059A0  CFDD F01A          	movff	postdec2,create_name@sfn+1
  6483                           
  6484                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  6485  0059A4  C01A  F002         	movff	create_name@sfn+1,mem_set@dst+1
  6486  0059A8  C019  F001         	movff	create_name@sfn,mem_set@dst
  6487  0059AC  0E00               	movlw	0
  6488  0059AE  6E04               	movwf	mem_set@val+1,c
  6489  0059B0  0E20               	movlw	32
  6490  0059B2  6E03               	movwf	mem_set@val,c
  6491  0059B4  0E00               	movlw	0
  6492  0059B6  6E06               	movwf	mem_set@cnt+1,c
  6493  0059B8  0E0B               	movlw	11
  6494  0059BA  6E05               	movwf	mem_set@cnt,c
  6495  0059BC  EC62  F028         	call	_mem_set	;wreg free
  6496                           
  6497                           ;pff.c: 597: si = i = 0; ni = 8;
  6498  0059C0  0E00               	movlw	0
  6499  0059C2  6E1B               	movwf	create_name@i,c
  6500  0059C4  C01B  F018         	movff	create_name@i,create_name@si
  6501  0059C8  0E08               	movlw	8
  6502  0059CA  6E17               	movwf	create_name@ni,c
  6503                           
  6504                           ;pff.c: 598: p = *path;
  6505  0059CC  C00B  FFD9         	movff	create_name@path,fsr2l
  6506  0059D0  C00C  FFDA         	movff	create_name@path+1,fsr2h
  6507  0059D4  CFDE F015          	movff	postinc2,create_name@p
  6508  0059D8  CFDD F016          	movff	postdec2,create_name@p+1
  6509  0059DC                     l3358:
  6510                           
  6511                           ;pff.c: 600: c = p[si++];
  6512  0059DC  5018               	movf	create_name@si,w,c
  6513  0059DE  0D01               	mullw	1
  6514  0059E0  C015  F00D         	movff	create_name@p,??_create_name
  6515  0059E4  C016  F00E         	movff	create_name@p+1,??_create_name+1
  6516  0059E8  50F3               	movf	prodl,w,c
  6517  0059EA  260D               	addwf	??_create_name,f,c
  6518  0059EC  50F4               	movf	prodh,w,c
  6519  0059EE  220E               	addwfc	??_create_name+1,f,c
  6520  0059F0  C00D  FFF6         	movff	??_create_name,tblptrl
  6521  0059F4  C00E  FFF7         	movff	??_create_name+1,tblptrh
  6522  0059F8                     	if	0	;tblptru may be non-zero
  6523  0059F8                     	endif
  6524  0059F8                     	if	0	;tblptru may be non-zero
  6525  0059F8                     	endif
  6526  0059F8  0008               	tblrd		*
  6527  0059FA  CFF5 F01C          	movff	tablat,create_name@c
  6528  0059FE  2A18               	incf	create_name@si,f,c
  6529                           
  6530                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  6531  005A00  0E20               	movlw	32
  6532  005A02  641C               	cpfsgt	create_name@c,c
  6533  005A04  D045               	goto	l3404
  6534  005A06  501C               	movf	create_name@c,w,c
  6535  005A08  0A2F               	xorlw	47
  6536  005A0A  B4D8               	btfsc	status,2,c
  6537  005A0C  D041               	goto	l3404
  6538                           
  6539                           ;pff.c: 602: if (c == '.' || i >= ni) {
  6540  005A0E  501C               	movf	create_name@c,w,c
  6541  005A10  0A2E               	xorlw	46
  6542  005A12  B4D8               	btfsc	status,2,c
  6543  005A14  D004               	goto	l3370
  6544  005A16  5017               	movf	create_name@ni,w,c
  6545  005A18  5C1B               	subwf	create_name@i,w,c
  6546  005A1A  A0D8               	btfss	status,0,c
  6547  005A1C  D00D               	goto	l3376
  6548  005A1E                     l3370:
  6549                           
  6550                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  6551  005A1E  5017               	movf	create_name@ni,w,c
  6552  005A20  0A08               	xorlw	8
  6553  005A22  A4D8               	btfss	status,2,c
  6554  005A24  D035               	goto	l3404
  6555  005A26  501C               	movf	create_name@c,w,c
  6556  005A28  0A2E               	xorlw	46
  6557  005A2A  A4D8               	btfss	status,2,c
  6558  005A2C  D031               	goto	l3404
  6559                           
  6560                           ;pff.c: 604: i = 8; ni = 11;
  6561  005A2E  0E08               	movlw	8
  6562  005A30  6E1B               	movwf	create_name@i,c
  6563  005A32  0E0B               	movlw	11
  6564  005A34  6E17               	movwf	create_name@ni,c
  6565                           
  6566                           ;pff.c: 605: continue;
  6567  005A36  D7D2               	goto	l3358
  6568  005A38                     l3376:
  6569                           
  6570                           ;pff.c: 606: }
  6571                           ;pff.c: 609: if (c >= 0x80)
  6572  005A38  0E7F               	movlw	127
  6573  005A3A  641C               	cpfsgt	create_name@c,c
  6574  005A3C  D014               	goto	l3394
  6575                           
  6576                           ;pff.c: 610: c = cvt[c - 0x80];
  6577  005A3E  0E80               	movlw	128
  6578  005A40  6E0D               	movwf	??_create_name& (0+255),c
  6579  005A42  0EFF               	movlw	255
  6580  005A44  6E0E               	movwf	(??_create_name+1)& (0+255),c
  6581  005A46  501C               	movf	create_name@c,w,c
  6582  005A48  6E0F               	movwf	(??_create_name+2)& (0+255),c
  6583  005A4A  6A10               	clrf	(??_create_name+3)& (0+255),c
  6584  005A4C  500D               	movf	??_create_name,w,c
  6585  005A4E  260F               	addwf	??_create_name+2,f,c
  6586  005A50  500E               	movf	??_create_name+1,w,c
  6587  005A52  2210               	addwfc	??_create_name+3,f,c
  6588  005A54  0E51               	movlw	low create_name@cvt
  6589  005A56  240F               	addwf	??_create_name+2,w,c
  6590  005A58  6EF6               	movwf	tblptrl,c
  6591  005A5A  0E7D               	movlw	high create_name@cvt
  6592  005A5C  2010               	addwfc	??_create_name+3,w,c
  6593  005A5E  6EF7               	movwf	tblptrh,c
  6594  005A60                     	if	0	;There are less than 3 active tblptr bytes
  6595  005A60                     	endif
  6596  005A60  0008               	tblrd		*
  6597  005A62  CFF5 F01C          	movff	tablat,create_name@c
  6598  005A66                     l3394:
  6599  005A66  0E60               	movlw	96
  6600  005A68  641C               	cpfsgt	create_name@c,c
  6601  005A6A  D006               	goto	l3400
  6602  005A6C  0E7B               	movlw	123
  6603  005A6E  5C1C               	subwf	create_name@c,w,c
  6604  005A70  B0D8               	btfsc	status,0,c
  6605  005A72  D002               	goto	l3400
  6606  005A74  0E20               	movlw	32
  6607  005A76  5E1C               	subwf	create_name@c,f,c
  6608  005A78                     l3400:
  6609                           
  6610                           ;pff.c: 620: sfn[i++] = c;
  6611  005A78  501B               	movf	create_name@i,w,c
  6612  005A7A  0D01               	mullw	1
  6613  005A7C  50F3               	movf	prodl,w,c
  6614  005A7E  2419               	addwf	create_name@sfn,w,c
  6615  005A80  6ED9               	movwf	fsr2l,c
  6616  005A82  50F4               	movf	prodh,w,c
  6617  005A84  201A               	addwfc	create_name@sfn+1,w,c
  6618  005A86  6EDA               	movwf	fsr2h,c
  6619  005A88  C01C  FFDF         	movff	create_name@c,indf2
  6620  005A8C  2A1B               	incf	create_name@i,f,c
  6621  005A8E  D7A6               	goto	l3358
  6622  005A90                     l3404:
  6623                           
  6624                           ;pff.c: 623: *path = &p[si];
  6625  005A90  5018               	movf	create_name@si,w,c
  6626  005A92  0D01               	mullw	1
  6627  005A94  C015  F00D         	movff	create_name@p,??_create_name
  6628  005A98  C016  F00E         	movff	create_name@p+1,??_create_name+1
  6629  005A9C  50F3               	movf	prodl,w,c
  6630  005A9E  260D               	addwf	??_create_name,f,c
  6631  005AA0  50F4               	movf	prodh,w,c
  6632  005AA2  220E               	addwfc	??_create_name+1,f,c
  6633  005AA4  C00B  FFD9         	movff	create_name@path,fsr2l
  6634  005AA8  C00C  FFDA         	movff	create_name@path+1,fsr2h
  6635  005AAC  C00D  FFDE         	movff	??_create_name,postinc2
  6636  005AB0  C00E  FFDD         	movff	??_create_name+1,postdec2
  6637                           
  6638                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  6639  005AB4  EE20 F00B          	lfsr	2,11
  6640  005AB8  5019               	movf	create_name@sfn,w,c
  6641  005ABA  26D9               	addwf	fsr2l,f,c
  6642  005ABC  501A               	movf	create_name@sfn+1,w,c
  6643  005ABE  22DA               	addwfc	fsr2h,f,c
  6644  005AC0  0E20               	movlw	32
  6645  005AC2  6AF3               	clrf	prodl,c
  6646  005AC4  641C               	cpfsgt	create_name@c,c
  6647  005AC6  2AF3               	incf	prodl,f,c
  6648  005AC8  CFF3 F00D          	movff	prodl,??_create_name
  6649  005ACC  500D               	movf	??_create_name,w,c
  6650  005ACE  6EDF               	movwf	indf2,c
  6651                           
  6652                           ;pff.c: 627: return FR_OK;
  6653  005AD0  0E00               	movlw	0
  6654  005AD2  0012               	return	
  6655  005AD4                     __end_of_create_name:
  6656                           	opt stack 0
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           indf1	equ	0xFE7
  6666                           postdec1	equ	0xFE5
  6667                           fsr1h	equ	0xFE2
  6668                           fsr1l	equ	0xFE1
  6669                           indf2	equ	0xFDF
  6670                           postinc2	equ	0xFDE
  6671                           postdec2	equ	0xFDD
  6672                           plusw2	equ	0xFDB
  6673                           fsr2h	equ	0xFDA
  6674                           fsr2l	equ	0xFD9
  6675                           status	equ	0xFD8
  6676                           
  6677 ;; *************** function _mem_set *****************
  6678 ;; Defined at:
  6679 ;;		line 329 in file "pff.c"
  6680 ;; Parameters:    Size  Location     Type
  6681 ;;  dst             2    0[COMRAM] PTR void 
  6682 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6683 ;;  val             2    2[COMRAM] int 
  6684 ;;  cnt             2    4[COMRAM] int 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  d               2    6[COMRAM] PTR unsigned char 
  6687 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;		None               void
  6690 ;; Registers used:
  6691 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6697 ;;      Params:         6       0       0       0       0       0       0       0       0
  6698 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6700 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6701 ;;Total ram usage:        8 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; This function calls:
  6704 ;;		Nothing
  6705 ;; This function is called by:
  6706 ;;		_create_name
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           	psect	text17
  6711  0050C4                     __ptext17:
  6712                           	opt stack 0
  6713  0050C4                     _mem_set:
  6714                           	opt stack 27
  6715                           
  6716                           ;pff.c: 330: char *d = (char*)dst;
  6717                           
  6718                           ;incstack = 0
  6719  0050C4  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
  6720  0050C8  C001  F007         	movff	mem_set@dst,mem_set@d
  6721                           
  6722                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  6723  0050CC  D008               	goto	l3208
  6724  0050CE                     l3204:
  6725  0050CE  C007  FFD9         	movff	mem_set@d,fsr2l
  6726  0050D2  C008  FFDA         	movff	mem_set@d+1,fsr2h
  6727  0050D6  C003  FFDF         	movff	mem_set@val,indf2
  6728  0050DA  4A07               	infsnz	mem_set@d,f,c
  6729  0050DC  2A08               	incf	mem_set@d+1,f,c
  6730  0050DE                     l3208:
  6731  0050DE  0605               	decf	mem_set@cnt,f,c
  6732  0050E0  A0D8               	btfss	status,0,c
  6733  0050E2  0606               	decf	mem_set@cnt+1,f,c
  6734  0050E4  2805               	incf	mem_set@cnt& (0+255),w,c
  6735  0050E6  B4D8               	btfsc	status,2,c
  6736  0050E8  2806               	incf	(mem_set@cnt+1)& (0+255),w,c
  6737  0050EA  B4D8               	btfsc	status,2,c
  6738  0050EC  0012               	return	
  6739  0050EE  D7EF               	goto	l3204
  6740  0050F0                     __end_of_mem_set:
  6741                           	opt stack 0
  6742                           tblptru	equ	0xFF8
  6743                           tblptrh	equ	0xFF7
  6744                           tblptrl	equ	0xFF6
  6745                           tablat	equ	0xFF5
  6746                           prodh	equ	0xFF4
  6747                           prodl	equ	0xFF3
  6748                           postinc0	equ	0xFEE
  6749                           wreg	equ	0xFE8
  6750                           indf1	equ	0xFE7
  6751                           postdec1	equ	0xFE5
  6752                           fsr1h	equ	0xFE2
  6753                           fsr1l	equ	0xFE1
  6754                           indf2	equ	0xFDF
  6755                           postinc2	equ	0xFDE
  6756                           postdec2	equ	0xFDD
  6757                           plusw2	equ	0xFDB
  6758                           fsr2h	equ	0xFDA
  6759                           fsr2l	equ	0xFD9
  6760                           status	equ	0xFD8
  6761                           
  6762 ;; *************** function _pf_mount *****************
  6763 ;; Defined at:
  6764 ;;		line 755 in file "pff.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;  fs              2   40[COMRAM] PTR struct .
  6767 ;;		 -> main@fs(42), 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  buf            36    0[BANK0 ] unsigned char [36]
  6770 ;;  fsize           4   48[BANK0 ] unsigned long 
  6771 ;;  bsect           4   44[BANK0 ] unsigned long 
  6772 ;;  mclst           4   40[BANK0 ] unsigned long 
  6773 ;;  tsect           4   36[BANK0 ] unsigned long 
  6774 ;;  fmt             1   52[BANK0 ] unsigned char 
  6775 ;; Return value:  Size  Location     Type
  6776 ;;                  1    wreg      enum E43
  6777 ;; Registers used:
  6778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6779 ;; Tracked objects:
  6780 ;;		On entry : 0/0
  6781 ;;		On exit  : 0/0
  6782 ;;		Unchanged: 0/0
  6783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6784 ;;      Params:         2       0       0       0       0       0       0       0       0
  6785 ;;      Locals:         0      53       0       0       0       0       0       0       0
  6786 ;;      Temps:         22       0       0       0       0       0       0       0       0
  6787 ;;      Totals:        24      53       0       0       0       0       0       0       0
  6788 ;;Total ram usage:       77 bytes
  6789 ;; Hardware stack levels used:    1
  6790 ;; Hardware stack levels required when called:    6
  6791 ;; This function calls:
  6792 ;;		___lldiv
  6793 ;;		___lmul
  6794 ;;		_check_fs
  6795 ;;		_disk_initialize
  6796 ;;		_disk_readp
  6797 ;; This function is called by:
  6798 ;;		_main
  6799 ;; This function uses a non-reentrant model
  6800 ;;
  6801                           
  6802                           	psect	text18
  6803  0075FA                     __ptext18:
  6804                           	opt stack 0
  6805  0075FA                     _pf_mount:
  6806                           	opt stack 24
  6807                           
  6808                           ;pff.c: 759: BYTE fmt, buf[36];
  6809                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  6810                           ;pff.c: 763: FatFs = 0;
  6811                           
  6812                           ;incstack = 0
  6813  0075FA  0E00               	movlw	0
  6814  0075FC  0100               	movlb	0	; () banked
  6815  0075FE  6FF4               	movwf	(_FatFs+1)& (0+255),b
  6816  007600  0E00               	movlw	0
  6817  007602  0100               	movlb	0	; () banked
  6818  007604  6FF3               	movwf	_FatFs& (0+255),b
  6819                           
  6820                           ; BSR set to: 0
  6821                           ;pff.c: 764: if (disk_initialize() & 0x01)
  6822  007606  ECCE  F02E         	call	_disk_initialize	;wreg free
  6823  00760A  6E2B               	movwf	??_pf_mount& (0+255),c
  6824  00760C  A02B               	btfss	??_pf_mount,0,c
  6825  00760E  D002               	goto	l3796
  6826                           
  6827                           ;pff.c: 765: return FR_NOT_READY;
  6828  007610  0E02               	movlw	2
  6829  007612  D39D               	goto	l159
  6830  007614                     l3796:
  6831                           
  6832                           ;pff.c: 767: bsect = 0;
  6833  007614  0E00               	movlw	0
  6834  007616  0100               	movlb	0	; () banked
  6835  007618  6F8C               	movwf	pf_mount@bsect& (0+255),b
  6836  00761A  0E00               	movlw	0
  6837  00761C  0100               	movlb	0	; () banked
  6838  00761E  6F8D               	movwf	(pf_mount@bsect+1)& (0+255),b
  6839  007620  0E00               	movlw	0
  6840  007622  0100               	movlb	0	; () banked
  6841  007624  6F8E               	movwf	(pf_mount@bsect+2)& (0+255),b
  6842  007626  0E00               	movlw	0
  6843  007628  0100               	movlb	0	; () banked
  6844  00762A  6F8F               	movwf	(pf_mount@bsect+3)& (0+255),b
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  6848  00762C  0100               	movlb	0	; () banked
  6849  00762E  0E00               	movlw	high pf_mount@buf
  6850  007630  6E20               	movwf	check_fs@buf+1,c
  6851  007632  0100               	movlb	0	; () banked
  6852  007634  0E60               	movlw	low pf_mount@buf
  6853  007636  6E1F               	movwf	check_fs@buf,c
  6854  007638  C08C  F021         	movff	pf_mount@bsect,check_fs@sect
  6855  00763C  C08D  F022         	movff	pf_mount@bsect+1,check_fs@sect+1
  6856  007640  C08E  F023         	movff	pf_mount@bsect+2,check_fs@sect+2
  6857  007644  C08F  F024         	movff	pf_mount@bsect+3,check_fs@sect+3
  6858  007648  EC6A  F02D         	call	_check_fs	;wreg free
  6859  00764C  0100               	movlb	0	; () banked
  6860  00764E  6F94               	movwf	pf_mount@fmt& (0+255),b
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;pff.c: 769: if (fmt == 1) {
  6864  007650  0100               	movlb	0	; () banked
  6865  007652  0594               	decf	pf_mount@fmt& (0+255),w,b
  6866  007654  A4D8               	btfss	status,2,c
  6867  007656  D074               	goto	l3812
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  6871  007658  0100               	movlb	0	; () banked
  6872  00765A  0E00               	movlw	high pf_mount@buf
  6873  00765C  6E0A               	movwf	disk_readp@rd+1,c
  6874  00765E  0100               	movlb	0	; () banked
  6875  007660  0E60               	movlw	low pf_mount@buf
  6876  007662  6E09               	movwf	disk_readp@rd,c
  6877  007664  C08C  F00B         	movff	pf_mount@bsect,disk_readp@sector
  6878  007668  C08D  F00C         	movff	pf_mount@bsect+1,disk_readp@sector+1
  6879  00766C  C08E  F00D         	movff	pf_mount@bsect+2,disk_readp@sector+2
  6880  007670  C08F  F00E         	movff	pf_mount@bsect+3,disk_readp@sector+3
  6881  007674  0E01               	movlw	1
  6882  007676  6E10               	movwf	disk_readp@offset+1,c
  6883  007678  0EBE               	movlw	190
  6884  00767A  6E0F               	movwf	disk_readp@offset,c
  6885  00767C  0E00               	movlw	0
  6886  00767E  6E12               	movwf	disk_readp@count+1,c
  6887  007680  0E10               	movlw	16
  6888  007682  6E11               	movwf	disk_readp@count,c
  6889  007684  ECBA  F032         	call	_disk_readp	;wreg free
  6890  007688  0900               	iorlw	0
  6891  00768A  B4D8               	btfsc	status,2,c
  6892  00768C  D002               	goto	l3806
  6893                           
  6894                           ;pff.c: 772: fmt = 3;
  6895  00768E  0E03               	movlw	3
  6896  007690  D055               	goto	L7
  6897  007692                     l3806:
  6898                           
  6899                           ;pff.c: 774: if (buf[4]) {
  6900  007692  0100               	movlb	0	; () banked
  6901  007694  5164               	movf	(pf_mount@buf+4)& (0+255),w,b
  6902  007696  B4D8               	btfsc	status,2,c
  6903  007698  D053               	goto	l3812
  6904                           
  6905                           ; BSR set to: 0
  6906                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  6907  00769A  0100               	movlb	0	; () banked
  6908  00769C  5169               	movf	(pf_mount@buf+9)& (0+255),w,b
  6909  00769E  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  6910  0076A0  6A2B               	clrf	??_pf_mount& (0+255),c
  6911  0076A2  0100               	movlb	0	; () banked
  6912  0076A4  C06A  F02D         	movff	pf_mount@buf+10,??_pf_mount+2
  6913  0076A8  6A2E               	clrf	(??_pf_mount+3)& (0+255),c
  6914  0076AA  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  6915  0076AC  6A30               	clrf	(??_pf_mount+5)& (0+255),c
  6916  0076AE  C02E  F030         	movff	??_pf_mount+3,??_pf_mount+5
  6917  0076B2  C02D  F02F         	movff	??_pf_mount+2,??_pf_mount+4
  6918  0076B6  6A2E               	clrf	??_pf_mount+3,c
  6919  0076B8  6A2D               	clrf	??_pf_mount+2,c
  6920  0076BA  0100               	movlb	0	; () banked
  6921  0076BC  C06B  F031         	movff	pf_mount@buf+11,??_pf_mount+6
  6922  0076C0  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  6923  0076C2  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  6924  0076C4  6A34               	clrf	(??_pf_mount+9)& (0+255),c
  6925  0076C6  C031  F034         	movff	??_pf_mount+6,??_pf_mount+9
  6926  0076CA  6A33               	clrf	??_pf_mount+8,c
  6927  0076CC  6A32               	clrf	??_pf_mount+7,c
  6928  0076CE  6A31               	clrf	??_pf_mount+6,c
  6929  0076D0  502D               	movf	??_pf_mount+2,w,c
  6930  0076D2  1031               	iorwf	??_pf_mount+6,w,c
  6931  0076D4  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  6932  0076D6  502E               	movf	??_pf_mount+3,w,c
  6933  0076D8  1032               	iorwf	??_pf_mount+7,w,c
  6934  0076DA  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  6935  0076DC  502F               	movf	??_pf_mount+4,w,c
  6936  0076DE  1033               	iorwf	??_pf_mount+8,w,c
  6937  0076E0  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  6938  0076E2  5030               	movf	??_pf_mount+5,w,c
  6939  0076E4  1034               	iorwf	??_pf_mount+9,w,c
  6940  0076E6  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  6941  0076E8  502B               	movf	??_pf_mount,w,c
  6942  0076EA  1035               	iorwf	??_pf_mount+10,w,c
  6943  0076EC  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  6944  0076EE  502C               	movf	??_pf_mount+1,w,c
  6945  0076F0  1036               	iorwf	??_pf_mount+11,w,c
  6946  0076F2  6E3A               	movwf	(??_pf_mount+15)& (0+255),c
  6947  0076F4  0E00               	movlw	0
  6948  0076F6  1037               	iorwf	??_pf_mount+12,w,c
  6949  0076F8  6E3B               	movwf	(??_pf_mount+16)& (0+255),c
  6950  0076FA  0E00               	movlw	0
  6951  0076FC  1038               	iorwf	??_pf_mount+13,w,c
  6952  0076FE  6E3C               	movwf	(??_pf_mount+17)& (0+255),c
  6953  007700  0100               	movlb	0	; () banked
  6954  007702  5168               	movf	(pf_mount@buf+8)& (0+255),w,b
  6955  007704  1039               	iorwf	??_pf_mount+14,w,c
  6956  007706  0100               	movlb	0	; () banked
  6957  007708  6F8C               	movwf	pf_mount@bsect& (0+255),b
  6958  00770A  503A               	movf	??_pf_mount+15,w,c
  6959  00770C  0100               	movlb	0	; () banked
  6960  00770E  6F8D               	movwf	(pf_mount@bsect+1)& (0+255),b
  6961  007710  503B               	movf	??_pf_mount+16,w,c
  6962  007712  0100               	movlb	0	; () banked
  6963  007714  6F8E               	movwf	(pf_mount@bsect+2)& (0+255),b
  6964  007716  503C               	movf	??_pf_mount+17,w,c
  6965  007718  0100               	movlb	0	; () banked
  6966  00771A  6F8F               	movwf	(pf_mount@bsect+3)& (0+255),b
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  6970  00771C  0100               	movlb	0	; () banked
  6971  00771E  0E00               	movlw	high pf_mount@buf
  6972  007720  6E20               	movwf	check_fs@buf+1,c
  6973  007722  0100               	movlb	0	; () banked
  6974  007724  0E60               	movlw	low pf_mount@buf
  6975  007726  6E1F               	movwf	check_fs@buf,c
  6976  007728  C08C  F021         	movff	pf_mount@bsect,check_fs@sect
  6977  00772C  C08D  F022         	movff	pf_mount@bsect+1,check_fs@sect+1
  6978  007730  C08E  F023         	movff	pf_mount@bsect+2,check_fs@sect+2
  6979  007734  C08F  F024         	movff	pf_mount@bsect+3,check_fs@sect+3
  6980  007738  EC6A  F02D         	call	_check_fs	;wreg free
  6981  00773C                     L7:
  6982  00773C  0100               	movlb	0	; () banked
  6983  00773E  6F94               	movwf	pf_mount@fmt& (0+255),b
  6984  007740                     l3812:
  6985                           
  6986                           ; BSR set to: 0
  6987                           ;pff.c: 777: }
  6988                           ;pff.c: 778: }
  6989                           ;pff.c: 779: }
  6990                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  6991  007740  0100               	movlb	0	; () banked
  6992  007742  5194               	movf	pf_mount@fmt& (0+255),w,b
  6993  007744  0A03               	xorlw	3
  6994  007746  B4D8               	btfsc	status,2,c
  6995  007748  D01F               	goto	u3700
  6996                           
  6997                           ; BSR set to: 0
  6998                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  6999                           
  7000                           ; BSR set to: 0
  7001                           
  7002                           ; BSR set to: 0
  7003                           
  7004                           ; BSR set to: 0
  7005  00774A  0100               	movlb	0	; () banked
  7006  00774C  5194               	movf	pf_mount@fmt& (0+255),w,b
  7007  00774E  A4D8               	btfss	status,2,c
  7008  007750  D21C               	goto	u3780
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  7012                           
  7013                           ; BSR set to: 0
  7014                           
  7015                           ; BSR set to: 0
  7016                           
  7017                           ; BSR set to: 0
  7018  007752  0100               	movlb	0	; () banked
  7019  007754  0E00               	movlw	high pf_mount@buf
  7020  007756  6E0A               	movwf	disk_readp@rd+1,c
  7021  007758  0100               	movlb	0	; () banked
  7022  00775A  0E60               	movlw	low pf_mount@buf
  7023  00775C  6E09               	movwf	disk_readp@rd,c
  7024  00775E  C08C  F00B         	movff	pf_mount@bsect,disk_readp@sector
  7025  007762  C08D  F00C         	movff	pf_mount@bsect+1,disk_readp@sector+1
  7026  007766  C08E  F00D         	movff	pf_mount@bsect+2,disk_readp@sector+2
  7027  00776A  C08F  F00E         	movff	pf_mount@bsect+3,disk_readp@sector+3
  7028  00776E  0E00               	movlw	0
  7029  007770  6E10               	movwf	disk_readp@offset+1,c
  7030  007772  0E0D               	movlw	13
  7031  007774  6E0F               	movwf	disk_readp@offset,c
  7032  007776  0E00               	movlw	0
  7033  007778  6E12               	movwf	disk_readp@count+1,c
  7034  00777A  0E24               	movlw	36
  7035  00777C  6E11               	movwf	disk_readp@count,c
  7036  00777E  ECBA  F032         	call	_disk_readp	;wreg free
  7037  007782  0900               	iorlw	0
  7038  007784  B4D8               	btfsc	status,2,c
  7039  007786  D002               	goto	l3830
  7040  007788                     u3700:
  7041  007788  0E01               	movlw	1
  7042  00778A  D2E1               	goto	l159
  7043  00778C                     l3830:
  7044                           
  7045                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  7046  00778C  0100               	movlb	0	; () banked
  7047  00778E  5169               	movf	(pf_mount@buf+9)& (0+255),w,b
  7048  007790  0100               	movlb	0	; () banked
  7049  007792  C06A  F02B         	movff	pf_mount@buf+10,??_pf_mount
  7050  007796  6A2C               	clrf	(??_pf_mount+1)& (0+255),c
  7051  007798  C02B  F02C         	movff	??_pf_mount,??_pf_mount+1
  7052  00779C  6A2B               	clrf	??_pf_mount,c
  7053  00779E  122B               	iorwf	??_pf_mount,f,c
  7054  0077A0  0E00               	movlw	0
  7055  0077A2  122C               	iorwf	??_pf_mount+1,f,c
  7056  0077A4  0100               	movlb	0	; () banked
  7057  0077A6  C02B  F090         	movff	??_pf_mount,pf_mount@fsize
  7058  0077AA  0100               	movlb	0	; () banked
  7059  0077AC  C02C  F091         	movff	??_pf_mount+1,pf_mount@fsize+1
  7060  0077B0  0100               	movlb	0	; () banked
  7061  0077B2  6B92               	clrf	(pf_mount@fsize+2)& (0+255),b
  7062  0077B4  0100               	movlb	0	; () banked
  7063  0077B6  6B93               	clrf	(pf_mount@fsize+3)& (0+255),b
  7064                           
  7065                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  7066  0077B8  0100               	movlb	0	; () banked
  7067  0077BA  5193               	movf	(pf_mount@fsize+3)& (0+255),w,b
  7068  0077BC  1190               	iorwf	pf_mount@fsize& (0+255),w,b
  7069  0077BE  1191               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  7070  0077C0  1192               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  7071  0077C2  A4D8               	btfss	status,2,c
  7072  0077C4  D041               	goto	l3834
  7073                           
  7074                           ; BSR set to: 0
  7075  0077C6  0100               	movlb	0	; () banked
  7076  0077C8  5178               	movf	(pf_mount@buf+24)& (0+255),w,b
  7077  0077CA  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7078  0077CC  6A2B               	clrf	??_pf_mount& (0+255),c
  7079  0077CE  0100               	movlb	0	; () banked
  7080  0077D0  C079  F02D         	movff	pf_mount@buf+25,??_pf_mount+2
  7081  0077D4  6A2E               	clrf	(??_pf_mount+3)& (0+255),c
  7082  0077D6  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  7083  0077D8  6A30               	clrf	(??_pf_mount+5)& (0+255),c
  7084  0077DA  C02E  F030         	movff	??_pf_mount+3,??_pf_mount+5
  7085  0077DE  C02D  F02F         	movff	??_pf_mount+2,??_pf_mount+4
  7086  0077E2  6A2E               	clrf	??_pf_mount+3,c
  7087  0077E4  6A2D               	clrf	??_pf_mount+2,c
  7088  0077E6  0100               	movlb	0	; () banked
  7089  0077E8  C07A  F031         	movff	pf_mount@buf+26,??_pf_mount+6
  7090  0077EC  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  7091  0077EE  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  7092  0077F0  6A34               	clrf	(??_pf_mount+9)& (0+255),c
  7093  0077F2  C031  F034         	movff	??_pf_mount+6,??_pf_mount+9
  7094  0077F6  6A33               	clrf	??_pf_mount+8,c
  7095  0077F8  6A32               	clrf	??_pf_mount+7,c
  7096  0077FA  6A31               	clrf	??_pf_mount+6,c
  7097  0077FC  502D               	movf	??_pf_mount+2,w,c
  7098  0077FE  1031               	iorwf	??_pf_mount+6,w,c
  7099  007800  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7100  007802  502E               	movf	??_pf_mount+3,w,c
  7101  007804  1032               	iorwf	??_pf_mount+7,w,c
  7102  007806  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7103  007808  502F               	movf	??_pf_mount+4,w,c
  7104  00780A  1033               	iorwf	??_pf_mount+8,w,c
  7105  00780C  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7106  00780E  5030               	movf	??_pf_mount+5,w,c
  7107  007810  1034               	iorwf	??_pf_mount+9,w,c
  7108  007812  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7109  007814  502B               	movf	??_pf_mount,w,c
  7110  007816  1035               	iorwf	??_pf_mount+10,w,c
  7111  007818  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  7112  00781A  502C               	movf	??_pf_mount+1,w,c
  7113  00781C  1036               	iorwf	??_pf_mount+11,w,c
  7114  00781E  6E3A               	movwf	(??_pf_mount+15)& (0+255),c
  7115  007820  0E00               	movlw	0
  7116  007822  1037               	iorwf	??_pf_mount+12,w,c
  7117  007824  6E3B               	movwf	(??_pf_mount+16)& (0+255),c
  7118  007826  0E00               	movlw	0
  7119  007828  1038               	iorwf	??_pf_mount+13,w,c
  7120  00782A  6E3C               	movwf	(??_pf_mount+17)& (0+255),c
  7121  00782C  0100               	movlb	0	; () banked
  7122  00782E  5177               	movf	(pf_mount@buf+23)& (0+255),w,b
  7123  007830  1039               	iorwf	??_pf_mount+14,w,c
  7124  007832  0100               	movlb	0	; () banked
  7125  007834  6F90               	movwf	pf_mount@fsize& (0+255),b
  7126  007836  503A               	movf	??_pf_mount+15,w,c
  7127  007838  0100               	movlb	0	; () banked
  7128  00783A  6F91               	movwf	(pf_mount@fsize+1)& (0+255),b
  7129  00783C  503B               	movf	??_pf_mount+16,w,c
  7130  00783E  0100               	movlb	0	; () banked
  7131  007840  6F92               	movwf	(pf_mount@fsize+2)& (0+255),b
  7132  007842  503C               	movf	??_pf_mount+17,w,c
  7133  007844  0100               	movlb	0	; () banked
  7134  007846  6F93               	movwf	(pf_mount@fsize+3)& (0+255),b
  7135  007848                     l3834:
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;pff.c: 789: fsize *= buf[16-13];
  7139  007848  C090  F001         	movff	pf_mount@fsize,___lmul@multiplier
  7140  00784C  C091  F002         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  7141  007850  C092  F003         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  7142  007854  C093  F004         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  7143  007858  0100               	movlb	0	; () banked
  7144  00785A  5163               	movf	(pf_mount@buf+3)& (0+255),w,b
  7145  00785C  6E05               	movwf	___lmul@multiplicand,c
  7146  00785E  6A06               	clrf	___lmul@multiplicand+1,c
  7147  007860  6A07               	clrf	___lmul@multiplicand+2,c
  7148  007862  6A08               	clrf	___lmul@multiplicand+3,c
  7149  007864  ECEC  F028         	call	___lmul	;wreg free
  7150  007868  C001  F090         	movff	?___lmul,pf_mount@fsize
  7151  00786C  C002  F091         	movff	?___lmul+1,pf_mount@fsize+1
  7152  007870  C003  F092         	movff	?___lmul+2,pf_mount@fsize+2
  7153  007874  C004  F093         	movff	?___lmul+3,pf_mount@fsize+3
  7154                           
  7155                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  7156  007878  0100               	movlb	0	; () banked
  7157  00787A  5161               	movf	(pf_mount@buf+1)& (0+255),w,b
  7158  00787C  0100               	movlb	0	; () banked
  7159  00787E  C062  F02B         	movff	pf_mount@buf+2,??_pf_mount
  7160  007882  6A2C               	clrf	(??_pf_mount+1)& (0+255),c
  7161  007884  C02B  F02C         	movff	??_pf_mount,??_pf_mount+1
  7162  007888  6A2B               	clrf	??_pf_mount,c
  7163  00788A  122B               	iorwf	??_pf_mount,f,c
  7164  00788C  0E00               	movlw	0
  7165  00788E  122C               	iorwf	??_pf_mount+1,f,c
  7166  007890  502B               	movf	??_pf_mount,w,c
  7167  007892  0100               	movlb	0	; () banked
  7168  007894  258C               	addwf	pf_mount@bsect& (0+255),w,b
  7169  007896  6E2D               	movwf	(??_pf_mount+2)& (0+255),c
  7170  007898  502C               	movf	??_pf_mount+1,w,c
  7171  00789A  0100               	movlb	0	; () banked
  7172  00789C  218D               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  7173  00789E  6E2E               	movwf	(??_pf_mount+3)& (0+255),c
  7174  0078A0  0E00               	movlw	0
  7175  0078A2  0100               	movlb	0	; () banked
  7176  0078A4  218E               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  7177  0078A6  6E2F               	movwf	(??_pf_mount+4)& (0+255),c
  7178  0078A8  0E00               	movlw	0
  7179  0078AA  0100               	movlb	0	; () banked
  7180  0078AC  218F               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  7181  0078AE  6E30               	movwf	(??_pf_mount+5)& (0+255),c
  7182  0078B0  EE20 F00A          	lfsr	2,10
  7183  0078B4  5029               	movf	pf_mount@fs,w,c
  7184  0078B6  26D9               	addwf	fsr2l,f,c
  7185  0078B8  502A               	movf	pf_mount@fs+1,w,c
  7186  0078BA  22DA               	addwfc	fsr2h,f,c
  7187  0078BC  C02D  FFDE         	movff	??_pf_mount+2,postinc2
  7188  0078C0  C02E  FFDE         	movff	??_pf_mount+3,postinc2
  7189  0078C4  C02F  FFDE         	movff	??_pf_mount+4,postinc2
  7190  0078C8  C030  FFDD         	movff	??_pf_mount+5,postdec2
  7191  0078CC  06D9               	decf	fsr2l,f,c
  7192  0078CE  06D9               	decf	fsr2l,f,c
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;pff.c: 791: fs->csize = buf[13-13];
  7196  0078D0  EE20 F002          	lfsr	2,2
  7197  0078D4  5029               	movf	pf_mount@fs,w,c
  7198  0078D6  26D9               	addwf	fsr2l,f,c
  7199  0078D8  502A               	movf	pf_mount@fs+1,w,c
  7200  0078DA  22DA               	addwfc	fsr2h,f,c
  7201  0078DC  0100               	movlb	0	; () banked
  7202  0078DE  C060  FFDF         	movff	pf_mount@buf,indf2
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  7206  0078E2  0100               	movlb	0	; () banked
  7207  0078E4  5164               	movf	(pf_mount@buf+4)& (0+255),w,b
  7208  0078E6  0100               	movlb	0	; () banked
  7209  0078E8  C065  F02B         	movff	pf_mount@buf+5,??_pf_mount
  7210  0078EC  6A2C               	clrf	(??_pf_mount+1)& (0+255),c
  7211  0078EE  C02B  F02C         	movff	??_pf_mount,??_pf_mount+1
  7212  0078F2  6A2B               	clrf	??_pf_mount,c
  7213  0078F4  122B               	iorwf	??_pf_mount,f,c
  7214  0078F6  0E00               	movlw	0
  7215  0078F8  122C               	iorwf	??_pf_mount+1,f,c
  7216  0078FA  EE20 F004          	lfsr	2,4
  7217  0078FE  5029               	movf	pf_mount@fs,w,c
  7218  007900  26D9               	addwf	fsr2l,f,c
  7219  007902  502A               	movf	pf_mount@fs+1,w,c
  7220  007904  22DA               	addwfc	fsr2h,f,c
  7221  007906  C02B  FFDE         	movff	??_pf_mount,postinc2
  7222  00790A  C02C  FFDD         	movff	??_pf_mount+1,postdec2
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  7226  00790E  0100               	movlb	0	; () banked
  7227  007910  5166               	movf	(pf_mount@buf+6)& (0+255),w,b
  7228  007912  0100               	movlb	0	; () banked
  7229  007914  C067  F02B         	movff	pf_mount@buf+7,??_pf_mount
  7230  007918  6A2C               	clrf	(??_pf_mount+1)& (0+255),c
  7231  00791A  C02B  F02C         	movff	??_pf_mount,??_pf_mount+1
  7232  00791E  6A2B               	clrf	??_pf_mount,c
  7233  007920  122B               	iorwf	??_pf_mount,f,c
  7234  007922  0E00               	movlw	0
  7235  007924  122C               	iorwf	??_pf_mount+1,f,c
  7236  007926  0100               	movlb	0	; () banked
  7237  007928  C02B  F084         	movff	??_pf_mount,pf_mount@tsect
  7238  00792C  0100               	movlb	0	; () banked
  7239  00792E  C02C  F085         	movff	??_pf_mount+1,pf_mount@tsect+1
  7240  007932  0100               	movlb	0	; () banked
  7241  007934  6B86               	clrf	(pf_mount@tsect+2)& (0+255),b
  7242  007936  0100               	movlb	0	; () banked
  7243  007938  6B87               	clrf	(pf_mount@tsect+3)& (0+255),b
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  7247  00793A  0100               	movlb	0	; () banked
  7248  00793C  5187               	movf	(pf_mount@tsect+3)& (0+255),w,b
  7249  00793E  1184               	iorwf	pf_mount@tsect& (0+255),w,b
  7250  007940  1185               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  7251  007942  1186               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  7252  007944  A4D8               	btfss	status,2,c
  7253  007946  D041               	goto	l3848
  7254                           
  7255                           ; BSR set to: 0
  7256  007948  0100               	movlb	0	; () banked
  7257  00794A  5174               	movf	(pf_mount@buf+20)& (0+255),w,b
  7258  00794C  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7259  00794E  6A2B               	clrf	??_pf_mount& (0+255),c
  7260  007950  0100               	movlb	0	; () banked
  7261  007952  C075  F02D         	movff	pf_mount@buf+21,??_pf_mount+2
  7262  007956  6A2E               	clrf	(??_pf_mount+3)& (0+255),c
  7263  007958  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  7264  00795A  6A30               	clrf	(??_pf_mount+5)& (0+255),c
  7265  00795C  C02E  F030         	movff	??_pf_mount+3,??_pf_mount+5
  7266  007960  C02D  F02F         	movff	??_pf_mount+2,??_pf_mount+4
  7267  007964  6A2E               	clrf	??_pf_mount+3,c
  7268  007966  6A2D               	clrf	??_pf_mount+2,c
  7269  007968  0100               	movlb	0	; () banked
  7270  00796A  C076  F031         	movff	pf_mount@buf+22,??_pf_mount+6
  7271  00796E  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  7272  007970  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  7273  007972  6A34               	clrf	(??_pf_mount+9)& (0+255),c
  7274  007974  C031  F034         	movff	??_pf_mount+6,??_pf_mount+9
  7275  007978  6A33               	clrf	??_pf_mount+8,c
  7276  00797A  6A32               	clrf	??_pf_mount+7,c
  7277  00797C  6A31               	clrf	??_pf_mount+6,c
  7278  00797E  502D               	movf	??_pf_mount+2,w,c
  7279  007980  1031               	iorwf	??_pf_mount+6,w,c
  7280  007982  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7281  007984  502E               	movf	??_pf_mount+3,w,c
  7282  007986  1032               	iorwf	??_pf_mount+7,w,c
  7283  007988  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7284  00798A  502F               	movf	??_pf_mount+4,w,c
  7285  00798C  1033               	iorwf	??_pf_mount+8,w,c
  7286  00798E  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7287  007990  5030               	movf	??_pf_mount+5,w,c
  7288  007992  1034               	iorwf	??_pf_mount+9,w,c
  7289  007994  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7290  007996  502B               	movf	??_pf_mount,w,c
  7291  007998  1035               	iorwf	??_pf_mount+10,w,c
  7292  00799A  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  7293  00799C  502C               	movf	??_pf_mount+1,w,c
  7294  00799E  1036               	iorwf	??_pf_mount+11,w,c
  7295  0079A0  6E3A               	movwf	(??_pf_mount+15)& (0+255),c
  7296  0079A2  0E00               	movlw	0
  7297  0079A4  1037               	iorwf	??_pf_mount+12,w,c
  7298  0079A6  6E3B               	movwf	(??_pf_mount+16)& (0+255),c
  7299  0079A8  0E00               	movlw	0
  7300  0079AA  1038               	iorwf	??_pf_mount+13,w,c
  7301  0079AC  6E3C               	movwf	(??_pf_mount+17)& (0+255),c
  7302  0079AE  0100               	movlb	0	; () banked
  7303  0079B0  5173               	movf	(pf_mount@buf+19)& (0+255),w,b
  7304  0079B2  1039               	iorwf	??_pf_mount+14,w,c
  7305  0079B4  0100               	movlb	0	; () banked
  7306  0079B6  6F84               	movwf	pf_mount@tsect& (0+255),b
  7307  0079B8  503A               	movf	??_pf_mount+15,w,c
  7308  0079BA  0100               	movlb	0	; () banked
  7309  0079BC  6F85               	movwf	(pf_mount@tsect+1)& (0+255),b
  7310  0079BE  503B               	movf	??_pf_mount+16,w,c
  7311  0079C0  0100               	movlb	0	; () banked
  7312  0079C2  6F86               	movwf	(pf_mount@tsect+2)& (0+255),b
  7313  0079C4  503C               	movf	??_pf_mount+17,w,c
  7314  0079C6  0100               	movlb	0	; () banked
  7315  0079C8  6F87               	movwf	(pf_mount@tsect+3)& (0+255),b
  7316  0079CA                     l3848:
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;pff.c: 795: mclst = (tsect
  7320                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  7321                           ;pff.c: 797: ) / fs->csize + 2;
  7322  0079CA  EE20 F004          	lfsr	2,4
  7323  0079CE  5029               	movf	pf_mount@fs,w,c
  7324  0079D0  26D9               	addwf	fsr2l,f,c
  7325  0079D2  502A               	movf	pf_mount@fs+1,w,c
  7326  0079D4  22DA               	addwfc	fsr2h,f,c
  7327  0079D6  CFDE F02B          	movff	postinc2,??_pf_mount
  7328  0079DA  CFDD F02C          	movff	postdec2,??_pf_mount+1
  7329  0079DE  0E04               	movlw	4
  7330  0079E0  6E2D               	movwf	(??_pf_mount+2)& (0+255),c
  7331  0079E2                     u3735:
  7332  0079E2  90D8               	bcf	status,0,c
  7333  0079E4  322C               	rrcf	??_pf_mount+1,f,c
  7334  0079E6  322B               	rrcf	??_pf_mount,f,c
  7335  0079E8  2E2D               	decfsz	(??_pf_mount+2)& (0+255),f,c
  7336  0079EA  D7FB               	goto	u3735
  7337  0079EC  0100               	movlb	0	; () banked
  7338  0079EE  5161               	movf	(pf_mount@buf+1)& (0+255),w,b
  7339  0079F0  0100               	movlb	0	; () banked
  7340  0079F2  C062  F02E         	movff	pf_mount@buf+2,??_pf_mount+3
  7341  0079F6  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  7342  0079F8  C02E  F02F         	movff	??_pf_mount+3,??_pf_mount+4
  7343  0079FC  6A2E               	clrf	??_pf_mount+3,c
  7344  0079FE  122E               	iorwf	??_pf_mount+3,f,c
  7345  007A00  0E00               	movlw	0
  7346  007A02  122F               	iorwf	??_pf_mount+4,f,c
  7347  007A04  502E               	movf	??_pf_mount+3,w,c
  7348  007A06  242B               	addwf	??_pf_mount,w,c
  7349  007A08  6E30               	movwf	(??_pf_mount+5)& (0+255),c
  7350  007A0A  502F               	movf	??_pf_mount+4,w,c
  7351  007A0C  202C               	addwfc	??_pf_mount+1,w,c
  7352  007A0E  6E31               	movwf	(??_pf_mount+6)& (0+255),c
  7353  007A10  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  7354  007A12  B0D8               	btfsc	status,0,c
  7355  007A14  2A32               	incf	(??_pf_mount+7)& (0+255),f,c
  7356  007A16  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  7357  007A18  0100               	movlb	0	; () banked
  7358  007A1A  5190               	movf	pf_mount@fsize& (0+255),w,b
  7359  007A1C  2430               	addwf	??_pf_mount+5,w,c
  7360  007A1E  6E34               	movwf	(??_pf_mount+9)& (0+255),c
  7361  007A20  0100               	movlb	0	; () banked
  7362  007A22  5191               	movf	(pf_mount@fsize+1)& (0+255),w,b
  7363  007A24  2031               	addwfc	??_pf_mount+6,w,c
  7364  007A26  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7365  007A28  0100               	movlb	0	; () banked
  7366  007A2A  5192               	movf	(pf_mount@fsize+2)& (0+255),w,b
  7367  007A2C  2032               	addwfc	??_pf_mount+7,w,c
  7368  007A2E  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7369  007A30  0100               	movlb	0	; () banked
  7370  007A32  5193               	movf	(pf_mount@fsize+3)& (0+255),w,b
  7371  007A34  2033               	addwfc	??_pf_mount+8,w,c
  7372  007A36  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7373  007A38  1E34               	comf	??_pf_mount+9,f,c
  7374  007A3A  1E35               	comf	??_pf_mount+10,f,c
  7375  007A3C  1E36               	comf	??_pf_mount+11,f,c
  7376  007A3E  1E37               	comf	??_pf_mount+12,f,c
  7377  007A40  2A34               	incf	??_pf_mount+9,f,c
  7378  007A42  0E00               	movlw	0
  7379  007A44  2235               	addwfc	??_pf_mount+10,f,c
  7380  007A46  2236               	addwfc	??_pf_mount+11,f,c
  7381  007A48  2237               	addwfc	??_pf_mount+12,f,c
  7382  007A4A  0100               	movlb	0	; () banked
  7383  007A4C  5184               	movf	pf_mount@tsect& (0+255),w,b
  7384  007A4E  2434               	addwf	??_pf_mount+9,w,c
  7385  007A50  6E01               	movwf	___lldiv@dividend,c
  7386  007A52  0100               	movlb	0	; () banked
  7387  007A54  5185               	movf	(pf_mount@tsect+1)& (0+255),w,b
  7388  007A56  2035               	addwfc	??_pf_mount+10,w,c
  7389  007A58  6E02               	movwf	___lldiv@dividend+1,c
  7390  007A5A  0100               	movlb	0	; () banked
  7391  007A5C  5186               	movf	(pf_mount@tsect+2)& (0+255),w,b
  7392  007A5E  2036               	addwfc	??_pf_mount+11,w,c
  7393  007A60  6E03               	movwf	___lldiv@dividend+2,c
  7394  007A62  0100               	movlb	0	; () banked
  7395  007A64  5187               	movf	(pf_mount@tsect+3)& (0+255),w,b
  7396  007A66  2037               	addwfc	??_pf_mount+12,w,c
  7397  007A68  6E04               	movwf	___lldiv@dividend+3,c
  7398  007A6A  EE20 F002          	lfsr	2,2
  7399  007A6E  5029               	movf	pf_mount@fs,w,c
  7400  007A70  26D9               	addwf	fsr2l,f,c
  7401  007A72  502A               	movf	pf_mount@fs+1,w,c
  7402  007A74  22DA               	addwfc	fsr2h,f,c
  7403  007A76  50DF               	movf	indf2,w,c
  7404  007A78  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7405  007A7A  5038               	movf	??_pf_mount+13,w,c
  7406  007A7C  6E05               	movwf	___lldiv@divisor,c
  7407  007A7E  6A06               	clrf	___lldiv@divisor+1,c
  7408  007A80  6A07               	clrf	___lldiv@divisor+2,c
  7409  007A82  6A08               	clrf	___lldiv@divisor+3,c
  7410  007A84  EC0F  F02A         	call	___lldiv	;wreg free
  7411  007A88  C001  F039         	movff	?___lldiv,??_pf_mount+14
  7412  007A8C  C002  F03A         	movff	?___lldiv+1,??_pf_mount+15
  7413  007A90  C003  F03B         	movff	?___lldiv+2,??_pf_mount+16
  7414  007A94  C004  F03C         	movff	?___lldiv+3,??_pf_mount+17
  7415  007A98  0E02               	movlw	2
  7416  007A9A  2439               	addwf	??_pf_mount+14,w,c
  7417  007A9C  0100               	movlb	0	; () banked
  7418  007A9E  6F88               	movwf	pf_mount@mclst& (0+255),b
  7419  007AA0  0E00               	movlw	0
  7420  007AA2  203A               	addwfc	??_pf_mount+15,w,c
  7421  007AA4  0100               	movlb	0	; () banked
  7422  007AA6  6F89               	movwf	(pf_mount@mclst+1)& (0+255),b
  7423  007AA8  0E00               	movlw	0
  7424  007AAA  203B               	addwfc	??_pf_mount+16,w,c
  7425  007AAC  0100               	movlb	0	; () banked
  7426  007AAE  6F8A               	movwf	(pf_mount@mclst+2)& (0+255),b
  7427  007AB0  0E00               	movlw	0
  7428  007AB2  203C               	addwfc	??_pf_mount+17,w,c
  7429  007AB4  0100               	movlb	0	; () banked
  7430  007AB6  6F8B               	movwf	(pf_mount@mclst+3)& (0+255),b
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
  7434  007AB8  EE20 F006          	lfsr	2,6
  7435  007ABC  5029               	movf	pf_mount@fs,w,c
  7436  007ABE  26D9               	addwf	fsr2l,f,c
  7437  007AC0  502A               	movf	pf_mount@fs+1,w,c
  7438  007AC2  22DA               	addwfc	fsr2h,f,c
  7439  007AC4  0100               	movlb	0	; () banked
  7440  007AC6  C088  FFDE         	movff	pf_mount@mclst,postinc2
  7441  007ACA  0100               	movlb	0	; () banked
  7442  007ACC  C089  FFDE         	movff	pf_mount@mclst+1,postinc2
  7443  007AD0  0100               	movlb	0	; () banked
  7444  007AD2  C08A  FFDE         	movff	pf_mount@mclst+2,postinc2
  7445  007AD6  0100               	movlb	0	; () banked
  7446  007AD8  C08B  FFDE         	movff	pf_mount@mclst+3,postinc2
  7447                           
  7448                           ; BSR set to: 0
  7449                           ;pff.c: 801: if (1 && mclst < 0xFF7)
  7450  007ADC  0E00               	movlw	0
  7451  007ADE  0100               	movlb	0	; () banked
  7452  007AE0  6F94               	movwf	pf_mount@fmt& (0+255),b
  7453                           
  7454                           ; BSR set to: 0
  7455  007AE2  0EF7               	movlw	247
  7456  007AE4  6E2B               	movwf	??_pf_mount& (0+255),c
  7457  007AE6  0E0F               	movlw	15
  7458  007AE8  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7459  007AEA  0E00               	movlw	0
  7460  007AEC  6E2D               	movwf	(??_pf_mount+2)& (0+255),c
  7461  007AEE  0E00               	movlw	0
  7462  007AF0  6E2E               	movwf	(??_pf_mount+3)& (0+255),c
  7463  007AF2  502B               	movf	??_pf_mount,w,c
  7464  007AF4  0100               	movlb	0	; () banked
  7465  007AF6  5D88               	subwf	pf_mount@mclst& (0+255),w,b
  7466  007AF8  502C               	movf	??_pf_mount+1,w,c
  7467  007AFA  0100               	movlb	0	; () banked
  7468  007AFC  5989               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  7469  007AFE  502D               	movf	??_pf_mount+2,w,c
  7470  007B00  0100               	movlb	0	; () banked
  7471  007B02  598A               	subwfb	(pf_mount@mclst+2)& (0+255),w,b
  7472  007B04  502E               	movf	??_pf_mount+3,w,c
  7473  007B06  0100               	movlb	0	; () banked
  7474  007B08  598B               	subwfb	(pf_mount@mclst+3)& (0+255),w,b
  7475  007B0A  B0D8               	btfsc	status,0,c
  7476  007B0C  D003               	goto	l3858
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;pff.c: 802: fmt = 1;
  7480  007B0E  0E01               	movlw	1
  7481  007B10  0100               	movlb	0	; () banked
  7482  007B12  6F94               	movwf	pf_mount@fmt& (0+255),b
  7483  007B14                     l3858:
  7484                           
  7485                           ; BSR set to: 0
  7486  007B14  0EF8               	movlw	248
  7487  007B16  0100               	movlb	0	; () banked
  7488  007B18  5D88               	subwf	pf_mount@mclst& (0+255),w,b
  7489  007B1A  0E0F               	movlw	15
  7490  007B1C  0100               	movlb	0	; () banked
  7491  007B1E  5989               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  7492  007B20  0E00               	movlw	0
  7493  007B22  0100               	movlb	0	; () banked
  7494  007B24  598A               	subwfb	(pf_mount@mclst+2)& (0+255),w,b
  7495  007B26  0E00               	movlw	0
  7496  007B28  0100               	movlb	0	; () banked
  7497  007B2A  598B               	subwfb	(pf_mount@mclst+3)& (0+255),w,b
  7498  007B2C  A0D8               	btfss	status,0,c
  7499  007B2E  D019               	goto	l3864
  7500                           
  7501                           ; BSR set to: 0
  7502  007B30  0EF7               	movlw	247
  7503  007B32  6E2B               	movwf	??_pf_mount& (0+255),c
  7504  007B34  0EFF               	movlw	255
  7505  007B36  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7506  007B38  0E00               	movlw	0
  7507  007B3A  6E2D               	movwf	(??_pf_mount+2)& (0+255),c
  7508  007B3C  0E00               	movlw	0
  7509  007B3E  6E2E               	movwf	(??_pf_mount+3)& (0+255),c
  7510  007B40  502B               	movf	??_pf_mount,w,c
  7511  007B42  0100               	movlb	0	; () banked
  7512  007B44  5D88               	subwf	pf_mount@mclst& (0+255),w,b
  7513  007B46  502C               	movf	??_pf_mount+1,w,c
  7514  007B48  0100               	movlb	0	; () banked
  7515  007B4A  5989               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  7516  007B4C  502D               	movf	??_pf_mount+2,w,c
  7517  007B4E  0100               	movlb	0	; () banked
  7518  007B50  598A               	subwfb	(pf_mount@mclst+2)& (0+255),w,b
  7519  007B52  502E               	movf	??_pf_mount+3,w,c
  7520  007B54  0100               	movlb	0	; () banked
  7521  007B56  598B               	subwfb	(pf_mount@mclst+3)& (0+255),w,b
  7522  007B58  B0D8               	btfsc	status,0,c
  7523  007B5A  D003               	goto	l3864
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;pff.c: 804: fmt = 2;
  7527  007B5C  0E02               	movlw	2
  7528  007B5E  0100               	movlb	0	; () banked
  7529  007B60  6F94               	movwf	pf_mount@fmt& (0+255),b
  7530  007B62                     l3864:
  7531                           
  7532                           ; BSR set to: 0
  7533  007B62  0EF7               	movlw	247
  7534  007B64  0100               	movlb	0	; () banked
  7535  007B66  5D88               	subwf	pf_mount@mclst& (0+255),w,b
  7536  007B68  0EFF               	movlw	255
  7537  007B6A  0100               	movlb	0	; () banked
  7538  007B6C  5989               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  7539  007B6E  0E00               	movlw	0
  7540  007B70  0100               	movlb	0	; () banked
  7541  007B72  598A               	subwfb	(pf_mount@mclst+2)& (0+255),w,b
  7542  007B74  0E00               	movlw	0
  7543  007B76  0100               	movlb	0	; () banked
  7544  007B78  598B               	subwfb	(pf_mount@mclst+3)& (0+255),w,b
  7545  007B7A  A0D8               	btfss	status,0,c
  7546  007B7C  D003               	goto	l3868
  7547                           
  7548                           ; BSR set to: 0
  7549                           ;pff.c: 806: fmt = 3;
  7550  007B7E  0E03               	movlw	3
  7551  007B80  0100               	movlb	0	; () banked
  7552  007B82  6F94               	movwf	pf_mount@fmt& (0+255),b
  7553  007B84                     l3868:
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
  7557  007B84  0100               	movlb	0	; () banked
  7558  007B86  6794               	tstfsz	pf_mount@fmt& (0+255),b
  7559  007B88  D002               	goto	l3874
  7560  007B8A                     u3780:
  7561                           
  7562                           ; BSR set to: 0
  7563  007B8A  0E06               	movlw	6
  7564  007B8C  D0E0               	goto	l159
  7565  007B8E                     l3874:
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;pff.c: 810: if (0 || (1 && fmt == 3))
  7569  007B8E  C029  FFD9         	movff	pf_mount@fs,fsr2l
  7570  007B92  C02A  FFDA         	movff	pf_mount@fs+1,fsr2h
  7571  007B96  0100               	movlb	0	; () banked
  7572  007B98  C094  FFDF         	movff	pf_mount@fmt,indf2
  7573                           
  7574                           ; BSR set to: 0
  7575  007B9C  0100               	movlb	0	; () banked
  7576  007B9E  5194               	movf	pf_mount@fmt& (0+255),w,b
  7577  007BA0  0A03               	xorlw	3
  7578  007BA2  A4D8               	btfss	status,2,c
  7579  007BA4  D04C               	goto	l3880
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
  7583                           
  7584                           ; BSR set to: 0
  7585  007BA6  0100               	movlb	0	; () banked
  7586  007BA8  5180               	movf	(pf_mount@buf+32)& (0+255),w,b
  7587  007BAA  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7588  007BAC  6A2B               	clrf	??_pf_mount& (0+255),c
  7589  007BAE  0100               	movlb	0	; () banked
  7590  007BB0  C081  F02D         	movff	pf_mount@buf+33,??_pf_mount+2
  7591  007BB4  6A2E               	clrf	(??_pf_mount+3)& (0+255),c
  7592  007BB6  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  7593  007BB8  6A30               	clrf	(??_pf_mount+5)& (0+255),c
  7594  007BBA  C02E  F030         	movff	??_pf_mount+3,??_pf_mount+5
  7595  007BBE  C02D  F02F         	movff	??_pf_mount+2,??_pf_mount+4
  7596  007BC2  6A2E               	clrf	??_pf_mount+3,c
  7597  007BC4  6A2D               	clrf	??_pf_mount+2,c
  7598  007BC6  0100               	movlb	0	; () banked
  7599  007BC8  C082  F031         	movff	pf_mount@buf+34,??_pf_mount+6
  7600  007BCC  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  7601  007BCE  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  7602  007BD0  6A34               	clrf	(??_pf_mount+9)& (0+255),c
  7603  007BD2  C031  F034         	movff	??_pf_mount+6,??_pf_mount+9
  7604  007BD6  6A33               	clrf	??_pf_mount+8,c
  7605  007BD8  6A32               	clrf	??_pf_mount+7,c
  7606  007BDA  6A31               	clrf	??_pf_mount+6,c
  7607  007BDC  502D               	movf	??_pf_mount+2,w,c
  7608  007BDE  1031               	iorwf	??_pf_mount+6,w,c
  7609  007BE0  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7610  007BE2  502E               	movf	??_pf_mount+3,w,c
  7611  007BE4  1032               	iorwf	??_pf_mount+7,w,c
  7612  007BE6  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7613  007BE8  502F               	movf	??_pf_mount+4,w,c
  7614  007BEA  1033               	iorwf	??_pf_mount+8,w,c
  7615  007BEC  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7616  007BEE  5030               	movf	??_pf_mount+5,w,c
  7617  007BF0  1034               	iorwf	??_pf_mount+9,w,c
  7618  007BF2  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7619  007BF4  502B               	movf	??_pf_mount,w,c
  7620  007BF6  1035               	iorwf	??_pf_mount+10,w,c
  7621  007BF8  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  7622  007BFA  502C               	movf	??_pf_mount+1,w,c
  7623  007BFC  1036               	iorwf	??_pf_mount+11,w,c
  7624  007BFE  6E3A               	movwf	(??_pf_mount+15)& (0+255),c
  7625  007C00  0E00               	movlw	0
  7626  007C02  1037               	iorwf	??_pf_mount+12,w,c
  7627  007C04  6E3B               	movwf	(??_pf_mount+16)& (0+255),c
  7628  007C06  0E00               	movlw	0
  7629  007C08  1038               	iorwf	??_pf_mount+13,w,c
  7630  007C0A  6E3C               	movwf	(??_pf_mount+17)& (0+255),c
  7631  007C0C  0100               	movlb	0	; () banked
  7632  007C0E  517F               	movf	(pf_mount@buf+31)& (0+255),w,b
  7633  007C10  1039               	iorwf	??_pf_mount+14,w,c
  7634  007C12  6E3D               	movwf	(??_pf_mount+18)& (0+255),c
  7635  007C14  503A               	movf	??_pf_mount+15,w,c
  7636  007C16  6E3E               	movwf	(??_pf_mount+19)& (0+255),c
  7637  007C18  503B               	movf	??_pf_mount+16,w,c
  7638  007C1A  6E3F               	movwf	(??_pf_mount+20)& (0+255),c
  7639  007C1C  503C               	movf	??_pf_mount+17,w,c
  7640  007C1E  6E40               	movwf	(??_pf_mount+21)& (0+255),c
  7641  007C20  EE20 F00E          	lfsr	2,14
  7642  007C24  5029               	movf	pf_mount@fs,w,c
  7643  007C26  26D9               	addwf	fsr2l,f,c
  7644  007C28  502A               	movf	pf_mount@fs+1,w,c
  7645  007C2A  22DA               	addwfc	fsr2h,f,c
  7646  007C2C  C03D  FFDE         	movff	??_pf_mount+18,postinc2
  7647  007C30  C03E  FFDE         	movff	??_pf_mount+19,postinc2
  7648  007C34  C03F  FFDE         	movff	??_pf_mount+20,postinc2
  7649  007C38  C040  FFDD         	movff	??_pf_mount+21,postdec2
  7650  007C3C  D02C               	goto	L8
  7651  007C3E                     l3880:
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;pff.c: 812: else
  7655                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
  7656  007C3E  EE20 F00A          	lfsr	2,10
  7657  007C42  5029               	movf	pf_mount@fs,w,c
  7658  007C44  26D9               	addwf	fsr2l,f,c
  7659  007C46  502A               	movf	pf_mount@fs+1,w,c
  7660  007C48  22DA               	addwfc	fsr2h,f,c
  7661  007C4A  CFDE F02B          	movff	postinc2,??_pf_mount
  7662  007C4E  CFDE F02C          	movff	postinc2,??_pf_mount+1
  7663  007C52  CFDE F02D          	movff	postinc2,??_pf_mount+2
  7664  007C56  CFDE F02E          	movff	postinc2,??_pf_mount+3
  7665  007C5A  0100               	movlb	0	; () banked
  7666  007C5C  5190               	movf	pf_mount@fsize& (0+255),w,b
  7667  007C5E  242B               	addwf	??_pf_mount,w,c
  7668  007C60  6E2F               	movwf	(??_pf_mount+4)& (0+255),c
  7669  007C62  0100               	movlb	0	; () banked
  7670  007C64  5191               	movf	(pf_mount@fsize+1)& (0+255),w,b
  7671  007C66  202C               	addwfc	??_pf_mount+1,w,c
  7672  007C68  6E30               	movwf	(??_pf_mount+5)& (0+255),c
  7673  007C6A  0100               	movlb	0	; () banked
  7674  007C6C  5192               	movf	(pf_mount@fsize+2)& (0+255),w,b
  7675  007C6E  202D               	addwfc	??_pf_mount+2,w,c
  7676  007C70  6E31               	movwf	(??_pf_mount+6)& (0+255),c
  7677  007C72  0100               	movlb	0	; () banked
  7678  007C74  5193               	movf	(pf_mount@fsize+3)& (0+255),w,b
  7679  007C76  202E               	addwfc	??_pf_mount+3,w,c
  7680  007C78  6E32               	movwf	(??_pf_mount+7)& (0+255),c
  7681  007C7A  EE20 F00E          	lfsr	2,14
  7682  007C7E  5029               	movf	pf_mount@fs,w,c
  7683  007C80  26D9               	addwf	fsr2l,f,c
  7684  007C82  502A               	movf	pf_mount@fs+1,w,c
  7685  007C84  22DA               	addwfc	fsr2h,f,c
  7686  007C86  C02F  FFDE         	movff	??_pf_mount+4,postinc2
  7687  007C8A  C030  FFDE         	movff	??_pf_mount+5,postinc2
  7688  007C8E  C031  FFDE         	movff	??_pf_mount+6,postinc2
  7689  007C92  C032  FFDD         	movff	??_pf_mount+7,postdec2
  7690  007C96                     L8:
  7691  007C96  06D9               	decf	fsr2l,f,c
  7692  007C98  06D9               	decf	fsr2l,f,c
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
  7696  007C9A  EE20 F00A          	lfsr	2,10
  7697  007C9E  5029               	movf	pf_mount@fs,w,c
  7698  007CA0  26D9               	addwf	fsr2l,f,c
  7699  007CA2  502A               	movf	pf_mount@fs+1,w,c
  7700  007CA4  22DA               	addwfc	fsr2h,f,c
  7701  007CA6  CFDE F02B          	movff	postinc2,??_pf_mount
  7702  007CAA  CFDE F02C          	movff	postinc2,??_pf_mount+1
  7703  007CAE  CFDE F02D          	movff	postinc2,??_pf_mount+2
  7704  007CB2  CFDE F02E          	movff	postinc2,??_pf_mount+3
  7705  007CB6  EE20 F004          	lfsr	2,4
  7706  007CBA  5029               	movf	pf_mount@fs,w,c
  7707  007CBC  26D9               	addwf	fsr2l,f,c
  7708  007CBE  502A               	movf	pf_mount@fs+1,w,c
  7709  007CC0  22DA               	addwfc	fsr2h,f,c
  7710  007CC2  CFDE F02F          	movff	postinc2,??_pf_mount+4
  7711  007CC6  CFDD F030          	movff	postdec2,??_pf_mount+5
  7712  007CCA  0E04               	movlw	4
  7713  007CCC  6E31               	movwf	(??_pf_mount+6)& (0+255),c
  7714  007CCE                     u3805:
  7715  007CCE  90D8               	bcf	status,0,c
  7716  007CD0  3230               	rrcf	??_pf_mount+5,f,c
  7717  007CD2  322F               	rrcf	??_pf_mount+4,f,c
  7718  007CD4  2E31               	decfsz	(??_pf_mount+6)& (0+255),f,c
  7719  007CD6  D7FB               	goto	u3805
  7720  007CD8  502F               	movf	??_pf_mount+4,w,c
  7721  007CDA  242B               	addwf	??_pf_mount,w,c
  7722  007CDC  6E32               	movwf	(??_pf_mount+7)& (0+255),c
  7723  007CDE  5030               	movf	??_pf_mount+5,w,c
  7724  007CE0  202C               	addwfc	??_pf_mount+1,w,c
  7725  007CE2  6E33               	movwf	(??_pf_mount+8)& (0+255),c
  7726  007CE4  0E00               	movlw	0
  7727  007CE6  202D               	addwfc	??_pf_mount+2,w,c
  7728  007CE8  6E34               	movwf	(??_pf_mount+9)& (0+255),c
  7729  007CEA  0E00               	movlw	0
  7730  007CEC  202E               	addwfc	??_pf_mount+3,w,c
  7731  007CEE  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7732  007CF0  0100               	movlb	0	; () banked
  7733  007CF2  5190               	movf	pf_mount@fsize& (0+255),w,b
  7734  007CF4  2432               	addwf	??_pf_mount+7,w,c
  7735  007CF6  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7736  007CF8  0100               	movlb	0	; () banked
  7737  007CFA  5191               	movf	(pf_mount@fsize+1)& (0+255),w,b
  7738  007CFC  2033               	addwfc	??_pf_mount+8,w,c
  7739  007CFE  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7740  007D00  0100               	movlb	0	; () banked
  7741  007D02  5192               	movf	(pf_mount@fsize+2)& (0+255),w,b
  7742  007D04  2034               	addwfc	??_pf_mount+9,w,c
  7743  007D06  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7744  007D08  0100               	movlb	0	; () banked
  7745  007D0A  5193               	movf	(pf_mount@fsize+3)& (0+255),w,b
  7746  007D0C  2035               	addwfc	??_pf_mount+10,w,c
  7747  007D0E  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  7748  007D10  EE20 F012          	lfsr	2,18
  7749  007D14  5029               	movf	pf_mount@fs,w,c
  7750  007D16  26D9               	addwf	fsr2l,f,c
  7751  007D18  502A               	movf	pf_mount@fs+1,w,c
  7752  007D1A  22DA               	addwfc	fsr2h,f,c
  7753  007D1C  C036  FFDE         	movff	??_pf_mount+11,postinc2
  7754  007D20  C037  FFDE         	movff	??_pf_mount+12,postinc2
  7755  007D24  C038  FFDE         	movff	??_pf_mount+13,postinc2
  7756  007D28  C039  FFDD         	movff	??_pf_mount+14,postdec2
  7757  007D2C  06D9               	decf	fsr2l,f,c
  7758  007D2E  06D9               	decf	fsr2l,f,c
  7759                           
  7760                           ;pff.c: 816: fs->flag = 0;
  7761  007D30  EE20 F001          	lfsr	2,1
  7762  007D34  5029               	movf	pf_mount@fs,w,c
  7763  007D36  26D9               	addwf	fsr2l,f,c
  7764  007D38  502A               	movf	pf_mount@fs+1,w,c
  7765  007D3A  22DA               	addwfc	fsr2h,f,c
  7766  007D3C  0E00               	movlw	0
  7767  007D3E  6EDF               	movwf	indf2,c
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;pff.c: 817: FatFs = fs;
  7771  007D40  0100               	movlb	0	; () banked
  7772  007D42  C02A  F0F4         	movff	pf_mount@fs+1,_FatFs+1
  7773  007D46  0100               	movlb	0	; () banked
  7774  007D48  C029  F0F3         	movff	pf_mount@fs,_FatFs
  7775                           
  7776                           ; BSR set to: 0
  7777                           ;pff.c: 819: return FR_OK;
  7778  007D4C  0E00               	movlw	0
  7779  007D4E                     l159:
  7780  007D4E  0012               	return	
  7781  007D50                     __end_of_pf_mount:
  7782                           	opt stack 0
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           postinc0	equ	0xFEE
  7790                           wreg	equ	0xFE8
  7791                           indf1	equ	0xFE7
  7792                           postdec1	equ	0xFE5
  7793                           fsr1h	equ	0xFE2
  7794                           fsr1l	equ	0xFE1
  7795                           indf2	equ	0xFDF
  7796                           postinc2	equ	0xFDE
  7797                           postdec2	equ	0xFDD
  7798                           plusw2	equ	0xFDB
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8
  7802                           
  7803 ;; *************** function _disk_initialize *****************
  7804 ;; Defined at:
  7805 ;;		line 49 in file "diskio.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;		None
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;  count2          2   18[COMRAM] int 
  7810 ;;  count1          2   15[COMRAM] int 
  7811 ;;  i               2   13[COMRAM] int 
  7812 ;;  buff            1   20[COMRAM] unsigned char 
  7813 ;;  stat            1   17[COMRAM] unsigned char 
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      unsigned char 
  7816 ;; Registers used:
  7817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7823 ;;      Params:         0       0       0       0       0       0       0       0       0
  7824 ;;      Locals:         8       0       0       0       0       0       0       0       0
  7825 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7826 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7827 ;;Total ram usage:        8 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    5
  7830 ;; This function calls:
  7831 ;;		_Command
  7832 ;;		_Delay_s
  7833 ;;		_delay_ms
  7834 ;;		_dummy_clocks
  7835 ;;		_proceed
  7836 ;;		_putsUART
  7837 ;;		_reset
  7838 ;;		_response
  7839 ;; This function is called by:
  7840 ;;		_pf_mount
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           	psect	text19
  7845  005D9C                     __ptext19:
  7846                           	opt stack 0
  7847  005D9C                     _disk_initialize:
  7848                           	opt stack 24
  7849                           
  7850                           ;diskio.c: 51: DSTATUS stat;
  7851                           ;diskio.c: 52: int i = 0, count1 = 0, count2 = 0;
  7852                           
  7853                           ;incstack = 0
  7854  005D9C  0E00               	movlw	0
  7855  005D9E  6E0F               	movwf	disk_initialize@i+1,c
  7856  005DA0  0E00               	movlw	0
  7857  005DA2  6E0E               	movwf	disk_initialize@i,c
  7858  005DA4  0E00               	movlw	0
  7859  005DA6  6E11               	movwf	disk_initialize@count1+1,c
  7860  005DA8  0E00               	movlw	0
  7861  005DAA  6E10               	movwf	disk_initialize@count1,c
  7862  005DAC  0E00               	movlw	0
  7863  005DAE  6E14               	movwf	disk_initialize@count2+1,c
  7864  005DB0  0E00               	movlw	0
  7865  005DB2  6E13               	movwf	disk_initialize@count2,c
  7866                           
  7867                           ;diskio.c: 53: unsigned char buff;
  7868                           ;diskio.c: 54: reset();
  7869  005DB4  ECD1  F029         	call	_reset	;wreg free
  7870                           
  7871                           ;diskio.c: 55: delay_ms(500);
  7872  005DB8  0EF4               	movlw	244
  7873  005DBA  EC34  F028         	call	_delay_ms
  7874                           
  7875                           ;diskio.c: 56: dummy_clocks(8);
  7876  005DBE  0E00               	movlw	0
  7877  005DC0  6E05               	movwf	dummy_clocks@n+1,c
  7878  005DC2  0E08               	movlw	8
  7879  005DC4  6E04               	movwf	dummy_clocks@n,c
  7880  005DC6  ECAD  F028         	call	_dummy_clocks	;wreg free
  7881                           
  7882                           ;diskio.c: 57: Command(0X41, 0X00000000, 0XFF);
  7883  005DCA  0E00               	movlw	0
  7884  005DCC  6E03               	movwf	Command@arg,c
  7885  005DCE  0E00               	movlw	0
  7886  005DD0  6E04               	movwf	Command@arg+1,c
  7887  005DD2  0E00               	movlw	0
  7888  005DD4  6E05               	movwf	Command@arg+2,c
  7889  005DD6  0E00               	movlw	0
  7890  005DD8  6E06               	movwf	Command@arg+3,c
  7891  005DDA  0EFF               	movlw	255
  7892  005DDC  6E07               	movwf	Command@CRCbits,c
  7893  005DDE  0E41               	movlw	65
  7894  005DE0  EC78  F028         	call	_Command
  7895                           
  7896                           ;diskio.c: 58: proceed();
  7897  005DE4  ECF7  F027         	call	_proceed	;wreg free
  7898  005DE8                     l3524:
  7899                           
  7900                           ;diskio.c: 60: buff = response();
  7901  005DE8  ECFD  F027         	call	_response	;wreg free
  7902  005DEC  6E15               	movwf	disk_initialize@buff,c
  7903                           
  7904                           ;diskio.c: 61: }while(buff!=0x01);
  7905  005DEE  0415               	decf	disk_initialize@buff,w,c
  7906  005DF0  A4D8               	btfss	status,2,c
  7907  005DF2  D7FA               	goto	l3524
  7908                           
  7909                           ;diskio.c: 63: Delay_s(1);
  7910  005DF4  0E01               	movlw	1
  7911  005DF6  EC4E  F028         	call	_Delay_s
  7912                           
  7913                           ;diskio.c: 64: proceed();
  7914  005DFA  ECF7  F027         	call	_proceed	;wreg free
  7915                           
  7916                           ;diskio.c: 65: if (buff == 0x01)
  7917  005DFE  0415               	decf	disk_initialize@buff,w,c
  7918  005E00  A4D8               	btfss	status,2,c
  7919  005E02  D077               	goto	l3580
  7920                           
  7921                           ;diskio.c: 66: {
  7922                           ;diskio.c: 68: delay_ms(1);
  7923  005E04  0E01               	movlw	1
  7924  005E06  EC34  F028         	call	_delay_ms
  7925                           
  7926                           ;diskio.c: 69: count1 = 0;
  7927  005E0A  0E00               	movlw	0
  7928  005E0C  6E11               	movwf	disk_initialize@count1+1,c
  7929  005E0E  0E00               	movlw	0
  7930  005E10  6E10               	movwf	disk_initialize@count1,c
  7931  005E12                     l3538:
  7932                           
  7933                           ;diskio.c: 71: count2 = 0;
  7934  005E12  0E00               	movlw	0
  7935  005E14  6E14               	movwf	disk_initialize@count2+1,c
  7936  005E16  0E00               	movlw	0
  7937  005E18  6E13               	movwf	disk_initialize@count2,c
  7938                           
  7939                           ;diskio.c: 72: dummy_clocks(8);
  7940  005E1A  0E00               	movlw	0
  7941  005E1C  6E05               	movwf	dummy_clocks@n+1,c
  7942  005E1E  0E08               	movlw	8
  7943  005E20  6E04               	movwf	dummy_clocks@n,c
  7944  005E22  ECAD  F028         	call	_dummy_clocks	;wreg free
  7945                           
  7946                           ;diskio.c: 73: Command(0X77, 0X00000000, 0X95);
  7947  005E26  0E00               	movlw	0
  7948  005E28  6E03               	movwf	Command@arg,c
  7949  005E2A  0E00               	movlw	0
  7950  005E2C  6E04               	movwf	Command@arg+1,c
  7951  005E2E  0E00               	movlw	0
  7952  005E30  6E05               	movwf	Command@arg+2,c
  7953  005E32  0E00               	movlw	0
  7954  005E34  6E06               	movwf	Command@arg+3,c
  7955  005E36  0E95               	movlw	149
  7956  005E38  6E07               	movwf	Command@CRCbits,c
  7957  005E3A  0E77               	movlw	119
  7958  005E3C  EC78  F028         	call	_Command
  7959                           
  7960                           ;diskio.c: 74: buff = 0XFF;
  7961  005E40  6815               	setf	disk_initialize@buff,c
  7962  005E42                     l3542:
  7963                           
  7964                           ;diskio.c: 77: buff = response();
  7965  005E42  ECFD  F027         	call	_response	;wreg free
  7966  005E46  6E15               	movwf	disk_initialize@buff,c
  7967                           
  7968                           ;diskio.c: 78: count2++;
  7969  005E48  4A13               	infsnz	disk_initialize@count2,f,c
  7970  005E4A  2A14               	incf	disk_initialize@count2+1,f,c
  7971                           
  7972                           ;diskio.c: 79: }while((buff!=0X01)&&(count2<10));
  7973  005E4C  0415               	decf	disk_initialize@buff,w,c
  7974  005E4E  B4D8               	btfsc	status,2,c
  7975  005E50  D008               	goto	l3550
  7976  005E52  5014               	movf	disk_initialize@count2+1,w,c
  7977  005E54  0A80               	xorlw	128
  7978  005E56  0F80               	addlw	-128
  7979  005E58  0E0A               	movlw	10
  7980  005E5A  B4D8               	btfsc	status,2,c
  7981  005E5C  5C13               	subwf	disk_initialize@count2,w,c
  7982  005E5E  A0D8               	btfss	status,0,c
  7983  005E60  D7F0               	goto	l3542
  7984  005E62                     l3550:
  7985                           
  7986                           ;diskio.c: 81: delay_ms(1);
  7987  005E62  0E01               	movlw	1
  7988  005E64  EC34  F028         	call	_delay_ms
  7989                           
  7990                           ;diskio.c: 82: count2 = 0;
  7991  005E68  0E00               	movlw	0
  7992  005E6A  6E14               	movwf	disk_initialize@count2+1,c
  7993  005E6C  0E00               	movlw	0
  7994  005E6E  6E13               	movwf	disk_initialize@count2,c
  7995                           
  7996                           ;diskio.c: 83: dummy_clocks(8);
  7997  005E70  0E00               	movlw	0
  7998  005E72  6E05               	movwf	dummy_clocks@n+1,c
  7999  005E74  0E08               	movlw	8
  8000  005E76  6E04               	movwf	dummy_clocks@n,c
  8001  005E78  ECAD  F028         	call	_dummy_clocks	;wreg free
  8002                           
  8003                           ;diskio.c: 85: Command(0X69,0X40000000,0X95);
  8004  005E7C  0E00               	movlw	0
  8005  005E7E  6E03               	movwf	Command@arg,c
  8006  005E80  0E00               	movlw	0
  8007  005E82  6E04               	movwf	Command@arg+1,c
  8008  005E84  0E00               	movlw	0
  8009  005E86  6E05               	movwf	Command@arg+2,c
  8010  005E88  0E40               	movlw	64
  8011  005E8A  6E06               	movwf	Command@arg+3,c
  8012  005E8C  0E95               	movlw	149
  8013  005E8E  6E07               	movwf	Command@CRCbits,c
  8014  005E90  0E69               	movlw	105
  8015  005E92  EC78  F028         	call	_Command
  8016                           
  8017                           ;diskio.c: 86: buff = 0XFF;
  8018  005E96  6815               	setf	disk_initialize@buff,c
  8019                           
  8020                           ;diskio.c: 88: proceed();
  8021  005E98  ECF7  F027         	call	_proceed	;wreg free
  8022  005E9C                     l3562:
  8023                           
  8024                           ;diskio.c: 90: buff = response();
  8025  005E9C  ECFD  F027         	call	_response	;wreg free
  8026  005EA0  6E15               	movwf	disk_initialize@buff,c
  8027                           
  8028                           ;diskio.c: 91: count2++;
  8029  005EA2  4A13               	infsnz	disk_initialize@count2,f,c
  8030  005EA4  2A14               	incf	disk_initialize@count2+1,f,c
  8031                           
  8032                           ;diskio.c: 92: }while((buff!=0X00)&&(count2<10));
  8033  005EA6  5015               	movf	disk_initialize@buff,w,c
  8034  005EA8  B4D8               	btfsc	status,2,c
  8035  005EAA  D008               	goto	l439
  8036  005EAC  5014               	movf	disk_initialize@count2+1,w,c
  8037  005EAE  0A80               	xorlw	128
  8038  005EB0  0F80               	addlw	-128
  8039  005EB2  0E0A               	movlw	10
  8040  005EB4  B4D8               	btfsc	status,2,c
  8041  005EB6  5C13               	subwf	disk_initialize@count2,w,c
  8042  005EB8  A0D8               	btfss	status,0,c
  8043  005EBA  D7F0               	goto	l3562
  8044  005EBC                     l439:
  8045                           
  8046                           ;diskio.c: 93: }while(buff != 0X00);
  8047  005EBC  6615               	tstfsz	disk_initialize@buff,c
  8048  005EBE  D7A9               	goto	l3538
  8049                           
  8050                           ;diskio.c: 95: count1 = 0;
  8051  005EC0  0E00               	movlw	0
  8052  005EC2  6E11               	movwf	disk_initialize@count1+1,c
  8053  005EC4  0E00               	movlw	0
  8054  005EC6  6E10               	movwf	disk_initialize@count1,c
  8055                           
  8056                           ;diskio.c: 97: delay_ms(1);
  8057  005EC8  0E01               	movlw	1
  8058  005ECA  EC34  F028         	call	_delay_ms
  8059                           
  8060                           ;diskio.c: 98: stat = 0X00;
  8061  005ECE  0E00               	movlw	0
  8062  005ED0  6E12               	movwf	disk_initialize@stat,c
  8063                           
  8064                           ;diskio.c: 99: putsUART("\n\r");
  8065  005ED2  0E7F               	movlw	high (STR_27+8)
  8066  005ED4  6E06               	movwf	putsUART@data+1,c
  8067  005ED6  0EE2               	movlw	low (STR_27+8)
  8068  005ED8  6E05               	movwf	putsUART@data,c
  8069  005EDA  EC6D  F029         	call	_putsUART	;wreg free
  8070                           
  8071                           ;diskio.c: 100: putsUART("Card Accepted\n\r");
  8072  005EDE  0E7F               	movlw	high STR_26
  8073  005EE0  6E06               	movwf	putsUART@data+1,c
  8074  005EE2  0ECA               	movlw	low STR_26
  8075  005EE4  6E05               	movwf	putsUART@data,c
  8076  005EE6  EC6D  F029         	call	_putsUART	;wreg free
  8077                           
  8078                           ;diskio.c: 101: Delay_s(2);
  8079  005EEA  0E02               	movlw	2
  8080  005EEC  EC4E  F028         	call	_Delay_s
  8081                           
  8082                           ;diskio.c: 102: }
  8083  005EF0  D00F               	goto	l3588
  8084  005EF2                     l3580:
  8085                           
  8086                           ;diskio.c: 104: else if(buff == 0x05)
  8087  005EF2  5015               	movf	disk_initialize@buff,w,c
  8088  005EF4  0A05               	xorlw	5
  8089  005EF6  A4D8               	btfss	status,2,c
  8090  005EF8  D00B               	goto	l3588
  8091                           
  8092                           ;diskio.c: 105: {
  8093                           ;diskio.c: 106: stat = 0x01;
  8094  005EFA  0E01               	movlw	1
  8095  005EFC  6E12               	movwf	disk_initialize@stat,c
  8096                           
  8097                           ;diskio.c: 107: putsUART("Error!!!\n\r");
  8098  005EFE  0E7F               	movlw	high STR_27
  8099  005F00  6E06               	movwf	putsUART@data+1,c
  8100  005F02  0EDA               	movlw	low STR_27
  8101  005F04  6E05               	movwf	putsUART@data,c
  8102  005F06  EC6D  F029         	call	_putsUART	;wreg free
  8103                           
  8104                           ;diskio.c: 108: Delay_s(3);
  8105  005F0A  0E03               	movlw	3
  8106  005F0C  EC4E  F028         	call	_Delay_s
  8107  005F10                     l3588:
  8108                           
  8109                           ;diskio.c: 109: }
  8110                           ;diskio.c: 110: Delay_s(1);
  8111  005F10  0E01               	movlw	1
  8112  005F12  EC4E  F028         	call	_Delay_s
  8113                           
  8114                           ;diskio.c: 112: dummy_clocks(8);
  8115  005F16  0E00               	movlw	0
  8116  005F18  6E05               	movwf	dummy_clocks@n+1,c
  8117  005F1A  0E08               	movlw	8
  8118  005F1C  6E04               	movwf	dummy_clocks@n,c
  8119  005F1E  ECAD  F028         	call	_dummy_clocks	;wreg free
  8120                           
  8121                           ;diskio.c: 113: Command(0X50,0X00000200,0XFF);
  8122  005F22  0E00               	movlw	0
  8123  005F24  6E03               	movwf	Command@arg,c
  8124  005F26  0E02               	movlw	2
  8125  005F28  6E04               	movwf	Command@arg+1,c
  8126  005F2A  0E00               	movlw	0
  8127  005F2C  6E05               	movwf	Command@arg+2,c
  8128  005F2E  0E00               	movlw	0
  8129  005F30  6E06               	movwf	Command@arg+3,c
  8130  005F32  0EFF               	movlw	255
  8131  005F34  6E07               	movwf	Command@CRCbits,c
  8132  005F36  0E50               	movlw	80
  8133  005F38  EC78  F028         	call	_Command
  8134                           
  8135                           ;diskio.c: 114: proceed();
  8136  005F3C  ECF7  F027         	call	_proceed	;wreg free
  8137  005F40                     l3596:
  8138                           
  8139                           ;diskio.c: 116: buff = response();
  8140  005F40  ECFD  F027         	call	_response	;wreg free
  8141  005F44  6E15               	movwf	disk_initialize@buff,c
  8142                           
  8143                           ;diskio.c: 117: }while(buff!=0x00);
  8144  005F46  6615               	tstfsz	disk_initialize@buff,c
  8145  005F48  D7FB               	goto	l3596
  8146                           
  8147                           ;diskio.c: 119: putsUART("\n\rSetting Block Size to 512 Bytes\n\r");
  8148  005F4A  0E7E               	movlw	high STR_28
  8149  005F4C  6E06               	movwf	putsUART@data+1,c
  8150  005F4E  0E8F               	movlw	low STR_28
  8151  005F50  6E05               	movwf	putsUART@data,c
  8152  005F52  EC6D  F029         	call	_putsUART	;wreg free
  8153                           
  8154                           ;diskio.c: 120: Delay_s(2);
  8155  005F56  0E02               	movlw	2
  8156  005F58  EC4E  F028         	call	_Delay_s
  8157                           
  8158                           ;diskio.c: 121: putsUART("\n\rCOMPLETING INITIALIZATION");
  8159  005F5C  0E7F               	movlw	high STR_29
  8160  005F5E  6E06               	movwf	putsUART@data+1,c
  8161  005F60  0E71               	movlw	low STR_29
  8162  005F62  6E05               	movwf	putsUART@data,c
  8163  005F64  EC6D  F029         	call	_putsUART	;wreg free
  8164                           
  8165                           ;diskio.c: 122: return stat;
  8166  005F68  5012               	movf	disk_initialize@stat,w,c
  8167  005F6A  0012               	return	
  8168  005F6C                     __end_of_disk_initialize:
  8169                           	opt stack 0
  8170                           tblptru	equ	0xFF8
  8171                           tblptrh	equ	0xFF7
  8172                           tblptrl	equ	0xFF6
  8173                           tablat	equ	0xFF5
  8174                           prodh	equ	0xFF4
  8175                           prodl	equ	0xFF3
  8176                           postinc0	equ	0xFEE
  8177                           wreg	equ	0xFE8
  8178                           indf1	equ	0xFE7
  8179                           postdec1	equ	0xFE5
  8180                           fsr1h	equ	0xFE2
  8181                           fsr1l	equ	0xFE1
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           postdec2	equ	0xFDD
  8185                           plusw2	equ	0xFDB
  8186                           fsr2h	equ	0xFDA
  8187                           fsr2l	equ	0xFD9
  8188                           status	equ	0xFD8
  8189                           
  8190 ;; *************** function _reset *****************
  8191 ;; Defined at:
  8192 ;;		line 28 in file "diskio.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;		None
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;  count           2   10[COMRAM] int 
  8197 ;;  i               2    8[COMRAM] int 
  8198 ;;  buff            1   12[COMRAM] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;		None               void
  8201 ;; Registers used:
  8202 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8208 ;;      Params:         0       0       0       0       0       0       0       0       0
  8209 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8210 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8211 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8212 ;;Total ram usage:        5 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    4
  8215 ;; This function calls:
  8216 ;;		_Command
  8217 ;;		_Delay_s
  8218 ;;		_dummy_clocks
  8219 ;;		_proceed
  8220 ;;		_putsUART
  8221 ;;		_response
  8222 ;; This function is called by:
  8223 ;;		_disk_initialize
  8224 ;; This function uses a non-reentrant model
  8225 ;;
  8226                           
  8227                           	psect	text20
  8228  0053A2                     __ptext20:
  8229                           	opt stack 0
  8230  0053A2                     _reset:
  8231                           	opt stack 24
  8232                           
  8233                           ;diskio.c: 30: int i = 0, count = 0;
  8234                           
  8235                           ;incstack = 0
  8236  0053A2  0E00               	movlw	0
  8237  0053A4  6E0A               	movwf	reset@i+1,c
  8238  0053A6  0E00               	movlw	0
  8239  0053A8  6E09               	movwf	reset@i,c
  8240  0053AA  0E00               	movlw	0
  8241  0053AC  6E0C               	movwf	reset@count+1,c
  8242  0053AE  0E00               	movlw	0
  8243  0053B0  6E0B               	movwf	reset@count,c
  8244  0053B2                     l3414:
  8245                           
  8246                           ;diskio.c: 34: dummy_clocks(8);
  8247  0053B2  0E00               	movlw	0
  8248  0053B4  6E05               	movwf	dummy_clocks@n+1,c
  8249  0053B6  0E08               	movlw	8
  8250  0053B8  6E04               	movwf	dummy_clocks@n,c
  8251  0053BA  ECAD  F028         	call	_dummy_clocks	;wreg free
  8252                           
  8253                           ;diskio.c: 35: Command(0X40, 0X00000000, 0X95);
  8254  0053BE  0E00               	movlw	0
  8255  0053C0  6E03               	movwf	Command@arg,c
  8256  0053C2  0E00               	movlw	0
  8257  0053C4  6E04               	movwf	Command@arg+1,c
  8258  0053C6  0E00               	movlw	0
  8259  0053C8  6E05               	movwf	Command@arg+2,c
  8260  0053CA  0E00               	movlw	0
  8261  0053CC  6E06               	movwf	Command@arg+3,c
  8262  0053CE  0E95               	movlw	149
  8263  0053D0  6E07               	movwf	Command@CRCbits,c
  8264  0053D2  0E40               	movlw	64
  8265  0053D4  EC78  F028         	call	_Command
  8266                           
  8267                           ;diskio.c: 36: proceed();
  8268  0053D8  ECF7  F027         	call	_proceed	;wreg free
  8269  0053DC                     l3420:
  8270                           
  8271                           ;diskio.c: 38: buff = response();
  8272  0053DC  ECFD  F027         	call	_response	;wreg free
  8273  0053E0  6E0D               	movwf	reset@buff,c
  8274                           
  8275                           ;diskio.c: 39: count++;
  8276  0053E2  4A0B               	infsnz	reset@count,f,c
  8277  0053E4  2A0C               	incf	reset@count+1,f,c
  8278                           
  8279                           ;diskio.c: 40: }while((buff!=0X01) && (count<10) );
  8280  0053E6  040D               	decf	reset@buff,w,c
  8281  0053E8  B4D8               	btfsc	status,2,c
  8282  0053EA  D008               	goto	l3426
  8283  0053EC  500C               	movf	reset@count+1,w,c
  8284  0053EE  0A80               	xorlw	128
  8285  0053F0  0F80               	addlw	-128
  8286  0053F2  0E0A               	movlw	10
  8287  0053F4  B4D8               	btfsc	status,2,c
  8288  0053F6  5C0B               	subwf	reset@count,w,c
  8289  0053F8  A0D8               	btfss	status,0,c
  8290  0053FA  D7F0               	goto	l3420
  8291  0053FC                     l3426:
  8292                           
  8293                           ;diskio.c: 41: count = 0;
  8294  0053FC  0E00               	movlw	0
  8295  0053FE  6E0C               	movwf	reset@count+1,c
  8296  005400  0E00               	movlw	0
  8297  005402  6E0B               	movwf	reset@count,c
  8298                           
  8299                           ;diskio.c: 42: }while(buff!=0X01);
  8300  005404  040D               	decf	reset@buff,w,c
  8301  005406  A4D8               	btfss	status,2,c
  8302  005408  D7D4               	goto	l3414
  8303                           
  8304                           ;diskio.c: 44: putsUART("\n\rSD Card Inserted\n\r");
  8305  00540A  0E7F               	movlw	high STR_24
  8306  00540C  6E06               	movwf	putsUART@data+1,c
  8307  00540E  0EA4               	movlw	low STR_24
  8308  005410  6E05               	movwf	putsUART@data,c
  8309  005412  EC6D  F029         	call	_putsUART	;wreg free
  8310                           
  8311                           ;diskio.c: 45: Delay_s(2);
  8312  005416  0E02               	movlw	2
  8313  005418  EC4E  F028         	call	_Delay_s
  8314                           
  8315                           ;diskio.c: 46: return;
  8316  00541C  0012               	return	
  8317  00541E                     __end_of_reset:
  8318                           	opt stack 0
  8319                           tblptru	equ	0xFF8
  8320                           tblptrh	equ	0xFF7
  8321                           tblptrl	equ	0xFF6
  8322                           tablat	equ	0xFF5
  8323                           prodh	equ	0xFF4
  8324                           prodl	equ	0xFF3
  8325                           postinc0	equ	0xFEE
  8326                           wreg	equ	0xFE8
  8327                           indf1	equ	0xFE7
  8328                           postdec1	equ	0xFE5
  8329                           fsr1h	equ	0xFE2
  8330                           fsr1l	equ	0xFE1
  8331                           indf2	equ	0xFDF
  8332                           postinc2	equ	0xFDE
  8333                           postdec2	equ	0xFDD
  8334                           plusw2	equ	0xFDB
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _check_fs *****************
  8340 ;; Defined at:
  8341 ;;		line 722 in file "pff.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;  buf             2   30[COMRAM] PTR unsigned char 
  8344 ;;		 -> pf_mount@buf(36), 
  8345 ;;  sect            4   32[COMRAM] unsigned long 
  8346 ;; Auto vars:     Size  Location     Type
  8347 ;;		None
  8348 ;; Return value:  Size  Location     Type
  8349 ;;                  1    wreg      unsigned char 
  8350 ;; Registers used:
  8351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8352 ;; Tracked objects:
  8353 ;;		On entry : 0/0
  8354 ;;		On exit  : 0/0
  8355 ;;		Unchanged: 0/0
  8356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8357 ;;      Params:         6       0       0       0       0       0       0       0       0
  8358 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8359 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8360 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8361 ;;Total ram usage:       10 bytes
  8362 ;; Hardware stack levels used:    1
  8363 ;; Hardware stack levels required when called:    5
  8364 ;; This function calls:
  8365 ;;		_disk_readp
  8366 ;; This function is called by:
  8367 ;;		_pf_mount
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           	psect	text21
  8372  005AD4                     __ptext21:
  8373                           	opt stack 0
  8374  005AD4                     _check_fs:
  8375                           	opt stack 24
  8376                           
  8377                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
  8378                           
  8379                           ;incstack = 0
  8380  005AD4  C020  F00A         	movff	check_fs@buf+1,disk_readp@rd+1
  8381  005AD8  C01F  F009         	movff	check_fs@buf,disk_readp@rd
  8382  005ADC  C021  F00B         	movff	check_fs@sect,disk_readp@sector
  8383  005AE0  C022  F00C         	movff	check_fs@sect+1,disk_readp@sector+1
  8384  005AE4  C023  F00D         	movff	check_fs@sect+2,disk_readp@sector+2
  8385  005AE8  C024  F00E         	movff	check_fs@sect+3,disk_readp@sector+3
  8386  005AEC  0E01               	movlw	1
  8387  005AEE  6E10               	movwf	disk_readp@offset+1,c
  8388  005AF0  0EFE               	movlw	254
  8389  005AF2  6E0F               	movwf	disk_readp@offset,c
  8390  005AF4  0E00               	movlw	0
  8391  005AF6  6E12               	movwf	disk_readp@count+1,c
  8392  005AF8  0E02               	movlw	2
  8393  005AFA  6E11               	movwf	disk_readp@count,c
  8394  005AFC  ECBA  F032         	call	_disk_readp	;wreg free
  8395  005B00  0900               	iorlw	0
  8396  005B02  B4D8               	btfsc	status,2,c
  8397  005B04  D002               	goto	l3486
  8398                           
  8399                           ;pff.c: 728: return 3;
  8400  005B06  0E03               	movlw	3
  8401  005B08  D08B               	goto	l152
  8402  005B0A                     l3486:
  8403                           
  8404                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
  8405  005B0A  EE20 F001          	lfsr	2,1
  8406  005B0E  501F               	movf	check_fs@buf,w,c
  8407  005B10  26D9               	addwf	fsr2l,f,c
  8408  005B12  5020               	movf	check_fs@buf+1,w,c
  8409  005B14  22DA               	addwfc	fsr2h,f,c
  8410  005B16  50DF               	movf	indf2,w,c
  8411  005B18  6E25               	movwf	??_check_fs& (0+255),c
  8412  005B1A  5025               	movf	??_check_fs,w,c
  8413  005B1C  6E27               	movwf	(??_check_fs+2)& (0+255),c
  8414  005B1E  6A26               	clrf	(??_check_fs+1)& (0+255),c
  8415  005B20  C01F  FFD9         	movff	check_fs@buf,fsr2l
  8416  005B24  C020  FFDA         	movff	check_fs@buf+1,fsr2h
  8417  005B28  50DF               	movf	indf2,w,c
  8418  005B2A  6E28               	movwf	(??_check_fs+3)& (0+255),c
  8419  005B2C  5028               	movf	??_check_fs+3,w,c
  8420  005B2E  1226               	iorwf	??_check_fs+1,f,c
  8421  005B30  0E00               	movlw	0
  8422  005B32  1227               	iorwf	??_check_fs+2,f,c
  8423  005B34  5027               	movf	??_check_fs+2,w,c
  8424  005B36  0AAA               	xorlw	170
  8425  005B38  0E55               	movlw	85
  8426  005B3A  B4D8               	btfsc	status,2,c
  8427  005B3C  1826               	xorwf	??_check_fs+1,w,c
  8428  005B3E  B4D8               	btfsc	status,2,c
  8429  005B40  D002               	goto	l3492
  8430                           
  8431                           ;pff.c: 730: {
  8432                           ;pff.c: 731: return 2;
  8433  005B42  0E02               	movlw	2
  8434  005B44  D06D               	goto	l152
  8435  005B46                     l3492:
  8436  005B46  C020  F00A         	movff	check_fs@buf+1,disk_readp@rd+1
  8437  005B4A  C01F  F009         	movff	check_fs@buf,disk_readp@rd
  8438  005B4E  C021  F00B         	movff	check_fs@sect,disk_readp@sector
  8439  005B52  C022  F00C         	movff	check_fs@sect+1,disk_readp@sector+1
  8440  005B56  C023  F00D         	movff	check_fs@sect+2,disk_readp@sector+2
  8441  005B5A  C024  F00E         	movff	check_fs@sect+3,disk_readp@sector+3
  8442  005B5E  0E00               	movlw	0
  8443  005B60  6E10               	movwf	disk_readp@offset+1,c
  8444  005B62  0E36               	movlw	54
  8445  005B64  6E0F               	movwf	disk_readp@offset,c
  8446  005B66  0E00               	movlw	0
  8447  005B68  6E12               	movwf	disk_readp@count+1,c
  8448  005B6A  0E02               	movlw	2
  8449  005B6C  6E11               	movwf	disk_readp@count,c
  8450  005B6E  ECBA  F032         	call	_disk_readp	;wreg free
  8451  005B72  0900               	iorlw	0
  8452  005B74  A4D8               	btfss	status,2,c
  8453  005B76  D01C               	goto	l3500
  8454  005B78  EE20 F001          	lfsr	2,1
  8455  005B7C  501F               	movf	check_fs@buf,w,c
  8456  005B7E  26D9               	addwf	fsr2l,f,c
  8457  005B80  5020               	movf	check_fs@buf+1,w,c
  8458  005B82  22DA               	addwfc	fsr2h,f,c
  8459  005B84  50DF               	movf	indf2,w,c
  8460  005B86  6E25               	movwf	??_check_fs& (0+255),c
  8461  005B88  5025               	movf	??_check_fs,w,c
  8462  005B8A  6E27               	movwf	(??_check_fs+2)& (0+255),c
  8463  005B8C  6A26               	clrf	(??_check_fs+1)& (0+255),c
  8464  005B8E  C01F  FFD9         	movff	check_fs@buf,fsr2l
  8465  005B92  C020  FFDA         	movff	check_fs@buf+1,fsr2h
  8466  005B96  50DF               	movf	indf2,w,c
  8467  005B98  6E28               	movwf	(??_check_fs+3)& (0+255),c
  8468  005B9A  5028               	movf	??_check_fs+3,w,c
  8469  005B9C  1226               	iorwf	??_check_fs+1,f,c
  8470  005B9E  0E00               	movlw	0
  8471  005BA0  1227               	iorwf	??_check_fs+2,f,c
  8472  005BA2  5027               	movf	??_check_fs+2,w,c
  8473  005BA4  0A41               	xorlw	65
  8474  005BA6  0E46               	movlw	70
  8475  005BA8  B4D8               	btfsc	status,2,c
  8476  005BAA  1826               	xorwf	??_check_fs+1,w,c
  8477  005BAC  B4D8               	btfsc	status,2,c
  8478  005BAE  D035               	goto	u3270
  8479  005BB0                     l3500:
  8480  005BB0  C020  F00A         	movff	check_fs@buf+1,disk_readp@rd+1
  8481  005BB4  C01F  F009         	movff	check_fs@buf,disk_readp@rd
  8482  005BB8  C021  F00B         	movff	check_fs@sect,disk_readp@sector
  8483  005BBC  C022  F00C         	movff	check_fs@sect+1,disk_readp@sector+1
  8484  005BC0  C023  F00D         	movff	check_fs@sect+2,disk_readp@sector+2
  8485  005BC4  C024  F00E         	movff	check_fs@sect+3,disk_readp@sector+3
  8486  005BC8  0E00               	movlw	0
  8487  005BCA  6E10               	movwf	disk_readp@offset+1,c
  8488  005BCC  0E52               	movlw	82
  8489  005BCE  6E0F               	movwf	disk_readp@offset,c
  8490  005BD0  0E00               	movlw	0
  8491  005BD2  6E12               	movwf	disk_readp@count+1,c
  8492  005BD4  0E02               	movlw	2
  8493  005BD6  6E11               	movwf	disk_readp@count,c
  8494  005BD8  ECBA  F032         	call	_disk_readp	;wreg free
  8495  005BDC  0900               	iorlw	0
  8496  005BDE  A4D8               	btfss	status,2,c
  8497  005BE0  D01E               	goto	l3508
  8498  005BE2  EE20 F001          	lfsr	2,1
  8499  005BE6  501F               	movf	check_fs@buf,w,c
  8500  005BE8  26D9               	addwf	fsr2l,f,c
  8501  005BEA  5020               	movf	check_fs@buf+1,w,c
  8502  005BEC  22DA               	addwfc	fsr2h,f,c
  8503  005BEE  50DF               	movf	indf2,w,c
  8504  005BF0  6E25               	movwf	??_check_fs& (0+255),c
  8505  005BF2  5025               	movf	??_check_fs,w,c
  8506  005BF4  6E27               	movwf	(??_check_fs+2)& (0+255),c
  8507  005BF6  6A26               	clrf	(??_check_fs+1)& (0+255),c
  8508  005BF8  C01F  FFD9         	movff	check_fs@buf,fsr2l
  8509  005BFC  C020  FFDA         	movff	check_fs@buf+1,fsr2h
  8510  005C00  50DF               	movf	indf2,w,c
  8511  005C02  6E28               	movwf	(??_check_fs+3)& (0+255),c
  8512  005C04  5028               	movf	??_check_fs+3,w,c
  8513  005C06  1226               	iorwf	??_check_fs+1,f,c
  8514  005C08  0E00               	movlw	0
  8515  005C0A  1227               	iorwf	??_check_fs+2,f,c
  8516  005C0C  5027               	movf	??_check_fs+2,w,c
  8517  005C0E  0A41               	xorlw	65
  8518  005C10  0E46               	movlw	70
  8519  005C12  B4D8               	btfsc	status,2,c
  8520  005C14  1826               	xorwf	??_check_fs+1,w,c
  8521  005C16  A4D8               	btfss	status,2,c
  8522  005C18  D002               	goto	l3508
  8523  005C1A                     u3270:
  8524                           
  8525                           ;pff.c: 736: return 0;
  8526  005C1A  0E00               	movlw	0
  8527  005C1C  D001               	goto	l152
  8528  005C1E                     l3508:
  8529                           
  8530                           ;pff.c: 737: return 1;
  8531  005C1E  0E01               	movlw	1
  8532  005C20                     l152:
  8533  005C20  0012               	return	
  8534  005C22                     __end_of_check_fs:
  8535                           	opt stack 0
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           postinc0	equ	0xFEE
  8543                           wreg	equ	0xFE8
  8544                           indf1	equ	0xFE7
  8545                           postdec1	equ	0xFE5
  8546                           fsr1h	equ	0xFE2
  8547                           fsr1l	equ	0xFE1
  8548                           indf2	equ	0xFDF
  8549                           postinc2	equ	0xFDE
  8550                           postdec2	equ	0xFDD
  8551                           plusw2	equ	0xFDB
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function _disk_readp *****************
  8557 ;; Defined at:
  8558 ;;		line 130 in file "diskio.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  rd              2    8[COMRAM] PTR unsigned char 
  8561 ;;		 -> data_buffer_32(32), pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), 
  8562 ;;		 -> pf_mount@buf(36), NULL(0), get_fat@buf(4), 
  8563 ;;  sector          4   10[COMRAM] unsigned long 
  8564 ;;  offset          2   14[COMRAM] unsigned int 
  8565 ;;  count           2   16[COMRAM] unsigned int 
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;  start_add       4   23[COMRAM] unsigned long 
  8568 ;;  length          2   28[COMRAM] int 
  8569 ;;  i               2    0        int 
  8570 ;;  buff            1   27[COMRAM] unsigned char 
  8571 ;;  ptr             1   22[COMRAM] unsigned char 
  8572 ;;  res             1    0        enum E14
  8573 ;; Return value:  Size  Location     Type
  8574 ;;                  1    wreg      enum E73
  8575 ;; Registers used:
  8576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8577 ;; Tracked objects:
  8578 ;;		On entry : 0/0
  8579 ;;		On exit  : 0/0
  8580 ;;		Unchanged: 0/0
  8581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8582 ;;      Params:        10       0       0       0       0       0       0       0       0
  8583 ;;      Locals:         8       0       0       0       0       0       0       0       0
  8584 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8585 ;;      Totals:        22       0       0       0       0       0       0       0       0
  8586 ;;Total ram usage:       22 bytes
  8587 ;; Hardware stack levels used:    1
  8588 ;; Hardware stack levels required when called:    4
  8589 ;; This function calls:
  8590 ;;		_Command
  8591 ;;		_Delay_s
  8592 ;;		_WriteUART
  8593 ;;		_dummy_clocks
  8594 ;;		_proceed
  8595 ;;		_putsUART
  8596 ;;		_response
  8597 ;; This function is called by:
  8598 ;;		_get_fat
  8599 ;;		_dir_find
  8600 ;;		_check_fs
  8601 ;;		_pf_mount
  8602 ;;		_pf_read
  8603 ;;		_dir_read
  8604 ;; This function uses a non-reentrant model
  8605 ;;
  8606                           
  8607                           	psect	text22
  8608  006574                     __ptext22:
  8609                           	opt stack 0
  8610  006574                     _disk_readp:
  8611                           	opt stack 24
  8612                           
  8613                           ;diskio.c: 137: DRESULT res;
  8614                           ;diskio.c: 138: unsigned char ptr=0X00,buff;
  8615                           
  8616                           ;incstack = 0
  8617  006574  0E00               	movlw	0
  8618  006576  6E17               	movwf	disk_readp@ptr,c
  8619                           
  8620                           ;diskio.c: 139: unsigned long int start_add;
  8621                           ;diskio.c: 140: static unsigned char arr[512];
  8622                           ;diskio.c: 141: int length,i;
  8623                           ;diskio.c: 143: if(offset == 0){
  8624  006578  5010               	movf	disk_readp@offset+1,w,c
  8625  00657A  100F               	iorwf	disk_readp@offset,w,c
  8626  00657C  A4D8               	btfss	status,2,c
  8627  00657E  D08C               	goto	l3046
  8628                           
  8629                           ;diskio.c: 144: start_add = ((sector*512));
  8630  006580  C00B  F013         	movff	disk_readp@sector,??_disk_readp
  8631  006584  C00C  F014         	movff	disk_readp@sector+1,??_disk_readp+1
  8632  006588  C00D  F015         	movff	disk_readp@sector+2,??_disk_readp+2
  8633  00658C  C00E  F016         	movff	disk_readp@sector+3,??_disk_readp+3
  8634  006590  0E09               	movlw	9
  8635  006592                     u2435:
  8636  006592  90D8               	bcf	status,0,c
  8637  006594  3613               	rlcf	??_disk_readp,f,c
  8638  006596  3614               	rlcf	??_disk_readp+1,f,c
  8639  006598  3615               	rlcf	??_disk_readp+2,f,c
  8640  00659A  3616               	rlcf	??_disk_readp+3,f,c
  8641  00659C  2EE8               	decfsz	wreg,f,c
  8642  00659E  D7F9               	goto	u2435
  8643  0065A0  C013  F018         	movff	??_disk_readp,disk_readp@start_add
  8644  0065A4  C014  F019         	movff	??_disk_readp+1,disk_readp@start_add+1
  8645  0065A8  C015  F01A         	movff	??_disk_readp+2,disk_readp@start_add+2
  8646  0065AC  C016  F01B         	movff	??_disk_readp+3,disk_readp@start_add+3
  8647                           
  8648                           ;diskio.c: 146: Delay_s(1);
  8649  0065B0  0E01               	movlw	1
  8650  0065B2  EC4E  F028         	call	_Delay_s
  8651                           
  8652                           ;diskio.c: 147: dummy_clocks(8);
  8653  0065B6  0E00               	movlw	0
  8654  0065B8  6E05               	movwf	dummy_clocks@n+1,c
  8655  0065BA  0E08               	movlw	8
  8656  0065BC  6E04               	movwf	dummy_clocks@n,c
  8657  0065BE  ECAD  F028         	call	_dummy_clocks	;wreg free
  8658                           
  8659                           ;diskio.c: 148: Command(0X52,start_add,0X00);
  8660  0065C2  C018  F003         	movff	disk_readp@start_add,Command@arg
  8661  0065C6  C019  F004         	movff	disk_readp@start_add+1,Command@arg+1
  8662  0065CA  C01A  F005         	movff	disk_readp@start_add+2,Command@arg+2
  8663  0065CE  C01B  F006         	movff	disk_readp@start_add+3,Command@arg+3
  8664  0065D2  0E00               	movlw	0
  8665  0065D4  6E07               	movwf	Command@CRCbits,c
  8666  0065D6  0E52               	movlw	82
  8667  0065D8  EC78  F028         	call	_Command
  8668                           
  8669                           ;diskio.c: 149: proceed();
  8670  0065DC  ECF7  F027         	call	_proceed	;wreg free
  8671  0065E0                     l3004:
  8672                           
  8673                           ;diskio.c: 151: buff = response();
  8674  0065E0  ECFD  F027         	call	_response	;wreg free
  8675  0065E4  6E1C               	movwf	disk_readp@buff,c
  8676                           
  8677                           ;diskio.c: 152: }while(buff!=0x00);
  8678  0065E6  661C               	tstfsz	disk_readp@buff,c
  8679  0065E8  D7FB               	goto	l3004
  8680                           
  8681                           ;diskio.c: 153: Delay_s(1);
  8682  0065EA  0E01               	movlw	1
  8683  0065EC  EC4E  F028         	call	_Delay_s
  8684                           
  8685                           ;diskio.c: 154: proceed();
  8686  0065F0  ECF7  F027         	call	_proceed	;wreg free
  8687  0065F4                     l3012:
  8688                           
  8689                           ;diskio.c: 156: buff = response();
  8690  0065F4  ECFD  F027         	call	_response	;wreg free
  8691  0065F8  6E1C               	movwf	disk_readp@buff,c
  8692                           
  8693                           ;diskio.c: 157: }while(buff!=0xFE);
  8694  0065FA  501C               	movf	disk_readp@buff,w,c
  8695  0065FC  0AFE               	xorlw	254
  8696  0065FE  A4D8               	btfss	status,2,c
  8697  006600  D7F9               	goto	l3012
  8698                           
  8699                           ;diskio.c: 158: length = 0;
  8700  006602  0E00               	movlw	0
  8701  006604  6E1E               	movwf	disk_readp@length+1,c
  8702  006606  0E00               	movlw	0
  8703  006608  6E1D               	movwf	disk_readp@length,c
  8704                           
  8705                           ;diskio.c: 159: while ( length < count )
  8706  00660A  D00B               	goto	l3022
  8707  00660C                     l3018:
  8708                           
  8709                           ;diskio.c: 160: {
  8710                           ;diskio.c: 161: arr[length] = response();
  8711  00660C  0E6E               	movlw	low disk_readp@arr
  8712  00660E  241D               	addwf	disk_readp@length,w,c
  8713  006610  6ED9               	movwf	fsr2l,c
  8714  006612  0E05               	movlw	high disk_readp@arr
  8715  006614  201E               	addwfc	disk_readp@length+1,w,c
  8716  006616  6EDA               	movwf	fsr2h,c
  8717  006618  ECFD  F027         	call	_response	;wreg free
  8718  00661C  6EDF               	movwf	indf2,c
  8719                           
  8720                           ;diskio.c: 162: length++;
  8721  00661E  4A1D               	infsnz	disk_readp@length,f,c
  8722  006620  2A1E               	incf	disk_readp@length+1,f,c
  8723  006622                     l3022:
  8724  006622  5011               	movf	disk_readp@count,w,c
  8725  006624  5C1D               	subwf	disk_readp@length,w,c
  8726  006626  5012               	movf	disk_readp@count+1,w,c
  8727  006628  581E               	subwfb	disk_readp@length+1,w,c
  8728  00662A  A0D8               	btfss	status,0,c
  8729  00662C  D7EF               	goto	l3018
  8730                           
  8731                           ;diskio.c: 163: }
  8732                           ;diskio.c: 165: Delay_s(1);
  8733  00662E  0E01               	movlw	1
  8734  006630  EC4E  F028         	call	_Delay_s
  8735                           
  8736                           ;diskio.c: 166: dummy_clocks(8);
  8737  006634  0E00               	movlw	0
  8738  006636  6E05               	movwf	dummy_clocks@n+1,c
  8739  006638  0E08               	movlw	8
  8740  00663A  6E04               	movwf	dummy_clocks@n,c
  8741  00663C  ECAD  F028         	call	_dummy_clocks	;wreg free
  8742                           
  8743                           ;diskio.c: 167: Command(0X4C,0X00000000,0X00);
  8744  006640  0E00               	movlw	0
  8745  006642  6E03               	movwf	Command@arg,c
  8746  006644  0E00               	movlw	0
  8747  006646  6E04               	movwf	Command@arg+1,c
  8748  006648  0E00               	movlw	0
  8749  00664A  6E05               	movwf	Command@arg+2,c
  8750  00664C  0E00               	movlw	0
  8751  00664E  6E06               	movwf	Command@arg+3,c
  8752  006650  0E00               	movlw	0
  8753  006652  6E07               	movwf	Command@CRCbits,c
  8754  006654  0E4C               	movlw	76
  8755  006656  EC78  F028         	call	_Command
  8756                           
  8757                           ;diskio.c: 168: proceed();
  8758  00665A  ECF7  F027         	call	_proceed	;wreg free
  8759  00665E                     l3028:
  8760                           
  8761                           ;diskio.c: 170: buff = response();
  8762  00665E  ECFD  F027         	call	_response	;wreg free
  8763  006662  6E1C               	movwf	disk_readp@buff,c
  8764                           
  8765                           ;diskio.c: 171: }while(buff!=0xFF);
  8766  006664  281C               	incf	disk_readp@buff,w,c
  8767  006666  A4D8               	btfss	status,2,c
  8768  006668  D7FA               	goto	l3028
  8769                           
  8770                           ;diskio.c: 173: length = 0;
  8771  00666A  0E00               	movlw	0
  8772  00666C  6E1E               	movwf	disk_readp@length+1,c
  8773  00666E  0E00               	movlw	0
  8774  006670  6E1D               	movwf	disk_readp@length,c
  8775                           
  8776                           ;diskio.c: 175: while(arr[length]!='\0')
  8777  006672  D002               	goto	l3036
  8778  006674                     l3034:
  8779                           
  8780                           ;diskio.c: 176: {
  8781                           ;diskio.c: 178: length++;
  8782  006674  4A1D               	infsnz	disk_readp@length,f,c
  8783  006676  2A1E               	incf	disk_readp@length+1,f,c
  8784  006678                     l3036:
  8785  006678  0E6E               	movlw	low disk_readp@arr
  8786  00667A  241D               	addwf	disk_readp@length,w,c
  8787  00667C  6ED9               	movwf	fsr2l,c
  8788  00667E  0E05               	movlw	high disk_readp@arr
  8789  006680  201E               	addwfc	disk_readp@length+1,w,c
  8790  006682  6EDA               	movwf	fsr2h,c
  8791  006684  50DF               	movf	indf2,w,c
  8792  006686  A4D8               	btfss	status,2,c
  8793  006688  D7F5               	goto	l3034
  8794                           
  8795                           ;diskio.c: 179: }
  8796                           ;diskio.c: 181: *rd = length;
  8797  00668A  C009  FFD9         	movff	disk_readp@rd,fsr2l
  8798  00668E  C00A  FFDA         	movff	disk_readp@rd+1,fsr2h
  8799  006692  C01D  FFDF         	movff	disk_readp@length,indf2
  8800  006696  D0E7               	goto	L9
  8801  006698                     l3046:
  8802                           
  8803                           ;diskio.c: 184: else
  8804                           ;diskio.c: 185: {
  8805                           ;diskio.c: 186: start_add = (sector*512);
  8806  006698  C00B  F013         	movff	disk_readp@sector,??_disk_readp
  8807  00669C  C00C  F014         	movff	disk_readp@sector+1,??_disk_readp+1
  8808  0066A0  C00D  F015         	movff	disk_readp@sector+2,??_disk_readp+2
  8809  0066A4  C00E  F016         	movff	disk_readp@sector+3,??_disk_readp+3
  8810  0066A8  0E09               	movlw	9
  8811  0066AA                     u2495:
  8812  0066AA  90D8               	bcf	status,0,c
  8813  0066AC  3613               	rlcf	??_disk_readp,f,c
  8814  0066AE  3614               	rlcf	??_disk_readp+1,f,c
  8815  0066B0  3615               	rlcf	??_disk_readp+2,f,c
  8816  0066B2  3616               	rlcf	??_disk_readp+3,f,c
  8817  0066B4  2EE8               	decfsz	wreg,f,c
  8818  0066B6  D7F9               	goto	u2495
  8819  0066B8  C013  F018         	movff	??_disk_readp,disk_readp@start_add
  8820  0066BC  C014  F019         	movff	??_disk_readp+1,disk_readp@start_add+1
  8821  0066C0  C015  F01A         	movff	??_disk_readp+2,disk_readp@start_add+2
  8822  0066C4  C016  F01B         	movff	??_disk_readp+3,disk_readp@start_add+3
  8823                           
  8824                           ;diskio.c: 188: length = 0;
  8825  0066C8  0E00               	movlw	0
  8826  0066CA  6E1E               	movwf	disk_readp@length+1,c
  8827  0066CC  0E00               	movlw	0
  8828  0066CE  6E1D               	movwf	disk_readp@length,c
  8829                           
  8830                           ;diskio.c: 189: while(length<512)
  8831  0066D0  D00A               	goto	l3054
  8832  0066D2                     l3050:
  8833                           
  8834                           ;diskio.c: 190: {
  8835                           ;diskio.c: 191: arr[length] = 0;
  8836  0066D2  0E6E               	movlw	low disk_readp@arr
  8837  0066D4  241D               	addwf	disk_readp@length,w,c
  8838  0066D6  6ED9               	movwf	fsr2l,c
  8839  0066D8  0E05               	movlw	high disk_readp@arr
  8840  0066DA  201E               	addwfc	disk_readp@length+1,w,c
  8841  0066DC  6EDA               	movwf	fsr2h,c
  8842  0066DE  0E00               	movlw	0
  8843  0066E0  6EDF               	movwf	indf2,c
  8844                           
  8845                           ;diskio.c: 192: length++;
  8846  0066E2  4A1D               	infsnz	disk_readp@length,f,c
  8847  0066E4  2A1E               	incf	disk_readp@length+1,f,c
  8848  0066E6                     l3054:
  8849  0066E6  501E               	movf	disk_readp@length+1,w,c
  8850  0066E8  0A80               	xorlw	128
  8851  0066EA  0F7E               	addlw	-130
  8852  0066EC  0E00               	movlw	0
  8853  0066EE  B4D8               	btfsc	status,2,c
  8854  0066F0  5C1D               	subwf	disk_readp@length,w,c
  8855  0066F2  A0D8               	btfss	status,0,c
  8856  0066F4  D7EE               	goto	l3050
  8857                           
  8858                           ;diskio.c: 193: }
  8859                           ;diskio.c: 195: Delay_s(1);
  8860  0066F6  0E01               	movlw	1
  8861  0066F8  EC4E  F028         	call	_Delay_s
  8862                           
  8863                           ;diskio.c: 196: dummy_clocks(8);
  8864  0066FC  0E00               	movlw	0
  8865  0066FE  6E05               	movwf	dummy_clocks@n+1,c
  8866  006700  0E08               	movlw	8
  8867  006702  6E04               	movwf	dummy_clocks@n,c
  8868  006704  ECAD  F028         	call	_dummy_clocks	;wreg free
  8869                           
  8870                           ;diskio.c: 198: Command(0X51,start_add,0X00);
  8871  006708  C018  F003         	movff	disk_readp@start_add,Command@arg
  8872  00670C  C019  F004         	movff	disk_readp@start_add+1,Command@arg+1
  8873  006710  C01A  F005         	movff	disk_readp@start_add+2,Command@arg+2
  8874  006714  C01B  F006         	movff	disk_readp@start_add+3,Command@arg+3
  8875  006718  0E00               	movlw	0
  8876  00671A  6E07               	movwf	Command@CRCbits,c
  8877  00671C  0E51               	movlw	81
  8878  00671E  EC78  F028         	call	_Command
  8879                           
  8880                           ;diskio.c: 199: proceed();
  8881  006722  ECF7  F027         	call	_proceed	;wreg free
  8882  006726                     l3060:
  8883                           
  8884                           ;diskio.c: 201: buff = response();
  8885  006726  ECFD  F027         	call	_response	;wreg free
  8886  00672A  6E1C               	movwf	disk_readp@buff,c
  8887                           
  8888                           ;diskio.c: 202: }while(buff!=0x00);
  8889  00672C  661C               	tstfsz	disk_readp@buff,c
  8890  00672E  D7FB               	goto	l3060
  8891  006730                     l3064:
  8892                           
  8893                           ;diskio.c: 204: buff = response();
  8894  006730  ECFD  F027         	call	_response	;wreg free
  8895  006734  6E1C               	movwf	disk_readp@buff,c
  8896                           
  8897                           ;diskio.c: 205: }while(buff!=0xFE);
  8898  006736  501C               	movf	disk_readp@buff,w,c
  8899  006738  0AFE               	xorlw	254
  8900  00673A  A4D8               	btfss	status,2,c
  8901  00673C  D7F9               	goto	l3064
  8902                           
  8903                           ;diskio.c: 207: length = 0;
  8904  00673E  0E00               	movlw	0
  8905  006740  6E1E               	movwf	disk_readp@length+1,c
  8906  006742  0E00               	movlw	0
  8907  006744  6E1D               	movwf	disk_readp@length,c
  8908                           
  8909                           ;diskio.c: 208: while ( length < 512 )
  8910  006746  D047               	goto	l3092
  8911  006748                     l3070:
  8912                           
  8913                           ;diskio.c: 211: {
  8914                           ;diskio.c: 212: arr[length] = response();
  8915  006748  0E6E               	movlw	low disk_readp@arr
  8916  00674A  241D               	addwf	disk_readp@length,w,c
  8917  00674C  6ED9               	movwf	fsr2l,c
  8918  00674E  0E05               	movlw	high disk_readp@arr
  8919  006750  201E               	addwfc	disk_readp@length+1,w,c
  8920  006752  6EDA               	movwf	fsr2h,c
  8921  006754  ECFD  F027         	call	_response	;wreg free
  8922  006758  6EDF               	movwf	indf2,c
  8923                           
  8924                           ;diskio.c: 213: length++;
  8925  00675A  4A1D               	infsnz	disk_readp@length,f,c
  8926  00675C  2A1E               	incf	disk_readp@length+1,f,c
  8927  00675E                     l3074:
  8928  00675E  060F               	decf	disk_readp@offset,f,c
  8929  006760  A0D8               	btfss	status,0,c
  8930  006762  0610               	decf	disk_readp@offset+1,f,c
  8931  006764  280F               	incf	disk_readp@offset& (0+255),w,c
  8932  006766  B4D8               	btfsc	status,2,c
  8933  006768  2810               	incf	(disk_readp@offset+1)& (0+255),w,c
  8934  00676A  B4D8               	btfsc	status,2,c
  8935  00676C  D018               	goto	l3084
  8936  00676E  D7EC               	goto	l3070
  8937  006770                     l3076:
  8938                           
  8939                           ;diskio.c: 216: {
  8940                           ;diskio.c: 217: *rd = response();
  8941  006770  ECFD  F027         	call	_response	;wreg free
  8942  006774  C009  FFD9         	movff	disk_readp@rd,fsr2l
  8943  006778  C00A  FFDA         	movff	disk_readp@rd+1,fsr2h
  8944  00677C  6EDF               	movwf	indf2,c
  8945                           
  8946                           ;diskio.c: 218: arr[length] = *rd;
  8947  00677E  C009  FFD9         	movff	disk_readp@rd,fsr2l
  8948  006782  C00A  FFDA         	movff	disk_readp@rd+1,fsr2h
  8949  006786  0E6E               	movlw	low disk_readp@arr
  8950  006788  241D               	addwf	disk_readp@length,w,c
  8951  00678A  6EE1               	movwf	fsr1l,c
  8952  00678C  0E05               	movlw	high disk_readp@arr
  8953  00678E  201E               	addwfc	disk_readp@length+1,w,c
  8954  006790  6EE2               	movwf	fsr1h,c
  8955  006792  CFDF FFE7          	movff	indf2,indf1
  8956                           
  8957                           ;diskio.c: 219: rd++;
  8958  006796  4A09               	infsnz	disk_readp@rd,f,c
  8959  006798  2A0A               	incf	disk_readp@rd+1,f,c
  8960                           
  8961                           ;diskio.c: 220: length++;
  8962  00679A  4A1D               	infsnz	disk_readp@length,f,c
  8963  00679C  2A1E               	incf	disk_readp@length+1,f,c
  8964  00679E                     l3084:
  8965  00679E  0611               	decf	disk_readp@count,f,c
  8966  0067A0  A0D8               	btfss	status,0,c
  8967  0067A2  0612               	decf	disk_readp@count+1,f,c
  8968  0067A4  2811               	incf	disk_readp@count& (0+255),w,c
  8969  0067A6  B4D8               	btfsc	status,2,c
  8970  0067A8  2812               	incf	(disk_readp@count+1)& (0+255),w,c
  8971  0067AA  B4D8               	btfsc	status,2,c
  8972  0067AC  D00C               	goto	l3090
  8973  0067AE  D7E0               	goto	l3076
  8974  0067B0                     l3086:
  8975                           
  8976                           ;diskio.c: 223: {
  8977                           ;diskio.c: 224: arr[length] = response();
  8978  0067B0  0E6E               	movlw	low disk_readp@arr
  8979  0067B2  241D               	addwf	disk_readp@length,w,c
  8980  0067B4  6ED9               	movwf	fsr2l,c
  8981  0067B6  0E05               	movlw	high disk_readp@arr
  8982  0067B8  201E               	addwfc	disk_readp@length+1,w,c
  8983  0067BA  6EDA               	movwf	fsr2h,c
  8984  0067BC  ECFD  F027         	call	_response	;wreg free
  8985  0067C0  6EDF               	movwf	indf2,c
  8986                           
  8987                           ;diskio.c: 225: length++;
  8988  0067C2  4A1D               	infsnz	disk_readp@length,f,c
  8989  0067C4  2A1E               	incf	disk_readp@length+1,f,c
  8990  0067C6                     l3090:
  8991  0067C6  501E               	movf	disk_readp@length+1,w,c
  8992  0067C8  0A80               	xorlw	128
  8993  0067CA  0F7E               	addlw	-130
  8994  0067CC  0E00               	movlw	0
  8995  0067CE  B4D8               	btfsc	status,2,c
  8996  0067D0  5C1D               	subwf	disk_readp@length,w,c
  8997  0067D2  A0D8               	btfss	status,0,c
  8998  0067D4  D7ED               	goto	l3086
  8999  0067D6                     l3092:
  9000  0067D6  501E               	movf	disk_readp@length+1,w,c
  9001  0067D8  0A80               	xorlw	128
  9002  0067DA  0F7E               	addlw	-130
  9003  0067DC  0E00               	movlw	0
  9004  0067DE  B4D8               	btfsc	status,2,c
  9005  0067E0  5C1D               	subwf	disk_readp@length,w,c
  9006  0067E2  A0D8               	btfss	status,0,c
  9007  0067E4  D7BC               	goto	l3074
  9008                           
  9009                           ;diskio.c: 226: }
  9010                           ;diskio.c: 227: }
  9011                           ;diskio.c: 228: Delay_s(1);
  9012  0067E6  0E01               	movlw	1
  9013  0067E8  EC4E  F028         	call	_Delay_s
  9014                           
  9015                           ;diskio.c: 231: Command(0X4C,0X00000000,0X00);
  9016  0067EC  0E00               	movlw	0
  9017  0067EE  6E03               	movwf	Command@arg,c
  9018  0067F0  0E00               	movlw	0
  9019  0067F2  6E04               	movwf	Command@arg+1,c
  9020  0067F4  0E00               	movlw	0
  9021  0067F6  6E05               	movwf	Command@arg+2,c
  9022  0067F8  0E00               	movlw	0
  9023  0067FA  6E06               	movwf	Command@arg+3,c
  9024  0067FC  0E00               	movlw	0
  9025  0067FE  6E07               	movwf	Command@CRCbits,c
  9026  006800  0E4C               	movlw	76
  9027  006802  EC78  F028         	call	_Command
  9028                           
  9029                           ;diskio.c: 232: proceed();
  9030  006806  ECF7  F027         	call	_proceed	;wreg free
  9031  00680A                     l3098:
  9032                           
  9033                           ;diskio.c: 234: buff = response();
  9034  00680A  ECFD  F027         	call	_response	;wreg free
  9035  00680E  6E1C               	movwf	disk_readp@buff,c
  9036                           
  9037                           ;diskio.c: 235: }while(buff!=0xFF);
  9038  006810  281C               	incf	disk_readp@buff,w,c
  9039  006812  A4D8               	btfss	status,2,c
  9040  006814  D7FA               	goto	l3098
  9041                           
  9042                           ;diskio.c: 237: length = 0;
  9043  006816  0E00               	movlw	0
  9044  006818  6E1E               	movwf	disk_readp@length+1,c
  9045  00681A  0E00               	movlw	0
  9046  00681C  6E1D               	movwf	disk_readp@length,c
  9047                           
  9048                           ;diskio.c: 239: if(flag == 1){
  9049  00681E  0100               	movlb	0	; () banked
  9050  006820  05F5               	decf	_flag& (0+255),w,b
  9051  006822  11F6               	iorwf	(_flag+1)& (0+255),w,b
  9052  006824  B4D8               	btfsc	status,2,c
  9053  006826  D00C               	goto	l3112
  9054  006828  D015               	goto	l3114
  9055  00682A                     l3108:
  9056                           
  9057                           ;diskio.c: 241: {
  9058                           ;diskio.c: 242: WriteUART(arr[length]);
  9059  00682A  0E6E               	movlw	low disk_readp@arr
  9060  00682C  241D               	addwf	disk_readp@length,w,c
  9061  00682E  6ED9               	movwf	fsr2l,c
  9062  006830  0E05               	movlw	high disk_readp@arr
  9063  006832  201E               	addwfc	disk_readp@length+1,w,c
  9064  006834  6EDA               	movwf	fsr2h,c
  9065  006836  50DF               	movf	indf2,w,c
  9066  006838  EC90  F028         	call	_WriteUART
  9067                           
  9068                           ;diskio.c: 243: length++;
  9069  00683C  4A1D               	infsnz	disk_readp@length,f,c
  9070  00683E  2A1E               	incf	disk_readp@length+1,f,c
  9071  006840                     l3112:
  9072  006840  0E6E               	movlw	low disk_readp@arr
  9073  006842  241D               	addwf	disk_readp@length,w,c
  9074  006844  6ED9               	movwf	fsr2l,c
  9075  006846  0E05               	movlw	high disk_readp@arr
  9076  006848  201E               	addwfc	disk_readp@length+1,w,c
  9077  00684A  6EDA               	movwf	fsr2h,c
  9078  00684C  50DF               	movf	indf2,w,c
  9079  00684E  B4D8               	btfsc	status,2,c
  9080  006850  D007               	goto	l3116
  9081  006852  D7EB               	goto	l3108
  9082  006854                     l3114:
  9083                           
  9084                           ;diskio.c: 246: else
  9085                           ;diskio.c: 247: putsUART("..");
  9086  006854  0E7F               	movlw	high STR_30
  9087  006856  6E06               	movwf	putsUART@data+1,c
  9088  006858  0EFC               	movlw	low STR_30
  9089  00685A  6E05               	movwf	putsUART@data,c
  9090  00685C  EC6D  F029         	call	_putsUART	;wreg free
  9091  006860                     l3116:
  9092                           
  9093                           ;diskio.c: 249: Delay_s(2);
  9094  006860  0E02               	movlw	2
  9095  006862  EC4E  F028         	call	_Delay_s
  9096  006866                     L9:
  9097                           
  9098                           ;diskio.c: 251: return RES_OK;
  9099  006866  0E00               	movlw	0
  9100  006868  0012               	return	
  9101  00686A                     __end_of_disk_readp:
  9102                           	opt stack 0
  9103                           tblptru	equ	0xFF8
  9104                           tblptrh	equ	0xFF7
  9105                           tblptrl	equ	0xFF6
  9106                           tablat	equ	0xFF5
  9107                           prodh	equ	0xFF4
  9108                           prodl	equ	0xFF3
  9109                           postinc0	equ	0xFEE
  9110                           wreg	equ	0xFE8
  9111                           indf1	equ	0xFE7
  9112                           postdec1	equ	0xFE5
  9113                           fsr1h	equ	0xFE2
  9114                           fsr1l	equ	0xFE1
  9115                           indf2	equ	0xFDF
  9116                           postinc2	equ	0xFDE
  9117                           postdec2	equ	0xFDD
  9118                           plusw2	equ	0xFDB
  9119                           fsr2h	equ	0xFDA
  9120                           fsr2l	equ	0xFD9
  9121                           status	equ	0xFD8
  9122                           
  9123 ;; *************** function _response *****************
  9124 ;; Defined at:
  9125 ;;		line 118 in file "main.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;  buff            1    1[COMRAM] unsigned char 
  9130 ;; Return value:  Size  Location     Type
  9131 ;;                  1    wreg      unsigned char 
  9132 ;; Registers used:
  9133 ;;		wreg, status,2, cstack
  9134 ;; Tracked objects:
  9135 ;;		On entry : 0/0
  9136 ;;		On exit  : 0/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9139 ;;      Params:         0       0       0       0       0       0       0       0       0
  9140 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9142 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9143 ;;Total ram usage:        1 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    1
  9146 ;; This function calls:
  9147 ;;		_ReadSPI_
  9148 ;; This function is called by:
  9149 ;;		_reset
  9150 ;;		_disk_initialize
  9151 ;;		_disk_readp
  9152 ;;		_disk_writep
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text23
  9157  004FFA                     __ptext23:
  9158                           	opt stack 0
  9159  004FFA                     _response:
  9160                           	opt stack 26
  9161                           
  9162                           ;main.c: 120: BYTE buff;
  9163                           ;main.c: 121: LATB4 = 0;
  9164                           
  9165                           ;incstack = 0
  9166  004FFA  988A               	bcf	3978,4,c	;volatile
  9167                           
  9168                           ;main.c: 122: buff=ReadSPI_();
  9169  004FFC  EC14  F028         	call	_ReadSPI_	;wreg free
  9170  005000  6E02               	movwf	response@buff,c
  9171                           
  9172                           ;main.c: 123: LATB4 = 1;
  9173  005002  888A               	bsf	3978,4,c	;volatile
  9174                           
  9175                           ;main.c: 124: return buff;
  9176  005004  5002               	movf	response@buff,w,c
  9177  005006  0012               	return	
  9178  005008                     __end_of_response:
  9179                           	opt stack 0
  9180                           tblptru	equ	0xFF8
  9181                           tblptrh	equ	0xFF7
  9182                           tblptrl	equ	0xFF6
  9183                           tablat	equ	0xFF5
  9184                           prodh	equ	0xFF4
  9185                           prodl	equ	0xFF3
  9186                           postinc0	equ	0xFEE
  9187                           wreg	equ	0xFE8
  9188                           indf1	equ	0xFE7
  9189                           postdec1	equ	0xFE5
  9190                           fsr1h	equ	0xFE2
  9191                           fsr1l	equ	0xFE1
  9192                           indf2	equ	0xFDF
  9193                           postinc2	equ	0xFDE
  9194                           postdec2	equ	0xFDD
  9195                           plusw2	equ	0xFDB
  9196                           fsr2h	equ	0xFDA
  9197                           fsr2l	equ	0xFD9
  9198                           status	equ	0xFD8
  9199                           
  9200 ;; *************** function _ReadSPI_ *****************
  9201 ;; Defined at:
  9202 ;;		line 107 in file "main.c"
  9203 ;; Parameters:    Size  Location     Type
  9204 ;;		None
  9205 ;; Auto vars:     Size  Location     Type
  9206 ;;  TempVar         1    0[COMRAM] unsigned char 
  9207 ;; Return value:  Size  Location     Type
  9208 ;;                  1    wreg      unsigned char 
  9209 ;; Registers used:
  9210 ;;		wreg, status,2
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9216 ;;      Params:         0       0       0       0       0       0       0       0       0
  9217 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9218 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9219 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9220 ;;Total ram usage:        1 bytes
  9221 ;; Hardware stack levels used:    1
  9222 ;; This function calls:
  9223 ;;		Nothing
  9224 ;; This function is called by:
  9225 ;;		_response
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           	psect	text24
  9230  005028                     __ptext24:
  9231                           	opt stack 0
  9232  005028                     _ReadSPI_:
  9233                           	opt stack 26
  9234                           
  9235                           ;main.c: 109: unsigned char TempVar;
  9236                           ;main.c: 110: TempVar = SSPBUF;
  9237                           
  9238                           ;incstack = 0
  9239  005028  CFC9 F001          	movff	4041,ReadSPI_@TempVar	;volatile
  9240                           
  9241                           ;main.c: 111: PIR1bits.SSPIF = 0;
  9242  00502C  969E               	bcf	3998,3,c	;volatile
  9243                           
  9244                           ;main.c: 112: SSPBUF = 0xFF;
  9245  00502E  68C9               	setf	4041,c	;volatile
  9246  005030                     l351:
  9247  005030  A69E               	btfss	3998,3,c	;volatile
  9248  005032  D7FE               	goto	l351
  9249                           
  9250                           ;main.c: 115: return ( SSPBUF );
  9251  005034  50C9               	movf	4041,w,c	;volatile
  9252  005036  0012               	return	
  9253  005038                     __end_of_ReadSPI_:
  9254                           	opt stack 0
  9255                           tblptru	equ	0xFF8
  9256                           tblptrh	equ	0xFF7
  9257                           tblptrl	equ	0xFF6
  9258                           tablat	equ	0xFF5
  9259                           prodh	equ	0xFF4
  9260                           prodl	equ	0xFF3
  9261                           postinc0	equ	0xFEE
  9262                           wreg	equ	0xFE8
  9263                           indf1	equ	0xFE7
  9264                           postdec1	equ	0xFE5
  9265                           fsr1h	equ	0xFE2
  9266                           fsr1l	equ	0xFE1
  9267                           indf2	equ	0xFDF
  9268                           postinc2	equ	0xFDE
  9269                           postdec2	equ	0xFDD
  9270                           plusw2	equ	0xFDB
  9271                           fsr2h	equ	0xFDA
  9272                           fsr2l	equ	0xFD9
  9273                           status	equ	0xFD8
  9274                           
  9275 ;; *************** function _putsUART *****************
  9276 ;; Defined at:
  9277 ;;		line 58 in file "sw_uart.c"
  9278 ;; Parameters:    Size  Location     Type
  9279 ;;  data            2    4[COMRAM] PTR unsigned char 
  9280 ;;		 -> STR_30(3), STR_29(28), STR_28(36), STR_27(11), 
  9281 ;;		 -> STR_26(16), STR_25(3), STR_24(21), STR_23(38), 
  9282 ;;		 -> STR_22(4), STR_21(39), STR_20(39), STR_19(5), 
  9283 ;;		 -> STR_18(4), STR_17(37), STR_16(4), STR_15(30), 
  9284 ;;		 -> STR_14(4), STR_13(30), STR_12(33), STR_11(4), 
  9285 ;;		 -> STR_10(34), STR_9(23), STR_7(34), STR_5(17), 
  9286 ;;		 -> STR_4(4), fileName(10), STR_3(29), STR_2(37), 
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;		None               void
  9291 ;; Registers used:
  9292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9298 ;;      Params:         2       0       0       0       0       0       0       0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9300 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9301 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9302 ;;Total ram usage:        4 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:    3
  9305 ;; This function calls:
  9306 ;;		_WriteUART
  9307 ;; This function is called by:
  9308 ;;		_main
  9309 ;;		_reset
  9310 ;;		_disk_initialize
  9311 ;;		_disk_readp
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           	psect	text25
  9316  0052DA                     __ptext25:
  9317                           	opt stack 0
  9318  0052DA                     _putsUART:
  9319                           	opt stack 27
  9320  0052DA                     l576:
  9321                           
  9322                           ;sw_uart.c: 61: {
  9323                           ;sw_uart.c: 62: WriteUART(*data);
  9324  0052DA  C005  FFF6         	movff	putsUART@data,tblptrl
  9325  0052DE  C006  FFF7         	movff	putsUART@data+1,tblptrh
  9326  0052E2  6AF8               	clrf	tblptru,c
  9327  0052E4  0E07               	movlw	(high __ramtop+-1)
  9328  0052E6  64F7               	cpfsgt	tblptrh,c
  9329  0052E8  D003               	bra	u2367
  9330  0052EA  0008               	tblrd		*
  9331  0052EC  50F5               	movf	tablat,w,c
  9332  0052EE  D005               	bra	u2360
  9333  0052F0                     u2367:
  9334  0052F0  CFF6 FFE9          	movff	tblptrl,fsr0l
  9335  0052F4  CFF7 FFEA          	movff	tblptrh,fsr0h
  9336  0052F8  50EF               	movf	indf0,w,c
  9337  0052FA                     u2360:
  9338  0052FA  EC90  F028         	call	_WriteUART
  9339                           
  9340                           ;sw_uart.c: 63: } while( *data++ );
  9341  0052FE  5005               	movf	putsUART@data,w,c
  9342  005300  6E07               	movwf	??_putsUART& (0+255),c
  9343  005302  5006               	movf	putsUART@data+1,w,c
  9344  005304  6E08               	movwf	(??_putsUART+1)& (0+255),c
  9345  005306  4A05               	infsnz	putsUART@data,f,c
  9346  005308  2A06               	incf	putsUART@data+1,f,c
  9347  00530A  C007  FFF6         	movff	??_putsUART,tblptrl
  9348  00530E  C008  FFF7         	movff	??_putsUART+1,tblptrh
  9349  005312  6AF8               	clrf	tblptru,c
  9350  005314  0E07               	movlw	(high __ramtop+-1)
  9351  005316  64F7               	cpfsgt	tblptrh,c
  9352  005318  D003               	bra	u2377
  9353  00531A  0008               	tblrd		*
  9354  00531C  50F5               	movf	tablat,w,c
  9355  00531E  D005               	bra	u2370
  9356  005320                     u2377:
  9357  005320  CFF6 FFE9          	movff	tblptrl,fsr0l
  9358  005324  CFF7 FFEA          	movff	tblptrh,fsr0h
  9359  005328  50EF               	movf	indf0,w,c
  9360  00532A                     u2370:
  9361  00532A  0900               	iorlw	0
  9362  00532C  B4D8               	btfsc	status,2,c
  9363  00532E  0012               	return	
  9364  005330  D7D4               	goto	l576
  9365  005332                     __end_of_putsUART:
  9366                           	opt stack 0
  9367                           tblptru	equ	0xFF8
  9368                           tblptrh	equ	0xFF7
  9369                           tblptrl	equ	0xFF6
  9370                           tablat	equ	0xFF5
  9371                           prodh	equ	0xFF4
  9372                           prodl	equ	0xFF3
  9373                           indf0	equ	0xFEF
  9374                           postinc0	equ	0xFEE
  9375                           fsr0h	equ	0xFEA
  9376                           fsr0l	equ	0xFE9
  9377                           wreg	equ	0xFE8
  9378                           indf1	equ	0xFE7
  9379                           postdec1	equ	0xFE5
  9380                           fsr1h	equ	0xFE2
  9381                           fsr1l	equ	0xFE1
  9382                           indf2	equ	0xFDF
  9383                           postinc2	equ	0xFDE
  9384                           postdec2	equ	0xFDD
  9385                           plusw2	equ	0xFDB
  9386                           fsr2h	equ	0xFDA
  9387                           fsr2l	equ	0xFD9
  9388                           status	equ	0xFD8
  9389                           
  9390 ;; *************** function _WriteUART *****************
  9391 ;; Defined at:
  9392 ;;		line 82 in file "sw_uart.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;  uartdata        1    wreg     unsigned char 
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  uartdata        1    2[COMRAM] unsigned char 
  9397 ;;  bitcount        1    3[COMRAM] unsigned char 
  9398 ;; Return value:  Size  Location     Type
  9399 ;;		None               void
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0, cstack
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9407 ;;      Params:         0       0       0       0       0       0       0       0       0
  9408 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9409 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9410 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9411 ;;Total ram usage:        3 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:    2
  9414 ;; This function calls:
  9415 ;;		_DelayTXBitUART
  9416 ;; This function is called by:
  9417 ;;		_main
  9418 ;;		_disk_readp
  9419 ;;		_putsUART
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           
  9423                           	psect	text26
  9424  005120                     __ptext26:
  9425                           	opt stack 0
  9426  005120                     _WriteUART:
  9427                           	opt stack 27
  9428                           
  9429                           ;incstack = 0
  9430                           ;WriteUART@uartdata stored from wreg
  9431  005120  6E03               	movwf	WriteUART@uartdata,c
  9432                           
  9433                           ;sw_uart.c: 84: unsigned char bitcount = 8;
  9434  005122  0E08               	movlw	8
  9435  005124  6E04               	movwf	WriteUART@bitcount,c
  9436                           
  9437                           ;sw_uart.c: 87: PORTDbits.RD4 = 0;
  9438  005126  9883               	bcf	3971,4,c	;volatile
  9439                           
  9440                           ;sw_uart.c: 88: DelayTXBitUART();
  9441  005128  EC41  F028         	call	_DelayTXBitUART	;wreg free
  9442                           
  9443                           ;sw_uart.c: 90: while (bitcount--){
  9444  00512C  D00E               	goto	l2918
  9445  00512E                     l2912:
  9446                           
  9447                           ;sw_uart.c: 92: PORTDbits.RD4 = (uartdata&0x01);
  9448  00512E  C003  F002         	movff	WriteUART@uartdata,??_WriteUART
  9449  005132  0E01               	movlw	1
  9450  005134  1602               	andwf	??_WriteUART,f,c
  9451  005136  3A02               	swapf	??_WriteUART,f,c
  9452  005138  5083               	movf	3971,w,c	;volatile
  9453  00513A  1802               	xorwf	??_WriteUART,w,c
  9454  00513C  0BEF               	andlw	-17
  9455  00513E  1802               	xorwf	??_WriteUART,w,c
  9456  005140  6E83               	movwf	3971,c	;volatile
  9457                           
  9458                           ;sw_uart.c: 93: DelayTXBitUART();
  9459  005142  EC41  F028         	call	_DelayTXBitUART	;wreg free
  9460                           
  9461                           ;sw_uart.c: 94: uartdata >>= 1;
  9462  005146  90D8               	bcf	status,0,c
  9463  005148  3203               	rrcf	WriteUART@uartdata,f,c
  9464  00514A                     l2918:
  9465  00514A  0604               	decf	WriteUART@bitcount,f,c
  9466  00514C  2804               	incf	WriteUART@bitcount& (0+255),w,c
  9467  00514E  A4D8               	btfss	status,2,c
  9468  005150  D7EE               	goto	l2912
  9469                           
  9470                           ;sw_uart.c: 95: }
  9471                           ;sw_uart.c: 98: PORTDbits.RD4 = 1;
  9472  005152  8883               	bsf	3971,4,c	;volatile
  9473                           
  9474                           ;sw_uart.c: 99: DelayTXBitUART();
  9475  005154  EC41  F028         	call	_DelayTXBitUART	;wreg free
  9476  005158  0012               	return	
  9477  00515A                     __end_of_WriteUART:
  9478                           	opt stack 0
  9479                           tblptru	equ	0xFF8
  9480                           tblptrh	equ	0xFF7
  9481                           tblptrl	equ	0xFF6
  9482                           tablat	equ	0xFF5
  9483                           prodh	equ	0xFF4
  9484                           prodl	equ	0xFF3
  9485                           indf0	equ	0xFEF
  9486                           postinc0	equ	0xFEE
  9487                           fsr0h	equ	0xFEA
  9488                           fsr0l	equ	0xFE9
  9489                           wreg	equ	0xFE8
  9490                           indf1	equ	0xFE7
  9491                           postdec1	equ	0xFE5
  9492                           fsr1h	equ	0xFE2
  9493                           fsr1l	equ	0xFE1
  9494                           indf2	equ	0xFDF
  9495                           postinc2	equ	0xFDE
  9496                           postdec2	equ	0xFDD
  9497                           plusw2	equ	0xFDB
  9498                           fsr2h	equ	0xFDA
  9499                           fsr2l	equ	0xFD9
  9500                           status	equ	0xFD8
  9501                           
  9502 ;; *************** function _DelayTXBitUART *****************
  9503 ;; Defined at:
  9504 ;;		line 23 in file "sw_uart.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;		None
  9509 ;; Return value:  Size  Location     Type
  9510 ;;		None               void
  9511 ;; Registers used:
  9512 ;;		wreg, cstack
  9513 ;; Tracked objects:
  9514 ;;		On entry : 0/0
  9515 ;;		On exit  : 0/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9518 ;;      Params:         0       0       0       0       0       0       0       0       0
  9519 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9520 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9521 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9522 ;;Total ram usage:        0 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:    1
  9525 ;; This function calls:
  9526 ;;		_Delay100TCYx
  9527 ;; This function is called by:
  9528 ;;		_WriteUART
  9529 ;; This function uses a non-reentrant model
  9530 ;;
  9531                           
  9532                           	psect	text27
  9533  005082                     __ptext27:
  9534                           	opt stack 0
  9535  005082                     _DelayTXBitUART:
  9536                           	opt stack 27
  9537                           
  9538                           ;sw_uart.c: 25: Delay100TCYx( 5 );
  9539                           
  9540                           ;incstack = 0
  9541  005082  0E05               	movlw	5
  9542  005084  EC0C  F028         	call	_Delay100TCYx
  9543                           
  9544                           ;sw_uart.c: 27: _delay(1); _delay(1); _delay(1); _delay(1); _delay(1);
  9545  005088  F000               	nop	
  9546  00508A  F000               	nop	
  9547  00508C  F000               	nop	
  9548  00508E  F000               	nop	
  9549  005090  F000               	nop	
  9550                           
  9551                           ;sw_uart.c: 28: _delay(1); _delay(1); _delay(1); _delay(1);
  9552  005092  F000               	nop	
  9553  005094  F000               	nop	
  9554  005096  F000               	nop	
  9555  005098  F000               	nop	
  9556  00509A  0012               	return	
  9557  00509C                     __end_of_DelayTXBitUART:
  9558                           	opt stack 0
  9559                           tblptru	equ	0xFF8
  9560                           tblptrh	equ	0xFF7
  9561                           tblptrl	equ	0xFF6
  9562                           tablat	equ	0xFF5
  9563                           prodh	equ	0xFF4
  9564                           prodl	equ	0xFF3
  9565                           indf0	equ	0xFEF
  9566                           postinc0	equ	0xFEE
  9567                           fsr0h	equ	0xFEA
  9568                           fsr0l	equ	0xFE9
  9569                           wreg	equ	0xFE8
  9570                           indf1	equ	0xFE7
  9571                           postdec1	equ	0xFE5
  9572                           fsr1h	equ	0xFE2
  9573                           fsr1l	equ	0xFE1
  9574                           indf2	equ	0xFDF
  9575                           postinc2	equ	0xFDE
  9576                           postdec2	equ	0xFDD
  9577                           plusw2	equ	0xFDB
  9578                           fsr2h	equ	0xFDA
  9579                           fsr2l	equ	0xFD9
  9580                           status	equ	0xFD8
  9581                           
  9582 ;; *************** function _Delay100TCYx *****************
  9583 ;; Defined at:
  9584 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d100tcyx.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  unit            1    wreg     unsigned char 
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;  unit            1    0[COMRAM] unsigned char 
  9589 ;; Return value:  Size  Location     Type
  9590 ;;		None               void
  9591 ;; Registers used:
  9592 ;;		wreg
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9598 ;;      Params:         0       0       0       0       0       0       0       0       0
  9599 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9600 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9601 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9602 ;;Total ram usage:        1 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; This function calls:
  9605 ;;		Nothing
  9606 ;; This function is called by:
  9607 ;;		_DelayTXBitUART
  9608 ;;		_DelayRXHalfBitUART
  9609 ;;		_DelayRXBitUART
  9610 ;; This function uses a non-reentrant model
  9611 ;;
  9612                           
  9613                           	psect	text28
  9614  005018                     __ptext28:
  9615                           	opt stack 0
  9616  005018                     _Delay100TCYx:
  9617                           	opt stack 27
  9618                           
  9619                           ;incstack = 0
  9620                           ;Delay100TCYx@unit stored from wreg
  9621  005018  6E01               	movwf	Delay100TCYx@unit,c
  9622  00501A                     l870:
  9623  00501A  0E21               	movlw	33
  9624  00501C                     u4537:
  9625  00501C  2EE8               	decfsz	wreg,f,c
  9626  00501E  D7FE               	goto	u4537
  9627  005020  F000               	nop	
  9628  005022  2E01               	decfsz	Delay100TCYx@unit,f,c
  9629  005024  D7FA               	goto	l870
  9630  005026  0012               	return	
  9631  005028                     __end_of_Delay100TCYx:
  9632                           	opt stack 0
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           indf0	equ	0xFEF
  9640                           postinc0	equ	0xFEE
  9641                           fsr0h	equ	0xFEA
  9642                           fsr0l	equ	0xFE9
  9643                           wreg	equ	0xFE8
  9644                           indf1	equ	0xFE7
  9645                           postdec1	equ	0xFE5
  9646                           fsr1h	equ	0xFE2
  9647                           fsr1l	equ	0xFE1
  9648                           indf2	equ	0xFDF
  9649                           postinc2	equ	0xFDE
  9650                           postdec2	equ	0xFDD
  9651                           plusw2	equ	0xFDB
  9652                           fsr2h	equ	0xFDA
  9653                           fsr2l	equ	0xFD9
  9654                           status	equ	0xFD8
  9655                           
  9656 ;; *************** function _proceed *****************
  9657 ;; Defined at:
  9658 ;;		line 100 in file "main.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;		None
  9663 ;; Return value:  Size  Location     Type
  9664 ;;		None               void
  9665 ;; Registers used:
  9666 ;;		wreg, cstack
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    1
  9679 ;; This function calls:
  9680 ;;		_WriteSPI
  9681 ;; This function is called by:
  9682 ;;		_main
  9683 ;;		_reset
  9684 ;;		_disk_initialize
  9685 ;;		_disk_readp
  9686 ;;		_disk_writep
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           	psect	text29
  9691  004FEE                     __ptext29:
  9692                           	opt stack 0
  9693  004FEE                     _proceed:
  9694                           	opt stack 29
  9695                           
  9696                           ;main.c: 102: LATB4 = 0;
  9697                           
  9698                           ;incstack = 0
  9699  004FEE  988A               	bcf	3978,4,c	;volatile
  9700                           
  9701                           ;main.c: 103: WriteSPI(0XFF);
  9702  004FF0  0EFF               	movlw	255
  9703  004FF2  EC28  F028         	call	_WriteSPI
  9704                           
  9705                           ;main.c: 104: LATB4 = 1;
  9706  004FF6  888A               	bsf	3978,4,c	;volatile
  9707  004FF8  0012               	return	
  9708  004FFA                     __end_of_proceed:
  9709                           	opt stack 0
  9710                           tblptru	equ	0xFF8
  9711                           tblptrh	equ	0xFF7
  9712                           tblptrl	equ	0xFF6
  9713                           tablat	equ	0xFF5
  9714                           prodh	equ	0xFF4
  9715                           prodl	equ	0xFF3
  9716                           indf0	equ	0xFEF
  9717                           postinc0	equ	0xFEE
  9718                           fsr0h	equ	0xFEA
  9719                           fsr0l	equ	0xFE9
  9720                           wreg	equ	0xFE8
  9721                           indf1	equ	0xFE7
  9722                           postdec1	equ	0xFE5
  9723                           fsr1h	equ	0xFE2
  9724                           fsr1l	equ	0xFE1
  9725                           indf2	equ	0xFDF
  9726                           postinc2	equ	0xFDE
  9727                           postdec2	equ	0xFDD
  9728                           plusw2	equ	0xFDB
  9729                           fsr2h	equ	0xFDA
  9730                           fsr2l	equ	0xFD9
  9731                           status	equ	0xFD8
  9732                           
  9733 ;; *************** function _dummy_clocks *****************
  9734 ;; Defined at:
  9735 ;;		line 87 in file "main.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;  n               2    3[COMRAM] int 
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;  i               2    6[COMRAM] int 
  9740 ;; Return value:  Size  Location     Type
  9741 ;;		None               void
  9742 ;; Registers used:
  9743 ;;		wreg, status,2, status,0, cstack
  9744 ;; Tracked objects:
  9745 ;;		On entry : 0/0
  9746 ;;		On exit  : 0/0
  9747 ;;		Unchanged: 0/0
  9748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9749 ;;      Params:         2       0       0       0       0       0       0       0       0
  9750 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9751 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9752 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9753 ;;Total ram usage:        5 bytes
  9754 ;; Hardware stack levels used:    1
  9755 ;; Hardware stack levels required when called:    2
  9756 ;; This function calls:
  9757 ;;		_WriteSPI
  9758 ;;		_delay_ms
  9759 ;; This function is called by:
  9760 ;;		_reset
  9761 ;;		_disk_initialize
  9762 ;;		_disk_readp
  9763 ;;		_disk_writep
  9764 ;; This function uses a non-reentrant model
  9765 ;;
  9766                           
  9767                           	psect	text30
  9768  00515A                     __ptext30:
  9769                           	opt stack 0
  9770  00515A                     _dummy_clocks:
  9771                           	opt stack 25
  9772                           
  9773                           ;main.c: 89: int i = 0;
  9774                           
  9775                           ;incstack = 0
  9776  00515A  0E00               	movlw	0
  9777  00515C  6E08               	movwf	dummy_clocks@i+1,c
  9778  00515E  0E00               	movlw	0
  9779  005160  6E07               	movwf	dummy_clocks@i,c
  9780                           
  9781                           ;main.c: 90: delay_ms(1);
  9782  005162  0E01               	movlw	1
  9783  005164  EC34  F028         	call	_delay_ms
  9784                           
  9785                           ;main.c: 91: LATB0 = 1;
  9786  005168  808A               	bsf	3978,0,c	;volatile
  9787                           
  9788                           ;main.c: 92: for(i=0;i<n;i++)
  9789  00516A  0E00               	movlw	0
  9790  00516C  6E08               	movwf	dummy_clocks@i+1,c
  9791  00516E  0E00               	movlw	0
  9792  005170  6E07               	movwf	dummy_clocks@i,c
  9793  005172  D007               	goto	l2950
  9794  005174                     l343:
  9795                           
  9796                           ;main.c: 93: {
  9797                           ;main.c: 94: LATB4 = 1;
  9798  005174  888A               	bsf	3978,4,c	;volatile
  9799                           
  9800                           ;main.c: 95: WriteSPI(0XFF);
  9801  005176  0EFF               	movlw	255
  9802  005178  EC28  F028         	call	_WriteSPI
  9803                           
  9804                           ;main.c: 96: LATB4 = 0;
  9805  00517C  988A               	bcf	3978,4,c	;volatile
  9806  00517E  4A07               	infsnz	dummy_clocks@i,f,c
  9807  005180  2A08               	incf	dummy_clocks@i+1,f,c
  9808  005182                     l2950:
  9809  005182  5008               	movf	dummy_clocks@i+1,w,c
  9810  005184  0A80               	xorlw	128
  9811  005186  6E06               	movwf	??_dummy_clocks& (0+255),c
  9812  005188  5004               	movf	dummy_clocks@n,w,c
  9813  00518A  5C07               	subwf	dummy_clocks@i,w,c
  9814  00518C  5005               	movf	dummy_clocks@n+1,w,c
  9815  00518E  0A80               	xorlw	128
  9816  005190  5806               	subwfb	??_dummy_clocks& (0+255),w,c
  9817  005192  B0D8               	btfsc	status,0,c
  9818  005194  0012               	return	
  9819  005196  D7EE               	goto	l343
  9820  005198                     __end_of_dummy_clocks:
  9821                           	opt stack 0
  9822                           tblptru	equ	0xFF8
  9823                           tblptrh	equ	0xFF7
  9824                           tblptrl	equ	0xFF6
  9825                           tablat	equ	0xFF5
  9826                           prodh	equ	0xFF4
  9827                           prodl	equ	0xFF3
  9828                           indf0	equ	0xFEF
  9829                           postinc0	equ	0xFEE
  9830                           fsr0h	equ	0xFEA
  9831                           fsr0l	equ	0xFE9
  9832                           wreg	equ	0xFE8
  9833                           indf1	equ	0xFE7
  9834                           postdec1	equ	0xFE5
  9835                           fsr1h	equ	0xFE2
  9836                           fsr1l	equ	0xFE1
  9837                           indf2	equ	0xFDF
  9838                           postinc2	equ	0xFDE
  9839                           postdec2	equ	0xFDD
  9840                           plusw2	equ	0xFDB
  9841                           fsr2h	equ	0xFDA
  9842                           fsr2l	equ	0xFD9
  9843                           status	equ	0xFD8
  9844                           
  9845 ;; *************** function _WriteSPI *****************
  9846 ;; Defined at:
  9847 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi_writ.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;  data_out        1    wreg     unsigned char 
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;  data_out        1    1[COMRAM] unsigned char 
  9852 ;;  TempVar         1    0[COMRAM] unsigned char 
  9853 ;; Return value:  Size  Location     Type
  9854 ;;                  1    wreg      char 
  9855 ;; Registers used:
  9856 ;;		wreg
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9862 ;;      Params:         0       0       0       0       0       0       0       0       0
  9863 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9864 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9865 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9866 ;;Total ram usage:        2 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; This function calls:
  9869 ;;		Nothing
  9870 ;; This function is called by:
  9871 ;;		_dummy_clocks
  9872 ;;		_proceed
  9873 ;; This function uses a non-reentrant model
  9874 ;;
  9875                           
  9876                           	psect	text31
  9877  005050                     __ptext31:
  9878                           	opt stack 0
  9879  005050                     _WriteSPI:
  9880                           	opt stack 29
  9881                           
  9882                           ;incstack = 0
  9883                           ;WriteSPI@data_out stored from wreg
  9884  005050  6E02               	movwf	WriteSPI@data_out,c
  9885  005052  CFC9 F001          	movff	4041,WriteSPI@TempVar	;volatile
  9886  005056  969E               	bcf	3998,3,c	;volatile
  9887  005058  9EC6               	bcf	4038,7,c	;volatile
  9888  00505A  C002  FFC9         	movff	WriteSPI@data_out,4041	;volatile
  9889  00505E  BEC6               	btfsc	4038,7,c	;volatile
  9890  005060  D002               	goto	l640
  9891  005062                     l642:
  9892  005062  A69E               	btfss	3998,3,c	;volatile
  9893  005064  D7FE               	goto	l642
  9894  005066                     l640:
  9895  005066  0012               	return	
  9896  005068                     __end_of_WriteSPI:
  9897                           	opt stack 0
  9898                           tblptru	equ	0xFF8
  9899                           tblptrh	equ	0xFF7
  9900                           tblptrl	equ	0xFF6
  9901                           tablat	equ	0xFF5
  9902                           prodh	equ	0xFF4
  9903                           prodl	equ	0xFF3
  9904                           indf0	equ	0xFEF
  9905                           postinc0	equ	0xFEE
  9906                           fsr0h	equ	0xFEA
  9907                           fsr0l	equ	0xFE9
  9908                           wreg	equ	0xFE8
  9909                           indf1	equ	0xFE7
  9910                           postdec1	equ	0xFE5
  9911                           fsr1h	equ	0xFE2
  9912                           fsr1l	equ	0xFE1
  9913                           indf2	equ	0xFDF
  9914                           postinc2	equ	0xFDE
  9915                           postdec2	equ	0xFDD
  9916                           plusw2	equ	0xFDB
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _Delay_s *****************
  9922 ;; Defined at:
  9923 ;;		line 44 in file "delay.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  t               1    wreg     unsigned char 
  9926 ;; Auto vars:     Size  Location     Type
  9927 ;;  t               1    3[COMRAM] unsigned char 
  9928 ;;  j               1    5[COMRAM] unsigned char 
  9929 ;;  i               1    4[COMRAM] unsigned char 
  9930 ;; Return value:  Size  Location     Type
  9931 ;;		None               void
  9932 ;; Registers used:
  9933 ;;		wreg, status,2, status,0, cstack
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9939 ;;      Params:         0       0       0       0       0       0       0       0       0
  9940 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9942 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9943 ;;Total ram usage:        3 bytes
  9944 ;; Hardware stack levels used:    1
  9945 ;; Hardware stack levels required when called:    2
  9946 ;; This function calls:
  9947 ;;		_delay_ms
  9948 ;; This function is called by:
  9949 ;;		_reset
  9950 ;;		_disk_initialize
  9951 ;;		_disk_readp
  9952 ;;		_disk_writep
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           	psect	text32
  9957  00509C                     __ptext32:
  9958                           	opt stack 0
  9959  00509C                     _Delay_s:
  9960                           	opt stack 25
  9961                           
  9962                           ;incstack = 0
  9963                           ;Delay_s@t stored from wreg
  9964  00509C  6E04               	movwf	Delay_s@t,c
  9965                           
  9966                           ;delay.c: 46: unsigned char i,j;
  9967                           ;delay.c: 47: for(i=0;i<t;i++)
  9968  00509E  0E00               	movlw	0
  9969  0050A0  6E05               	movwf	Delay_s@i,c
  9970  0050A2  D00B               	goto	l2988
  9971  0050A4                     l2974:
  9972                           
  9973                           ;delay.c: 48: for(j=0;j<10;j++)
  9974  0050A4  0E00               	movlw	0
  9975  0050A6  6E06               	movwf	Delay_s@j,c
  9976  0050A8  D004               	goto	L10
  9977  0050AA                     l2980:
  9978                           
  9979                           ;delay.c: 49: delay_ms(100);
  9980  0050AA  0E64               	movlw	100
  9981  0050AC  EC34  F028         	call	_delay_ms
  9982  0050B0  2A06               	incf	Delay_s@j,f,c
  9983  0050B2                     L10:
  9984  0050B2  0E09               	movlw	9
  9985  0050B4  6406               	cpfsgt	Delay_s@j,c
  9986  0050B6  D7F9               	goto	l2980
  9987  0050B8  2A05               	incf	Delay_s@i,f,c
  9988  0050BA                     l2988:
  9989  0050BA  5004               	movf	Delay_s@t,w,c
  9990  0050BC  5C05               	subwf	Delay_s@i,w,c
  9991  0050BE  B0D8               	btfsc	status,0,c
  9992  0050C0  0012               	return	
  9993  0050C2  D7F0               	goto	l2974
  9994  0050C4                     __end_of_Delay_s:
  9995                           	opt stack 0
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           indf0	equ	0xFEF
 10003                           postinc0	equ	0xFEE
 10004                           fsr0h	equ	0xFEA
 10005                           fsr0l	equ	0xFE9
 10006                           wreg	equ	0xFE8
 10007                           indf1	equ	0xFE7
 10008                           postdec1	equ	0xFE5
 10009                           fsr1h	equ	0xFE2
 10010                           fsr1l	equ	0xFE1
 10011                           indf2	equ	0xFDF
 10012                           postinc2	equ	0xFDE
 10013                           postdec2	equ	0xFDD
 10014                           plusw2	equ	0xFDB
 10015                           fsr2h	equ	0xFDA
 10016                           fsr2l	equ	0xFD9
 10017                           status	equ	0xFD8
 10018                           
 10019 ;; *************** function _delay_ms *****************
 10020 ;; Defined at:
 10021 ;;		line 33 in file "delay.c"
 10022 ;; Parameters:    Size  Location     Type
 10023 ;;  t               1    wreg     unsigned char 
 10024 ;; Auto vars:     Size  Location     Type
 10025 ;;  t               1    1[COMRAM] unsigned char 
 10026 ;;  i               1    2[COMRAM] unsigned char 
 10027 ;; Return value:  Size  Location     Type
 10028 ;;		None               void
 10029 ;; Registers used:
 10030 ;;		wreg, status,2, status,0, cstack
 10031 ;; Tracked objects:
 10032 ;;		On entry : 0/0
 10033 ;;		On exit  : 0/0
 10034 ;;		Unchanged: 0/0
 10035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10036 ;;      Params:         0       0       0       0       0       0       0       0       0
 10037 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10038 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10039 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10040 ;;Total ram usage:        2 bytes
 10041 ;; Hardware stack levels used:    1
 10042 ;; Hardware stack levels required when called:    1
 10043 ;; This function calls:
 10044 ;;		_Delay1KTCYx
 10045 ;; This function is called by:
 10046 ;;		_dummy_clocks
 10047 ;;		_disk_initialize
 10048 ;;		_Delay_s
 10049 ;; This function uses a non-reentrant model
 10050 ;;
 10051                           
 10052                           	psect	text33
 10053  005068                     __ptext33:
 10054                           	opt stack 0
 10055  005068                     _delay_ms:
 10056                           	opt stack 25
 10057                           
 10058                           ;incstack = 0
 10059                           ;delay_ms@t stored from wreg
 10060  005068  6E02               	movwf	delay_ms@t,c
 10061                           
 10062                           ;delay.c: 35: unsigned char i;
 10063                           ;delay.c: 36: for (i=0;i<=t;i++)
 10064  00506A  0E00               	movlw	0
 10065  00506C  6E03               	movwf	delay_ms@i,c
 10066  00506E  D004               	goto	l2888
 10067  005070                     l2884:
 10068                           
 10069                           ;delay.c: 37: Delay1KTCYx(5);
 10070  005070  0E05               	movlw	5
 10071  005072  EC04  F028         	call	_Delay1KTCYx
 10072  005076  2A03               	incf	delay_ms@i,f,c
 10073  005078                     l2888:
 10074  005078  5003               	movf	delay_ms@i,w,c
 10075  00507A  5C02               	subwf	delay_ms@t,w,c
 10076  00507C  A0D8               	btfss	status,0,c
 10077                           
 10078                           ;delay.c: 41: return;
 10079  00507E  0012               	return	
 10080  005080  D7F7               	goto	l2884
 10081  005082                     __end_of_delay_ms:
 10082                           	opt stack 0
 10083                           tblptru	equ	0xFF8
 10084                           tblptrh	equ	0xFF7
 10085                           tblptrl	equ	0xFF6
 10086                           tablat	equ	0xFF5
 10087                           prodh	equ	0xFF4
 10088                           prodl	equ	0xFF3
 10089                           indf0	equ	0xFEF
 10090                           postinc0	equ	0xFEE
 10091                           fsr0h	equ	0xFEA
 10092                           fsr0l	equ	0xFE9
 10093                           wreg	equ	0xFE8
 10094                           indf1	equ	0xFE7
 10095                           postdec1	equ	0xFE5
 10096                           fsr1h	equ	0xFE2
 10097                           fsr1l	equ	0xFE1
 10098                           indf2	equ	0xFDF
 10099                           postinc2	equ	0xFDE
 10100                           postdec2	equ	0xFDD
 10101                           plusw2	equ	0xFDB
 10102                           fsr2h	equ	0xFDA
 10103                           fsr2l	equ	0xFD9
 10104                           status	equ	0xFD8
 10105                           
 10106 ;; *************** function _Delay1KTCYx *****************
 10107 ;; Defined at:
 10108 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d1ktcyx.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;  unit            1    wreg     unsigned char 
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  unit            1    0[COMRAM] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;		None               void
 10115 ;; Registers used:
 10116 ;;		wreg
 10117 ;; Tracked objects:
 10118 ;;		On entry : 0/0
 10119 ;;		On exit  : 0/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10122 ;;      Params:         0       0       0       0       0       0       0       0       0
 10123 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10124 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10125 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10126 ;;Total ram usage:        1 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; This function calls:
 10129 ;;		Nothing
 10130 ;; This function is called by:
 10131 ;;		_delay_ms
 10132 ;;		_DelayPORXLCD
 10133 ;;		_DelayXLCD
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           	psect	text34
 10138  005008                     __ptext34:
 10139                           	opt stack 0
 10140  005008                     _Delay1KTCYx:
 10141                           	opt stack 25
 10142                           
 10143                           ;incstack = 0
 10144                           ;Delay1KTCYx@unit stored from wreg
 10145  005008  6E01               	movwf	Delay1KTCYx@unit,c
 10146  00500A                     l891:
 10147  00500A  0EFA               	movlw	250
 10148  00500C                     u4547:
 10149  00500C  F000               	nop	
 10150  00500E  2EE8               	decfsz	wreg,f,c
 10151  005010  D7FD               	goto	u4547
 10152  005012  2E01               	decfsz	Delay1KTCYx@unit,f,c
 10153  005014  D7FA               	goto	l891
 10154  005016  0012               	return	
 10155  005018                     __end_of_Delay1KTCYx:
 10156                           	opt stack 0
 10157                           tblptru	equ	0xFF8
 10158                           tblptrh	equ	0xFF7
 10159                           tblptrl	equ	0xFF6
 10160                           tablat	equ	0xFF5
 10161                           prodh	equ	0xFF4
 10162                           prodl	equ	0xFF3
 10163                           indf0	equ	0xFEF
 10164                           postinc0	equ	0xFEE
 10165                           fsr0h	equ	0xFEA
 10166                           fsr0l	equ	0xFE9
 10167                           wreg	equ	0xFE8
 10168                           indf1	equ	0xFE7
 10169                           postdec1	equ	0xFE5
 10170                           fsr1h	equ	0xFE2
 10171                           fsr1l	equ	0xFE1
 10172                           indf2	equ	0xFDF
 10173                           postinc2	equ	0xFDE
 10174                           postdec2	equ	0xFDD
 10175                           plusw2	equ	0xFDB
 10176                           fsr2h	equ	0xFDA
 10177                           fsr2l	equ	0xFD9
 10178                           status	equ	0xFD8
 10179                           
 10180 ;; *************** function _Command *****************
 10181 ;; Defined at:
 10182 ;;		line 76 in file "main.c"
 10183 ;; Parameters:    Size  Location     Type
 10184 ;;  cmd             1    wreg     unsigned char 
 10185 ;;  arg             4    2[COMRAM] unsigned long 
 10186 ;;  CRCbits         1    6[COMRAM] unsigned char 
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;  cmd             1    7[COMRAM] unsigned char 
 10189 ;; Return value:  Size  Location     Type
 10190 ;;		None               void
 10191 ;; Registers used:
 10192 ;;		wreg, status,2, status,0, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10198 ;;      Params:         5       0       0       0       0       0       0       0       0
 10199 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10200 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10201 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10202 ;;Total ram usage:        6 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    1
 10205 ;; This function calls:
 10206 ;;		_WriteSPI_
 10207 ;; This function is called by:
 10208 ;;		_reset
 10209 ;;		_disk_initialize
 10210 ;;		_disk_readp
 10211 ;;		_disk_writep
 10212 ;; This function uses a non-reentrant model
 10213 ;;
 10214                           
 10215                           	psect	text35
 10216  0050F0                     __ptext35:
 10217                           	opt stack 0
 10218  0050F0                     _Command:
 10219                           	opt stack 26
 10220                           
 10221                           ;incstack = 0
 10222                           ;Command@cmd stored from wreg
 10223  0050F0  6E08               	movwf	Command@cmd,c
 10224                           
 10225                           ;main.c: 78: WriteSPI_(0xff);
 10226  0050F2  0EFF               	movlw	255
 10227  0050F4  EC1C  F028         	call	_WriteSPI_
 10228                           
 10229                           ;main.c: 79: WriteSPI_(0b01000000 | cmd);
 10230  0050F8  5008               	movf	Command@cmd,w,c
 10231  0050FA  0940               	iorlw	64
 10232  0050FC  EC1C  F028         	call	_WriteSPI_
 10233                           
 10234                           ;main.c: 80: WriteSPI_((unsigned char) (arg >> 24));
 10235  005100  5006               	movf	Command@arg+3,w,c
 10236  005102  EC1C  F028         	call	_WriteSPI_
 10237                           
 10238                           ;main.c: 81: WriteSPI_((unsigned char) (arg >> 16));
 10239  005106  5005               	movf	Command@arg+2,w,c
 10240  005108  EC1C  F028         	call	_WriteSPI_
 10241                           
 10242                           ;main.c: 82: WriteSPI_((unsigned char) (arg >> 8));
 10243  00510C  5004               	movf	Command@arg+1,w,c
 10244  00510E  EC1C  F028         	call	_WriteSPI_
 10245                           
 10246                           ;main.c: 83: WriteSPI_((unsigned char) arg);
 10247  005112  5003               	movf	Command@arg,w,c
 10248  005114  EC1C  F028         	call	_WriteSPI_
 10249                           
 10250                           ;main.c: 84: WriteSPI_(CRCbits);
 10251  005118  5007               	movf	Command@CRCbits,w,c
 10252  00511A  EC1C  F028         	call	_WriteSPI_
 10253  00511E  0012               	return	
 10254  005120                     __end_of_Command:
 10255                           	opt stack 0
 10256                           tblptru	equ	0xFF8
 10257                           tblptrh	equ	0xFF7
 10258                           tblptrl	equ	0xFF6
 10259                           tablat	equ	0xFF5
 10260                           prodh	equ	0xFF4
 10261                           prodl	equ	0xFF3
 10262                           indf0	equ	0xFEF
 10263                           postinc0	equ	0xFEE
 10264                           fsr0h	equ	0xFEA
 10265                           fsr0l	equ	0xFE9
 10266                           wreg	equ	0xFE8
 10267                           indf1	equ	0xFE7
 10268                           postdec1	equ	0xFE5
 10269                           fsr1h	equ	0xFE2
 10270                           fsr1l	equ	0xFE1
 10271                           indf2	equ	0xFDF
 10272                           postinc2	equ	0xFDE
 10273                           postdec2	equ	0xFDD
 10274                           plusw2	equ	0xFDB
 10275                           fsr2h	equ	0xFDA
 10276                           fsr2l	equ	0xFD9
 10277                           status	equ	0xFD8
 10278                           
 10279 ;; *************** function _WriteSPI_ *****************
 10280 ;; Defined at:
 10281 ;;		line 58 in file "main.c"
 10282 ;; Parameters:    Size  Location     Type
 10283 ;;  data_out        1    wreg     unsigned char 
 10284 ;; Auto vars:     Size  Location     Type
 10285 ;;  data_out        1    1[COMRAM] unsigned char 
 10286 ;;  TempVar         1    0[COMRAM] unsigned char 
 10287 ;; Return value:  Size  Location     Type
 10288 ;;                  1    wreg      char 
 10289 ;; Registers used:
 10290 ;;		wreg
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10296 ;;      Params:         0       0       0       0       0       0       0       0       0
 10297 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10298 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10299 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10300 ;;Total ram usage:        2 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; This function calls:
 10303 ;;		Nothing
 10304 ;; This function is called by:
 10305 ;;		_Command
 10306 ;;		_disk_writep
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           	psect	text36
 10311  005038                     __ptext36:
 10312                           	opt stack 0
 10313  005038                     _WriteSPI_:
 10314                           	opt stack 26
 10315                           
 10316                           ;incstack = 0
 10317                           ;WriteSPI_@data_out stored from wreg
 10318  005038  6E02               	movwf	WriteSPI_@data_out,c
 10319                           
 10320                           ;main.c: 60: unsigned char TempVar;
 10321                           ;main.c: 62: TempVar = SSPBUF;
 10322  00503A  CFC9 F001          	movff	4041,WriteSPI_@TempVar	;volatile
 10323                           
 10324                           ;main.c: 63: PIR1bits.SSPIF = 0;
 10325  00503E  969E               	bcf	3998,3,c	;volatile
 10326                           
 10327                           ;main.c: 64: SSPCON1bits.WCOL = 0;
 10328  005040  9EC6               	bcf	4038,7,c	;volatile
 10329                           
 10330                           ;main.c: 65: SSPBUF = data_out;
 10331  005042  C002  FFC9         	movff	WriteSPI_@data_out,4041	;volatile
 10332                           
 10333                           ;main.c: 66: if ( SSPCON1 & 0x80 )
 10334  005046  BEC6               	btfsc	4038,7,c	;volatile
 10335  005048  D002               	goto	l332
 10336  00504A                     l334:
 10337  00504A  A69E               	btfss	3998,3,c	;volatile
 10338  00504C  D7FE               	goto	l334
 10339  00504E                     l332:
 10340  00504E  0012               	return	
 10341  005050                     __end_of_WriteSPI_:
 10342                           	opt stack 0
 10343                           tblptru	equ	0xFF8
 10344                           tblptrh	equ	0xFF7
 10345                           tblptrl	equ	0xFF6
 10346                           tablat	equ	0xFF5
 10347                           prodh	equ	0xFF4
 10348                           prodl	equ	0xFF3
 10349                           indf0	equ	0xFEF
 10350                           postinc0	equ	0xFEE
 10351                           fsr0h	equ	0xFEA
 10352                           fsr0l	equ	0xFE9
 10353                           wreg	equ	0xFE8
 10354                           indf1	equ	0xFE7
 10355                           postdec1	equ	0xFE5
 10356                           fsr1h	equ	0xFE2
 10357                           fsr1l	equ	0xFE1
 10358                           indf2	equ	0xFDF
 10359                           postinc2	equ	0xFDE
 10360                           postdec2	equ	0xFDD
 10361                           plusw2	equ	0xFDB
 10362                           fsr2h	equ	0xFDA
 10363                           fsr2l	equ	0xFD9
 10364                           status	equ	0xFD8
 10365                           
 10366 ;; *************** function ___lmul *****************
 10367 ;; Defined at:
 10368 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;  multiplier      4    0[COMRAM] unsigned long 
 10371 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;  product         4    8[COMRAM] unsigned long 
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  4    0[COMRAM] unsigned long 
 10376 ;; Registers used:
 10377 ;;		wreg, status,2, status,0
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10383 ;;      Params:         8       0       0       0       0       0       0       0       0
 10384 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10385 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10386 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10387 ;;Total ram usage:       12 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; This function calls:
 10390 ;;		Nothing
 10391 ;; This function is called by:
 10392 ;;		_clust2sect
 10393 ;;		_pf_mount
 10394 ;; This function uses a non-reentrant model
 10395 ;;
 10396                           
 10397                           	psect	text37
 10398  0051D8                     __ptext37:
 10399                           	opt stack 0
 10400  0051D8                     ___lmul:
 10401                           	opt stack 28
 10402                           
 10403                           ;incstack = 0
 10404  0051D8  0E00               	movlw	0
 10405  0051DA  6E09               	movwf	___lmul@product,c
 10406  0051DC  0E00               	movlw	0
 10407  0051DE  6E0A               	movwf	___lmul@product+1,c
 10408  0051E0  0E00               	movlw	0
 10409  0051E2  6E0B               	movwf	___lmul@product+2,c
 10410  0051E4  0E00               	movlw	0
 10411  0051E6  6E0C               	movwf	___lmul@product+3,c
 10412  0051E8                     l3124:
 10413  0051E8  A001               	btfss	___lmul@multiplier,0,c
 10414  0051EA  D008               	goto	l3128
 10415  0051EC  5005               	movf	___lmul@multiplicand,w,c
 10416  0051EE  2609               	addwf	___lmul@product,f,c
 10417  0051F0  5006               	movf	___lmul@multiplicand+1,w,c
 10418  0051F2  220A               	addwfc	___lmul@product+1,f,c
 10419  0051F4  5007               	movf	___lmul@multiplicand+2,w,c
 10420  0051F6  220B               	addwfc	___lmul@product+2,f,c
 10421  0051F8  5008               	movf	___lmul@multiplicand+3,w,c
 10422  0051FA  220C               	addwfc	___lmul@product+3,f,c
 10423  0051FC                     l3128:
 10424  0051FC  90D8               	bcf	status,0,c
 10425  0051FE  3605               	rlcf	___lmul@multiplicand,f,c
 10426  005200  3606               	rlcf	___lmul@multiplicand+1,f,c
 10427  005202  3607               	rlcf	___lmul@multiplicand+2,f,c
 10428  005204  3608               	rlcf	___lmul@multiplicand+3,f,c
 10429  005206  90D8               	bcf	status,0,c
 10430  005208  3204               	rrcf	___lmul@multiplier+3,f,c
 10431  00520A  3203               	rrcf	___lmul@multiplier+2,f,c
 10432  00520C  3202               	rrcf	___lmul@multiplier+1,f,c
 10433  00520E  3201               	rrcf	___lmul@multiplier,f,c
 10434  005210  5004               	movf	___lmul@multiplier+3,w,c
 10435  005212  1001               	iorwf	___lmul@multiplier,w,c
 10436  005214  1002               	iorwf	___lmul@multiplier+1,w,c
 10437  005216  1003               	iorwf	___lmul@multiplier+2,w,c
 10438  005218  A4D8               	btfss	status,2,c
 10439  00521A  D7E6               	goto	l3124
 10440  00521C  C009  F001         	movff	___lmul@product,?___lmul
 10441  005220  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10442  005224  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10443  005228  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10444  00522C  0012               	return	
 10445  00522E                     __end_of___lmul:
 10446                           	opt stack 0
 10447                           tblptru	equ	0xFF8
 10448                           tblptrh	equ	0xFF7
 10449                           tblptrl	equ	0xFF6
 10450                           tablat	equ	0xFF5
 10451                           prodh	equ	0xFF4
 10452                           prodl	equ	0xFF3
 10453                           indf0	equ	0xFEF
 10454                           postinc0	equ	0xFEE
 10455                           fsr0h	equ	0xFEA
 10456                           fsr0l	equ	0xFE9
 10457                           wreg	equ	0xFE8
 10458                           indf1	equ	0xFE7
 10459                           postdec1	equ	0xFE5
 10460                           fsr1h	equ	0xFE2
 10461                           fsr1l	equ	0xFE1
 10462                           indf2	equ	0xFDF
 10463                           postinc2	equ	0xFDE
 10464                           postdec2	equ	0xFDD
 10465                           plusw2	equ	0xFDB
 10466                           fsr2h	equ	0xFDA
 10467                           fsr2l	equ	0xFD9
 10468                           status	equ	0xFD8
 10469                           
 10470 ;; *************** function ___lldiv *****************
 10471 ;; Defined at:
 10472 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 10473 ;; Parameters:    Size  Location     Type
 10474 ;;  dividend        4    0[COMRAM] unsigned long 
 10475 ;;  divisor         4    4[COMRAM] unsigned long 
 10476 ;; Auto vars:     Size  Location     Type
 10477 ;;  quotient        4    8[COMRAM] unsigned long 
 10478 ;;  counter         1   12[COMRAM] unsigned char 
 10479 ;; Return value:  Size  Location     Type
 10480 ;;                  4    0[COMRAM] unsigned long 
 10481 ;; Registers used:
 10482 ;;		wreg, status,2, status,0
 10483 ;; Tracked objects:
 10484 ;;		On entry : 0/0
 10485 ;;		On exit  : 0/0
 10486 ;;		Unchanged: 0/0
 10487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10488 ;;      Params:         8       0       0       0       0       0       0       0       0
 10489 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10490 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10491 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10492 ;;Total ram usage:       13 bytes
 10493 ;; Hardware stack levels used:    1
 10494 ;; This function calls:
 10495 ;;		Nothing
 10496 ;; This function is called by:
 10497 ;;		_pf_mount
 10498 ;;		_pf_lseek
 10499 ;; This function uses a non-reentrant model
 10500 ;;
 10501                           
 10502                           	psect	text38
 10503  00541E                     __ptext38:
 10504                           	opt stack 0
 10505  00541E                     ___lldiv:
 10506                           	opt stack 29
 10507                           
 10508                           ;incstack = 0
 10509  00541E  0E00               	movlw	0
 10510  005420  6E09               	movwf	___lldiv@quotient,c
 10511  005422  0E00               	movlw	0
 10512  005424  6E0A               	movwf	___lldiv@quotient+1,c
 10513  005426  0E00               	movlw	0
 10514  005428  6E0B               	movwf	___lldiv@quotient+2,c
 10515  00542A  0E00               	movlw	0
 10516  00542C  6E0C               	movwf	___lldiv@quotient+3,c
 10517  00542E  5008               	movf	___lldiv@divisor+3,w,c
 10518  005430  1005               	iorwf	___lldiv@divisor,w,c
 10519  005432  1006               	iorwf	___lldiv@divisor+1,w,c
 10520  005434  1007               	iorwf	___lldiv@divisor+2,w,c
 10521  005436  B4D8               	btfsc	status,2,c
 10522  005438  D02A               	goto	l1124
 10523  00543A  0E01               	movlw	1
 10524  00543C  6E0D               	movwf	___lldiv@counter,c
 10525  00543E  D006               	goto	l3690
 10526  005440                     l3688:
 10527  005440  90D8               	bcf	status,0,c
 10528  005442  3605               	rlcf	___lldiv@divisor,f,c
 10529  005444  3606               	rlcf	___lldiv@divisor+1,f,c
 10530  005446  3607               	rlcf	___lldiv@divisor+2,f,c
 10531  005448  3608               	rlcf	___lldiv@divisor+3,f,c
 10532  00544A  2A0D               	incf	___lldiv@counter,f,c
 10533  00544C                     l3690:
 10534  00544C  AE08               	btfss	___lldiv@divisor+3,7,c
 10535  00544E  D7F8               	goto	l3688
 10536  005450                     l3692:
 10537  005450  90D8               	bcf	status,0,c
 10538  005452  3609               	rlcf	___lldiv@quotient,f,c
 10539  005454  360A               	rlcf	___lldiv@quotient+1,f,c
 10540  005456  360B               	rlcf	___lldiv@quotient+2,f,c
 10541  005458  360C               	rlcf	___lldiv@quotient+3,f,c
 10542  00545A  5005               	movf	___lldiv@divisor,w,c
 10543  00545C  5C01               	subwf	___lldiv@dividend,w,c
 10544  00545E  5006               	movf	___lldiv@divisor+1,w,c
 10545  005460  5802               	subwfb	___lldiv@dividend+1,w,c
 10546  005462  5007               	movf	___lldiv@divisor+2,w,c
 10547  005464  5803               	subwfb	___lldiv@dividend+2,w,c
 10548  005466  5008               	movf	___lldiv@divisor+3,w,c
 10549  005468  5804               	subwfb	___lldiv@dividend+3,w,c
 10550  00546A  A0D8               	btfss	status,0,c
 10551  00546C  D009               	goto	l3700
 10552  00546E  5005               	movf	___lldiv@divisor,w,c
 10553  005470  5E01               	subwf	___lldiv@dividend,f,c
 10554  005472  5006               	movf	___lldiv@divisor+1,w,c
 10555  005474  5A02               	subwfb	___lldiv@dividend+1,f,c
 10556  005476  5007               	movf	___lldiv@divisor+2,w,c
 10557  005478  5A03               	subwfb	___lldiv@dividend+2,f,c
 10558  00547A  5008               	movf	___lldiv@divisor+3,w,c
 10559  00547C  5A04               	subwfb	___lldiv@dividend+3,f,c
 10560  00547E  8009               	bsf	___lldiv@quotient,0,c
 10561  005480                     l3700:
 10562  005480  90D8               	bcf	status,0,c
 10563  005482  3208               	rrcf	___lldiv@divisor+3,f,c
 10564  005484  3207               	rrcf	___lldiv@divisor+2,f,c
 10565  005486  3206               	rrcf	___lldiv@divisor+1,f,c
 10566  005488  3205               	rrcf	___lldiv@divisor,f,c
 10567  00548A  2E0D               	decfsz	___lldiv@counter,f,c
 10568  00548C  D7E1               	goto	l3692
 10569  00548E                     l1124:
 10570  00548E  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10571  005492  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10572  005496  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10573  00549A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10574  00549E  0012               	return	
 10575  0054A0                     __end_of___lldiv:
 10576                           	opt stack 0
 10577                           tblptru	equ	0xFF8
 10578                           tblptrh	equ	0xFF7
 10579                           tblptrl	equ	0xFF6
 10580                           tablat	equ	0xFF5
 10581                           prodh	equ	0xFF4
 10582                           prodl	equ	0xFF3
 10583                           indf0	equ	0xFEF
 10584                           postinc0	equ	0xFEE
 10585                           fsr0h	equ	0xFEA
 10586                           fsr0l	equ	0xFE9
 10587                           wreg	equ	0xFE8
 10588                           indf1	equ	0xFE7
 10589                           postdec1	equ	0xFE5
 10590                           fsr1h	equ	0xFE2
 10591                           fsr1l	equ	0xFE1
 10592                           indf2	equ	0xFDF
 10593                           postinc2	equ	0xFDE
 10594                           postdec2	equ	0xFDD
 10595                           plusw2	equ	0xFDB
 10596                           fsr2h	equ	0xFDA
 10597                           fsr2l	equ	0xFD9
 10598                           status	equ	0xFD8
 10599                           
 10600 ;; *************** function _OpenUART *****************
 10601 ;; Defined at:
 10602 ;;		line 30 in file "openuart.c"
 10603 ;; Parameters:    Size  Location     Type
 10604 ;;		None
 10605 ;; Auto vars:     Size  Location     Type
 10606 ;;		None
 10607 ;; Return value:  Size  Location     Type
 10608 ;;		None               void
 10609 ;; Registers used:
 10610 ;;		None
 10611 ;; Tracked objects:
 10612 ;;		On entry : 0/0
 10613 ;;		On exit  : 0/0
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10616 ;;      Params:         0       0       0       0       0       0       0       0       0
 10617 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10618 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10619 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10620 ;;Total ram usage:        0 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; This function calls:
 10623 ;;		Nothing
 10624 ;; This function is called by:
 10625 ;;		_main
 10626 ;; This function uses a non-reentrant model
 10627 ;;
 10628                           
 10629                           	psect	text39
 10630  004FD0                     __ptext39:
 10631                           	opt stack 0
 10632  004FD0                     _OpenUART:
 10633                           	opt stack 30
 10634                           
 10635                           ;openuart.c: 32: TRISDbits.RD4 = 0;
 10636                           
 10637                           ;incstack = 0
 10638  004FD0  9895               	bcf	3989,4,c	;volatile
 10639                           
 10640                           ;openuart.c: 33: RD4 = 1;
 10641  004FD2  8883               	bsf	3971,4,c	;volatile
 10642                           
 10643                           ;openuart.c: 35: TRISDbits.RD5 = 1;
 10644  004FD4  8A95               	bsf	3989,5,c	;volatile
 10645                           
 10646                           ;openuart.c: 36: RD5 = 1;
 10647  004FD6  8A83               	bsf	3971,5,c	;volatile
 10648  004FD8  0012               	return	
 10649  004FDA                     __end_of_OpenUART:
 10650                           	opt stack 0
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           indf0	equ	0xFEF
 10658                           postinc0	equ	0xFEE
 10659                           fsr0h	equ	0xFEA
 10660                           fsr0l	equ	0xFE9
 10661                           wreg	equ	0xFE8
 10662                           indf1	equ	0xFE7
 10663                           postdec1	equ	0xFE5
 10664                           fsr1h	equ	0xFE2
 10665                           fsr1l	equ	0xFE1
 10666                           indf2	equ	0xFDF
 10667                           postinc2	equ	0xFDE
 10668                           postdec2	equ	0xFDD
 10669                           plusw2	equ	0xFDB
 10670                           fsr2h	equ	0xFDA
 10671                           fsr2l	equ	0xFD9
 10672                           status	equ	0xFD8
 10673                           tblptru	equ	0xFF8
 10674                           tblptrh	equ	0xFF7
 10675                           tblptrl	equ	0xFF6
 10676                           tablat	equ	0xFF5
 10677                           prodh	equ	0xFF4
 10678                           prodl	equ	0xFF3
 10679                           indf0	equ	0xFEF
 10680                           postinc0	equ	0xFEE
 10681                           fsr0h	equ	0xFEA
 10682                           fsr0l	equ	0xFE9
 10683                           wreg	equ	0xFE8
 10684                           indf1	equ	0xFE7
 10685                           postdec1	equ	0xFE5
 10686                           fsr1h	equ	0xFE2
 10687                           fsr1l	equ	0xFE1
 10688                           indf2	equ	0xFDF
 10689                           postinc2	equ	0xFDE
 10690                           postdec2	equ	0xFDD
 10691                           plusw2	equ	0xFDB
 10692                           fsr2h	equ	0xFDA
 10693                           fsr2l	equ	0xFD9
 10694                           status	equ	0xFD8
 10695                           
 10696                           	psect	rparam
 10697  0000                     tblptru	equ	0xFF8
 10698                           tblptrh	equ	0xFF7
 10699                           tblptrl	equ	0xFF6
 10700                           tablat	equ	0xFF5
 10701                           prodh	equ	0xFF4
 10702                           prodl	equ	0xFF3
 10703                           indf0	equ	0xFEF
 10704                           postinc0	equ	0xFEE
 10705                           fsr0h	equ	0xFEA
 10706                           fsr0l	equ	0xFE9
 10707                           wreg	equ	0xFE8
 10708                           indf1	equ	0xFE7
 10709                           postdec1	equ	0xFE5
 10710                           fsr1h	equ	0xFE2
 10711                           fsr1l	equ	0xFE1
 10712                           indf2	equ	0xFDF
 10713                           postinc2	equ	0xFDE
 10714                           postdec2	equ	0xFDD
 10715                           plusw2	equ	0xFDB
 10716                           fsr2h	equ	0xFDA
 10717                           fsr2l	equ	0xFD9
 10718                           status	equ	0xFD8


Data Sizes:
    Strings     558
    Constant    128
    Data        10
    BSS         1650
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    143     157
    BANK1           256      0     110
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    putsUART@data	PTR unsigned char  size(2) Largest target is 39
		 -> STR_30(CODE[3]), STR_29(CODE[28]), STR_28(CODE[36]), STR_27(CODE[11]), 
		 -> STR_26(CODE[16]), STR_25(CODE[3]), STR_24(CODE[21]), STR_23(CODE[38]), 
		 -> STR_22(CODE[4]), STR_21(CODE[39]), STR_20(CODE[39]), STR_19(CODE[5]), 
		 -> STR_18(CODE[4]), STR_17(CODE[37]), STR_16(CODE[4]), STR_15(CODE[30]), 
		 -> STR_14(CODE[4]), STR_13(CODE[30]), STR_12(CODE[33]), STR_11(CODE[4]), 
		 -> STR_10(CODE[34]), STR_9(CODE[23]), STR_7(CODE[34]), STR_5(CODE[17]), 
		 -> STR_4(CODE[4]), fileName(BANK1[10]), STR_3(CODE[29]), STR_2(CODE[37]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[8]), ROM(CODE[32767]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> data_buffer_32(BANK1[32]), pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 
		 -> pf_mount@buf(BANK0[36]), NULL(NULL[0]), get_fat@buf(COMRAM[4]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> main@br(BANK0[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_8(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_8(CODE[8]), 

    pf_read$366	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), NULL(NULL[0]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> main@br(BANK0[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    S49$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 


Critical Paths under _main in COMRAM

    _soft_hard_init->_OpenSPI
    _pf_write->_get_fat
    _disk_writep->_Command
    _disk_writep->_dummy_clocks
    _pf_read->_get_fat
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _pf_mount->_check_fs
    _disk_initialize->_reset
    _reset->_Command
    _reset->_dummy_clocks
    _reset->_putsUART
    _check_fs->_disk_readp
    _disk_readp->_Command
    _disk_readp->_dummy_clocks
    _disk_readp->_putsUART
    _response->_ReadSPI_
    _putsUART->_WriteUART
    _DelayTXBitUART->_Delay100TCYx
    _proceed->_WriteSPI
    _dummy_clocks->_delay_ms
    _Delay_s->_delay_ms
    _delay_ms->_Delay1KTCYx
    _Command->_WriteSPI_

Critical Paths under _main in BANK0

    _main->_pf_open
    _pf_open->_follow_path

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                45    45      0   94369
                                             98 BANK0     45    45      0
                           _OpenUART
                          _WriteUART
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                            _proceed
                           _putsUART
                           _readover
                     _soft_hard_init
 ---------------------------------------------------------------------------------
 (1) _soft_hard_init                                       5     5      0     289
                                              3 COMRAM     5     5      0
                            _OpenSPI
 ---------------------------------------------------------------------------------
 (2) _OpenSPI                                              3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _readover                                             2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _pf_write                                            33    27      6   15165
                                             70 COMRAM    14     8      6
                                              0 BANK0     19    19      0
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (2) _disk_writep                                         17    10      7    3307
                                              8 COMRAM    16     9      7
                            _Command
                            _Delay_s
                          _WriteSPI_
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (1) _pf_read                                             36    30      6   20301
                                             70 COMRAM    14     8      6
                                              0 BANK0     22    22      0
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (1) _pf_open                                             87    85      2   26469
                                             11 BANK0     87    85      2
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (2) _follow_path                                         11     5      6   25594
                                              0 BANK0     11     5      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (2) _get_clust                                           18    14      4     329
                                              0 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             8     4      4   21927
                                             87 COMRAM     8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             15     9      6     328
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) _dir_rewind                                          16    14      2    1397
                                             27 COMRAM    16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            17    15      2   11145
                                             70 COMRAM    17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (2) _get_fat                                             40    36      4    9704
                                             30 COMRAM    40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          15    11      4     806
                                             12 COMRAM    15    11      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _create_name                                         20    16      4    1174
                                              8 COMRAM    20    16      4
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _mem_set                                              8     2      6     282
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _pf_mount                                            77    75      2   29640
                                             40 COMRAM    24    22      2
                                              0 BANK0     53    53      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (2) _disk_initialize                                      8     8      0    9408
                                             13 COMRAM     8     8      0
                            _Command
                            _Delay_s
                           _delay_ms
                       _dummy_clocks
                            _proceed
                           _putsUART
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (3) _reset                                                5     5      0    4587
                                              8 COMRAM     5     5      0
                            _Command
                            _Delay_s
                       _dummy_clocks
                            _proceed
                           _putsUART
                           _response
 ---------------------------------------------------------------------------------
 (2) _check_fs                                            10     4      6    9114
                                             30 COMRAM    10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (3) _disk_readp                                          25    15     10    8594
                                              8 COMRAM    22    12     10
                            _Command
                            _Delay_s
                          _WriteUART
                       _dummy_clocks
                            _proceed
                           _putsUART
                           _response
 ---------------------------------------------------------------------------------
 (4) _response                                             1     1      0      24
                                              1 COMRAM     1     1      0
                           _ReadSPI_
 ---------------------------------------------------------------------------------
 (5) _ReadSPI_                                             1     1      0       1
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _putsUART                                             4     2      2    1904
                                              4 COMRAM     4     2      2
                          _WriteUART
 ---------------------------------------------------------------------------------
 (2) _WriteUART                                            3     3      0      68
                                              1 COMRAM     3     3      0
                     _DelayTXBitUART
 ---------------------------------------------------------------------------------
 (3) _DelayTXBitUART                                       0     0      0      22
                       _Delay100TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _proceed                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _dummy_clocks                                         5     3      2     842
                                              3 COMRAM     5     3      2
                           _WriteSPI
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _WriteSPI                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Delay_s                                              3     3      0     160
                                              3 COMRAM     3     3      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             2     2      0      68
                                              1 COMRAM     2     2      0
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (6) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Command                                              6     1      5    1563
                                              2 COMRAM     6     1      5
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (5) _WriteSPI_                                            2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     374
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     470
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _OpenUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenUART
   _WriteUART
     _DelayTXBitUART
       _Delay100TCYx
   _pf_mount
     ___lldiv
     ___lmul
     _check_fs
       _disk_readp
         _Command
           _WriteSPI_
         _Delay_s
           _delay_ms
             _Delay1KTCYx
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
         _dummy_clocks
           _WriteSPI
           _delay_ms
             _Delay1KTCYx
         _proceed
           _WriteSPI
         _putsUART
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
         _response
           _ReadSPI_
     _disk_initialize
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _delay_ms
         _Delay1KTCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
       _reset
         _Command
           _WriteSPI_
         _Delay_s
           _delay_ms
             _Delay1KTCYx
         _dummy_clocks
           _WriteSPI
           _delay_ms
             _Delay1KTCYx
         _proceed
           _WriteSPI
         _putsUART
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
         _response
           _ReadSPI_
       _response
         _ReadSPI_
     _disk_readp
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteUART
         _DelayTXBitUART
           _Delay100TCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
       _response
         _ReadSPI_
   _pf_open
     _follow_path
       _create_name
         _mem_set
       _dir_find
         _dir_next
           _clust2sect
             ___lmul
           _get_fat
             _disk_readp
               _Command
                 _WriteSPI_
               _Delay_s
                 _delay_ms
                   _Delay1KTCYx
               _WriteUART
                 _DelayTXBitUART
                   _Delay100TCYx
               _dummy_clocks
                 _WriteSPI
                 _delay_ms
                   _Delay1KTCYx
               _proceed
                 _WriteSPI
               _putsUART
                 _WriteUART
                   _DelayTXBitUART
                     _Delay100TCYx
               _response
                 _ReadSPI_
         _dir_rewind
           _clust2sect
             ___lmul
         _disk_readp
           _Command
             _WriteSPI_
           _Delay_s
             _delay_ms
               _Delay1KTCYx
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
           _dummy_clocks
             _WriteSPI
             _delay_ms
               _Delay1KTCYx
           _proceed
             _WriteSPI
           _putsUART
             _WriteUART
               _DelayTXBitUART
                 _Delay100TCYx
           _response
             _ReadSPI_
         _mem_cmp
       _dir_rewind
         _clust2sect
           ___lmul
       _get_clust
     _get_clust
   _pf_read
     _clust2sect
       ___lmul
     _disk_readp
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteUART
         _DelayTXBitUART
           _Delay100TCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
       _response
         _ReadSPI_
     _get_fat
       _disk_readp
         _Command
           _WriteSPI_
         _Delay_s
           _delay_ms
             _Delay1KTCYx
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
         _dummy_clocks
           _WriteSPI
           _delay_ms
             _Delay1KTCYx
         _proceed
           _WriteSPI
         _putsUART
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
         _response
           _ReadSPI_
   _pf_write
     _clust2sect
       ___lmul
     _disk_writep
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteSPI_
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _response
         _ReadSPI_
     _get_fat
       _disk_readp
         _Command
           _WriteSPI_
         _Delay_s
           _delay_ms
             _Delay1KTCYx
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
         _dummy_clocks
           _WriteSPI
           _delay_ms
             _Delay1KTCYx
         _proceed
           _WriteSPI
         _putsUART
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
         _response
           _ReadSPI_
   _proceed
     _WriteSPI
   _putsUART
     _WriteUART
       _DelayTXBitUART
         _Delay100TCYx
   _readover
   _soft_hard_init
     _OpenSPI

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     600      21       75.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      6E       7       43.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8F      9D       5       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16A      20        0.0%
DATA                 0      0     76A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Jan 27 18:38:23 2017

             get_fat@clst 001F                         _s 00FB              create_name@c 001C  
            create_name@d 0014              create_name@i 001B              create_name@p 0015  
             _SSPSTATbits 000FC7                        l21 5398                        l30 68BC  
                      l28 6C3A                        l60 598E                        l61 5906  
                      l73 6572               __CFG_BOR$ON 000000                        _rd 00F7  
           pf_mount@bsect 008C               __CFG_BORV$3 000000             pf_mount@mclst 0088  
           pf_mount@fsize 0090             create_name@dj 0009             pf_mount@tsect 0084  
           create_name@ni 0017             create_name@si 0018                       l213 718C  
                     l152 5C20                       l209 75F8                       l218 7478  
                     l332 504E                       l180 615E                       l334 504A  
                     l343 5174                       l351 5030                       l159 7D4E  
                     l193 6F32                       l188 7096                       l620 5246  
                     l621 5248                       l390 6364                       l439 5EBC  
                     l383 6312                       l375 62CA                       l640 5066  
                     l624 5262                       l368 6246                       l625 527C  
                     l642 5062                       l626 5264                       l618 5242  
                     l627 5268                       l387 6356                       l379 62EE  
                     l576 52DA                       l870 501A                       l891 500A  
                     _RD4 007C1C                       _RD5 007C1D               get_clust@fs 000D  
                     fsr2 000FD9                       _str 036E                       _txt 0130  
                     wreg 000FE8              __CFG_FOSC$HS 000000              disk_readp@rd 0009  
          create_name@cvt 7D51            create_name@sfn 0019           ?_soft_hard_init 0001  
            __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000                      l1124 548E  
                    l3012 65F4                      l3004 65E0                      l3022 6622  
                    l3112 6840                      l3114 6854                      l3050 66D2  
                    l3034 6674                      l3018 660C                      l4002 7034  
                    l4010 708C                      l3124 51E8                      l3116 6860  
                    l3108 682A                      l3060 6726                      l3036 6678  
                    l3028 665E                      l3204 50CE                      l3070 6748  
                    l3054 66E6                      l3046 6698                      l3214 534A  
                    l3128 51FC                      l3064 6730                      l3208 50DE  
                    l3400 5A78                      l3160 6A28                      l3232 58D0  
                    l4032 70EC                      l3090 67C6                      l3074 675E  
                    l3162 6A46                      l3146 694C                      l3242 594C  
                    l3322 5652                      l4026 70CE                      l3076 6770  
                    l3084 679E                      l3092 67D6                      l3500 5BB0  
                    l3420 53DC                      l3404 5A90                      l3244 5970  
                    l3228 58CC                      l3340 571C                      l3308 5514  
                    l4108 74D2                      l4060 7234                      l4044 7134  
                    l4052 714C                      l3086 67B0                      l3414 53B2  
                    l3174 6AF4                      l3166 6A50                      l3334 56D8  
                    l4134 75D8                      l4070 7318                      l3184 6C0E  
                    l3272 6432                      l3344 5730                      l3440 5C2A  
                    l4072 734E                      l4136 75EE                      l3098 680A  
                    l3426 53FC                      l3370 5A1E                      l3186 6C2A  
                    l3282 64CC                      l4138 75F6                      l4082 739E  
                    l4322 6248                      l3700 5480                      l3508 5C1E  
                    l3524 5DE8                      l3292 6560                      l3620 578C  
                    l4332 62A8                      l4316 6224                      l4340 62CC  
                    l3550 5E62                      l3542 5E42                      l3358 59DC  
                    l3198 55CA                      l3454 5CB4                      l3446 5C5C  
                    l3438 5C24                      l2912 512E                      l3376 5A38  
                    l3288 6500                      l3640 57FE                      l4352 6314  
                    l3562 5E9C                      l3538 5E12                      l3394 5A66  
                    l3474 5D4E                      l3642 5804                      l4362 6358  
                    l4346 62F0                      l3492 5B46                      l3580 5EF2  
                    l3812 7740                      l3476 5D96                      l2950 5182  
                    l2918 514A                      l3486 5B0A                      l3830 778C  
                    l3806 7692                      l3910 5FFC                      l3646 580A  
                    l3656 584A                      l3690 544C                      l3834 7848  
                    l3914 6000                      l3906 5FEE                      l3674 524C  
                    l3692 5450                      l2884 5070                      l2980 50AA  
                    l3596 5F40                      l3588 5F10                      l2974 50A4  
                    l3942 6C90                      l3678 526C                      l3688 5440  
                    l2888 5078                      l3880 7C3E                      l3864 7B62  
                    l3848 79CA                      l3960 6E56                      l3936 6C72  
                    l3874 7B8E                      l3858 7B14                      l3970 6EA6  
                    l2988 50BA                      l3868 7B84                      l3796 7614  
                    l3948 6D38                      l3894 5F86                      l3990 6FA2  
                    l3958 6E20                      l3992 6FAE                      l3986 6F8C  
                    STR_1 7FE5                      STR_2 7E45                      STR_3 7F54  
                    STR_4 7E41                      STR_5 7FB9                      STR_6 7FE5  
                    STR_7 7EB3                      STR_8 7FEF                      STR_9 7F8D  
                    u2360 52FA                      u2370 532A                      u2435 6592  
                    u4060 7296                      u3270 5C1A                      u4150 75BE  
                    u2367 52F0                      u2720 6B36                      u2377 5320  
                    u2705 6A34                      u4065 728C                      u3700 7788  
                    u2725 6B2C                      u2645 68E6                      u2910 64FC  
                    u2495 66AA                      u3375 5760                      u3805 7CCE  
                    u3735 79E2                      u2935 5506                      u2960 56B8  
                    u4537 501C                      u4547 500C                      u2955 5690  
                    u3780 7B8A                      u2885 643E                      u2966 56BA  
                    u3960 701A                      u3890 6D9E                      u3895 6D94  
            get_clust@dir 0001         WriteSPI_@data_out 0002                      _flag 00F5  
                    _main 6160                      fsr0h 000FEA                      fsr1h 000FE2  
                    indf0 000FEF                      fsr0l 000FE9                      fsr2h 000FDA  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0000             __CFG_IESO$OFF 000000           __end_of_Delay_s 50C4  
           disk_readp@arr 056E             disk_readp@ptr 0017              disk_writep@i 0014  
            disk_writep@j 0016             __CFG_MCLRE$ON 000000           __end_of_Command 5120  
            ?_follow_path 0060           create_name@path 000B           __end_of_OpenSPI 5284  
             _Delay1KTCYx 5008             __CFG_PLLDIV$5 000000                     ?_main 0001  
                   STR_10 7ED5                     STR_11 7E41                     STR_12 7EF7  
                   STR_20 7DD1                     STR_13 7F18                     STR_21 7DF8  
                   STR_22 7E41                     STR_14 7E41                     STR_30 7FFC  
                   STR_15 7F36                     STR_23 7E1F                     STR_16 7E41  
                   STR_24 7FA4                     STR_25 7FE2                     STR_17 7E6A  
                   STR_18 7E41                     STR_26 7FCA                     STR_19 7FF7  
                   STR_27 7FDA                     STR_28 7E8F                     STR_29 7F71  
   __size_of_Delay100TCYx 0010                     _CMCON 000FB4           __end_of___lldiv 54A0  
                   _LATB0 007C50                     _LATA5 007C4D                     _LATB4 007C54  
          _data_buffer_32 0144             get_clust@clst 000F             __CFG_USBDIV$1 000000  
                   _FatFs 00F3    __end_ofcreate_name@cvt 7DD1             __CFG_PWRT$OFF 000000  
     ___lmul@multiplicand 0005            __CFG_FCMEN$OFF 000000           __end_of_get_fat 6C3C  
         __end_of_mem_cmp 53A2           __end_of_mem_set 50F0           __end_of_pf_read 7098  
         __end_of_pf_open 6160                     _reset 53A2                     tablat 000FF5  
         __end_of_proceed 4FFA                     plusw2 000FDB                     status 000FD8  
          disk_readp@buff 001C             disk_writep@sc 000C             disk_writep@wr 0009  
         __initialization 5284       disk_initialize@buff 0015              _Delay100TCYx 5018  
     disk_initialize@stat 0012              __end_of_main 6366              clust2sect@fs 001A  
        __end_of_ReadSPI_ 5038          __end_of_OpenUART 4FDA                    ??_main 0060  
            putsUART@data 0005       disk_readp@start_add 0018             __activetblptr 000002  
         __CFG_CCP2MX$OFF 000000                    _ADCON1 000FC1                    ?_reset 0001  
        __end_of_WriteSPI 5068             ?_dummy_clocks 0004                 ??_Delay_s 0004  
                  _TRISA5 007C95                    _TRISB4 007C9C                    _SSPBUF 000FC9  
               ??_Command 0008          __end_of_check_fs 5C22          __end_of_delay_ms 5082  
    __size_of_create_name 0144  __size_of_disk_initialize 01D0                 ??_OpenSPI 0003  
        ??_DelayTXBitUART 0002           ReadSPI_@TempVar 0001          __end_of_dir_find 5734  
        __end_of_dir_next 6574                    _Result 00FA                    ___lmul 51D8  
          __CFG_STVREN$ON 000000      __size_of_disk_writep 0124                 ??___lldiv 0009  
  soft_hard_init@bus_mode 0007                    _folder 0100                    clear_0 528C  
                  clear_1 529E                    clear_2 52AA          __end_of_pf_mount 7D50  
        __end_of_readover 4FE4          __end_of_pf_write 75FA               pf_read@buff 0047  
             pf_read@clst 006D               pf_read@sect 0065               pf_read@rcnt 0072  
                  main@br 00C2                 ??_get_fat 0023           WriteSPI@TempVar 0001  
                  main@fs 00C5                 ??_mem_cmp 0007                 ??_mem_set 0007  
               ??_pf_read 004D                 ??_pf_open 006D          __end_of_response 5008  
            __mediumconst 7D50                    reset@i 0009                    tblptrh 000FF7  
                  tblptrl 000FF6                    tblptru 000FF8                 ??_proceed 0003  
        __end_of_putsUART 5332               pf_open@path 006B            ??_dummy_clocks 0006  
              __accesstop 0060   __end_of__initialization 52D0           __CFG_PBADEN$OFF 000000  
      __size_of_WriteUART 003A        __size_of_WriteSPI_ 0018               pf_mount@buf 0060  
             pf_mount@fmt 0094           disk_readp@count 0011            __pcstackCOMRAM 0001  
            __pidataBANK1 4FE4      __size_of_follow_path 017A             __end_of_reset 541E  
             pf_write@btw 0049          ??_soft_hard_init 0004        __size_of_get_clust 00CA  
                 ??_reset 0009                __pbssBANK0 00EF                __pbssBANK1 0100  
          pf_write@remain 0066                 ?_ReadSPI_ 0001                 ?_OpenUART 0001  
                 ?___lmul 0001         ??_disk_initialize 000E              ?_Delay1KTCYx 0001  
          ___lmul@product 0009                 ?_WriteSPI 0001         __end_of_WriteUART 515A  
       __end_of_WriteSPI_ 5050                _dir_rewind 5858                 ?_check_fs 001F  
              _disk_readp 6574            follow_path@dir 0062                 ?_delay_ms 0001  
          follow_path@res 006A                 ?_dir_find 0058                 ?_dir_next 0047  
                 _SSPCON1 000FC6                   _SSPSTAT 000FC7                _clust2sect 556A  
              ??_ReadSPI_ 0001                   _Delay_s 509C           __CFG_VREGEN$OFF 000000  
                 _Command 50F0                 ?_pf_mount 0029                 ?_readover 0001  
               ?_pf_write 0047                ??_OpenUART 0001                   _OpenSPI 522E  
                 __Hparam 0000                   __Lparam 0000         __end_of_get_clust 556A  
               ?_response 0001           __size_of___lmul 0056                   ___lldiv 541E  
               ?_putsUART 0005      __end_of_dummy_clocks 5198                   __pcinit 5284  
                 __ramtop 0800                ??_WriteSPI 0001                   __ptext0 6160  
                 __ptext1 5198                   __ptext2 522E                   __ptext3 4FDA  
                 __ptext4 7098                   __ptext5 5734                   __ptext6 6C3C  
                 __ptext7 5F6C                   __ptext8 5C22                   __ptext9 54A0  
                 _get_fat 686A                   _mem_cmp 5332                   _mem_set 50C4  
                 _pf_read 6C3C                   _pf_open 5F6C                ??_check_fs 0025  
              ??_delay_ms 0002                   _proceed 4FEE                ??_dir_find 005C  
              ??_dir_next 0049              pf_read@rbuff 0060      end_of_initialization 52D0  
           __Lmediumconst 7D50                ??_pf_mount 002B                ??_readover 0003  
              ??_pf_write 004D           ___lldiv@divisor 0005           ___lldiv@counter 000D  
 soft_hard_init@smp_phase 0008                ??_response 0002                   postdec1 000FE5  
                 postdec2 000FDD          WriteSPI@data_out 0002                   postinc0 000FEE  
                 postinc2 000FDE                ??_putsUART 0007                dir_find@dj 0058  
               _PORTDbits 000F83               ?_dir_rewind 001C   soft_hard_init@sync_mode 0006  
              dir_next@dj 0047                dir_next@fs 0050               ?_disk_readp 0009  
               _TRISAbits 000F92                 _TRISBbits 000F93                 _TRISCbits 000F94  
               _TRISDbits 000F95                get_fat@buf 003F                get_fat@ofs 003D  
        WriteSPI_@TempVar 0001               ?_clust2sect 000D          disk_readp@length 001D  
        disk_readp@offset 000F          disk_readp@sector 000B             ??_create_name 000D  
        disk_initialize@i 000E           disk_writep@buff 0018             ??_disk_writep 0010  
        Delay100TCYx@unit 0001            Command@CRCbits 0007     disk_initialize@count1 0010  
   disk_initialize@count2 0013            __end_of___lmul 522E            clust2sect@clst 000D  
        OpenSPI@smp_phase 0002      __size_of_Delay1KTCYx 0010       start_initialization 5284  
        OpenSPI@sync_mode 0003                mem_cmp@cnt 0005                mem_cmp@dst 0001  
            pf_write@buff 0047                mem_cmp@src 0003              pf_write@clst 006A  
            pf_write@sect 0062              pf_write@wcnt 006F           _disk_initialize 5D9C  
              mem_set@cnt 0005                mem_set@dst 0001                mem_set@val 0003  
       __size_of_ReadSPI_ 0010       __size_of_dir_rewind 0138     __size_of_dummy_clocks 003E  
           ??_follow_path 0066       __size_of_disk_readp 02F6         __size_of_OpenUART 000A  
     __end_of_create_name 5AD4                  ??___lmul 0009                pf_read@btr 0049  
             __pdataBANK1 0164          __CFG_LPT1OSC$OFF 000000       __size_of_clust2sect 00D4  
     __end_of_disk_writep 5858                pf_open@dir 008F                pf_open@res 00AF  
 __size_of_DelayTXBitUART 001A               __pbssBIGRAM 016E         __size_of_WriteSPI 0018  
              pf_mount@fs 0029             __pcstackBANK0 0060                 _WriteUART 5120  
               _WriteSPI_ 5038       __end_of__stringdata 7FFF         __size_of_check_fs 014E  
            check_fs@sect 0021         __size_of_delay_ms 001A                pf_write@cs 006E  
              pf_write@bw 004B                pf_write@fs 0071           Delay1KTCYx@unit 0001  
       __size_of_dir_find 00F6              _dummy_clocks 515A         __size_of_dir_next 020E  
                ?_Delay_s 0001             _sector_buffer 016E                  ?_Command 0003  
                ?_OpenSPI 0001         __size_of_pf_mount 0756         __size_of_readover 000A  
       __size_of_pf_write 0562             ?_Delay100TCYx 0001             __pmediumconst 7D50  
                ?___lldiv 0001         __size_of_response 000E                 _get_clust 54A0  
           follow_path@dj 0060       __end_of_follow_path 5D9C         __size_of_putsUART 0058  
                ?_get_fat 001F                  ?_mem_cmp 0001                  ?_mem_set 0001  
                ?_pf_read 0047                  ?_pf_open 006B                reset@count 000B  
              ?_WriteUART 0001                ?_WriteSPI_ 0001            _dir_rewind$173 0022  
                ?_proceed 0001   __end_of_disk_initialize 5F6C               _get_fat$113 0039  
          __size_of_reset 007C   __size_of_soft_hard_init 0040               _create_name 5990  
               delay_ms@i 0003                 delay_ms@t 0002                  Delay_s@i 0005  
                Delay_s@j 0006                  Delay_s@t 0004           soft_hard_init@i 0004  
          ??_Delay100TCYx 0001           follow_path@path 0064                  _PIR1bits 000F9E  
             _disk_writep 5734                 dir_find@c 005E         WriteUART@bitcount 0004  
               dir_next@i 0056                ?_get_clust 0001                 get_fat@bc 0043  
         OpenSPI@bus_mode 0001                 get_fat@fs 0045                 get_fat@wc 003B  
             __stringdata 7DD1              ??_dir_rewind 001E              ??_disk_readp 0013  
                _BitCount 00F9              ??_clust2sect 0011         WriteUART@uartdata 0003  
       ___lmul@multiplier 0001                 copy_data0 52C4                  _ReadSPI_ 5028  
        __size_of_Delay_s 0028                  _OpenUART 4FD0          __size_of_Command 0030  
                __Hrparam 0000        __end_of_dir_rewind 5990                  __Lrparam 0000  
        __size_of_OpenSPI 0056               _follow_path 5C22        __end_of_disk_readp 686A  
               pf_read@br 004B                 pf_read@cs 0071                 pf_read@dr 0064  
               pf_read@fs 0074                 pf_open@dj 00B2                 pf_open@fs 00B0  
               pf_open@sp 0083          __size_of___lldiv 0082               _pf_read$366 0062  
      __end_of_clust2sect 563E                  _WriteSPI 5050            _DelayTXBitUART 5082  
             check_fs@buf 001F                 readover@a 0001                 pf_write@p 0060  
        __size_of_get_fat 03D2                  _check_fs 5AD4          __size_of_mem_cmp 0070  
        __size_of_mem_set 002C          __size_of_pf_read 045C          __size_of_pf_open 01F4  
                _delay_ms 5068               ??_WriteUART 0002               ??_WriteSPI_ 0001  
                _fileName 0164                  __ptext10 563E                  __ptext11 5332  
                __ptext20 53A2                  __ptext12 5858                  __ptext21 5AD4  
                __ptext13 6366                  __ptext30 515A                  __ptext22 6574  
                __ptext14 686A                  __ptext31 5050                  __ptext23 4FFA  
                __ptext15 556A                  __ptext32 509C                  __ptext24 5028  
                __ptext16 5990                  __ptext33 5068                  __ptext25 52DA  
                __ptext17 50C4                  __ptext34 5008                  __ptext26 5120  
                __ptext18 75FA                  __ptext35 50F0                  __ptext27 5082  
                __ptext19 5D9C                  __ptext36 5038                  __ptext28 5018  
                __ptext37 51D8                  __ptext29 4FEE                  __ptext38 541E  
                __ptext39 4FD0                  _dir_find 563E                  _fileSize 00EF  
                _dir_next 6366          __size_of_proceed 000C          ?_disk_initialize 0001  
               reset@buff 000D             __size_of_main 0206                  _pf_mount 75FA  
                _readover 4FDA                  _pf_write 7098             dummy_clocks@i 0007  
           dummy_clocks@n 0004                  _response 4FFA                  _uartdata 00FC  
                _putsUART 52DA    __end_of_DelayTXBitUART 509C             ??_Delay1KTCYx 0001  
           pf_read@remain 0069               ??_get_clust 0005     __CFG_CPUDIV$OSC1_PLL2 000000  
                mem_cmp@d 000A                  mem_cmp@r 000E                  mem_cmp@s 000C  
                mem_set@d 0007      __end_of_Delay100TCYx 5028            _soft_hard_init 5198  
        ___lldiv@dividend 0001           ?_DelayTXBitUART 0001              response@buff 0002  
        ___lldiv@quotient 0009       __end_of_Delay1KTCYx 5018            dir_rewind@clst 0028  
             dir_find@dir 005A               dir_find@res 005F               _SSPCON1bits 000FC6  
  __end_of_soft_hard_init 51D8              dir_next@clst 0052                Command@cmd 0008  
              Command@arg 0003              ?_create_name 0009              dir_rewind@dj 001C  
            dir_rewind@fs 0026               main@FResult 00C4              ?_disk_writep 0009  
