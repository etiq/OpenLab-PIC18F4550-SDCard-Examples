

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Jan 27 18:14:14 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBIGRAM_1,global,class=BIGRAM,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           	psect	idataBANK1
    59  004CE8                     __pidataBANK1:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _fileName
    63  004CE8  63                 	db	99
    64  004CE9  68                 	db	104
    65  004CEA  65                 	db	101
    66  004CEB  63                 	db	99
    67  004CEC  6B                 	db	107
    68  004CED  2E                 	db	46
    69  004CEE  74                 	db	116
    70  004CEF  78                 	db	120
    71  004CF0  74                 	db	116
    72  004CF1  00                 	db	0
    73                           
    74                           	psect	mediumconst
    75  007A68                     __pmediumconst:
    76                           	opt stack 0
    77  007A68  00                 	db	0
    78  007A69                     create_name@cvt:
    79                           	opt stack 0
    80  007A69  80                 	db	128
    81  007A6A  9A                 	db	154
    82  007A6B  90                 	db	144
    83  007A6C  41                 	db	65
    84  007A6D  8E                 	db	142
    85  007A6E  41                 	db	65
    86  007A6F  8F                 	db	143
    87  007A70  80                 	db	128
    88  007A71  45                 	db	69
    89  007A72  45                 	db	69
    90  007A73  45                 	db	69
    91  007A74  49                 	db	73
    92  007A75  49                 	db	73
    93  007A76  49                 	db	73
    94  007A77  8E                 	db	142
    95  007A78  8F                 	db	143
    96  007A79  90                 	db	144
    97  007A7A  92                 	db	146
    98  007A7B  92                 	db	146
    99  007A7C  4F                 	db	79
   100  007A7D  99                 	db	153
   101  007A7E  4F                 	db	79
   102  007A7F  55                 	db	85
   103  007A80  55                 	db	85
   104  007A81  59                 	db	89
   105  007A82  99                 	db	153
   106  007A83  9A                 	db	154
   107  007A84  9B                 	db	155
   108  007A85  9C                 	db	156
   109  007A86  9D                 	db	157
   110  007A87  9E                 	db	158
   111  007A88  9F                 	db	159
   112  007A89  41                 	db	65
   113  007A8A  49                 	db	73
   114  007A8B  4F                 	db	79
   115  007A8C  55                 	db	85
   116  007A8D  A5                 	db	165
   117  007A8E  A5                 	db	165
   118  007A8F  A6                 	db	166
   119  007A90  A7                 	db	167
   120  007A91  A8                 	db	168
   121  007A92  A9                 	db	169
   122  007A93  AA                 	db	170
   123  007A94  AB                 	db	171
   124  007A95  AC                 	db	172
   125  007A96  21                 	db	33
   126  007A97  AE                 	db	174
   127  007A98  AF                 	db	175
   128  007A99  B0                 	db	176
   129  007A9A  B1                 	db	177
   130  007A9B  B2                 	db	178
   131  007A9C  B3                 	db	179
   132  007A9D  B4                 	db	180
   133  007A9E  B5                 	db	181
   134  007A9F  B6                 	db	182
   135  007AA0  B7                 	db	183
   136  007AA1  B8                 	db	184
   137  007AA2  B9                 	db	185
   138  007AA3  BA                 	db	186
   139  007AA4  BB                 	db	187
   140  007AA5  BC                 	db	188
   141  007AA6  BD                 	db	189
   142  007AA7  BE                 	db	190
   143  007AA8  BF                 	db	191
   144  007AA9  C0                 	db	192
   145  007AAA  C1                 	db	193
   146  007AAB  C2                 	db	194
   147  007AAC  C3                 	db	195
   148  007AAD  C4                 	db	196
   149  007AAE  C5                 	db	197
   150  007AAF  C6                 	db	198
   151  007AB0  C7                 	db	199
   152  007AB1  C8                 	db	200
   153  007AB2  C9                 	db	201
   154  007AB3  CA                 	db	202
   155  007AB4  CB                 	db	203
   156  007AB5  CC                 	db	204
   157  007AB6  CD                 	db	205
   158  007AB7  CE                 	db	206
   159  007AB8  CF                 	db	207
   160  007AB9  D0                 	db	208
   161  007ABA  D1                 	db	209
   162  007ABB  D2                 	db	210
   163  007ABC  D3                 	db	211
   164  007ABD  D4                 	db	212
   165  007ABE  D5                 	db	213
   166  007ABF  D6                 	db	214
   167  007AC0  D7                 	db	215
   168  007AC1  D8                 	db	216
   169  007AC2  D9                 	db	217
   170  007AC3  DA                 	db	218
   171  007AC4  DB                 	db	219
   172  007AC5  DC                 	db	220
   173  007AC6  DD                 	db	221
   174  007AC7  DE                 	db	222
   175  007AC8  DF                 	db	223
   176  007AC9  E0                 	db	224
   177  007ACA  E1                 	db	225
   178  007ACB  E2                 	db	226
   179  007ACC  E3                 	db	227
   180  007ACD  E4                 	db	228
   181  007ACE  E5                 	db	229
   182  007ACF  E6                 	db	230
   183  007AD0  E7                 	db	231
   184  007AD1  E8                 	db	232
   185  007AD2  E9                 	db	233
   186  007AD3  EA                 	db	234
   187  007AD4  EB                 	db	235
   188  007AD5  EC                 	db	236
   189  007AD6  ED                 	db	237
   190  007AD7  EE                 	db	238
   191  007AD8  EF                 	db	239
   192  007AD9  F0                 	db	240
   193  007ADA  F1                 	db	241
   194  007ADB  F2                 	db	242
   195  007ADC  F3                 	db	243
   196  007ADD  F4                 	db	244
   197  007ADE  F5                 	db	245
   198  007ADF  F6                 	db	246
   199  007AE0  F7                 	db	247
   200  007AE1  F8                 	db	248
   201  007AE2  F9                 	db	249
   202  007AE3  FA                 	db	250
   203  007AE4  FB                 	db	251
   204  007AE5  FC                 	db	252
   205  007AE6  FD                 	db	253
   206  007AE7  FE                 	db	254
   207  007AE8  FF                 	db	255
   208  007AE9                     __end_ofcreate_name@cvt:
   209                           	opt stack 0
   210  0000                     _ADCON1	set	4033
   211  0000                     _CMCON	set	4020
   212  0000                     _PIR1bits	set	3998
   213  0000                     _PORTDbits	set	3971
   214  0000                     _SSPBUF	set	4041
   215  0000                     _SSPCON1	set	4038
   216  0000                     _SSPCON1bits	set	4038
   217  0000                     _SSPSTAT	set	4039
   218  0000                     _SSPSTATbits	set	4039
   219  0000                     _TRISAbits	set	3986
   220  0000                     _TRISBbits	set	3987
   221  0000                     _TRISCbits	set	3988
   222  0000                     _TRISDbits	set	3989
   223  0000                     _LATA5	set	31821
   224  0000                     _LATB0	set	31824
   225  0000                     _LATB4	set	31828
   226  0000                     _RD4	set	31772
   227  0000                     _RD5	set	31773
   228  0000                     _TRISA5	set	31893
   229  0000                     _TRISB4	set	31900
   230  007AE9                     __stringdata:
   231                           	opt stack 0
   232  007AE9                     STR_20:
   233  007AE9  0D                 	db	13
   234  007AEA  0A                 	db	10
   235  007AEB  41                 	db	65	;'A'
   236  007AEC  74                 	db	116	;'t'
   237  007AED  74                 	db	116	;'t'
   238  007AEE  65                 	db	101	;'e'
   239  007AEF  6D                 	db	109	;'m'
   240  007AF0  70                 	db	112	;'p'
   241  007AF1  74                 	db	116	;'t'
   242  007AF2  69                 	db	105	;'i'
   243  007AF3  6E                 	db	110	;'n'
   244  007AF4  67                 	db	103	;'g'
   245  007AF5  20                 	db	32
   246  007AF6  74                 	db	116	;'t'
   247  007AF7  6F                 	db	111	;'o'
   248  007AF8  20                 	db	32
   249  007AF9  55                 	db	85	;'U'
   250  007AFA  4E                 	db	78	;'N'
   251  007AFB  6D                 	db	109	;'m'
   252  007AFC  6F                 	db	111	;'o'
   253  007AFD  75                 	db	117	;'u'
   254  007AFE  6E                 	db	110	;'n'
   255  007AFF  74                 	db	116	;'t'
   256  007B00  20                 	db	32
   257  007B01  66                 	db	102	;'f'
   258  007B02  69                 	db	105	;'i'
   259  007B03  6C                 	db	108	;'l'
   260  007B04  65                 	db	101	;'e'
   261  007B05  20                 	db	32
   262  007B06  73                 	db	115	;'s'
   263  007B07  79                 	db	121	;'y'
   264  007B08  73                 	db	115	;'s'
   265  007B09  74                 	db	116	;'t'
   266  007B0A  65                 	db	101	;'e'
   267  007B0B  6D                 	db	109	;'m'
   268  007B0C  2E                 	db	46
   269  007B0D  0D                 	db	13
   270  007B0E  0A                 	db	10
   271  007B0F  00                 	db	0
   272  007B10                     STR_21:
   273  007B10  0D                 	db	13
   274  007B11  0A                 	db	10
   275  007B12  45                 	db	69	;'E'
   276  007B13  72                 	db	114	;'r'
   277  007B14  72                 	db	114	;'r'
   278  007B15  6F                 	db	111	;'o'
   279  007B16  72                 	db	114	;'r'
   280  007B17  20                 	db	32
   281  007B18  74                 	db	116	;'t'
   282  007B19  72                 	db	114	;'r'
   283  007B1A  79                 	db	121	;'y'
   284  007B1B  69                 	db	105	;'i'
   285  007B1C  6E                 	db	110	;'n'
   286  007B1D  67                 	db	103	;'g'
   287  007B1E  20                 	db	32
   288  007B1F  74                 	db	116	;'t'
   289  007B20  6F                 	db	111	;'o'
   290  007B21  20                 	db	32
   291  007B22  55                 	db	85	;'U'
   292  007B23  4E                 	db	78	;'N'
   293  007B24  6D                 	db	109	;'m'
   294  007B25  6F                 	db	111	;'o'
   295  007B26  75                 	db	117	;'u'
   296  007B27  6E                 	db	110	;'n'
   297  007B28  74                 	db	116	;'t'
   298  007B29  20                 	db	32
   299  007B2A  66                 	db	102	;'f'
   300  007B2B  69                 	db	105	;'i'
   301  007B2C  6C                 	db	108	;'l'
   302  007B2D  65                 	db	101	;'e'
   303  007B2E  73                 	db	115	;'s'
   304  007B2F  79                 	db	121	;'y'
   305  007B30  73                 	db	115	;'s'
   306  007B31  74                 	db	116	;'t'
   307  007B32  65                 	db	101	;'e'
   308  007B33  6D                 	db	109	;'m'
   309  007B34  3B                 	db	59	;';'
   310  007B35  20                 	db	32
   311  007B36  00                 	db	0
   312  007B37                     STR_23:
   313  007B37  0D                 	db	13
   314  007B38  46                 	db	70	;'F'
   315  007B39  69                 	db	105	;'i'
   316  007B3A  6C                 	db	108	;'l'
   317  007B3B  65                 	db	101	;'e'
   318  007B3C  20                 	db	32
   319  007B3D  73                 	db	115	;'s'
   320  007B3E  79                 	db	121	;'y'
   321  007B3F  73                 	db	115	;'s'
   322  007B40  74                 	db	116	;'t'
   323  007B41  65                 	db	101	;'e'
   324  007B42  6D                 	db	109	;'m'
   325  007B43  20                 	db	32
   326  007B44  73                 	db	115	;'s'
   327  007B45  75                 	db	117	;'u'
   328  007B46  63                 	db	99	;'c'
   329  007B47  63                 	db	99	;'c'
   330  007B48  65                 	db	101	;'e'
   331  007B49  73                 	db	115	;'s'
   332  007B4A  66                 	db	102	;'f'
   333  007B4B  75                 	db	117	;'u'
   334  007B4C  6C                 	db	108	;'l'
   335  007B4D  6C                 	db	108	;'l'
   336  007B4E  79                 	db	121	;'y'
   337  007B4F  20                 	db	32
   338  007B50  75                 	db	117	;'u'
   339  007B51  6E                 	db	110	;'n'
   340  007B52  6D                 	db	109	;'m'
   341  007B53  6F                 	db	111	;'o'
   342  007B54  75                 	db	117	;'u'
   343  007B55  6E                 	db	110	;'n'
   344  007B56  74                 	db	116	;'t'
   345  007B57  65                 	db	101	;'e'
   346  007B58  64                 	db	100	;'d'
   347  007B59  2E                 	db	46
   348  007B5A  0D                 	db	13
   349  007B5B  0A                 	db	10
   350  007B5C  00                 	db	0
   351  007B5D                     STR_2:
   352  007B5D  0D                 	db	13
   353  007B5E  0A                 	db	10
   354  007B5F  41                 	db	65	;'A'
   355  007B60  74                 	db	116	;'t'
   356  007B61  74                 	db	116	;'t'
   357  007B62  65                 	db	101	;'e'
   358  007B63  6D                 	db	109	;'m'
   359  007B64  70                 	db	112	;'p'
   360  007B65  74                 	db	116	;'t'
   361  007B66  69                 	db	105	;'i'
   362  007B67  6E                 	db	110	;'n'
   363  007B68  67                 	db	103	;'g'
   364  007B69  20                 	db	32
   365  007B6A  74                 	db	116	;'t'
   366  007B6B  6F                 	db	111	;'o'
   367  007B6C  20                 	db	32
   368  007B6D  6D                 	db	109	;'m'
   369  007B6E  6F                 	db	111	;'o'
   370  007B6F  75                 	db	117	;'u'
   371  007B70  6E                 	db	110	;'n'
   372  007B71  74                 	db	116	;'t'
   373  007B72  20                 	db	32
   374  007B73  66                 	db	102	;'f'
   375  007B74  69                 	db	105	;'i'
   376  007B75  6C                 	db	108	;'l'
   377  007B76  65                 	db	101	;'e'
   378  007B77  20                 	db	32
   379  007B78  73                 	db	115	;'s'
   380  007B79  79                 	db	121	;'y'
   381  007B7A  73                 	db	115	;'s'
   382  007B7B  74                 	db	116	;'t'
   383  007B7C  65                 	db	101	;'e'
   384  007B7D  6D                 	db	109	;'m'
   385  007B7E  2E                 	db	46
   386  007B7F  0D                 	db	13
   387  007B80  0A                 	db	10
   388  007B81  00                 	db	0
   389  007B82                     STR_17:
   390  007B82  0D                 	db	13
   391  007B83  0A                 	db	10
   392  007B84  45                 	db	69	;'E'
   393  007B85  72                 	db	114	;'r'
   394  007B86  72                 	db	114	;'r'
   395  007B87  6F                 	db	111	;'o'
   396  007B88  72                 	db	114	;'r'
   397  007B89  20                 	db	32
   398  007B8A  74                 	db	116	;'t'
   399  007B8B  72                 	db	114	;'r'
   400  007B8C  79                 	db	121	;'y'
   401  007B8D  69                 	db	105	;'i'
   402  007B8E  6E                 	db	110	;'n'
   403  007B8F  67                 	db	103	;'g'
   404  007B90  20                 	db	32
   405  007B91  74                 	db	116	;'t'
   406  007B92  6F                 	db	111	;'o'
   407  007B93  20                 	db	32
   408  007B94  6D                 	db	109	;'m'
   409  007B95  6F                 	db	111	;'o'
   410  007B96  75                 	db	117	;'u'
   411  007B97  6E                 	db	110	;'n'
   412  007B98  74                 	db	116	;'t'
   413  007B99  20                 	db	32
   414  007B9A  66                 	db	102	;'f'
   415  007B9B  69                 	db	105	;'i'
   416  007B9C  6C                 	db	108	;'l'
   417  007B9D  65                 	db	101	;'e'
   418  007B9E  73                 	db	115	;'s'
   419  007B9F  79                 	db	121	;'y'
   420  007BA0  73                 	db	115	;'s'
   421  007BA1  74                 	db	116	;'t'
   422  007BA2  65                 	db	101	;'e'
   423  007BA3  6D                 	db	109	;'m'
   424  007BA4  3B                 	db	59	;';'
   425  007BA5  20                 	db	32
   426  007BA6  00                 	db	0
   427  007BA7                     STR_7:
   428  007BA7  0D                 	db	13
   429  007BA8  0A                 	db	10
   430  007BA9  0D                 	db	13
   431  007BAA  0A                 	db	10
   432  007BAB  53                 	db	83	;'S'
   433  007BAC  74                 	db	116	;'t'
   434  007BAD  61                 	db	97	;'a'
   435  007BAE  72                 	db	114	;'r'
   436  007BAF  74                 	db	116	;'t'
   437  007BB0  69                 	db	105	;'i'
   438  007BB1  6E                 	db	110	;'n'
   439  007BB2  67                 	db	103	;'g'
   440  007BB3  20                 	db	32
   441  007BB4  74                 	db	116	;'t'
   442  007BB5  6F                 	db	111	;'o'
   443  007BB6  20                 	db	32
   444  007BB7  77                 	db	119	;'w'
   445  007BB8  72                 	db	114	;'r'
   446  007BB9  69                 	db	105	;'i'
   447  007BBA  74                 	db	116	;'t'
   448  007BBB  65                 	db	101	;'e'
   449  007BBC  20                 	db	32
   450  007BBD  74                 	db	116	;'t'
   451  007BBE  68                 	db	104	;'h'
   452  007BBF  65                 	db	101	;'e'
   453  007BC0  20                 	db	32
   454  007BC1  66                 	db	102	;'f'
   455  007BC2  69                 	db	105	;'i'
   456  007BC3  6C                 	db	108	;'l'
   457  007BC4  65                 	db	101	;'e'
   458  007BC5  2E                 	db	46
   459  007BC6  0D                 	db	13
   460  007BC7  0A                 	db	10
   461  007BC8  00                 	db	0
   462  007BC9                     STR_10:
   463  007BC9  0D                 	db	13
   464  007BCA  0A                 	db	10
   465  007BCB  45                 	db	69	;'E'
   466  007BCC  72                 	db	114	;'r'
   467  007BCD  72                 	db	114	;'r'
   468  007BCE  6F                 	db	111	;'o'
   469  007BCF  72                 	db	114	;'r'
   470  007BD0  20                 	db	32
   471  007BD1  74                 	db	116	;'t'
   472  007BD2  72                 	db	114	;'r'
   473  007BD3  79                 	db	121	;'y'
   474  007BD4  69                 	db	105	;'i'
   475  007BD5  6E                 	db	110	;'n'
   476  007BD6  67                 	db	103	;'g'
   477  007BD7  20                 	db	32
   478  007BD8  74                 	db	116	;'t'
   479  007BD9  6F                 	db	111	;'o'
   480  007BDA  20                 	db	32
   481  007BDB  77                 	db	119	;'w'
   482  007BDC  72                 	db	114	;'r'
   483  007BDD  69                 	db	105	;'i'
   484  007BDE  74                 	db	116	;'t'
   485  007BDF  65                 	db	101	;'e'
   486  007BE0  20                 	db	32
   487  007BE1  74                 	db	116	;'t'
   488  007BE2  6F                 	db	111	;'o'
   489  007BE3  20                 	db	32
   490  007BE4  66                 	db	102	;'f'
   491  007BE5  69                 	db	105	;'i'
   492  007BE6  6C                 	db	108	;'l'
   493  007BE7  65                 	db	101	;'e'
   494  007BE8  3B                 	db	59	;';'
   495  007BE9  20                 	db	32
   496  007BEA  00                 	db	0
   497  007BEB                     STR_12:
   498  007BEB  0D                 	db	13
   499  007BEC  0A                 	db	10
   500  007BED  0D                 	db	13
   501  007BEE  0A                 	db	10
   502  007BEF  53                 	db	83	;'S'
   503  007BF0  74                 	db	116	;'t'
   504  007BF1  61                 	db	97	;'a'
   505  007BF2  72                 	db	114	;'r'
   506  007BF3  74                 	db	116	;'t'
   507  007BF4  69                 	db	105	;'i'
   508  007BF5  6E                 	db	110	;'n'
   509  007BF6  67                 	db	103	;'g'
   510  007BF7  20                 	db	32
   511  007BF8  74                 	db	116	;'t'
   512  007BF9  6F                 	db	111	;'o'
   513  007BFA  20                 	db	32
   514  007BFB  72                 	db	114	;'r'
   515  007BFC  65                 	db	101	;'e'
   516  007BFD  61                 	db	97	;'a'
   517  007BFE  64                 	db	100	;'d'
   518  007BFF  20                 	db	32
   519  007C00  74                 	db	116	;'t'
   520  007C01  68                 	db	104	;'h'
   521  007C02  65                 	db	101	;'e'
   522  007C03  20                 	db	32
   523  007C04  66                 	db	102	;'f'
   524  007C05  69                 	db	105	;'i'
   525  007C06  6C                 	db	108	;'l'
   526  007C07  65                 	db	101	;'e'
   527  007C08  2E                 	db	46
   528  007C09  0D                 	db	13
   529  007C0A  0A                 	db	10
   530  007C0B  00                 	db	0
   531  007C0C                     STR_13:
   532  007C0C  0D                 	db	13
   533  007C0D  0A                 	db	10
   534  007C0E  45                 	db	69	;'E'
   535  007C0F  72                 	db	114	;'r'
   536  007C10  72                 	db	114	;'r'
   537  007C11  6F                 	db	111	;'o'
   538  007C12  72                 	db	114	;'r'
   539  007C13  20                 	db	32
   540  007C14  74                 	db	116	;'t'
   541  007C15  72                 	db	114	;'r'
   542  007C16  79                 	db	121	;'y'
   543  007C17  69                 	db	105	;'i'
   544  007C18  6E                 	db	110	;'n'
   545  007C19  67                 	db	103	;'g'
   546  007C1A  20                 	db	32
   547  007C1B  74                 	db	116	;'t'
   548  007C1C  6F                 	db	111	;'o'
   549  007C1D  20                 	db	32
   550  007C1E  72                 	db	114	;'r'
   551  007C1F  65                 	db	101	;'e'
   552  007C20  61                 	db	97	;'a'
   553  007C21  64                 	db	100	;'d'
   554  007C22  20                 	db	32
   555  007C23  66                 	db	102	;'f'
   556  007C24  69                 	db	105	;'i'
   557  007C25  6C                 	db	108	;'l'
   558  007C26  65                 	db	101	;'e'
   559  007C27  3B                 	db	59	;';'
   560  007C28  20                 	db	32
   561  007C29  00                 	db	0
   562  007C2A                     STR_15:
   563  007C2A  0D                 	db	13
   564  007C2B  0A                 	db	10
   565  007C2C  45                 	db	69	;'E'
   566  007C2D  72                 	db	114	;'r'
   567  007C2E  72                 	db	114	;'r'
   568  007C2F  6F                 	db	111	;'o'
   569  007C30  72                 	db	114	;'r'
   570  007C31  20                 	db	32
   571  007C32  74                 	db	116	;'t'
   572  007C33  72                 	db	114	;'r'
   573  007C34  79                 	db	121	;'y'
   574  007C35  69                 	db	105	;'i'
   575  007C36  6E                 	db	110	;'n'
   576  007C37  67                 	db	103	;'g'
   577  007C38  20                 	db	32
   578  007C39  74                 	db	116	;'t'
   579  007C3A  6F                 	db	111	;'o'
   580  007C3B  20                 	db	32
   581  007C3C  6F                 	db	111	;'o'
   582  007C3D  70                 	db	112	;'p'
   583  007C3E  65                 	db	101	;'e'
   584  007C3F  6E                 	db	110	;'n'
   585  007C40  20                 	db	32
   586  007C41  66                 	db	102	;'f'
   587  007C42  69                 	db	105	;'i'
   588  007C43  6C                 	db	108	;'l'
   589  007C44  65                 	db	101	;'e'
   590  007C45  3B                 	db	59	;';'
   591  007C46  20                 	db	32
   592  007C47  00                 	db	0
   593  007C48                     STR_3:
   594  007C48  0D                 	db	13
   595  007C49  0A                 	db	10
   596  007C4A  0D                 	db	13
   597  007C4B  0A                 	db	10
   598  007C4C  41                 	db	65	;'A'
   599  007C4D  74                 	db	116	;'t'
   600  007C4E  74                 	db	116	;'t'
   601  007C4F  65                 	db	101	;'e'
   602  007C50  6D                 	db	109	;'m'
   603  007C51  70                 	db	112	;'p'
   604  007C52  74                 	db	116	;'t'
   605  007C53  69                 	db	105	;'i'
   606  007C54  6E                 	db	110	;'n'
   607  007C55  67                 	db	103	;'g'
   608  007C56  20                 	db	32
   609  007C57  74                 	db	116	;'t'
   610  007C58  6F                 	db	111	;'o'
   611  007C59  20                 	db	32
   612  007C5A  6F                 	db	111	;'o'
   613  007C5B  70                 	db	112	;'p'
   614  007C5C  65                 	db	101	;'e'
   615  007C5D  6E                 	db	110	;'n'
   616  007C5E  20                 	db	32
   617  007C5F  66                 	db	102	;'f'
   618  007C60  69                 	db	105	;'i'
   619  007C61  6C                 	db	108	;'l'
   620  007C62  65                 	db	101	;'e'
   621  007C63  20                 	db	32
   622  007C64  00                 	db	0
   623  007C65                     STR_29:
   624  007C65  0A                 	db	10
   625  007C66  0D                 	db	13
   626  007C67  43                 	db	67	;'C'
   627  007C68  4F                 	db	79	;'O'
   628  007C69  4D                 	db	77	;'M'
   629  007C6A  50                 	db	80	;'P'
   630  007C6B  4C                 	db	76	;'L'
   631  007C6C  45                 	db	69	;'E'
   632  007C6D  54                 	db	84	;'T'
   633  007C6E  49                 	db	73	;'I'
   634  007C6F  4E                 	db	78	;'N'
   635  007C70  47                 	db	71	;'G'
   636  007C71  20                 	db	32
   637  007C72  49                 	db	73	;'I'
   638  007C73  4E                 	db	78	;'N'
   639  007C74  49                 	db	73	;'I'
   640  007C75  54                 	db	84	;'T'
   641  007C76  49                 	db	73	;'I'
   642  007C77  41                 	db	65	;'A'
   643  007C78  4C                 	db	76	;'L'
   644  007C79  49                 	db	73	;'I'
   645  007C7A  5A                 	db	90	;'Z'
   646  007C7B  41                 	db	65	;'A'
   647  007C7C  54                 	db	84	;'T'
   648  007C7D  49                 	db	73	;'I'
   649  007C7E  4F                 	db	79	;'O'
   650  007C7F  4E                 	db	78	;'N'
   651  007C80  00                 	db	0
   652  007C81                     STR_9:
   653  007C81  0D                 	db	13
   654  007C82  0A                 	db	10
   655  007C83  53                 	db	83	;'S'
   656  007C84  75                 	db	117	;'u'
   657  007C85  63                 	db	99	;'c'
   658  007C86  63                 	db	99	;'c'
   659  007C87  65                 	db	101	;'e'
   660  007C88  73                 	db	115	;'s'
   661  007C89  73                 	db	115	;'s'
   662  007C8A  66                 	db	102	;'f'
   663  007C8B  75                 	db	117	;'u'
   664  007C8C  6C                 	db	108	;'l'
   665  007C8D  6C                 	db	108	;'l'
   666  007C8E  79                 	db	121	;'y'
   667  007C8F  20                 	db	32
   668  007C90  77                 	db	119	;'w'
   669  007C91  72                 	db	114	;'r'
   670  007C92  69                 	db	105	;'i'
   671  007C93  74                 	db	116	;'t'
   672  007C94  74                 	db	116	;'t'
   673  007C95  65                 	db	101	;'e'
   674  007C96  6E                 	db	110	;'n'
   675  007C97  00                 	db	0
   676  007C98                     STR_24:
   677  007C98  0A                 	db	10
   678  007C99  0D                 	db	13
   679  007C9A  53                 	db	83	;'S'
   680  007C9B  44                 	db	68	;'D'
   681  007C9C  20                 	db	32
   682  007C9D  43                 	db	67	;'C'
   683  007C9E  61                 	db	97	;'a'
   684  007C9F  72                 	db	114	;'r'
   685  007CA0  64                 	db	100	;'d'
   686  007CA1  20                 	db	32
   687  007CA2  49                 	db	73	;'I'
   688  007CA3  6E                 	db	110	;'n'
   689  007CA4  73                 	db	115	;'s'
   690  007CA5  65                 	db	101	;'e'
   691  007CA6  72                 	db	114	;'r'
   692  007CA7  74                 	db	116	;'t'
   693  007CA8  65                 	db	101	;'e'
   694  007CA9  64                 	db	100	;'d'
   695  007CAA  0A                 	db	10
   696  007CAB  0D                 	db	13
   697  007CAC  00                 	db	0
   698  007CAD                     STR_28:
   699  007CAD  0A                 	db	10
   700  007CAE  0D                 	db	13
   701  007CAF  35                 	db	53	;'5'
   702  007CB0  31                 	db	49	;'1'
   703  007CB1  32                 	db	50	;'2'
   704  007CB2  20                 	db	32
   705  007CB3  42                 	db	66	;'B'
   706  007CB4  79                 	db	121	;'y'
   707  007CB5  74                 	db	116	;'t'
   708  007CB6  65                 	db	101	;'e'
   709  007CB7  73                 	db	115	;'s'
   710  007CB8  20                 	db	32
   711  007CB9  53                 	db	83	;'S'
   712  007CBA  65                 	db	101	;'e'
   713  007CBB  74                 	db	116	;'t'
   714  007CBC  0A                 	db	10
   715  007CBD  0D                 	db	13
   716  007CBE  00                 	db	0
   717  007CBF                     STR_5:
   718  007CBF  4F                 	db	79	;'O'
   719  007CC0  50                 	db	80	;'P'
   720  007CC1  45                 	db	69	;'E'
   721  007CC2  4E                 	db	78	;'N'
   722  007CC3  49                 	db	73	;'I'
   723  007CC4  4E                 	db	78	;'N'
   724  007CC5  47                 	db	71	;'G'
   725  007CC6  20                 	db	32
   726  007CC7  54                 	db	84	;'T'
   727  007CC8  48                 	db	72	;'H'
   728  007CC9  45                 	db	69	;'E'
   729  007CCA  20                 	db	32
   730  007CCB  46                 	db	70	;'F'
   731  007CCC  49                 	db	73	;'I'
   732  007CCD  4C                 	db	76	;'L'
   733  007CCE  45                 	db	69	;'E'
   734  007CCF  00                 	db	0
   735  007CD0                     STR_27:
   736  007CD0  45                 	db	69	;'E'
   737  007CD1  72                 	db	114	;'r'
   738  007CD2  72                 	db	114	;'r'
   739  007CD3  6F                 	db	111	;'o'
   740  007CD4  72                 	db	114	;'r'
   741  007CD5  21                 	db	33
   742  007CD6  21                 	db	33
   743  007CD7  21                 	db	33
   744  007CD8  0A                 	db	10
   745  007CD9  0D                 	db	13
   746  007CDA  00                 	db	0
   747  007CDB                     STR_26:
   748  007CDB  53                 	db	83	;'S'
   749  007CDC  55                 	db	85	;'U'
   750  007CDD  43                 	db	67	;'C'
   751  007CDE  43                 	db	67	;'C'
   752  007CDF  45                 	db	69	;'E'
   753  007CE0  53                 	db	83	;'S'
   754  007CE1  53                 	db	83	;'S'
   755  007CE2  0A                 	db	10
   756  007CE3  0D                 	db	13
   757  007CE4  00                 	db	0
   758  007CE5                     STR_1:
   759  007CE5  63                 	db	99	;'c'
   760  007CE6  68                 	db	104	;'h'
   761  007CE7  65                 	db	101	;'e'
   762  007CE8  63                 	db	99	;'c'
   763  007CE9  6B                 	db	107	;'k'
   764  007CEA  2E                 	db	46
   765  007CEB  74                 	db	116	;'t'
   766  007CEC  78                 	db	120	;'x'
   767  007CED  74                 	db	116	;'t'
   768  007CEE  00                 	db	0
   769  007CEF                     STR_8:
   770  007CEF  53                 	db	83	;'S'
   771  007CF0  44                 	db	68	;'D'
   772  007CF1  5F                 	db	95	;'_'
   773  007CF2  43                 	db	67	;'C'
   774  007CF3  61                 	db	97	;'a'
   775  007CF4  72                 	db	114	;'r'
   776  007CF5  64                 	db	100	;'d'
   777  007CF6  00                 	db	0
   778  007CF7                     STR_19:
   779  007CF7  0D                 	db	13
   780  007CF8  0A                 	db	10
   781  007CF9  0D                 	db	13
   782  007CFA  0A                 	db	10
   783  007CFB  00                 	db	0
   784  007CFC                     STR_30:
   785  007CFC  2E                 	db	46
   786  007CFD  2E                 	db	46
   787  007CFE  00                 	db	0
   788  007CFF                     __end_of__stringdata:
   789                           	opt stack 0
   790                           
   791                           ; #config settings
   792  007CFF  00                 	db	0	; dummy byte at the end
   793  0000                     
   794                           	psect	cinit
   795  004FE0                     __pcinit:
   796                           	opt stack 0
   797  004FE0                     start_initialization:
   798                           	opt stack 0
   799  004FE0                     __initialization:
   800                           	opt stack 0
   801                           
   802                           ; Clear objects allocated to BIGRAM_1 (1024 bytes)
   803  004FE0  EE04  F000         	lfsr	0,__pbssBIGRAM_1
   804  004FE4  EE14 F000          	lfsr	1,1024
   805  004FE8                     clear_0:
   806  004FE8  6AEE               	clrf	postinc0,c
   807  004FEA  50E5               	movf	postdec1,w,c
   808  004FEC  50E1               	movf	fsr1l,w,c
   809  004FEE  E1FC               	bnz	clear_0
   810  004FF0  50E2               	movf	fsr1h,w,c
   811  004FF2  E1FA               	bnz	clear_0
   812                           
   813                           ; Clear objects allocated to BIGRAM (512 bytes)
   814  004FF4  EE01  F06E         	lfsr	0,__pbssBIGRAM
   815  004FF8  EE12 F000          	lfsr	1,512
   816  004FFC                     clear_1:
   817  004FFC  6AEE               	clrf	postinc0,c
   818  004FFE  50E5               	movf	postdec1,w,c
   819  005000  50E1               	movf	fsr1l,w,c
   820  005002  E1FC               	bnz	clear_1
   821  005004  50E2               	movf	fsr1h,w,c
   822  005006  E1FA               	bnz	clear_1
   823                           
   824                           ; Clear objects allocated to BANK1 (100 bytes)
   825  005008  EE01  F000         	lfsr	0,__pbssBANK1
   826  00500C  0E64               	movlw	100
   827  00500E                     clear_2:
   828  00500E  6AEE               	clrf	postinc0,c
   829  005010  06E8               	decf	wreg,f,c
   830  005012  E1FD               	bnz	clear_2
   831                           
   832                           ; Clear objects allocated to BANK0 (14 bytes)
   833  005014  EE00  F0EF         	lfsr	0,__pbssBANK0
   834  005018  0E0E               	movlw	14
   835  00501A                     clear_3:
   836  00501A  6AEE               	clrf	postinc0,c
   837  00501C  06E8               	decf	wreg,f,c
   838  00501E  E1FD               	bnz	clear_3
   839                           
   840                           ; Initialize objects allocated to BANK1 (10 bytes)
   841                           ; load TBLPTR registers with __pidataBANK1
   842  005020  0EE8               	movlw	low __pidataBANK1
   843  005022  6EF6               	movwf	tblptrl,c
   844  005024  0E4C               	movlw	high __pidataBANK1
   845  005026  6EF7               	movwf	tblptrh,c
   846  005028  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   847  00502A  6EF8               	movwf	tblptru,c
   848  00502C  EE01  F064         	lfsr	0,__pdataBANK1
   849  005030  EE10 F00A          	lfsr	1,10
   850  005034                     copy_data0:
   851  005034  0009               	tblrd		*+
   852  005036  CFF5 FFEE          	movff	tablat,postinc0
   853  00503A  50E5               	movf	postdec1,w,c
   854  00503C  50E1               	movf	fsr1l,w,c
   855  00503E  E1FA               	bnz	copy_data0
   856  005040                     end_of_initialization:
   857                           	opt stack 0
   858  005040                     __end_of__initialization:
   859                           	opt stack 0
   860  005040  0E00               	movlw	low (__Lmediumconst shr (0+16))
   861  005042  6EF8               	movwf	tblptru,c
   862  005044  0100               	movlb	0
   863  005046  EF3C  F02F         	goto	_main	;jump to C main() function
   864                           tblptru	equ	0xFF8
   865                           tblptrh	equ	0xFF7
   866                           tblptrl	equ	0xFF6
   867                           tablat	equ	0xFF5
   868                           postinc0	equ	0xFEE
   869                           wreg	equ	0xFE8
   870                           postdec1	equ	0xFE5
   871                           fsr1h	equ	0xFE2
   872                           fsr1l	equ	0xFE1
   873                           
   874                           	psect	bssBANK0
   875  0000EF                     __pbssBANK0:
   876                           	opt stack 0
   877  0000EF                     _fileSize:
   878                           	opt stack 0
   879  0000EF                     	ds	4
   880  0000F3                     _FatFs:
   881                           	opt stack 0
   882  0000F3                     	ds	2
   883  0000F5                     _flag:
   884                           	opt stack 0
   885  0000F5                     	ds	2
   886  0000F7                     _rd:
   887                           	opt stack 0
   888  0000F7                     	ds	2
   889  0000F9                     _BitCount:
   890                           	opt stack 0
   891  0000F9                     	ds	1
   892  0000FA                     _Result:
   893                           	opt stack 0
   894  0000FA                     	ds	1
   895  0000FB                     _s:
   896                           	opt stack 0
   897  0000FB                     	ds	1
   898  0000FC                     _uartdata:
   899                           	opt stack 0
   900  0000FC                     	ds	1
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           fsr1h	equ	0xFE2
   909                           fsr1l	equ	0xFE1
   910                           
   911                           	psect	bssBANK1
   912  000100                     __pbssBANK1:
   913                           	opt stack 0
   914  000100                     _folder:
   915                           	opt stack 0
   916  000100                     	ds	48
   917  000130                     _txt:
   918                           	opt stack 0
   919  000130                     	ds	20
   920  000144                     _data_buffer_32:
   921                           	opt stack 0
   922  000144                     	ds	32
   923                           tblptru	equ	0xFF8
   924                           tblptrh	equ	0xFF7
   925                           tblptrl	equ	0xFF6
   926                           tablat	equ	0xFF5
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1h	equ	0xFE2
   931                           fsr1l	equ	0xFE1
   932                           
   933                           	psect	dataBANK1
   934  000164                     __pdataBANK1:
   935                           	opt stack 0
   936  000164                     _fileName:
   937                           	opt stack 0
   938  000164                     	ds	10
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1h	equ	0xFE2
   947                           fsr1l	equ	0xFE1
   948                           
   949                           	psect	bssBIGRAM_1
   950  000400                     __pbssBIGRAM_1:
   951                           	opt stack 0
   952  000400                     _sector_buffer:
   953                           	opt stack 0
   954  000400                     	ds	512
   955  000600                     disk_readp@arr:
   956                           	opt stack 0
   957  000600                     	ds	512
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1h	equ	0xFE2
   966                           fsr1l	equ	0xFE1
   967                           
   968                           	psect	bssBIGRAM
   969  00016E                     __pbssBIGRAM:
   970                           	opt stack 0
   971  00016E                     _str:
   972                           	opt stack 0
   973  00016E                     	ds	512
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1h	equ	0xFE2
   982                           fsr1l	equ	0xFE1
   983                           
   984                           	psect	cstackBANK0
   985  000060                     __pcstackBANK0:
   986                           	opt stack 0
   987  000060                     follow_path@dj:
   988                           	opt stack 0
   989  000060                     pf_read@rbuff:
   990                           	opt stack 0
   991  000060                     pf_write@p:
   992                           	opt stack 0
   993  000060                     pf_mount@buf:
   994                           	opt stack 0
   995                           
   996                           ; 36 bytes @ 0x0
   997  000060                     	ds	2
   998  000062                     follow_path@dir:
   999                           	opt stack 0
  1000  000062                     _pf_read$366:
  1001                           	opt stack 0
  1002  000062                     pf_write@sect:
  1003                           	opt stack 0
  1004                           
  1005                           ; 4 bytes @ 0x2
  1006  000062                     	ds	2
  1007  000064                     pf_read@dr:
  1008                           	opt stack 0
  1009  000064                     follow_path@path:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x4
  1013  000064                     	ds	1
  1014  000065                     pf_read@sect:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x5
  1018  000065                     	ds	1
  1019  000066                     ??_follow_path:
  1020  000066                     pf_write@remain:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0x6
  1024  000066                     	ds	3
  1025  000069                     pf_read@remain:
  1026                           	opt stack 0
  1027                           
  1028                           ; 4 bytes @ 0x9
  1029  000069                     	ds	1
  1030  00006A                     follow_path@res:
  1031                           	opt stack 0
  1032  00006A                     pf_write@clst:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0xA
  1036  00006A                     	ds	1
  1037  00006B                     pf_open@path:
  1038                           	opt stack 0
  1039                           
  1040                           ; 2 bytes @ 0xB
  1041  00006B                     	ds	2
  1042  00006D                     ??_pf_open:
  1043  00006D                     pf_read@clst:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0xD
  1047  00006D                     	ds	1
  1048  00006E                     pf_write@cs:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0xE
  1052  00006E                     	ds	1
  1053  00006F                     pf_write@wcnt:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0xF
  1057  00006F                     	ds	2
  1058  000071                     pf_read@cs:
  1059                           	opt stack 0
  1060  000071                     pf_write@fs:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x11
  1064  000071                     	ds	1
  1065  000072                     pf_read@rcnt:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x12
  1069  000072                     	ds	2
  1070  000074                     pf_read@fs:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x14
  1074  000074                     	ds	15
  1075  000083                     pf_open@sp:
  1076                           	opt stack 0
  1077                           
  1078                           ; 12 bytes @ 0x23
  1079  000083                     	ds	1
  1080  000084                     pf_mount@tsect:
  1081                           	opt stack 0
  1082                           
  1083                           ; 4 bytes @ 0x24
  1084  000084                     	ds	4
  1085  000088                     pf_mount@mclst:
  1086                           	opt stack 0
  1087                           
  1088                           ; 4 bytes @ 0x28
  1089  000088                     	ds	4
  1090  00008C                     pf_mount@bsect:
  1091                           	opt stack 0
  1092                           
  1093                           ; 4 bytes @ 0x2C
  1094  00008C                     	ds	3
  1095  00008F                     pf_open@dir:
  1096                           	opt stack 0
  1097                           
  1098                           ; 32 bytes @ 0x2F
  1099  00008F                     	ds	1
  1100  000090                     pf_mount@fsize:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x30
  1104  000090                     	ds	4
  1105  000094                     pf_mount@fmt:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0x34
  1109  000094                     	ds	27
  1110  0000AF                     pf_open@res:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x4F
  1114  0000AF                     	ds	1
  1115  0000B0                     pf_open@fs:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x50
  1119  0000B0                     	ds	2
  1120  0000B2                     pf_open@dj:
  1121                           	opt stack 0
  1122                           
  1123                           ; 16 bytes @ 0x52
  1124  0000B2                     	ds	16
  1125  0000C2                     main@br:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x62
  1129  0000C2                     	ds	2
  1130  0000C4                     main@FResult:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x64
  1134  0000C4                     	ds	1
  1135  0000C5                     main@fs:
  1136                           	opt stack 0
  1137                           
  1138                           ; 42 bytes @ 0x65
  1139  0000C5                     	ds	42
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           postdec1	equ	0xFE5
  1147                           fsr1h	equ	0xFE2
  1148                           fsr1l	equ	0xFE1
  1149                           
  1150                           	psect	cstackCOMRAM
  1151  000001                     __pcstackCOMRAM:
  1152                           	opt stack 0
  1153  000001                     ?_mem_cmp:
  1154                           	opt stack 0
  1155  000001                     ?_get_clust:
  1156                           	opt stack 0
  1157  000001                     ?___lmul:
  1158                           	opt stack 0
  1159  000001                     ?___lldiv:
  1160                           	opt stack 0
  1161  000001                     WriteSPI_@TempVar:
  1162                           	opt stack 0
  1163  000001                     ReadSPI_@TempVar:
  1164                           	opt stack 0
  1165  000001                     OpenSPI@bus_mode:
  1166                           	opt stack 0
  1167  000001                     WriteSPI@TempVar:
  1168                           	opt stack 0
  1169  000001                     Delay100TCYx@unit:
  1170                           	opt stack 0
  1171  000001                     Delay1KTCYx@unit:
  1172                           	opt stack 0
  1173  000001                     mem_set@dst:
  1174                           	opt stack 0
  1175  000001                     mem_cmp@dst:
  1176                           	opt stack 0
  1177  000001                     get_clust@dir:
  1178                           	opt stack 0
  1179  000001                     readover@a:
  1180                           	opt stack 0
  1181  000001                     ___lmul@multiplier:
  1182                           	opt stack 0
  1183  000001                     ___lldiv@dividend:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x0
  1187  000001                     	ds	1
  1188  000002                     ??_WriteUART:
  1189  000002                     WriteSPI_@data_out:
  1190                           	opt stack 0
  1191  000002                     response@buff:
  1192                           	opt stack 0
  1193  000002                     delay_ms@t:
  1194                           	opt stack 0
  1195  000002                     OpenSPI@smp_phase:
  1196                           	opt stack 0
  1197  000002                     WriteSPI@data_out:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x1
  1201  000002                     	ds	1
  1202  000003                     delay_ms@i:
  1203                           	opt stack 0
  1204  000003                     WriteUART@uartdata:
  1205                           	opt stack 0
  1206  000003                     OpenSPI@sync_mode:
  1207                           	opt stack 0
  1208  000003                     mem_set@val:
  1209                           	opt stack 0
  1210  000003                     mem_cmp@src:
  1211                           	opt stack 0
  1212  000003                     Command@arg:
  1213                           	opt stack 0
  1214                           
  1215                           ; 4 bytes @ 0x2
  1216  000003                     	ds	1
  1217  000004                     Delay_s@t:
  1218                           	opt stack 0
  1219  000004                     WriteUART@bitcount:
  1220                           	opt stack 0
  1221  000004                     soft_hard_init@i:
  1222                           	opt stack 0
  1223  000004                     dummy_clocks@n:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x3
  1227  000004                     	ds	1
  1228  000005                     ??_get_clust:
  1229  000005                     Delay_s@i:
  1230                           	opt stack 0
  1231  000005                     mem_set@cnt:
  1232                           	opt stack 0
  1233  000005                     mem_cmp@cnt:
  1234                           	opt stack 0
  1235  000005                     putsUART@data:
  1236                           	opt stack 0
  1237  000005                     ___lmul@multiplicand:
  1238                           	opt stack 0
  1239  000005                     ___lldiv@divisor:
  1240                           	opt stack 0
  1241                           
  1242                           ; 4 bytes @ 0x4
  1243  000005                     	ds	1
  1244  000006                     ??_dummy_clocks:
  1245  000006                     soft_hard_init@sync_mode:
  1246                           	opt stack 0
  1247  000006                     Delay_s@j:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x5
  1251  000006                     	ds	1
  1252  000007                     ??_putsUART:
  1253  000007                     ??_mem_cmp:
  1254  000007                     soft_hard_init@bus_mode:
  1255                           	opt stack 0
  1256  000007                     Command@CRCbits:
  1257                           	opt stack 0
  1258  000007                     mem_set@d:
  1259                           	opt stack 0
  1260  000007                     dummy_clocks@i:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x6
  1264  000007                     	ds	1
  1265  000008                     soft_hard_init@smp_phase:
  1266                           	opt stack 0
  1267  000008                     Command@cmd:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x7
  1271  000008                     	ds	1
  1272  000009                     create_name@dj:
  1273                           	opt stack 0
  1274  000009                     reset@i:
  1275                           	opt stack 0
  1276  000009                     disk_readp@rd:
  1277                           	opt stack 0
  1278  000009                     disk_writep@wr:
  1279                           	opt stack 0
  1280  000009                     ___lmul@product:
  1281                           	opt stack 0
  1282  000009                     ___lldiv@quotient:
  1283                           	opt stack 0
  1284                           
  1285                           ; 4 bytes @ 0x8
  1286  000009                     	ds	1
  1287  00000A                     mem_cmp@d:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x9
  1291  00000A                     	ds	1
  1292  00000B                     create_name@path:
  1293                           	opt stack 0
  1294  00000B                     reset@count:
  1295                           	opt stack 0
  1296  00000B                     disk_readp@sector:
  1297                           	opt stack 0
  1298                           
  1299                           ; 4 bytes @ 0xA
  1300  00000B                     	ds	1
  1301  00000C                     mem_cmp@s:
  1302                           	opt stack 0
  1303  00000C                     disk_writep@sc:
  1304                           	opt stack 0
  1305                           
  1306                           ; 4 bytes @ 0xB
  1307  00000C                     	ds	1
  1308  00000D                     ??_create_name:
  1309  00000D                     ?_clust2sect:
  1310                           	opt stack 0
  1311  00000D                     reset@buff:
  1312                           	opt stack 0
  1313  00000D                     ___lldiv@counter:
  1314                           	opt stack 0
  1315  00000D                     get_clust@fs:
  1316                           	opt stack 0
  1317  00000D                     clust2sect@clst:
  1318                           	opt stack 0
  1319                           
  1320                           ; 4 bytes @ 0xC
  1321  00000D                     	ds	1
  1322  00000E                     mem_cmp@r:
  1323                           	opt stack 0
  1324  00000E                     disk_initialize@i:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0xD
  1328  00000E                     	ds	1
  1329  00000F                     disk_readp@offset:
  1330                           	opt stack 0
  1331  00000F                     get_clust@clst:
  1332                           	opt stack 0
  1333                           
  1334                           ; 4 bytes @ 0xE
  1335  00000F                     	ds	1
  1336  000010                     ??_disk_writep:
  1337  000010                     disk_initialize@count1:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0xF
  1341  000010                     	ds	1
  1342  000011                     ??_clust2sect:
  1343  000011                     disk_readp@count:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x10
  1347  000011                     	ds	1
  1348  000012                     disk_initialize@stat:
  1349                           	opt stack 0
  1350                           
  1351                           ; 1 bytes @ 0x11
  1352  000012                     	ds	1
  1353  000013                     ??_disk_readp:
  1354  000013                     disk_initialize@count2:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x12
  1358  000013                     	ds	1
  1359  000014                     create_name@d:
  1360                           	opt stack 0
  1361  000014                     disk_writep@i:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x13
  1365  000014                     	ds	1
  1366  000015                     disk_initialize@buff:
  1367                           	opt stack 0
  1368  000015                     create_name@p:
  1369                           	opt stack 0
  1370                           
  1371                           ; 2 bytes @ 0x14
  1372  000015                     	ds	1
  1373  000016                     disk_writep@j:
  1374                           	opt stack 0
  1375                           
  1376                           ; 2 bytes @ 0x15
  1377  000016                     	ds	1
  1378  000017                     create_name@ni:
  1379                           	opt stack 0
  1380  000017                     disk_readp@ptr:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x16
  1384  000017                     	ds	1
  1385  000018                     create_name@si:
  1386                           	opt stack 0
  1387  000018                     disk_writep@buff:
  1388                           	opt stack 0
  1389  000018                     disk_readp@start_add:
  1390                           	opt stack 0
  1391                           
  1392                           ; 4 bytes @ 0x17
  1393  000018                     	ds	1
  1394  000019                     create_name@sfn:
  1395                           	opt stack 0
  1396                           
  1397                           ; 2 bytes @ 0x18
  1398  000019                     	ds	1
  1399  00001A                     clust2sect@fs:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x19
  1403  00001A                     	ds	1
  1404  00001B                     create_name@i:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x1A
  1408  00001B                     	ds	1
  1409  00001C                     create_name@c:
  1410                           	opt stack 0
  1411  00001C                     disk_readp@buff:
  1412                           	opt stack 0
  1413  00001C                     dir_rewind@dj:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x1B
  1417  00001C                     	ds	1
  1418  00001D                     disk_readp@length:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x1C
  1422  00001D                     	ds	1
  1423  00001E                     ??_dir_rewind:
  1424                           
  1425                           ; 0 bytes @ 0x1D
  1426  00001E                     	ds	1
  1427  00001F                     ?_get_fat:
  1428                           	opt stack 0
  1429  00001F                     check_fs@buf:
  1430                           	opt stack 0
  1431  00001F                     get_fat@clst:
  1432                           	opt stack 0
  1433                           
  1434                           ; 4 bytes @ 0x1E
  1435  00001F                     	ds	2
  1436  000021                     check_fs@sect:
  1437                           	opt stack 0
  1438                           
  1439                           ; 4 bytes @ 0x20
  1440  000021                     	ds	1
  1441  000022                     _dir_rewind$173:
  1442                           	opt stack 0
  1443                           
  1444                           ; 4 bytes @ 0x21
  1445  000022                     	ds	1
  1446  000023                     ??_get_fat:
  1447                           
  1448                           ; 0 bytes @ 0x22
  1449  000023                     	ds	2
  1450  000025                     ??_check_fs:
  1451                           
  1452                           ; 0 bytes @ 0x24
  1453  000025                     	ds	1
  1454  000026                     dir_rewind@fs:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x25
  1458  000026                     	ds	2
  1459  000028                     dir_rewind@clst:
  1460                           	opt stack 0
  1461                           
  1462                           ; 4 bytes @ 0x27
  1463  000028                     	ds	1
  1464  000029                     pf_mount@fs:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x28
  1468  000029                     	ds	2
  1469  00002B                     ??_pf_mount:
  1470                           
  1471                           ; 0 bytes @ 0x2A
  1472  00002B                     	ds	14
  1473  000039                     _get_fat$113:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x38
  1477  000039                     	ds	2
  1478  00003B                     get_fat@wc:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x3A
  1482  00003B                     	ds	2
  1483  00003D                     get_fat@ofs:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x3C
  1487  00003D                     	ds	2
  1488  00003F                     get_fat@buf:
  1489                           	opt stack 0
  1490                           
  1491                           ; 4 bytes @ 0x3E
  1492  00003F                     	ds	4
  1493  000043                     get_fat@bc:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x42
  1497  000043                     	ds	2
  1498  000045                     get_fat@fs:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x44
  1502  000045                     	ds	2
  1503  000047                     dir_next@dj:
  1504                           	opt stack 0
  1505  000047                     pf_read@buff:
  1506                           	opt stack 0
  1507  000047                     pf_write@buff:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x46
  1511  000047                     	ds	2
  1512  000049                     ??_dir_next:
  1513  000049                     pf_read@btr:
  1514                           	opt stack 0
  1515  000049                     pf_write@btw:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x48
  1519  000049                     	ds	2
  1520  00004B                     pf_read@br:
  1521                           	opt stack 0
  1522  00004B                     pf_write@bw:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x4A
  1526  00004B                     	ds	2
  1527  00004D                     ??_pf_read:
  1528  00004D                     ??_pf_write:
  1529                           
  1530                           ; 0 bytes @ 0x4C
  1531  00004D                     	ds	3
  1532  000050                     dir_next@fs:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x4F
  1536  000050                     	ds	2
  1537  000052                     dir_next@clst:
  1538                           	opt stack 0
  1539                           
  1540                           ; 4 bytes @ 0x51
  1541  000052                     	ds	4
  1542  000056                     dir_next@i:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x55
  1546  000056                     	ds	2
  1547  000058                     dir_find@dj:
  1548                           	opt stack 0
  1549                           
  1550                           ; 2 bytes @ 0x57
  1551  000058                     	ds	2
  1552  00005A                     dir_find@dir:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x59
  1556  00005A                     	ds	2
  1557  00005C                     ??_dir_find:
  1558                           
  1559                           ; 0 bytes @ 0x5B
  1560  00005C                     	ds	2
  1561  00005E                     dir_find@c:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x5D
  1565  00005E                     	ds	1
  1566  00005F                     dir_find@res:
  1567                           	opt stack 0
  1568                           
  1569                           ; 1 bytes @ 0x5E
  1570  00005F                     	ds	1
  1571  000060                     tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           postinc0	equ	0xFEE
  1576                           wreg	equ	0xFE8
  1577                           postdec1	equ	0xFE5
  1578                           fsr1h	equ	0xFE2
  1579                           fsr1l	equ	0xFE1
  1580                           
  1581                           ; 0 bytes @ 0x5F
  1582 ;;
  1583 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1584 ;;
  1585 ;; *************** function _main *****************
  1586 ;; Defined at:
  1587 ;;		line 131 in file "main.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;  fs             42  101[BANK0 ] struct .
  1592 ;;  br              2   98[BANK0 ] unsigned short 
  1593 ;;  FResult         1  100[BANK0 ] enum E4539
  1594 ;; Return value:  Size  Location     Type
  1595 ;;		None               void
  1596 ;; Registers used:
  1597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0
  1604 ;;      Locals:         0      45       0       0       0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1606 ;;      Totals:         0      45       0       0       0       0       0       0       0
  1607 ;;Total ram usage:       45 bytes
  1608 ;; Hardware stack levels required when called:   10
  1609 ;; This function calls:
  1610 ;;		_OpenUART
  1611 ;;		_WriteUART
  1612 ;;		_pf_mount
  1613 ;;		_pf_open
  1614 ;;		_pf_read
  1615 ;;		_pf_write
  1616 ;;		_proceed
  1617 ;;		_putsUART
  1618 ;;		_readover
  1619 ;;		_soft_hard_init
  1620 ;; This function is called by:
  1621 ;;		Startup code after reset
  1622 ;; This function uses a non-reentrant model
  1623 ;;
  1624                           
  1625                           	psect	text0
  1626  005E78                     __ptext0:
  1627                           	opt stack 0
  1628  005E78                     _main:
  1629                           	opt stack 20
  1630                           
  1631                           ;main.c: 133: FRESULT FResult;
  1632                           ;main.c: 134: FATFS fs;
  1633                           ;main.c: 135: WORD br;
  1634                           ;main.c: 136: soft_hard_init();
  1635                           
  1636                           ;incstack = 0
  1637  005E78  EC4E  F027         	call	_soft_hard_init	;wreg free
  1638                           
  1639                           ;main.c: 137: OpenUART();
  1640  005E7C  EC6A  F026         	call	_OpenUART	;wreg free
  1641                           
  1642                           ;main.c: 141: putsUART("\r\nAttempting to mount file system.\r\n");
  1643  005E80  0E7B               	movlw	high STR_2
  1644  005E82  6E06               	movwf	putsUART@data+1,c
  1645  005E84  0E5D               	movlw	low STR_2
  1646  005E86  6E05               	movwf	putsUART@data,c
  1647  005E88  ECC4  F027         	call	_putsUART	;wreg free
  1648                           
  1649                           ;main.c: 142: proceed();
  1650  005E8C  EC79  F026         	call	_proceed	;wreg free
  1651                           
  1652                           ;main.c: 143: if( (FResult = pf_mount(&fs)) == FR_OK )
  1653  005E90  0100               	movlb	0	; () banked
  1654  005E92  0E00               	movlw	high main@fs
  1655  005E94  6E2A               	movwf	pf_mount@fs+1,c
  1656  005E96  0100               	movlb	0	; () banked
  1657  005E98  0EC5               	movlw	low main@fs
  1658  005E9A  6E29               	movwf	pf_mount@fs,c
  1659  005E9C  EC89  F039         	call	_pf_mount	;wreg free
  1660  005EA0  0100               	movlb	0	; () banked
  1661  005EA2  6FC4               	movwf	main@FResult& (0+255),b
  1662  005EA4  0100               	movlb	0	; () banked
  1663  005EA6  67C4               	tstfsz	main@FResult& (0+255),b
  1664  005EA8  D0AF               	goto	l4346
  1665                           
  1666                           ; BSR set to: 0
  1667                           ;main.c: 144: {
  1668                           ;main.c: 145: putsUART("\r\n\r\nAttempting to open file ");
  1669  005EAA  0E7C               	movlw	high STR_3
  1670  005EAC  6E06               	movwf	putsUART@data+1,c
  1671  005EAE  0E48               	movlw	low STR_3
  1672  005EB0  6E05               	movwf	putsUART@data,c
  1673  005EB2  ECC4  F027         	call	_putsUART	;wreg free
  1674                           
  1675                           ;main.c: 146: putsUART(fileName);
  1676  005EB6  0101               	movlb	1	; () banked
  1677  005EB8  0E01               	movlw	high _fileName
  1678  005EBA  6E06               	movwf	putsUART@data+1,c
  1679  005EBC  0101               	movlb	1	; () banked
  1680  005EBE  0E64               	movlw	low _fileName
  1681  005EC0  6E05               	movwf	putsUART@data,c
  1682  005EC2  ECC4  F027         	call	_putsUART	;wreg free
  1683                           
  1684                           ;main.c: 147: putsUART(".\r\n");
  1685  005EC6  0E7B               	movlw	high (STR_23+34)
  1686  005EC8  6E06               	movwf	putsUART@data+1,c
  1687  005ECA  0E59               	movlw	low (STR_23+34)
  1688  005ECC  6E05               	movwf	putsUART@data,c
  1689  005ECE  ECC4  F027         	call	_putsUART	;wreg free
  1690                           
  1691                           ;main.c: 148: putsUART("OPENING THE FILE");
  1692  005ED2  0E7C               	movlw	high STR_5
  1693  005ED4  6E06               	movwf	putsUART@data+1,c
  1694  005ED6  0EBF               	movlw	low STR_5
  1695  005ED8  6E05               	movwf	putsUART@data,c
  1696  005EDA  ECC4  F027         	call	_putsUART	;wreg free
  1697                           
  1698                           ;main.c: 150: FResult = pf_open("check.txt" );
  1699  005EDE  0E7C               	movlw	high STR_1
  1700  005EE0  0100               	movlb	0	; () banked
  1701  005EE2  6F6C               	movwf	(pf_open@path+1)& (0+255),b
  1702  005EE4  0EE5               	movlw	low STR_1
  1703  005EE6  0100               	movlb	0	; () banked
  1704  005EE8  6F6B               	movwf	pf_open@path& (0+255),b
  1705  005EEA  EC42  F02E         	call	_pf_open	;wreg free
  1706  005EEE  0100               	movlb	0	; () banked
  1707  005EF0  6FC4               	movwf	main@FResult& (0+255),b
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 152: if( FResult == FR_OK )
  1711  005EF2  0100               	movlb	0	; () banked
  1712  005EF4  67C4               	tstfsz	main@FResult& (0+255),b
  1713  005EF6  D076               	goto	l4340
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 153: {
  1717                           ;main.c: 154: putsUART("\r\n\r\nStarting to write the file.\r\n");
  1718  005EF8  0E7B               	movlw	high STR_7
  1719  005EFA  6E06               	movwf	putsUART@data+1,c
  1720  005EFC  0EA7               	movlw	low STR_7
  1721  005EFE  6E05               	movwf	putsUART@data,c
  1722  005F00  ECC4  F027         	call	_putsUART	;wreg free
  1723                           
  1724                           ;main.c: 157: if( (FResult = pf_write("SD_Card", 5, &br)) == FR_OK )
  1725  005F04  0E7C               	movlw	high STR_8
  1726  005F06  6E48               	movwf	pf_write@buff+1,c
  1727  005F08  0EEF               	movlw	low STR_8
  1728  005F0A  6E47               	movwf	pf_write@buff,c
  1729  005F0C  0E00               	movlw	0
  1730  005F0E  6E4A               	movwf	pf_write@btw+1,c
  1731  005F10  0E05               	movlw	5
  1732  005F12  6E49               	movwf	pf_write@btw,c
  1733  005F14  0100               	movlb	0	; () banked
  1734  005F16  0E00               	movlw	high main@br
  1735  005F18  6E4C               	movwf	pf_write@bw+1,c
  1736  005F1A  0100               	movlb	0	; () banked
  1737  005F1C  0EC2               	movlw	low main@br
  1738  005F1E  6E4B               	movwf	pf_write@bw,c
  1739  005F20  ECD8  F036         	call	_pf_write	;wreg free
  1740  005F24  0100               	movlb	0	; () banked
  1741  005F26  6FC4               	movwf	main@FResult& (0+255),b
  1742  005F28  0100               	movlb	0	; () banked
  1743  005F2A  67C4               	tstfsz	main@FResult& (0+255),b
  1744  005F2C  D007               	goto	l4316
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;main.c: 158: {
  1748                           ;main.c: 159: putsUART("\r\nSuccessfully written");
  1749  005F2E  0E7C               	movlw	high STR_9
  1750  005F30  6E06               	movwf	putsUART@data+1,c
  1751  005F32  0E81               	movlw	low STR_9
  1752  005F34  6E05               	movwf	putsUART@data,c
  1753  005F36  ECC4  F027         	call	_putsUART	;wreg free
  1754                           
  1755                           ;main.c: 160: }
  1756  005F3A  D012               	goto	l4322
  1757  005F3C                     l4316:
  1758                           
  1759                           ;main.c: 161: else
  1760                           ;main.c: 162: {
  1761                           ;main.c: 163: putsUART("\r\nError trying to write to file; ");
  1762  005F3C  0E7B               	movlw	high STR_10
  1763  005F3E  6E06               	movwf	putsUART@data+1,c
  1764  005F40  0EC9               	movlw	low STR_10
  1765  005F42  6E05               	movwf	putsUART@data,c
  1766  005F44  ECC4  F027         	call	_putsUART	;wreg free
  1767                           
  1768                           ;main.c: 164: WriteUART(FResult + 0x30);
  1769  005F48  0100               	movlb	0	; () banked
  1770  005F4A  51C4               	movf	main@FResult& (0+255),w,b
  1771  005F4C  0F30               	addlw	48
  1772  005F4E  EC12  F027         	call	_WriteUART
  1773                           
  1774                           ;main.c: 165: putsUART(".\r\n");
  1775  005F52  0E7B               	movlw	high (STR_23+34)
  1776  005F54  6E06               	movwf	putsUART@data+1,c
  1777  005F56  0E59               	movlw	low (STR_23+34)
  1778  005F58  6E05               	movwf	putsUART@data,c
  1779  005F5A  ECC4  F027         	call	_putsUART	;wreg free
  1780  005F5E                     l368:
  1781  005F5E  D7FF               	goto	l368
  1782  005F60                     l4322:
  1783                           
  1784                           ;main.c: 168: }
  1785                           ;main.c: 170: putsUART("\r\n\r\nStarting to read the file.\r\n");
  1786  005F60  0E7B               	movlw	high STR_12
  1787  005F62  6E06               	movwf	putsUART@data+1,c
  1788  005F64  0EEB               	movlw	low STR_12
  1789  005F66  6E05               	movwf	putsUART@data,c
  1790  005F68  ECC4  F027         	call	_putsUART	;wreg free
  1791                           
  1792                           ;main.c: 174: {
  1793                           ;main.c: 175: readover(1);
  1794                           
  1795                           ;main.c: 173: do
  1796  005F6C  0E00               	movlw	0
  1797  005F6E  6E02               	movwf	readover@a+1,c
  1798  005F70  0E01               	movlw	1
  1799  005F72  6E01               	movwf	readover@a,c
  1800  005F74  EC6F  F026         	call	_readover	;wreg free
  1801                           
  1802                           ;main.c: 177: if( (FResult = pf_read(data_buffer_32, 31, &br)) == FR_OK )
  1803  005F78  0101               	movlb	1	; () banked
  1804  005F7A  0E01               	movlw	high _data_buffer_32
  1805  005F7C  6E48               	movwf	pf_read@buff+1,c
  1806  005F7E  0101               	movlb	1	; () banked
  1807  005F80  0E44               	movlw	low _data_buffer_32
  1808  005F82  6E47               	movwf	pf_read@buff,c
  1809  005F84  0E00               	movlw	0
  1810  005F86  6E4A               	movwf	pf_read@btr+1,c
  1811  005F88  0E1F               	movlw	31
  1812  005F8A  6E49               	movwf	pf_read@btr,c
  1813  005F8C  0100               	movlb	0	; () banked
  1814  005F8E  0E00               	movlw	high main@br
  1815  005F90  6E4C               	movwf	pf_read@br+1,c
  1816  005F92  0100               	movlb	0	; () banked
  1817  005F94  0EC2               	movlw	low main@br
  1818  005F96  6E4B               	movwf	pf_read@br,c
  1819  005F98  ECAA  F034         	call	_pf_read	;wreg free
  1820  005F9C  0100               	movlb	0	; () banked
  1821  005F9E  6FC4               	movwf	main@FResult& (0+255),b
  1822  005FA0  0100               	movlb	0	; () banked
  1823  005FA2  67C4               	tstfsz	main@FResult& (0+255),b
  1824  005FA4  D00D               	goto	l4332
  1825                           
  1826                           ; BSR set to: 0
  1827                           ;main.c: 178: {
  1828                           ;main.c: 180: data_buffer_32[br] = 0;
  1829  005FA6  0101               	movlb	1	; () banked
  1830  005FA8  0E44               	movlw	low _data_buffer_32
  1831  005FAA  0100               	movlb	0	; () banked
  1832  005FAC  25C2               	addwf	main@br& (0+255),w,b
  1833  005FAE  6ED9               	movwf	fsr2l,c
  1834  005FB0  0101               	movlb	1	; () banked
  1835  005FB2  0E01               	movlw	high _data_buffer_32
  1836  005FB4  0100               	movlb	0	; () banked
  1837  005FB6  21C3               	addwfc	(main@br+1)& (0+255),w,b
  1838  005FB8  6EDA               	movwf	fsr2h,c
  1839  005FBA  0E00               	movlw	0
  1840  005FBC  6EDF               	movwf	indf2,c
  1841                           
  1842                           ;main.c: 181: break;
  1843  005FBE  D036               	goto	l4352
  1844  005FC0                     l4332:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 184: else
  1848                           ;main.c: 185: {
  1849                           ;main.c: 186: putsUART("\r\nError trying to read file; ");
  1850  005FC0  0E7C               	movlw	high STR_13
  1851  005FC2  6E06               	movwf	putsUART@data+1,c
  1852  005FC4  0E0C               	movlw	low STR_13
  1853  005FC6  6E05               	movwf	putsUART@data,c
  1854  005FC8  ECC4  F027         	call	_putsUART	;wreg free
  1855                           
  1856                           ;main.c: 187: WriteUART(FResult + 0x30);
  1857  005FCC  0100               	movlb	0	; () banked
  1858  005FCE  51C4               	movf	main@FResult& (0+255),w,b
  1859  005FD0  0F30               	addlw	48
  1860  005FD2  EC12  F027         	call	_WriteUART
  1861                           
  1862                           ;main.c: 188: putsUART(".\r\n");
  1863  005FD6  0E7B               	movlw	high (STR_23+34)
  1864  005FD8  6E06               	movwf	putsUART@data+1,c
  1865  005FDA  0E59               	movlw	low (STR_23+34)
  1866  005FDC  6E05               	movwf	putsUART@data,c
  1867  005FDE  ECC4  F027         	call	_putsUART	;wreg free
  1868  005FE2                     l375:
  1869  005FE2  D7FF               	goto	l375
  1870  005FE4                     l4340:
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 194: else
  1874                           ;main.c: 195: {
  1875                           ;main.c: 196: putsUART("\r\nError trying to open file; ");
  1876  005FE4  0E7C               	movlw	high STR_15
  1877  005FE6  6E06               	movwf	putsUART@data+1,c
  1878  005FE8  0E2A               	movlw	low STR_15
  1879  005FEA  6E05               	movwf	putsUART@data,c
  1880  005FEC  ECC4  F027         	call	_putsUART	;wreg free
  1881                           
  1882                           ;main.c: 197: WriteUART(FResult + 0x30);
  1883  005FF0  0100               	movlb	0	; () banked
  1884  005FF2  51C4               	movf	main@FResult& (0+255),w,b
  1885  005FF4  0F30               	addlw	48
  1886  005FF6  EC12  F027         	call	_WriteUART
  1887                           
  1888                           ;main.c: 198: putsUART(".\r\n");
  1889  005FFA  0E7B               	movlw	high (STR_23+34)
  1890  005FFC  6E06               	movwf	putsUART@data+1,c
  1891  005FFE  0E59               	movlw	low (STR_23+34)
  1892  006000  6E05               	movwf	putsUART@data,c
  1893  006002  ECC4  F027         	call	_putsUART	;wreg free
  1894  006006                     l379:
  1895  006006  D7FF               	goto	l379
  1896  006008                     l4346:
  1897                           
  1898                           ;main.c: 203: else
  1899                           ;main.c: 204: {
  1900                           ;main.c: 205: putsUART("\r\nError trying to mount filesystem; ");
  1901  006008  0E7B               	movlw	high STR_17
  1902  00600A  6E06               	movwf	putsUART@data+1,c
  1903  00600C  0E82               	movlw	low STR_17
  1904  00600E  6E05               	movwf	putsUART@data,c
  1905  006010  ECC4  F027         	call	_putsUART	;wreg free
  1906                           
  1907                           ;main.c: 206: WriteUART(FResult + 0x30);
  1908  006014  0100               	movlb	0	; () banked
  1909  006016  51C4               	movf	main@FResult& (0+255),w,b
  1910  006018  0F30               	addlw	48
  1911  00601A  EC12  F027         	call	_WriteUART
  1912                           
  1913                           ;main.c: 207: putsUART(".\r\n");
  1914  00601E  0E7B               	movlw	high (STR_23+34)
  1915  006020  6E06               	movwf	putsUART@data+1,c
  1916  006022  0E59               	movlw	low (STR_23+34)
  1917  006024  6E05               	movwf	putsUART@data,c
  1918  006026  ECC4  F027         	call	_putsUART	;wreg free
  1919  00602A                     l383:
  1920  00602A  D7FF               	goto	l383
  1921  00602C                     l4352:
  1922                           
  1923                           ;main.c: 210: }
  1924                           ;main.c: 212: putsUART("\r\n\r\n");
  1925  00602C  0E7C               	movlw	high STR_19
  1926  00602E  6E06               	movwf	putsUART@data+1,c
  1927  006030  0EF7               	movlw	low STR_19
  1928  006032  6E05               	movwf	putsUART@data,c
  1929  006034  ECC4  F027         	call	_putsUART	;wreg free
  1930                           
  1931                           ;main.c: 218: putsUART("\r\nAttempting to UNmount file system.\r\n");
  1932  006038  0E7A               	movlw	high STR_20
  1933  00603A  6E06               	movwf	putsUART@data+1,c
  1934  00603C  0EE9               	movlw	low STR_20
  1935  00603E  6E05               	movwf	putsUART@data,c
  1936  006040  ECC4  F027         	call	_putsUART	;wreg free
  1937                           
  1938                           ;main.c: 222: if( FResult != FR_OK )
  1939  006044  0100               	movlb	0	; () banked
  1940  006046  51C4               	movf	main@FResult& (0+255),w,b
  1941  006048  B4D8               	btfsc	status,2,c
  1942  00604A  D012               	goto	l4362
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 223: {
  1946                           ;main.c: 224: putsUART("\r\nError trying to UNmount filesystem; ");
  1947  00604C  0E7B               	movlw	high STR_21
  1948  00604E  6E06               	movwf	putsUART@data+1,c
  1949  006050  0E10               	movlw	low STR_21
  1950  006052  6E05               	movwf	putsUART@data,c
  1951  006054  ECC4  F027         	call	_putsUART	;wreg free
  1952                           
  1953                           ;main.c: 225: WriteUART(FResult + 0x30);
  1954  006058  0100               	movlb	0	; () banked
  1955  00605A  51C4               	movf	main@FResult& (0+255),w,b
  1956  00605C  0F30               	addlw	48
  1957  00605E  EC12  F027         	call	_WriteUART
  1958                           
  1959                           ;main.c: 226: putsUART(".\r\n");
  1960  006062  0E7B               	movlw	high (STR_23+34)
  1961  006064  6E06               	movwf	putsUART@data+1,c
  1962  006066  0E59               	movlw	low (STR_23+34)
  1963  006068  6E05               	movwf	putsUART@data,c
  1964  00606A  ECC4  F027         	call	_putsUART	;wreg free
  1965  00606E                     l387:
  1966  00606E  D7FF               	goto	l387
  1967  006070                     l4362:
  1968                           
  1969                           ;main.c: 229: }
  1970                           ;main.c: 231: putsUART("\r\File system succesfully unmounted.\r\n");
  1971  006070  0E7B               	movlw	high STR_23
  1972  006072  6E06               	movwf	putsUART@data+1,c
  1973  006074  0E37               	movlw	low STR_23
  1974  006076  6E05               	movwf	putsUART@data,c
  1975  006078  ECC4  F027         	call	_putsUART	;wreg free
  1976  00607C                     l390:
  1977  00607C  D7FF               	goto	l390
  1978  00607E                     __end_of_main:
  1979                           	opt stack 0
  1980                           tblptru	equ	0xFF8
  1981                           tblptrh	equ	0xFF7
  1982                           tblptrl	equ	0xFF6
  1983                           tablat	equ	0xFF5
  1984                           postinc0	equ	0xFEE
  1985                           wreg	equ	0xFE8
  1986                           postdec1	equ	0xFE5
  1987                           fsr1h	equ	0xFE2
  1988                           fsr1l	equ	0xFE1
  1989                           indf2	equ	0xFDF
  1990                           fsr2h	equ	0xFDA
  1991                           fsr2l	equ	0xFD9
  1992                           status	equ	0xFD8
  1993                           
  1994 ;; *************** function _soft_hard_init *****************
  1995 ;; Defined at:
  1996 ;;		line 35 in file "main.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;		None
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  i               2    3[COMRAM] int 
  2001 ;;  smp_phase       1    7[COMRAM] unsigned char 
  2002 ;;  bus_mode        1    6[COMRAM] unsigned char 
  2003 ;;  sync_mode       1    5[COMRAM] unsigned char 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;		None               void
  2006 ;; Registers used:
  2007 ;;		wreg, status,2, status,0, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2013 ;;      Params:         0       0       0       0       0       0       0       0       0
  2014 ;;      Locals:         5       0       0       0       0       0       0       0       0
  2015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2016 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2017 ;;Total ram usage:        5 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    1
  2020 ;; This function calls:
  2021 ;;		_OpenSPI
  2022 ;; This function is called by:
  2023 ;;		_main
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text1
  2028  004E9C                     __ptext1:
  2029                           	opt stack 0
  2030  004E9C                     _soft_hard_init:
  2031                           	opt stack 28
  2032                           
  2033                           ;main.c: 37: unsigned char sync_mode=0;
  2034                           
  2035                           ;incstack = 0
  2036  004E9C  0E00               	movlw	0
  2037  004E9E  6E06               	movwf	soft_hard_init@sync_mode,c
  2038                           
  2039                           ;main.c: 38: unsigned char bus_mode=0;
  2040  004EA0  0E00               	movlw	0
  2041  004EA2  6E07               	movwf	soft_hard_init@bus_mode,c
  2042                           
  2043                           ;main.c: 39: unsigned char smp_phase=0;
  2044  004EA4  0E00               	movlw	0
  2045  004EA6  6E08               	movwf	soft_hard_init@smp_phase,c
  2046                           
  2047                           ;main.c: 40: int i = 0;
  2048  004EA8  0E00               	movlw	0
  2049  004EAA  6E05               	movwf	soft_hard_init@i+1,c
  2050  004EAC  0E00               	movlw	0
  2051  004EAE  6E04               	movwf	soft_hard_init@i,c
  2052                           
  2053                           ;main.c: 42: (SSPCON1 &=0xDF);
  2054  004EB0  9AC6               	bcf	4038,5,c	;volatile
  2055                           
  2056                           ;main.c: 44: ADCON1 = 0X0F;
  2057  004EB2  0E0F               	movlw	15
  2058  004EB4  6EC1               	movwf	4033,c	;volatile
  2059                           
  2060                           ;main.c: 45: CMCON |= 7;
  2061  004EB6  0E07               	movlw	7
  2062  004EB8  12B4               	iorwf	4020,f,c	;volatile
  2063                           
  2064                           ;main.c: 47: TRISA5 = 0;
  2065  004EBA  9A92               	bcf	3986,5,c	;volatile
  2066                           
  2067                           ;main.c: 48: LATA5 = 0;
  2068  004EBC  9A89               	bcf	3977,5,c	;volatile
  2069                           
  2070                           ;main.c: 49: TRISB4 = 0;
  2071  004EBE  9893               	bcf	3987,4,c	;volatile
  2072                           
  2073                           ;main.c: 51: sync_mode = 0b00000010;
  2074  004EC0  0E02               	movlw	2
  2075  004EC2  6E06               	movwf	soft_hard_init@sync_mode,c
  2076                           
  2077                           ;main.c: 52: bus_mode = 0b00000000;
  2078  004EC4  0E00               	movlw	0
  2079  004EC6  6E07               	movwf	soft_hard_init@bus_mode,c
  2080                           
  2081                           ;main.c: 53: smp_phase = 0b00000000;
  2082  004EC8  0E00               	movlw	0
  2083  004ECA  6E08               	movwf	soft_hard_init@smp_phase,c
  2084                           
  2085                           ;main.c: 54: OpenSPI(sync_mode, bus_mode, smp_phase);
  2086  004ECC  C007  F001         	movff	soft_hard_init@bus_mode,OpenSPI@bus_mode
  2087  004ED0  C008  F002         	movff	soft_hard_init@smp_phase,OpenSPI@smp_phase
  2088  004ED4  5006               	movf	soft_hard_init@sync_mode,w,c
  2089  004ED6  EC99  F027         	call	_OpenSPI
  2090  004EDA  0012               	return	
  2091  004EDC                     __end_of_soft_hard_init:
  2092                           	opt stack 0
  2093                           tblptru	equ	0xFF8
  2094                           tblptrh	equ	0xFF7
  2095                           tblptrl	equ	0xFF6
  2096                           tablat	equ	0xFF5
  2097                           postinc0	equ	0xFEE
  2098                           wreg	equ	0xFE8
  2099                           postdec1	equ	0xFE5
  2100                           fsr1h	equ	0xFE2
  2101                           fsr1l	equ	0xFE1
  2102                           indf2	equ	0xFDF
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _OpenSPI *****************
  2108 ;; Defined at:
  2109 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi_open.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;  sync_mode       1    wreg     unsigned char 
  2112 ;;  bus_mode        1    0[COMRAM] unsigned char 
  2113 ;;  smp_phase       1    1[COMRAM] unsigned char 
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;  sync_mode       1    2[COMRAM] unsigned char 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;		None               void
  2118 ;; Registers used:
  2119 ;;		wreg, status,2, status,0
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2125 ;;      Params:         2       0       0       0       0       0       0       0       0
  2126 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2127 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2128 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2129 ;;Total ram usage:        3 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; This function calls:
  2132 ;;		Nothing
  2133 ;; This function is called by:
  2134 ;;		_soft_hard_init
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text2
  2139  004F32                     __ptext2:
  2140                           	opt stack 0
  2141  004F32                     _OpenSPI:
  2142                           	opt stack 28
  2143                           
  2144                           ;incstack = 0
  2145                           ;OpenSPI@sync_mode stored from wreg
  2146  004F32  6E03               	movwf	OpenSPI@sync_mode,c
  2147  004F34  0E3F               	movlw	63
  2148  004F36  16C7               	andwf	4039,f,c	;volatile
  2149  004F38  0E00               	movlw	0
  2150  004F3A  6EC6               	movwf	4038,c	;volatile
  2151  004F3C  5003               	movf	OpenSPI@sync_mode,w,c
  2152  004F3E  12C6               	iorwf	4038,f,c	;volatile
  2153  004F40  5002               	movf	OpenSPI@smp_phase,w,c
  2154  004F42  12C7               	iorwf	4039,f,c	;volatile
  2155  004F44  D005               	goto	l3674
  2156  004F46                     l618:
  2157  004F46  8CC7               	bsf	4039,6,c	;volatile
  2158  004F48  D013               	goto	l3678
  2159  004F4A                     l620:
  2160  004F4A  8CC7               	bsf	4039,6,c	;volatile
  2161  004F4C                     l621:
  2162  004F4C  88C6               	bsf	4038,4,c	;volatile
  2163  004F4E  D010               	goto	l3678
  2164  004F50                     l3674:
  2165  004F50  5001               	movf	OpenSPI@bus_mode,w,c
  2166                           
  2167                           ; Switch size 1, requested type "space"
  2168                           ; Number of cases is 3, Range of values is 0 to 3
  2169                           ; switch strategies available:
  2170                           ; Name         Instructions Cycles
  2171                           ; simple_byte           10     6 (average)
  2172                           ;	Chosen strategy is simple_byte
  2173  004F52  0A00               	xorlw	0	; case 0
  2174  004F54  B4D8               	btfsc	status,2,c
  2175  004F56  D7F7               	goto	l618
  2176  004F58  0A02               	xorlw	2	; case 2
  2177  004F5A  B4D8               	btfsc	status,2,c
  2178  004F5C  D7F6               	goto	l620
  2179  004F5E  0A01               	xorlw	1	; case 3
  2180  004F60  B4D8               	btfsc	status,2,c
  2181  004F62  D7F4               	goto	l621
  2182  004F64  D005               	goto	l3678
  2183  004F66                     l624:
  2184  004F66  8A92               	bsf	3986,5,c	;volatile
  2185  004F68                     l626:
  2186  004F68  8293               	bsf	3987,1,c	;volatile
  2187  004F6A  D00A               	goto	l625
  2188  004F6C                     l627:
  2189  004F6C  9293               	bcf	3987,1,c	;volatile
  2190  004F6E  D008               	goto	l625
  2191  004F70                     l3678:
  2192  004F70  5003               	movf	OpenSPI@sync_mode,w,c
  2193                           
  2194                           ; Switch size 1, requested type "space"
  2195                           ; Number of cases is 2, Range of values is 4 to 5
  2196                           ; switch strategies available:
  2197                           ; Name         Instructions Cycles
  2198                           ; simple_byte            7     4 (average)
  2199                           ;	Chosen strategy is simple_byte
  2200  004F72  0A04               	xorlw	4	; case 4
  2201  004F74  B4D8               	btfsc	status,2,c
  2202  004F76  D7F7               	goto	l624
  2203  004F78  0A01               	xorlw	1	; case 5
  2204  004F7A  B4D8               	btfsc	status,2,c
  2205  004F7C  D7F5               	goto	l626
  2206  004F7E  D7F6               	goto	l627
  2207  004F80                     l625:
  2208  004F80  8093               	bsf	3987,0,c	;volatile
  2209  004F82  9E94               	bcf	3988,7,c	;volatile
  2210  004F84  8AC6               	bsf	4038,5,c	;volatile
  2211  004F86  0012               	return	
  2212  004F88                     __end_of_OpenSPI:
  2213                           	opt stack 0
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           postinc0	equ	0xFEE
  2219                           wreg	equ	0xFE8
  2220                           postdec1	equ	0xFE5
  2221                           fsr1h	equ	0xFE2
  2222                           fsr1l	equ	0xFE1
  2223                           indf2	equ	0xFDF
  2224                           fsr2h	equ	0xFDA
  2225                           fsr2l	equ	0xFD9
  2226                           status	equ	0xFD8
  2227                           
  2228 ;; *************** function _readover *****************
  2229 ;; Defined at:
  2230 ;;		line 22 in file "diskio.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  a               2    0[COMRAM] int 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;		None
  2235 ;; Return value:  Size  Location     Type
  2236 ;;		None               void
  2237 ;; Registers used:
  2238 ;;		None
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2244 ;;      Params:         2       0       0       0       0       0       0       0       0
  2245 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2247 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2248 ;;Total ram usage:        2 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text3
  2258  004CDE                     __ptext3:
  2259                           	opt stack 0
  2260  004CDE                     _readover:
  2261                           	opt stack 29
  2262                           
  2263                           ;diskio.c: 24: flag = a;
  2264                           
  2265                           ;incstack = 0
  2266  004CDE  C001  F0F5         	movff	readover@a,_flag
  2267  004CE2  C002  F0F6         	movff	readover@a+1,_flag+1
  2268  004CE6  0012               	return	
  2269  004CE8                     __end_of_readover:
  2270                           	opt stack 0
  2271                           tblptru	equ	0xFF8
  2272                           tblptrh	equ	0xFF7
  2273                           tblptrl	equ	0xFF6
  2274                           tablat	equ	0xFF5
  2275                           postinc0	equ	0xFEE
  2276                           wreg	equ	0xFE8
  2277                           postdec1	equ	0xFE5
  2278                           fsr1h	equ	0xFE2
  2279                           fsr1l	equ	0xFE1
  2280                           indf2	equ	0xFDF
  2281                           fsr2h	equ	0xFDA
  2282                           fsr2l	equ	0xFD9
  2283                           status	equ	0xFD8
  2284                           
  2285 ;; *************** function _pf_write *****************
  2286 ;; Defined at:
  2287 ;;		line 919 in file "pff.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  buff            2   70[COMRAM] PTR const void 
  2290 ;;		 -> STR_8(8), 
  2291 ;;  btw             2   72[COMRAM] unsigned int 
  2292 ;;  bw              2   74[COMRAM] PTR unsigned int 
  2293 ;;		 -> main@br(2), 
  2294 ;; Auto vars:     Size  Location     Type
  2295 ;;  clst            4   10[BANK0 ] unsigned long 
  2296 ;;  remain          4    6[BANK0 ] unsigned long 
  2297 ;;  sect            4    2[BANK0 ] unsigned long 
  2298 ;;  fs              2   17[BANK0 ] PTR struct .
  2299 ;;		 -> main@fs(42), NULL(0), 
  2300 ;;  wcnt            2   15[BANK0 ] unsigned int 
  2301 ;;  p               2    0[BANK0 ] PTR const unsigned char 
  2302 ;;		 -> STR_8(8), 
  2303 ;;  cs              1   14[BANK0 ] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      enum E43
  2306 ;; Registers used:
  2307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2313 ;;      Params:         6       0       0       0       0       0       0       0       0
  2314 ;;      Locals:         0      19       0       0       0       0       0       0       0
  2315 ;;      Temps:          8       0       0       0       0       0       0       0       0
  2316 ;;      Totals:        14      19       0       0       0       0       0       0       0
  2317 ;;Total ram usage:       33 bytes
  2318 ;; Hardware stack levels used:    1
  2319 ;; Hardware stack levels required when called:    6
  2320 ;; This function calls:
  2321 ;;		_clust2sect
  2322 ;;		_disk_writep
  2323 ;;		_get_fat
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text4
  2330  006DB0                     __ptext4:
  2331                           	opt stack 0
  2332  006DB0                     _pf_write:
  2333                           	opt stack 23
  2334                           
  2335                           ;pff.c: 925: DWORD clst;
  2336                           ;pff.c: 926: DWORD sect, remain;
  2337                           ;pff.c: 927: const BYTE *p = buff;
  2338                           
  2339                           ;incstack = 0
  2340  006DB0  0100               	movlb	0	; () banked
  2341  006DB2  C048  F061         	movff	pf_write@buff+1,pf_write@p+1
  2342  006DB6  0100               	movlb	0	; () banked
  2343  006DB8  C047  F060         	movff	pf_write@buff,pf_write@p
  2344                           
  2345                           ;pff.c: 928: BYTE cs;
  2346                           ;pff.c: 929: UINT wcnt;
  2347                           ;pff.c: 930: FATFS *fs = FatFs;
  2348  006DBC  0100               	movlb	0	; () banked
  2349  006DBE  C0F4  F072         	movff	_FatFs+1,pf_write@fs+1
  2350  006DC2  0100               	movlb	0	; () banked
  2351  006DC4  C0F3  F071         	movff	_FatFs,pf_write@fs
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;pff.c: 933: *bw = 0;
  2355  006DC8  C04B  FFD9         	movff	pf_write@bw,fsr2l
  2356  006DCC  C04C  FFDA         	movff	pf_write@bw+1,fsr2h
  2357  006DD0  0E00               	movlw	0
  2358  006DD2  6EDE               	movwf	postinc2,c
  2359  006DD4  0E00               	movlw	0
  2360  006DD6  6EDD               	movwf	postdec2,c
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;pff.c: 934: if (!fs) return FR_NOT_ENABLED;
  2364  006DD8  0100               	movlb	0	; () banked
  2365  006DDA  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2366  006DDC  1171               	iorwf	pf_write@fs& (0+255),w,b
  2367  006DDE  A4D8               	btfss	status,2,c
  2368  006DE0  D002               	goto	l4026
  2369                           
  2370                           ; BSR set to: 0
  2371  006DE2  0E05               	movlw	5
  2372  006DE4  D295               	goto	l209
  2373  006DE6                     l4026:
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;pff.c: 935: if (!(fs->flag & 0x01))
  2377  006DE6  0100               	movlb	0	; () banked
  2378  006DE8  EE20 F001          	lfsr	2,1
  2379  006DEC  0100               	movlb	0	; () banked
  2380  006DEE  5171               	movf	pf_write@fs& (0+255),w,b
  2381  006DF0  26D9               	addwf	fsr2l,f,c
  2382  006DF2  0100               	movlb	0	; () banked
  2383  006DF4  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2384  006DF6  22DA               	addwfc	fsr2h,f,c
  2385  006DF8  50DF               	movf	indf2,w,c
  2386  006DFA  6E4D               	movwf	??_pf_write& (0+255),c
  2387  006DFC  B04D               	btfsc	??_pf_write,0,c
  2388  006DFE  D002               	goto	l4032
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;pff.c: 936: return FR_NOT_OPENED;
  2392  006E00  0E04               	movlw	4
  2393  006E02  D286               	goto	l209
  2394  006E04                     l4032:
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;pff.c: 938: if (!btw) {
  2398  006E04  504A               	movf	pf_write@btw+1,w,c
  2399  006E06  1049               	iorwf	pf_write@btw,w,c
  2400  006E08  A4D8               	btfss	status,2,c
  2401  006E0A  D02C               	goto	l4052
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;pff.c: 939: if ((fs->flag & 0x40) && disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_E
      +                          RR;};
  2405  006E0C  0100               	movlb	0	; () banked
  2406  006E0E  EE20 F001          	lfsr	2,1
  2407  006E12  0100               	movlb	0	; () banked
  2408  006E14  5171               	movf	pf_write@fs& (0+255),w,b
  2409  006E16  26D9               	addwf	fsr2l,f,c
  2410  006E18  0100               	movlb	0	; () banked
  2411  006E1A  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2412  006E1C  22DA               	addwfc	fsr2h,f,c
  2413  006E1E  50DF               	movf	indf2,w,c
  2414  006E20  6E4D               	movwf	??_pf_write& (0+255),c
  2415  006E22  AC4D               	btfss	??_pf_write,6,c
  2416  006E24  D013               	goto	l4044
  2417                           
  2418                           ; BSR set to: 0
  2419  006E26  0E00               	movlw	0
  2420  006E28  6E0B               	movwf	disk_writep@wr+2,c
  2421  006E2A  0E00               	movlw	0
  2422  006E2C  6E0A               	movwf	disk_writep@wr+1,c
  2423  006E2E  0E00               	movlw	0
  2424  006E30  6E09               	movwf	disk_writep@wr,c
  2425  006E32  0E00               	movlw	0
  2426  006E34  6E0C               	movwf	disk_writep@sc,c
  2427  006E36  0E00               	movlw	0
  2428  006E38  6E0D               	movwf	disk_writep@sc+1,c
  2429  006E3A  0E00               	movlw	0
  2430  006E3C  6E0E               	movwf	disk_writep@sc+2,c
  2431  006E3E  0E00               	movlw	0
  2432  006E40  6E0F               	movwf	disk_writep@sc+3,c
  2433  006E42  EC26  F02A         	call	_disk_writep	;wreg free
  2434  006E46  0900               	iorlw	0
  2435  006E48  A4D8               	btfss	status,2,c
  2436  006E4A  D245               	goto	u4150
  2437  006E4C                     l4044:
  2438                           
  2439                           ;pff.c: 940: fs->flag &= ~0x40;
  2440  006E4C  0100               	movlb	0	; () banked
  2441  006E4E  EE20 F001          	lfsr	2,1
  2442  006E52  0100               	movlb	0	; () banked
  2443  006E54  5171               	movf	pf_write@fs& (0+255),w,b
  2444  006E56  26D9               	addwf	fsr2l,f,c
  2445  006E58  0100               	movlb	0	; () banked
  2446  006E5A  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2447  006E5C  22DA               	addwfc	fsr2h,f,c
  2448  006E5E  0EBF               	movlw	191
  2449  006E60  16DF               	andwf	indf2,f,c
  2450  006E62  D255               	goto	l4138
  2451  006E64                     l4052:
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;pff.c: 943: if (!(fs->flag & 0x40))
  2455  006E64  0100               	movlb	0	; () banked
  2456  006E66  EE20 F001          	lfsr	2,1
  2457  006E6A  0100               	movlb	0	; () banked
  2458  006E6C  5171               	movf	pf_write@fs& (0+255),w,b
  2459  006E6E  26D9               	addwf	fsr2l,f,c
  2460  006E70  0100               	movlb	0	; () banked
  2461  006E72  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2462  006E74  22DA               	addwfc	fsr2h,f,c
  2463  006E76  50DF               	movf	indf2,w,c
  2464  006E78  6E4D               	movwf	??_pf_write& (0+255),c
  2465  006E7A  BC4D               	btfsc	??_pf_write,6,c
  2466  006E7C  D013               	goto	l213
  2467                           
  2468                           ; BSR set to: 0
  2469                           ;pff.c: 944: fs->fptr &= 0xFFFFFE00;
  2470  006E7E  0100               	movlb	0	; () banked
  2471  006E80  EE20 F016          	lfsr	2,22
  2472  006E84  0100               	movlb	0	; () banked
  2473  006E86  5171               	movf	pf_write@fs& (0+255),w,b
  2474  006E88  26D9               	addwf	fsr2l,f,c
  2475  006E8A  0100               	movlb	0	; () banked
  2476  006E8C  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2477  006E8E  22DA               	addwfc	fsr2h,f,c
  2478  006E90  0E00               	movlw	0
  2479  006E92  16DE               	andwf	postinc2,f,c
  2480  006E94  0EFE               	movlw	254
  2481  006E96  16DE               	andwf	postinc2,f,c
  2482  006E98  0EFF               	movlw	255
  2483  006E9A  16DE               	andwf	postinc2,f,c
  2484  006E9C  0EFF               	movlw	255
  2485  006E9E  16DD               	andwf	postdec2,f,c
  2486  006EA0  52DD               	movf	postdec2,f,c
  2487  006EA2  52DD               	movf	postdec2,f,c
  2488  006EA4                     l213:
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;pff.c: 945: }
  2492                           ;pff.c: 946: remain = fs->fsize - fs->fptr;
  2493  006EA4  0100               	movlb	0	; () banked
  2494  006EA6  EE20 F01A          	lfsr	2,26
  2495  006EAA  0100               	movlb	0	; () banked
  2496  006EAC  5171               	movf	pf_write@fs& (0+255),w,b
  2497  006EAE  26D9               	addwf	fsr2l,f,c
  2498  006EB0  0100               	movlb	0	; () banked
  2499  006EB2  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2500  006EB4  22DA               	addwfc	fsr2h,f,c
  2501  006EB6  CFDE F04D          	movff	postinc2,??_pf_write
  2502  006EBA  CFDE F04E          	movff	postinc2,??_pf_write+1
  2503  006EBE  CFDE F04F          	movff	postinc2,??_pf_write+2
  2504  006EC2  CFDE F050          	movff	postinc2,??_pf_write+3
  2505  006EC6  0100               	movlb	0	; () banked
  2506  006EC8  EE20 F016          	lfsr	2,22
  2507  006ECC  0100               	movlb	0	; () banked
  2508  006ECE  5171               	movf	pf_write@fs& (0+255),w,b
  2509  006ED0  26D9               	addwf	fsr2l,f,c
  2510  006ED2  0100               	movlb	0	; () banked
  2511  006ED4  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2512  006ED6  22DA               	addwfc	fsr2h,f,c
  2513  006ED8  CFDE F051          	movff	postinc2,??_pf_write+4
  2514  006EDC  CFDE F052          	movff	postinc2,??_pf_write+5
  2515  006EE0  CFDE F053          	movff	postinc2,??_pf_write+6
  2516  006EE4  CFDE F054          	movff	postinc2,??_pf_write+7
  2517  006EE8  1E51               	comf	??_pf_write+4,f,c
  2518  006EEA  1E52               	comf	??_pf_write+5,f,c
  2519  006EEC  1E53               	comf	??_pf_write+6,f,c
  2520  006EEE  1E54               	comf	??_pf_write+7,f,c
  2521  006EF0  2A51               	incf	??_pf_write+4,f,c
  2522  006EF2  0E00               	movlw	0
  2523  006EF4  2252               	addwfc	??_pf_write+5,f,c
  2524  006EF6  2253               	addwfc	??_pf_write+6,f,c
  2525  006EF8  2254               	addwfc	??_pf_write+7,f,c
  2526  006EFA  504D               	movf	??_pf_write,w,c
  2527  006EFC  2451               	addwf	??_pf_write+4,w,c
  2528  006EFE  0100               	movlb	0	; () banked
  2529  006F00  6F66               	movwf	pf_write@remain& (0+255),b
  2530  006F02  504E               	movf	??_pf_write+1,w,c
  2531  006F04  2052               	addwfc	??_pf_write+5,w,c
  2532  006F06  0100               	movlb	0	; () banked
  2533  006F08  6F67               	movwf	(pf_write@remain+1)& (0+255),b
  2534  006F0A  504F               	movf	??_pf_write+2,w,c
  2535  006F0C  2053               	addwfc	??_pf_write+6,w,c
  2536  006F0E  0100               	movlb	0	; () banked
  2537  006F10  6F68               	movwf	(pf_write@remain+2)& (0+255),b
  2538  006F12  5050               	movf	??_pf_write+3,w,c
  2539  006F14  2054               	addwfc	??_pf_write+7,w,c
  2540  006F16  0100               	movlb	0	; () banked
  2541  006F18  6F69               	movwf	(pf_write@remain+3)& (0+255),b
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;pff.c: 947: if (btw > remain) btw = (UINT)remain;
  2545  006F1A  5049               	movf	pf_write@btw,w,c
  2546  006F1C  6E4D               	movwf	??_pf_write& (0+255),c
  2547  006F1E  504A               	movf	pf_write@btw+1,w,c
  2548  006F20  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  2549  006F22  6A4F               	clrf	(??_pf_write+2)& (0+255),c
  2550  006F24  6A50               	clrf	(??_pf_write+3)& (0+255),c
  2551  006F26  504D               	movf	??_pf_write,w,c
  2552  006F28  0100               	movlb	0	; () banked
  2553  006F2A  5D66               	subwf	pf_write@remain& (0+255),w,b
  2554  006F2C  504E               	movf	??_pf_write+1,w,c
  2555  006F2E  0100               	movlb	0	; () banked
  2556  006F30  5967               	subwfb	(pf_write@remain+1)& (0+255),w,b
  2557  006F32  504F               	movf	??_pf_write+2,w,c
  2558  006F34  0100               	movlb	0	; () banked
  2559  006F36  5968               	subwfb	(pf_write@remain+2)& (0+255),w,b
  2560  006F38  5050               	movf	??_pf_write+3,w,c
  2561  006F3A  0100               	movlb	0	; () banked
  2562  006F3C  5969               	subwfb	(pf_write@remain+3)& (0+255),w,b
  2563  006F3E  B0D8               	btfsc	status,0,c
  2564  006F40  D1E2               	goto	l4136
  2565                           
  2566                           ; BSR set to: 0
  2567  006F42  C066  F049         	movff	pf_write@remain,pf_write@btw
  2568  006F46  C067  F04A         	movff	pf_write@remain+1,pf_write@btw+1
  2569  006F4A  D1DD               	goto	l4136
  2570  006F4C                     l4060:
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;pff.c: 950: if ((UINT)fs->fptr % 512 == 0) {
  2574  006F4C  0EFF               	movlw	255
  2575  006F4E  6E4D               	movwf	??_pf_write& (0+255),c
  2576  006F50  0E01               	movlw	1
  2577  006F52  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  2578  006F54  0100               	movlb	0	; () banked
  2579  006F56  EE20 F016          	lfsr	2,22
  2580  006F5A  0100               	movlb	0	; () banked
  2581  006F5C  5171               	movf	pf_write@fs& (0+255),w,b
  2582  006F5E  26D9               	addwf	fsr2l,f,c
  2583  006F60  0100               	movlb	0	; () banked
  2584  006F62  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2585  006F64  22DA               	addwfc	fsr2h,f,c
  2586  006F66  CFDE F04F          	movff	postinc2,??_pf_write+2
  2587  006F6A  CFDD F050          	movff	postdec2,??_pf_write+3
  2588  006F6E  504D               	movf	??_pf_write,w,c
  2589  006F70  164F               	andwf	??_pf_write+2,f,c
  2590  006F72  504E               	movf	??_pf_write+1,w,c
  2591  006F74  1650               	andwf	??_pf_write+3,f,c
  2592  006F76  5050               	movf	??_pf_write+3,w,c
  2593  006F78  104F               	iorwf	??_pf_write+2,w,c
  2594  006F7A  A4D8               	btfss	status,2,c
  2595  006F7C  D109               	goto	l218
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;pff.c: 951: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  2599  006F7E  0100               	movlb	0	; () banked
  2600  006F80  EE20 F016          	lfsr	2,22
  2601  006F84  0100               	movlb	0	; () banked
  2602  006F86  5171               	movf	pf_write@fs& (0+255),w,b
  2603  006F88  26D9               	addwf	fsr2l,f,c
  2604  006F8A  0100               	movlb	0	; () banked
  2605  006F8C  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2606  006F8E  22DA               	addwfc	fsr2h,f,c
  2607  006F90  CFDE F04D          	movff	postinc2,??_pf_write
  2608  006F94  CFDE F04E          	movff	postinc2,??_pf_write+1
  2609  006F98  CFDE F04F          	movff	postinc2,??_pf_write+2
  2610  006F9C  CFDE F050          	movff	postinc2,??_pf_write+3
  2611  006FA0  0E0A               	movlw	10
  2612  006FA2  D005               	goto	u4060
  2613  006FA4                     u4065:
  2614  006FA4  90D8               	bcf	status,0,c
  2615  006FA6  3250               	rrcf	??_pf_write+3,f,c
  2616  006FA8  324F               	rrcf	??_pf_write+2,f,c
  2617  006FAA  324E               	rrcf	??_pf_write+1,f,c
  2618  006FAC  324D               	rrcf	??_pf_write,f,c
  2619  006FAE                     u4060:
  2620  006FAE  2EE8               	decfsz	wreg,f,c
  2621  006FB0  D7F9               	goto	u4065
  2622  006FB2  0100               	movlb	0	; () banked
  2623  006FB4  EE20 F002          	lfsr	2,2
  2624  006FB8  0100               	movlb	0	; () banked
  2625  006FBA  5171               	movf	pf_write@fs& (0+255),w,b
  2626  006FBC  26D9               	addwf	fsr2l,f,c
  2627  006FBE  0100               	movlb	0	; () banked
  2628  006FC0  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2629  006FC2  22DA               	addwfc	fsr2h,f,c
  2630  006FC4  50DF               	movf	indf2,w,c
  2631  006FC6  6E51               	movwf	(??_pf_write+4)& (0+255),c
  2632  006FC8  0451               	decf	??_pf_write+4,w,c
  2633  006FCA  144D               	andwf	??_pf_write,w,c
  2634  006FCC  0100               	movlb	0	; () banked
  2635  006FCE  6F6E               	movwf	pf_write@cs& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;pff.c: 952: if (!cs) {
  2639  006FD0  0100               	movlb	0	; () banked
  2640  006FD2  676E               	tstfsz	pf_write@cs& (0+255),b
  2641  006FD4  D070               	goto	l4082
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;pff.c: 953: if (fs->fptr == 0)
  2645  006FD6  0100               	movlb	0	; () banked
  2646  006FD8  EE20 F016          	lfsr	2,22
  2647  006FDC  0100               	movlb	0	; () banked
  2648  006FDE  5171               	movf	pf_write@fs& (0+255),w,b
  2649  006FE0  26D9               	addwf	fsr2l,f,c
  2650  006FE2  0100               	movlb	0	; () banked
  2651  006FE4  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2652  006FE6  22DA               	addwfc	fsr2h,f,c
  2653  006FE8  CFDE F04D          	movff	postinc2,??_pf_write
  2654  006FEC  CFDE F04E          	movff	postinc2,??_pf_write+1
  2655  006FF0  CFDE F04F          	movff	postinc2,??_pf_write+2
  2656  006FF4  CFDE F050          	movff	postinc2,??_pf_write+3
  2657  006FF8  5050               	movf	??_pf_write+3,w,c
  2658  006FFA  104D               	iorwf	??_pf_write,w,c
  2659  006FFC  104E               	iorwf	??_pf_write+1,w,c
  2660  006FFE  104F               	iorwf	??_pf_write+2,w,c
  2661  007000  A4D8               	btfss	status,2,c
  2662  007002  D016               	goto	l4070
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;pff.c: 954: clst = fs->org_clust;
  2666  007004  0100               	movlb	0	; () banked
  2667  007006  EE20 F01E          	lfsr	2,30
  2668  00700A  0100               	movlb	0	; () banked
  2669  00700C  5171               	movf	pf_write@fs& (0+255),w,b
  2670  00700E  26D9               	addwf	fsr2l,f,c
  2671  007010  0100               	movlb	0	; () banked
  2672  007012  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2673  007014  22DA               	addwfc	fsr2h,f,c
  2674  007016  0100               	movlb	0	; () banked
  2675  007018  CFDE F06A          	movff	postinc2,pf_write@clst
  2676  00701C  0100               	movlb	0	; () banked
  2677  00701E  CFDE F06B          	movff	postinc2,pf_write@clst+1
  2678  007022  0100               	movlb	0	; () banked
  2679  007024  CFDE F06C          	movff	postinc2,pf_write@clst+2
  2680  007028  0100               	movlb	0	; () banked
  2681  00702A  CFDE F06D          	movff	postinc2,pf_write@clst+3
  2682  00702E  D01B               	goto	l4072
  2683  007030                     l4070:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;pff.c: 955: else
  2687                           ;pff.c: 956: clst = get_fat(fs->curr_clust);
  2688  007030  0100               	movlb	0	; () banked
  2689  007032  EE20 F022          	lfsr	2,34
  2690  007036  0100               	movlb	0	; () banked
  2691  007038  5171               	movf	pf_write@fs& (0+255),w,b
  2692  00703A  26D9               	addwf	fsr2l,f,c
  2693  00703C  0100               	movlb	0	; () banked
  2694  00703E  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2695  007040  22DA               	addwfc	fsr2h,f,c
  2696  007042  CFDE F01F          	movff	postinc2,get_fat@clst
  2697  007046  CFDE F020          	movff	postinc2,get_fat@clst+1
  2698  00704A  CFDE F021          	movff	postinc2,get_fat@clst+2
  2699  00704E  CFDE F022          	movff	postinc2,get_fat@clst+3
  2700  007052  ECC1  F032         	call	_get_fat	;wreg free
  2701  007056  C01F  F06A         	movff	?_get_fat,pf_write@clst
  2702  00705A  C020  F06B         	movff	?_get_fat+1,pf_write@clst+1
  2703  00705E  C021  F06C         	movff	?_get_fat+2,pf_write@clst+2
  2704  007062  C022  F06D         	movff	?_get_fat+3,pf_write@clst+3
  2705  007066                     l4072:
  2706                           
  2707                           ;pff.c: 957: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  2708  007066  0E02               	movlw	2
  2709  007068  6E4D               	movwf	??_pf_write& (0+255),c
  2710  00706A  6A4E               	clrf	(??_pf_write+1)& (0+255),c
  2711  00706C  6A4F               	clrf	(??_pf_write+2)& (0+255),c
  2712  00706E  6A50               	clrf	(??_pf_write+3)& (0+255),c
  2713  007070  504D               	movf	??_pf_write,w,c
  2714  007072  0100               	movlb	0	; () banked
  2715  007074  5D6A               	subwf	pf_write@clst& (0+255),w,b
  2716  007076  504E               	movf	??_pf_write+1,w,c
  2717  007078  0100               	movlb	0	; () banked
  2718  00707A  596B               	subwfb	(pf_write@clst+1)& (0+255),w,b
  2719  00707C  504F               	movf	??_pf_write+2,w,c
  2720  00707E  0100               	movlb	0	; () banked
  2721  007080  596C               	subwfb	(pf_write@clst+2)& (0+255),w,b
  2722  007082  5050               	movf	??_pf_write+3,w,c
  2723  007084  0100               	movlb	0	; () banked
  2724  007086  596D               	subwfb	(pf_write@clst+3)& (0+255),w,b
  2725  007088  A0D8               	btfss	status,0,c
  2726  00708A  D125               	goto	u4150
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;pff.c: 958: fs->curr_clust = clst;
  2730                           
  2731                           ; BSR set to: 0
  2732                           
  2733                           ; BSR set to: 0
  2734                           
  2735                           ; BSR set to: 0
  2736                           
  2737                           ; BSR set to: 0
  2738  00708C  0100               	movlb	0	; () banked
  2739  00708E  EE20 F022          	lfsr	2,34
  2740  007092  0100               	movlb	0	; () banked
  2741  007094  5171               	movf	pf_write@fs& (0+255),w,b
  2742  007096  26D9               	addwf	fsr2l,f,c
  2743  007098  0100               	movlb	0	; () banked
  2744  00709A  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2745  00709C  22DA               	addwfc	fsr2h,f,c
  2746  00709E  0100               	movlb	0	; () banked
  2747  0070A0  C06A  FFDE         	movff	pf_write@clst,postinc2
  2748  0070A4  0100               	movlb	0	; () banked
  2749  0070A6  C06B  FFDE         	movff	pf_write@clst+1,postinc2
  2750  0070AA  0100               	movlb	0	; () banked
  2751  0070AC  C06C  FFDE         	movff	pf_write@clst+2,postinc2
  2752  0070B0  0100               	movlb	0	; () banked
  2753  0070B2  C06D  FFDE         	movff	pf_write@clst+3,postinc2
  2754  0070B6                     l4082:
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;pff.c: 959: }
  2758                           ;pff.c: 960: sect = clust2sect(fs->curr_clust);
  2759  0070B6  0100               	movlb	0	; () banked
  2760  0070B8  EE20 F022          	lfsr	2,34
  2761  0070BC  0100               	movlb	0	; () banked
  2762  0070BE  5171               	movf	pf_write@fs& (0+255),w,b
  2763  0070C0  26D9               	addwf	fsr2l,f,c
  2764  0070C2  0100               	movlb	0	; () banked
  2765  0070C4  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2766  0070C6  22DA               	addwfc	fsr2h,f,c
  2767  0070C8  CFDE F00D          	movff	postinc2,clust2sect@clst
  2768  0070CC  CFDE F00E          	movff	postinc2,clust2sect@clst+1
  2769  0070D0  CFDE F00F          	movff	postinc2,clust2sect@clst+2
  2770  0070D4  CFDE F010          	movff	postinc2,clust2sect@clst+3
  2771  0070D8  EC41  F029         	call	_clust2sect	;wreg free
  2772  0070DC  C00D  F062         	movff	?_clust2sect,pf_write@sect
  2773  0070E0  C00E  F063         	movff	?_clust2sect+1,pf_write@sect+1
  2774  0070E4  C00F  F064         	movff	?_clust2sect+2,pf_write@sect+2
  2775  0070E8  C010  F065         	movff	?_clust2sect+3,pf_write@sect+3
  2776                           
  2777                           ;pff.c: 961: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  2778  0070EC  0100               	movlb	0	; () banked
  2779  0070EE  5165               	movf	(pf_write@sect+3)& (0+255),w,b
  2780  0070F0  1162               	iorwf	pf_write@sect& (0+255),w,b
  2781  0070F2  1163               	iorwf	(pf_write@sect+1)& (0+255),w,b
  2782  0070F4  1164               	iorwf	(pf_write@sect+2)& (0+255),w,b
  2783  0070F6  B4D8               	btfsc	status,2,c
  2784  0070F8  D0EE               	goto	u4150
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;pff.c: 962: fs->dsect = sect + cs;
  2788                           
  2789                           ; BSR set to: 0
  2790                           
  2791                           ; BSR set to: 0
  2792                           
  2793                           ; BSR set to: 0
  2794                           
  2795                           ; BSR set to: 0
  2796  0070FA  0100               	movlb	0	; () banked
  2797  0070FC  516E               	movf	pf_write@cs& (0+255),w,b
  2798  0070FE  0100               	movlb	0	; () banked
  2799  007100  2562               	addwf	pf_write@sect& (0+255),w,b
  2800  007102  6E4D               	movwf	??_pf_write& (0+255),c
  2801  007104  0E00               	movlw	0
  2802  007106  0100               	movlb	0	; () banked
  2803  007108  2163               	addwfc	(pf_write@sect+1)& (0+255),w,b
  2804  00710A  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  2805  00710C  0E00               	movlw	0
  2806  00710E  0100               	movlb	0	; () banked
  2807  007110  2164               	addwfc	(pf_write@sect+2)& (0+255),w,b
  2808  007112  6E4F               	movwf	(??_pf_write+2)& (0+255),c
  2809  007114  0E00               	movlw	0
  2810  007116  0100               	movlb	0	; () banked
  2811  007118  2165               	addwfc	(pf_write@sect+3)& (0+255),w,b
  2812  00711A  6E50               	movwf	(??_pf_write+3)& (0+255),c
  2813  00711C  0100               	movlb	0	; () banked
  2814  00711E  EE20 F026          	lfsr	2,38
  2815  007122  0100               	movlb	0	; () banked
  2816  007124  5171               	movf	pf_write@fs& (0+255),w,b
  2817  007126  26D9               	addwf	fsr2l,f,c
  2818  007128  0100               	movlb	0	; () banked
  2819  00712A  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2820  00712C  22DA               	addwfc	fsr2h,f,c
  2821  00712E  C04D  FFDE         	movff	??_pf_write,postinc2
  2822  007132  C04E  FFDE         	movff	??_pf_write+1,postinc2
  2823  007136  C04F  FFDE         	movff	??_pf_write+2,postinc2
  2824  00713A  C050  FFDD         	movff	??_pf_write+3,postdec2
  2825  00713E  06D9               	decf	fsr2l,f,c
  2826  007140  06D9               	decf	fsr2l,f,c
  2827                           
  2828                           ; BSR set to: 0
  2829                           ;pff.c: 963: if (disk_writep(0, fs->dsect)) {fs->flag = 0; return FR_DISK_ERR;};
  2830  007142  0E00               	movlw	0
  2831  007144  6E0B               	movwf	disk_writep@wr+2,c
  2832  007146  0E00               	movlw	0
  2833  007148  6E0A               	movwf	disk_writep@wr+1,c
  2834  00714A  0E00               	movlw	0
  2835  00714C  6E09               	movwf	disk_writep@wr,c
  2836  00714E  0100               	movlb	0	; () banked
  2837  007150  EE20 F026          	lfsr	2,38
  2838  007154  0100               	movlb	0	; () banked
  2839  007156  5171               	movf	pf_write@fs& (0+255),w,b
  2840  007158  26D9               	addwf	fsr2l,f,c
  2841  00715A  0100               	movlb	0	; () banked
  2842  00715C  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2843  00715E  22DA               	addwfc	fsr2h,f,c
  2844  007160  CFDE F00C          	movff	postinc2,disk_writep@sc
  2845  007164  CFDE F00D          	movff	postinc2,disk_writep@sc+1
  2846  007168  CFDE F00E          	movff	postinc2,disk_writep@sc+2
  2847  00716C  CFDE F00F          	movff	postinc2,disk_writep@sc+3
  2848  007170  EC26  F02A         	call	_disk_writep	;wreg free
  2849  007174  0900               	iorlw	0
  2850  007176  A4D8               	btfss	status,2,c
  2851  007178  D0AE               	goto	u4150
  2852                           
  2853                           ;pff.c: 964: fs->flag |= 0x40;
  2854                           
  2855                           ; BSR set to: 0
  2856                           
  2857                           ; BSR set to: 0
  2858                           
  2859                           ; BSR set to: 0
  2860  00717A  0100               	movlb	0	; () banked
  2861  00717C  EE20 F001          	lfsr	2,1
  2862  007180  0100               	movlb	0	; () banked
  2863  007182  5171               	movf	pf_write@fs& (0+255),w,b
  2864  007184  26D9               	addwf	fsr2l,f,c
  2865  007186  0100               	movlb	0	; () banked
  2866  007188  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2867  00718A  22DA               	addwfc	fsr2h,f,c
  2868  00718C  0E00               	movlw	0
  2869  00718E  8CDB               	bsf	plusw2,6,c
  2870  007190                     l218:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;pff.c: 965: }
  2874                           ;pff.c: 966: wcnt = 512 - (UINT)fs->fptr % 512;
  2875  007190  0EFF               	movlw	255
  2876  007192  6E4D               	movwf	??_pf_write& (0+255),c
  2877  007194  0E01               	movlw	1
  2878  007196  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  2879  007198  0100               	movlb	0	; () banked
  2880  00719A  EE20 F016          	lfsr	2,22
  2881  00719E  0100               	movlb	0	; () banked
  2882  0071A0  5171               	movf	pf_write@fs& (0+255),w,b
  2883  0071A2  26D9               	addwf	fsr2l,f,c
  2884  0071A4  0100               	movlb	0	; () banked
  2885  0071A6  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2886  0071A8  22DA               	addwfc	fsr2h,f,c
  2887  0071AA  CFDE F04F          	movff	postinc2,??_pf_write+2
  2888  0071AE  CFDD F050          	movff	postdec2,??_pf_write+3
  2889  0071B2  504D               	movf	??_pf_write,w,c
  2890  0071B4  164F               	andwf	??_pf_write+2,f,c
  2891  0071B6  504E               	movf	??_pf_write+1,w,c
  2892  0071B8  1650               	andwf	??_pf_write+3,f,c
  2893  0071BA  1E4F               	comf	??_pf_write+2,f,c
  2894  0071BC  1E50               	comf	??_pf_write+3,f,c
  2895  0071BE  4A4F               	infsnz	??_pf_write+2,f,c
  2896  0071C0  2A50               	incf	??_pf_write+3,f,c
  2897  0071C2  0E00               	movlw	0
  2898  0071C4  244F               	addwf	??_pf_write+2,w,c
  2899  0071C6  0100               	movlb	0	; () banked
  2900  0071C8  6F6F               	movwf	pf_write@wcnt& (0+255),b
  2901  0071CA  0E02               	movlw	2
  2902  0071CC  2050               	addwfc	??_pf_write+3,w,c
  2903  0071CE  0100               	movlb	0	; () banked
  2904  0071D0  6F70               	movwf	(pf_write@wcnt+1)& (0+255),b
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;pff.c: 967: if (wcnt > btw)wcnt = btw;
  2908  0071D2  0100               	movlb	0	; () banked
  2909  0071D4  516F               	movf	pf_write@wcnt& (0+255),w,b
  2910  0071D6  5C49               	subwf	pf_write@btw,w,c
  2911  0071D8  0100               	movlb	0	; () banked
  2912  0071DA  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  2913  0071DC  584A               	subwfb	pf_write@btw+1,w,c
  2914  0071DE  B0D8               	btfsc	status,0,c
  2915  0071E0  D004               	goto	l4108
  2916                           
  2917                           ; BSR set to: 0
  2918  0071E2  C049  F06F         	movff	pf_write@btw,pf_write@wcnt
  2919  0071E6  C04A  F070         	movff	pf_write@btw+1,pf_write@wcnt+1
  2920  0071EA                     l4108:
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;pff.c: 968: if (disk_writep(p, fs->dsect )) {fs->flag = 0; return FR_DISK_ERR;};
  2924  0071EA  0E00               	movlw	low (__mediumconst shr (0+16))
  2925  0071EC  6E0B               	movwf	disk_writep@wr+2,c
  2926  0071EE  0100               	movlb	0	; () banked
  2927  0071F0  C061  F00A         	movff	pf_write@p+1,disk_writep@wr+1
  2928  0071F4  0100               	movlb	0	; () banked
  2929  0071F6  C060  F009         	movff	pf_write@p,disk_writep@wr
  2930  0071FA  0100               	movlb	0	; () banked
  2931  0071FC  EE20 F026          	lfsr	2,38
  2932  007200  0100               	movlb	0	; () banked
  2933  007202  5171               	movf	pf_write@fs& (0+255),w,b
  2934  007204  26D9               	addwf	fsr2l,f,c
  2935  007206  0100               	movlb	0	; () banked
  2936  007208  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2937  00720A  22DA               	addwfc	fsr2h,f,c
  2938  00720C  CFDE F00C          	movff	postinc2,disk_writep@sc
  2939  007210  CFDE F00D          	movff	postinc2,disk_writep@sc+1
  2940  007214  CFDE F00E          	movff	postinc2,disk_writep@sc+2
  2941  007218  CFDE F00F          	movff	postinc2,disk_writep@sc+3
  2942  00721C  EC26  F02A         	call	_disk_writep	;wreg free
  2943  007220  0900               	iorlw	0
  2944  007222  A4D8               	btfss	status,2,c
  2945  007224  D058               	goto	u4150
  2946                           
  2947                           ;pff.c: 969: fs->fptr += wcnt; p += wcnt;
  2948                           
  2949                           ; BSR set to: 0
  2950                           
  2951                           ; BSR set to: 0
  2952                           
  2953                           ; BSR set to: 0
  2954  007226  0100               	movlb	0	; () banked
  2955  007228  EE20 F016          	lfsr	2,22
  2956  00722C  0100               	movlb	0	; () banked
  2957  00722E  5171               	movf	pf_write@fs& (0+255),w,b
  2958  007230  26D9               	addwf	fsr2l,f,c
  2959  007232  0100               	movlb	0	; () banked
  2960  007234  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  2961  007236  22DA               	addwfc	fsr2h,f,c
  2962  007238  0100               	movlb	0	; () banked
  2963  00723A  516F               	movf	pf_write@wcnt& (0+255),w,b
  2964  00723C  26DE               	addwf	postinc2,f,c
  2965  00723E  0100               	movlb	0	; () banked
  2966  007240  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  2967  007242  22DE               	addwfc	postinc2,f,c
  2968  007244  0E00               	movlw	0
  2969  007246  22DE               	addwfc	postinc2,f,c
  2970  007248  22DD               	addwfc	postdec2,f,c
  2971  00724A  52DD               	movf	postdec2,f,c
  2972  00724C  52DD               	movf	postdec2,f,c
  2973                           
  2974                           ; BSR set to: 0
  2975  00724E  0100               	movlb	0	; () banked
  2976  007250  516F               	movf	pf_write@wcnt& (0+255),w,b
  2977  007252  0100               	movlb	0	; () banked
  2978  007254  2760               	addwf	pf_write@p& (0+255),f,b
  2979  007256  0100               	movlb	0	; () banked
  2980  007258  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  2981  00725A  0100               	movlb	0	; () banked
  2982  00725C  2361               	addwfc	(pf_write@p+1)& (0+255),f,b
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;pff.c: 970: btw -= wcnt; *bw += wcnt;
  2986  00725E  0100               	movlb	0	; () banked
  2987  007260  516F               	movf	pf_write@wcnt& (0+255),w,b
  2988  007262  5E49               	subwf	pf_write@btw,f,c
  2989  007264  0100               	movlb	0	; () banked
  2990  007266  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  2991  007268  5A4A               	subwfb	pf_write@btw+1,f,c
  2992                           
  2993                           ; BSR set to: 0
  2994  00726A  C04B  FFD9         	movff	pf_write@bw,fsr2l
  2995  00726E  C04C  FFDA         	movff	pf_write@bw+1,fsr2h
  2996  007272  0100               	movlb	0	; () banked
  2997  007274  516F               	movf	pf_write@wcnt& (0+255),w,b
  2998  007276  26DE               	addwf	postinc2,f,c
  2999  007278  0100               	movlb	0	; () banked
  3000  00727A  5170               	movf	(pf_write@wcnt+1)& (0+255),w,b
  3001  00727C  22DD               	addwfc	postdec2,f,c
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;pff.c: 971: if ((UINT)fs->fptr % 512 == 0) {
  3005  00727E  0EFF               	movlw	255
  3006  007280  6E4D               	movwf	??_pf_write& (0+255),c
  3007  007282  0E01               	movlw	1
  3008  007284  6E4E               	movwf	(??_pf_write+1)& (0+255),c
  3009  007286  0100               	movlb	0	; () banked
  3010  007288  EE20 F016          	lfsr	2,22
  3011  00728C  0100               	movlb	0	; () banked
  3012  00728E  5171               	movf	pf_write@fs& (0+255),w,b
  3013  007290  26D9               	addwf	fsr2l,f,c
  3014  007292  0100               	movlb	0	; () banked
  3015  007294  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  3016  007296  22DA               	addwfc	fsr2h,f,c
  3017  007298  CFDE F04F          	movff	postinc2,??_pf_write+2
  3018  00729C  CFDD F050          	movff	postdec2,??_pf_write+3
  3019  0072A0  504D               	movf	??_pf_write,w,c
  3020  0072A2  164F               	andwf	??_pf_write+2,f,c
  3021  0072A4  504E               	movf	??_pf_write+1,w,c
  3022  0072A6  1650               	andwf	??_pf_write+3,f,c
  3023  0072A8  5050               	movf	??_pf_write+3,w,c
  3024  0072AA  104F               	iorwf	??_pf_write+2,w,c
  3025  0072AC  A4D8               	btfss	status,2,c
  3026  0072AE  D02B               	goto	l4136
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;pff.c: 972: if (disk_writep(0, 0)) {fs->flag = 0; return FR_DISK_ERR;};
  3030  0072B0  0E00               	movlw	0
  3031  0072B2  6E0B               	movwf	disk_writep@wr+2,c
  3032  0072B4  0E00               	movlw	0
  3033  0072B6  6E0A               	movwf	disk_writep@wr+1,c
  3034  0072B8  0E00               	movlw	0
  3035  0072BA  6E09               	movwf	disk_writep@wr,c
  3036  0072BC  0E00               	movlw	0
  3037  0072BE  6E0C               	movwf	disk_writep@sc,c
  3038  0072C0  0E00               	movlw	0
  3039  0072C2  6E0D               	movwf	disk_writep@sc+1,c
  3040  0072C4  0E00               	movlw	0
  3041  0072C6  6E0E               	movwf	disk_writep@sc+2,c
  3042  0072C8  0E00               	movlw	0
  3043  0072CA  6E0F               	movwf	disk_writep@sc+3,c
  3044  0072CC  EC26  F02A         	call	_disk_writep	;wreg free
  3045  0072D0  0900               	iorlw	0
  3046  0072D2  B4D8               	btfsc	status,2,c
  3047  0072D4  D00D               	goto	l4134
  3048  0072D6                     u4150:
  3049  0072D6  0100               	movlb	0	; () banked
  3050  0072D8  EE20 F001          	lfsr	2,1
  3051  0072DC  0100               	movlb	0	; () banked
  3052  0072DE  5171               	movf	pf_write@fs& (0+255),w,b
  3053  0072E0  26D9               	addwf	fsr2l,f,c
  3054  0072E2  0100               	movlb	0	; () banked
  3055  0072E4  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  3056  0072E6  22DA               	addwfc	fsr2h,f,c
  3057  0072E8  0E00               	movlw	0
  3058  0072EA  6EDF               	movwf	indf2,c
  3059                           
  3060                           ; BSR set to: 0
  3061  0072EC  0E01               	movlw	1
  3062  0072EE  D010               	goto	l209
  3063  0072F0                     l4134:
  3064                           
  3065                           ;pff.c: 973: fs->flag &= ~0x40;
  3066  0072F0  0100               	movlb	0	; () banked
  3067  0072F2  EE20 F001          	lfsr	2,1
  3068  0072F6  0100               	movlb	0	; () banked
  3069  0072F8  5171               	movf	pf_write@fs& (0+255),w,b
  3070  0072FA  26D9               	addwf	fsr2l,f,c
  3071  0072FC  0100               	movlb	0	; () banked
  3072  0072FE  5172               	movf	(pf_write@fs+1)& (0+255),w,b
  3073  007300  22DA               	addwfc	fsr2h,f,c
  3074  007302  0EBF               	movlw	191
  3075  007304  16DF               	andwf	indf2,f,c
  3076  007306                     l4136:
  3077                           
  3078                           ; BSR set to: 0
  3079  007306  504A               	movf	pf_write@btw+1,w,c
  3080  007308  1049               	iorwf	pf_write@btw,w,c
  3081  00730A  A4D8               	btfss	status,2,c
  3082  00730C  D61F               	goto	l4060
  3083  00730E                     l4138:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;pff.c: 974: }
  3087                           ;pff.c: 975: }
  3088                           ;pff.c: 977: return FR_OK;
  3089  00730E  0E00               	movlw	0
  3090  007310                     l209:
  3091                           
  3092                           ; BSR set to: 0
  3093  007310  0012               	return	
  3094  007312                     __end_of_pf_write:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           postinc0	equ	0xFEE
  3101                           wreg	equ	0xFE8
  3102                           postdec1	equ	0xFE5
  3103                           fsr1h	equ	0xFE2
  3104                           fsr1l	equ	0xFE1
  3105                           indf2	equ	0xFDF
  3106                           postinc2	equ	0xFDE
  3107                           postdec2	equ	0xFDD
  3108                           plusw2	equ	0xFDB
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _disk_writep *****************
  3114 ;; Defined at:
  3115 ;;		line 285 in file "diskio.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  wr              3    8[COMRAM] PTR const unsigned char 
  3118 ;;		 -> STR_8(8), ROM(32767), 
  3119 ;;  sc              4   11[COMRAM] unsigned long 
  3120 ;; Auto vars:     Size  Location     Type
  3121 ;;  j               2   21[COMRAM] int 
  3122 ;;  i               2   19[COMRAM] int 
  3123 ;;  buff            1   23[COMRAM] unsigned char 
  3124 ;;  res             1    0        enum E14
  3125 ;; Return value:  Size  Location     Type
  3126 ;;                  1    wreg      enum E73
  3127 ;; Registers used:
  3128 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3129 ;; Tracked objects:
  3130 ;;		On entry : 0/0
  3131 ;;		On exit  : 0/0
  3132 ;;		Unchanged: 0/0
  3133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3134 ;;      Params:         7       0       0       0       0       0       0       0       0
  3135 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3136 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3137 ;;      Totals:        16       0       0       0       0       0       0       0       0
  3138 ;;Total ram usage:       16 bytes
  3139 ;; Hardware stack levels used:    1
  3140 ;; Hardware stack levels required when called:    3
  3141 ;; This function calls:
  3142 ;;		_Command
  3143 ;;		_Delay_s
  3144 ;;		_WriteSPI_
  3145 ;;		_dummy_clocks
  3146 ;;		_proceed
  3147 ;;		_response
  3148 ;; This function is called by:
  3149 ;;		_pf_write
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text5
  3154  00544C                     __ptext5:
  3155                           	opt stack 0
  3156  00544C                     _disk_writep:
  3157                           	opt stack 25
  3158                           
  3159                           ;diskio.c: 290: DRESULT res;
  3160                           ;diskio.c: 292: unsigned char buff;
  3161                           ;diskio.c: 293: int i=0,j;
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;incstack = 0
  3165  00544C  0E00               	movlw	0
  3166  00544E  6E15               	movwf	disk_writep@i+1,c
  3167  005450  0E00               	movlw	0
  3168  005452  6E14               	movwf	disk_writep@i,c
  3169                           
  3170                           ;diskio.c: 295: Delay_s(1);
  3171  005454  0E01               	movlw	1
  3172  005456  ECD0  F026         	call	_Delay_s
  3173                           
  3174                           ;diskio.c: 297: dummy_clocks(8);
  3175  00545A  0E00               	movlw	0
  3176  00545C  6E05               	movwf	dummy_clocks@n+1,c
  3177  00545E  0E08               	movlw	8
  3178  005460  6E04               	movwf	dummy_clocks@n,c
  3179  005462  EC2F  F027         	call	_dummy_clocks	;wreg free
  3180                           
  3181                           ;diskio.c: 298: Command(0X58, sc*512, 0X00);
  3182  005466  C00C  F010         	movff	disk_writep@sc,??_disk_writep
  3183  00546A  C00D  F011         	movff	disk_writep@sc+1,??_disk_writep+1
  3184  00546E  C00E  F012         	movff	disk_writep@sc+2,??_disk_writep+2
  3185  005472  C00F  F013         	movff	disk_writep@sc+3,??_disk_writep+3
  3186  005476  0E09               	movlw	9
  3187  005478                     u3375:
  3188  005478  90D8               	bcf	status,0,c
  3189  00547A  3610               	rlcf	??_disk_writep,f,c
  3190  00547C  3611               	rlcf	??_disk_writep+1,f,c
  3191  00547E  3612               	rlcf	??_disk_writep+2,f,c
  3192  005480  3613               	rlcf	??_disk_writep+3,f,c
  3193  005482  2EE8               	decfsz	wreg,f,c
  3194  005484  D7F9               	goto	u3375
  3195  005486  C010  F003         	movff	??_disk_writep,Command@arg
  3196  00548A  C011  F004         	movff	??_disk_writep+1,Command@arg+1
  3197  00548E  C012  F005         	movff	??_disk_writep+2,Command@arg+2
  3198  005492  C013  F006         	movff	??_disk_writep+3,Command@arg+3
  3199  005496  0E00               	movlw	0
  3200  005498  6E07               	movwf	Command@CRCbits,c
  3201  00549A  0E58               	movlw	88
  3202  00549C  ECFA  F026         	call	_Command
  3203                           
  3204                           ;diskio.c: 299: proceed();
  3205  0054A0  EC79  F026         	call	_proceed	;wreg free
  3206  0054A4                     l3620:
  3207                           
  3208                           ;diskio.c: 301: buff = response();
  3209  0054A4  EC7F  F026         	call	_response	;wreg free
  3210  0054A8  6E18               	movwf	disk_writep@buff,c
  3211                           
  3212                           ;diskio.c: 302: }while(buff!=0x00);
  3213  0054AA  6618               	tstfsz	disk_writep@buff,c
  3214  0054AC  D7FB               	goto	l3620
  3215                           
  3216                           ;diskio.c: 305: Delay_s(2);
  3217  0054AE  0E02               	movlw	2
  3218  0054B0  ECD0  F026         	call	_Delay_s
  3219                           
  3220                           ;diskio.c: 307: dummy_clocks(8);
  3221  0054B4  0E00               	movlw	0
  3222  0054B6  6E05               	movwf	dummy_clocks@n+1,c
  3223  0054B8  0E08               	movlw	8
  3224  0054BA  6E04               	movwf	dummy_clocks@n,c
  3225  0054BC  EC2F  F027         	call	_dummy_clocks	;wreg free
  3226                           
  3227                           ;diskio.c: 309: WriteSPI_(0XFE);
  3228  0054C0  0EFE               	movlw	254
  3229  0054C2  EC9E  F026         	call	_WriteSPI_
  3230                           
  3231                           ;diskio.c: 311: for(j=0;j<512;j++)
  3232  0054C6  0E00               	movlw	0
  3233  0054C8  6E17               	movwf	disk_writep@j+1,c
  3234  0054CA  0E00               	movlw	0
  3235  0054CC  6E16               	movwf	disk_writep@j,c
  3236  0054CE  5017               	movf	disk_writep@j+1,w,c
  3237  0054D0  0A80               	xorlw	128
  3238  0054D2  0F7E               	addlw	-130
  3239  0054D4  0E00               	movlw	0
  3240  0054D6  B4D8               	btfsc	status,2,c
  3241  0054D8  5C16               	subwf	disk_writep@j,w,c
  3242  0054DA  B0D8               	btfsc	status,0,c
  3243  0054DC  D022               	goto	l3646
  3244                           
  3245                           ;diskio.c: 312: {
  3246                           ;diskio.c: 313: if(*wr!='\0')
  3247  0054DE  C009  FFF6         	movff	disk_writep@wr,tblptrl
  3248  0054E2  C00A  FFF7         	movff	disk_writep@wr+1,tblptrh
  3249  0054E6  C00B  FFF8         	movff	disk_writep@wr+2,tblptru
  3250  0054EA  0008               	tblrd		*
  3251  0054EC  50F5               	movf	tablat,w,c
  3252  0054EE  0900               	iorlw	0
  3253  0054F0  B4D8               	btfsc	status,2,c
  3254  0054F2  D011               	goto	l3640
  3255                           
  3256                           ;diskio.c: 314: {
  3257                           ;diskio.c: 315: WriteSPI_(*wr);
  3258  0054F4  C009  FFF6         	movff	disk_writep@wr,tblptrl
  3259  0054F8  C00A  FFF7         	movff	disk_writep@wr+1,tblptrh
  3260  0054FC  C00B  FFF8         	movff	disk_writep@wr+2,tblptru
  3261  005500  0008               	tblrd		*
  3262  005502  50F5               	movf	tablat,w,c
  3263  005504  EC9E  F026         	call	_WriteSPI_
  3264                           
  3265                           ;diskio.c: 316: wr++;
  3266  005508  0E01               	movlw	1
  3267  00550A  2609               	addwf	disk_writep@wr,f,c
  3268  00550C  0E00               	movlw	0
  3269  00550E  220A               	addwfc	disk_writep@wr+1,f,c
  3270  005510  0E00               	movlw	0
  3271  005512  220B               	addwfc	disk_writep@wr+2,f,c
  3272                           
  3273                           ;diskio.c: 317: }
  3274  005514  D003               	goto	l3642
  3275  005516                     l3640:
  3276                           
  3277                           ;diskio.c: 318: else
  3278                           ;diskio.c: 319: WriteSPI_(0x00);
  3279  005516  0E00               	movlw	0
  3280  005518  EC9E  F026         	call	_WriteSPI_
  3281  00551C                     l3642:
  3282  00551C  4A16               	infsnz	disk_writep@j,f,c
  3283  00551E  2A17               	incf	disk_writep@j+1,f,c
  3284  005520  D7D6               	goto	L1
  3285  005522                     l3646:
  3286                           
  3287                           ;diskio.c: 320: }
  3288                           ;diskio.c: 321: WriteSPI_(0XFF);
  3289  005522  0EFF               	movlw	255
  3290  005524  EC9E  F026         	call	_WriteSPI_
  3291                           
  3292                           ;diskio.c: 322: WriteSPI_(0XFF);
  3293  005528  0EFF               	movlw	255
  3294  00552A  EC9E  F026         	call	_WriteSPI_
  3295                           
  3296                           ;diskio.c: 324: proceed();
  3297  00552E  EC79  F026         	call	_proceed	;wreg free
  3298                           
  3299                           ;diskio.c: 326: Delay_s(1);
  3300  005532  0E01               	movlw	1
  3301  005534  ECD0  F026         	call	_Delay_s
  3302                           
  3303                           ;diskio.c: 327: dummy_clocks(8);
  3304  005538  0E00               	movlw	0
  3305  00553A  6E05               	movwf	dummy_clocks@n+1,c
  3306  00553C  0E08               	movlw	8
  3307  00553E  6E04               	movwf	dummy_clocks@n,c
  3308  005540  EC2F  F027         	call	_dummy_clocks	;wreg free
  3309                           
  3310                           ;diskio.c: 329: Command(0X4D,0X00000000,0X00);
  3311  005544  0E00               	movlw	0
  3312  005546  6E03               	movwf	Command@arg,c
  3313  005548  0E00               	movlw	0
  3314  00554A  6E04               	movwf	Command@arg+1,c
  3315  00554C  0E00               	movlw	0
  3316  00554E  6E05               	movwf	Command@arg+2,c
  3317  005550  0E00               	movlw	0
  3318  005552  6E06               	movwf	Command@arg+3,c
  3319  005554  0E00               	movlw	0
  3320  005556  6E07               	movwf	Command@CRCbits,c
  3321  005558  0E4D               	movlw	77
  3322  00555A  ECFA  F026         	call	_Command
  3323                           
  3324                           ;diskio.c: 330: proceed();
  3325  00555E  EC79  F026         	call	_proceed	;wreg free
  3326  005562                     l3656:
  3327                           
  3328                           ;diskio.c: 332: buff = response();
  3329  005562  EC7F  F026         	call	_response	;wreg free
  3330  005566  6E18               	movwf	disk_writep@buff,c
  3331                           
  3332                           ;diskio.c: 333: }while(buff!=0x00);
  3333  005568  6618               	tstfsz	disk_writep@buff,c
  3334  00556A  D7FB               	goto	l3656
  3335                           
  3336                           ;diskio.c: 335: return RES_OK;
  3337  00556C  0E00               	movlw	0
  3338  00556E  0012               	return	
  3339  005570                     __end_of_disk_writep:
  3340                           	opt stack 0
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           postdec1	equ	0xFE5
  3348                           fsr1h	equ	0xFE2
  3349                           fsr1l	equ	0xFE1
  3350                           indf2	equ	0xFDF
  3351                           postinc2	equ	0xFDE
  3352                           postdec2	equ	0xFDD
  3353                           plusw2	equ	0xFDB
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _pf_read *****************
  3359 ;; Defined at:
  3360 ;;		line 863 in file "pff.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  buff            2   70[COMRAM] PTR void 
  3363 ;;		 -> data_buffer_32(32), 
  3364 ;;  btr             2   72[COMRAM] unsigned int 
  3365 ;;  br              2   74[COMRAM] PTR unsigned int 
  3366 ;;		 -> main@br(2), 
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;  clst            4   13[BANK0 ] unsigned long 
  3369 ;;  remain          4    9[BANK0 ] unsigned long 
  3370 ;;  sect            4    5[BANK0 ] unsigned long 
  3371 ;;  fs              2   20[BANK0 ] PTR struct .
  3372 ;;		 -> main@fs(42), NULL(0), 
  3373 ;;  rcnt            2   18[BANK0 ] unsigned int 
  3374 ;;  rbuff           2    0[BANK0 ] PTR unsigned char 
  3375 ;;		 -> data_buffer_32(32), 
  3376 ;;  cs              1   17[BANK0 ] unsigned char 
  3377 ;;  dr              1    4[BANK0 ] enum E73
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      enum E43
  3380 ;; Registers used:
  3381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3387 ;;      Params:         6       0       0       0       0       0       0       0       0
  3388 ;;      Locals:         0      22       0       0       0       0       0       0       0
  3389 ;;      Temps:          8       0       0       0       0       0       0       0       0
  3390 ;;      Totals:        14      22       0       0       0       0       0       0       0
  3391 ;;Total ram usage:       36 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    6
  3394 ;; This function calls:
  3395 ;;		_clust2sect
  3396 ;;		_disk_readp
  3397 ;;		_get_fat
  3398 ;; This function is called by:
  3399 ;;		_main
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text6
  3404  006954                     __ptext6:
  3405                           	opt stack 0
  3406  006954                     _pf_read:
  3407                           	opt stack 23
  3408                           
  3409                           ;pff.c: 869: DRESULT dr;
  3410                           ;pff.c: 870: DWORD clst;
  3411                           ;pff.c: 871: DWORD sect, remain;
  3412                           ;pff.c: 872: UINT rcnt;
  3413                           ;pff.c: 873: BYTE cs, *rbuff = buff;
  3414                           
  3415                           ;incstack = 0
  3416  006954  0100               	movlb	0	; () banked
  3417  006956  C048  F061         	movff	pf_read@buff+1,pf_read@rbuff+1
  3418  00695A  0100               	movlb	0	; () banked
  3419  00695C  C047  F060         	movff	pf_read@buff,pf_read@rbuff
  3420                           
  3421                           ;pff.c: 874: FATFS *fs = FatFs;
  3422  006960  0100               	movlb	0	; () banked
  3423  006962  C0F4  F075         	movff	_FatFs+1,pf_read@fs+1
  3424  006966  0100               	movlb	0	; () banked
  3425  006968  C0F3  F074         	movff	_FatFs,pf_read@fs
  3426                           
  3427                           ; BSR set to: 0
  3428                           ;pff.c: 877: *br = 0;
  3429  00696C  C04B  FFD9         	movff	pf_read@br,fsr2l
  3430  006970  C04C  FFDA         	movff	pf_read@br+1,fsr2h
  3431  006974  0E00               	movlw	0
  3432  006976  6EDE               	movwf	postinc2,c
  3433  006978  0E00               	movlw	0
  3434  00697A  6EDD               	movwf	postdec2,c
  3435                           
  3436                           ; BSR set to: 0
  3437                           ;pff.c: 878: if (!fs) return FR_NOT_ENABLED;
  3438  00697C  0100               	movlb	0	; () banked
  3439  00697E  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3440  006980  1174               	iorwf	pf_read@fs& (0+255),w,b
  3441  006982  A4D8               	btfss	status,2,c
  3442  006984  D002               	goto	l3936
  3443                           
  3444                           ; BSR set to: 0
  3445  006986  0E05               	movlw	5
  3446  006988  D212               	goto	l188
  3447  00698A                     l3936:
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;pff.c: 879: if (!(fs->flag & 0x01))
  3451  00698A  0100               	movlb	0	; () banked
  3452  00698C  EE20 F001          	lfsr	2,1
  3453  006990  0100               	movlb	0	; () banked
  3454  006992  5174               	movf	pf_read@fs& (0+255),w,b
  3455  006994  26D9               	addwf	fsr2l,f,c
  3456  006996  0100               	movlb	0	; () banked
  3457  006998  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3458  00699A  22DA               	addwfc	fsr2h,f,c
  3459  00699C  50DF               	movf	indf2,w,c
  3460  00699E  6E4D               	movwf	??_pf_read& (0+255),c
  3461  0069A0  B04D               	btfsc	??_pf_read,0,c
  3462  0069A2  D002               	goto	l3942
  3463                           
  3464                           ; BSR set to: 0
  3465                           ;pff.c: 880: return FR_NOT_OPENED;
  3466  0069A4  0E04               	movlw	4
  3467  0069A6  D203               	goto	l188
  3468  0069A8                     l3942:
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;pff.c: 882: remain = fs->fsize - fs->fptr;
  3472  0069A8  0100               	movlb	0	; () banked
  3473  0069AA  EE20 F01A          	lfsr	2,26
  3474  0069AE  0100               	movlb	0	; () banked
  3475  0069B0  5174               	movf	pf_read@fs& (0+255),w,b
  3476  0069B2  26D9               	addwf	fsr2l,f,c
  3477  0069B4  0100               	movlb	0	; () banked
  3478  0069B6  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3479  0069B8  22DA               	addwfc	fsr2h,f,c
  3480  0069BA  CFDE F04D          	movff	postinc2,??_pf_read
  3481  0069BE  CFDE F04E          	movff	postinc2,??_pf_read+1
  3482  0069C2  CFDE F04F          	movff	postinc2,??_pf_read+2
  3483  0069C6  CFDE F050          	movff	postinc2,??_pf_read+3
  3484  0069CA  0100               	movlb	0	; () banked
  3485  0069CC  EE20 F016          	lfsr	2,22
  3486  0069D0  0100               	movlb	0	; () banked
  3487  0069D2  5174               	movf	pf_read@fs& (0+255),w,b
  3488  0069D4  26D9               	addwf	fsr2l,f,c
  3489  0069D6  0100               	movlb	0	; () banked
  3490  0069D8  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3491  0069DA  22DA               	addwfc	fsr2h,f,c
  3492  0069DC  CFDE F051          	movff	postinc2,??_pf_read+4
  3493  0069E0  CFDE F052          	movff	postinc2,??_pf_read+5
  3494  0069E4  CFDE F053          	movff	postinc2,??_pf_read+6
  3495  0069E8  CFDE F054          	movff	postinc2,??_pf_read+7
  3496  0069EC  1E51               	comf	??_pf_read+4,f,c
  3497  0069EE  1E52               	comf	??_pf_read+5,f,c
  3498  0069F0  1E53               	comf	??_pf_read+6,f,c
  3499  0069F2  1E54               	comf	??_pf_read+7,f,c
  3500  0069F4  2A51               	incf	??_pf_read+4,f,c
  3501  0069F6  0E00               	movlw	0
  3502  0069F8  2252               	addwfc	??_pf_read+5,f,c
  3503  0069FA  2253               	addwfc	??_pf_read+6,f,c
  3504  0069FC  2254               	addwfc	??_pf_read+7,f,c
  3505  0069FE  504D               	movf	??_pf_read,w,c
  3506  006A00  2451               	addwf	??_pf_read+4,w,c
  3507  006A02  0100               	movlb	0	; () banked
  3508  006A04  6F69               	movwf	pf_read@remain& (0+255),b
  3509  006A06  504E               	movf	??_pf_read+1,w,c
  3510  006A08  2052               	addwfc	??_pf_read+5,w,c
  3511  006A0A  0100               	movlb	0	; () banked
  3512  006A0C  6F6A               	movwf	(pf_read@remain+1)& (0+255),b
  3513  006A0E  504F               	movf	??_pf_read+2,w,c
  3514  006A10  2053               	addwfc	??_pf_read+6,w,c
  3515  006A12  0100               	movlb	0	; () banked
  3516  006A14  6F6B               	movwf	(pf_read@remain+2)& (0+255),b
  3517  006A16  5050               	movf	??_pf_read+3,w,c
  3518  006A18  2054               	addwfc	??_pf_read+7,w,c
  3519  006A1A  0100               	movlb	0	; () banked
  3520  006A1C  6F6C               	movwf	(pf_read@remain+3)& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;pff.c: 883: if (btr > remain) btr = (UINT)remain;
  3524  006A1E  5049               	movf	pf_read@btr,w,c
  3525  006A20  6E4D               	movwf	??_pf_read& (0+255),c
  3526  006A22  504A               	movf	pf_read@btr+1,w,c
  3527  006A24  6E4E               	movwf	(??_pf_read+1)& (0+255),c
  3528  006A26  6A4F               	clrf	(??_pf_read+2)& (0+255),c
  3529  006A28  6A50               	clrf	(??_pf_read+3)& (0+255),c
  3530  006A2A  504D               	movf	??_pf_read,w,c
  3531  006A2C  0100               	movlb	0	; () banked
  3532  006A2E  5D69               	subwf	pf_read@remain& (0+255),w,b
  3533  006A30  504E               	movf	??_pf_read+1,w,c
  3534  006A32  0100               	movlb	0	; () banked
  3535  006A34  596A               	subwfb	(pf_read@remain+1)& (0+255),w,b
  3536  006A36  504F               	movf	??_pf_read+2,w,c
  3537  006A38  0100               	movlb	0	; () banked
  3538  006A3A  596B               	subwfb	(pf_read@remain+2)& (0+255),w,b
  3539  006A3C  5050               	movf	??_pf_read+3,w,c
  3540  006A3E  0100               	movlb	0	; () banked
  3541  006A40  596C               	subwfb	(pf_read@remain+3)& (0+255),w,b
  3542  006A42  B0D8               	btfsc	status,0,c
  3543  006A44  D1AF               	goto	l4010
  3544                           
  3545                           ; BSR set to: 0
  3546  006A46  C069  F049         	movff	pf_read@remain,pf_read@btr
  3547  006A4A  C06A  F04A         	movff	pf_read@remain+1,pf_read@btr+1
  3548  006A4E  D1AA               	goto	l4010
  3549  006A50                     l3948:
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;pff.c: 886: if ((fs->fptr % 512) == 0) {
  3553  006A50  0100               	movlb	0	; () banked
  3554  006A52  EE20 F016          	lfsr	2,22
  3555  006A56  0100               	movlb	0	; () banked
  3556  006A58  5174               	movf	pf_read@fs& (0+255),w,b
  3557  006A5A  26D9               	addwf	fsr2l,f,c
  3558  006A5C  0100               	movlb	0	; () banked
  3559  006A5E  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3560  006A60  22DA               	addwfc	fsr2h,f,c
  3561  006A62  0EFF               	movlw	255
  3562  006A64  14DE               	andwf	postinc2,w,c
  3563  006A66  6E4D               	movwf	??_pf_read& (0+255),c
  3564  006A68  0E01               	movlw	1
  3565  006A6A  14DE               	andwf	postinc2,w,c
  3566  006A6C  6E4E               	movwf	(??_pf_read+1)& (0+255),c
  3567  006A6E  0E00               	movlw	0
  3568  006A70  14DE               	andwf	postinc2,w,c
  3569  006A72  6E4F               	movwf	(??_pf_read+2)& (0+255),c
  3570  006A74  0E00               	movlw	0
  3571  006A76  14DE               	andwf	postinc2,w,c
  3572  006A78  6E50               	movwf	(??_pf_read+3)& (0+255),c
  3573  006A7A  5050               	movf	??_pf_read+3,w,c
  3574  006A7C  104D               	iorwf	??_pf_read,w,c
  3575  006A7E  104E               	iorwf	??_pf_read+1,w,c
  3576  006A80  104F               	iorwf	??_pf_read+2,w,c
  3577  006A82  A4D8               	btfss	status,2,c
  3578  006A84  D0E2               	goto	l193
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;pff.c: 887: cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));
  3582  006A86  0100               	movlb	0	; () banked
  3583  006A88  EE20 F016          	lfsr	2,22
  3584  006A8C  0100               	movlb	0	; () banked
  3585  006A8E  5174               	movf	pf_read@fs& (0+255),w,b
  3586  006A90  26D9               	addwf	fsr2l,f,c
  3587  006A92  0100               	movlb	0	; () banked
  3588  006A94  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3589  006A96  22DA               	addwfc	fsr2h,f,c
  3590  006A98  CFDE F04D          	movff	postinc2,??_pf_read
  3591  006A9C  CFDE F04E          	movff	postinc2,??_pf_read+1
  3592  006AA0  CFDE F04F          	movff	postinc2,??_pf_read+2
  3593  006AA4  CFDE F050          	movff	postinc2,??_pf_read+3
  3594  006AA8  0E0A               	movlw	10
  3595  006AAA  D005               	goto	u3890
  3596  006AAC                     u3895:
  3597  006AAC  90D8               	bcf	status,0,c
  3598  006AAE  3250               	rrcf	??_pf_read+3,f,c
  3599  006AB0  324F               	rrcf	??_pf_read+2,f,c
  3600  006AB2  324E               	rrcf	??_pf_read+1,f,c
  3601  006AB4  324D               	rrcf	??_pf_read,f,c
  3602  006AB6                     u3890:
  3603  006AB6  2EE8               	decfsz	wreg,f,c
  3604  006AB8  D7F9               	goto	u3895
  3605  006ABA  0100               	movlb	0	; () banked
  3606  006ABC  EE20 F002          	lfsr	2,2
  3607  006AC0  0100               	movlb	0	; () banked
  3608  006AC2  5174               	movf	pf_read@fs& (0+255),w,b
  3609  006AC4  26D9               	addwf	fsr2l,f,c
  3610  006AC6  0100               	movlb	0	; () banked
  3611  006AC8  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3612  006ACA  22DA               	addwfc	fsr2h,f,c
  3613  006ACC  50DF               	movf	indf2,w,c
  3614  006ACE  6E51               	movwf	(??_pf_read+4)& (0+255),c
  3615  006AD0  0451               	decf	??_pf_read+4,w,c
  3616  006AD2  144D               	andwf	??_pf_read,w,c
  3617  006AD4  0100               	movlb	0	; () banked
  3618  006AD6  6F71               	movwf	pf_read@cs& (0+255),b
  3619                           
  3620                           ; BSR set to: 0
  3621                           ;pff.c: 888: if (!cs) {
  3622  006AD8  0100               	movlb	0	; () banked
  3623  006ADA  6771               	tstfsz	pf_read@cs& (0+255),b
  3624  006ADC  D070               	goto	l3970
  3625                           
  3626                           ; BSR set to: 0
  3627                           ;pff.c: 889: if (fs->fptr == 0)
  3628  006ADE  0100               	movlb	0	; () banked
  3629  006AE0  EE20 F016          	lfsr	2,22
  3630  006AE4  0100               	movlb	0	; () banked
  3631  006AE6  5174               	movf	pf_read@fs& (0+255),w,b
  3632  006AE8  26D9               	addwf	fsr2l,f,c
  3633  006AEA  0100               	movlb	0	; () banked
  3634  006AEC  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3635  006AEE  22DA               	addwfc	fsr2h,f,c
  3636  006AF0  CFDE F04D          	movff	postinc2,??_pf_read
  3637  006AF4  CFDE F04E          	movff	postinc2,??_pf_read+1
  3638  006AF8  CFDE F04F          	movff	postinc2,??_pf_read+2
  3639  006AFC  CFDE F050          	movff	postinc2,??_pf_read+3
  3640  006B00  5050               	movf	??_pf_read+3,w,c
  3641  006B02  104D               	iorwf	??_pf_read,w,c
  3642  006B04  104E               	iorwf	??_pf_read+1,w,c
  3643  006B06  104F               	iorwf	??_pf_read+2,w,c
  3644  006B08  A4D8               	btfss	status,2,c
  3645  006B0A  D016               	goto	l3958
  3646                           
  3647                           ; BSR set to: 0
  3648                           ;pff.c: 890: clst = fs->org_clust;
  3649  006B0C  0100               	movlb	0	; () banked
  3650  006B0E  EE20 F01E          	lfsr	2,30
  3651  006B12  0100               	movlb	0	; () banked
  3652  006B14  5174               	movf	pf_read@fs& (0+255),w,b
  3653  006B16  26D9               	addwf	fsr2l,f,c
  3654  006B18  0100               	movlb	0	; () banked
  3655  006B1A  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3656  006B1C  22DA               	addwfc	fsr2h,f,c
  3657  006B1E  0100               	movlb	0	; () banked
  3658  006B20  CFDE F06D          	movff	postinc2,pf_read@clst
  3659  006B24  0100               	movlb	0	; () banked
  3660  006B26  CFDE F06E          	movff	postinc2,pf_read@clst+1
  3661  006B2A  0100               	movlb	0	; () banked
  3662  006B2C  CFDE F06F          	movff	postinc2,pf_read@clst+2
  3663  006B30  0100               	movlb	0	; () banked
  3664  006B32  CFDE F070          	movff	postinc2,pf_read@clst+3
  3665  006B36  D01B               	goto	l3960
  3666  006B38                     l3958:
  3667                           
  3668                           ; BSR set to: 0
  3669                           ;pff.c: 891: else
  3670                           ;pff.c: 892: clst = get_fat(fs->curr_clust);
  3671  006B38  0100               	movlb	0	; () banked
  3672  006B3A  EE20 F022          	lfsr	2,34
  3673  006B3E  0100               	movlb	0	; () banked
  3674  006B40  5174               	movf	pf_read@fs& (0+255),w,b
  3675  006B42  26D9               	addwf	fsr2l,f,c
  3676  006B44  0100               	movlb	0	; () banked
  3677  006B46  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3678  006B48  22DA               	addwfc	fsr2h,f,c
  3679  006B4A  CFDE F01F          	movff	postinc2,get_fat@clst
  3680  006B4E  CFDE F020          	movff	postinc2,get_fat@clst+1
  3681  006B52  CFDE F021          	movff	postinc2,get_fat@clst+2
  3682  006B56  CFDE F022          	movff	postinc2,get_fat@clst+3
  3683  006B5A  ECC1  F032         	call	_get_fat	;wreg free
  3684  006B5E  C01F  F06D         	movff	?_get_fat,pf_read@clst
  3685  006B62  C020  F06E         	movff	?_get_fat+1,pf_read@clst+1
  3686  006B66  C021  F06F         	movff	?_get_fat+2,pf_read@clst+2
  3687  006B6A  C022  F070         	movff	?_get_fat+3,pf_read@clst+3
  3688  006B6E                     l3960:
  3689                           
  3690                           ;pff.c: 893: if (clst <= 1) {fs->flag = 0; return FR_DISK_ERR;};
  3691  006B6E  0E02               	movlw	2
  3692  006B70  6E4D               	movwf	??_pf_read& (0+255),c
  3693  006B72  6A4E               	clrf	(??_pf_read+1)& (0+255),c
  3694  006B74  6A4F               	clrf	(??_pf_read+2)& (0+255),c
  3695  006B76  6A50               	clrf	(??_pf_read+3)& (0+255),c
  3696  006B78  504D               	movf	??_pf_read,w,c
  3697  006B7A  0100               	movlb	0	; () banked
  3698  006B7C  5D6D               	subwf	pf_read@clst& (0+255),w,b
  3699  006B7E  504E               	movf	??_pf_read+1,w,c
  3700  006B80  0100               	movlb	0	; () banked
  3701  006B82  596E               	subwfb	(pf_read@clst+1)& (0+255),w,b
  3702  006B84  504F               	movf	??_pf_read+2,w,c
  3703  006B86  0100               	movlb	0	; () banked
  3704  006B88  596F               	subwfb	(pf_read@clst+2)& (0+255),w,b
  3705  006B8A  5050               	movf	??_pf_read+3,w,c
  3706  006B8C  0100               	movlb	0	; () banked
  3707  006B8E  5970               	subwfb	(pf_read@clst+3)& (0+255),w,b
  3708  006B90  A0D8               	btfss	status,0,c
  3709  006B92  D0CF               	goto	u3960
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;pff.c: 894: fs->curr_clust = clst;
  3713                           
  3714                           ; BSR set to: 0
  3715                           
  3716                           ; BSR set to: 0
  3717                           
  3718                           ; BSR set to: 0
  3719                           
  3720                           ; BSR set to: 0
  3721  006B94  0100               	movlb	0	; () banked
  3722  006B96  EE20 F022          	lfsr	2,34
  3723  006B9A  0100               	movlb	0	; () banked
  3724  006B9C  5174               	movf	pf_read@fs& (0+255),w,b
  3725  006B9E  26D9               	addwf	fsr2l,f,c
  3726  006BA0  0100               	movlb	0	; () banked
  3727  006BA2  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3728  006BA4  22DA               	addwfc	fsr2h,f,c
  3729  006BA6  0100               	movlb	0	; () banked
  3730  006BA8  C06D  FFDE         	movff	pf_read@clst,postinc2
  3731  006BAC  0100               	movlb	0	; () banked
  3732  006BAE  C06E  FFDE         	movff	pf_read@clst+1,postinc2
  3733  006BB2  0100               	movlb	0	; () banked
  3734  006BB4  C06F  FFDE         	movff	pf_read@clst+2,postinc2
  3735  006BB8  0100               	movlb	0	; () banked
  3736  006BBA  C070  FFDE         	movff	pf_read@clst+3,postinc2
  3737  006BBE                     l3970:
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;pff.c: 895: }
  3741                           ;pff.c: 896: sect = clust2sect(fs->curr_clust);
  3742  006BBE  0100               	movlb	0	; () banked
  3743  006BC0  EE20 F022          	lfsr	2,34
  3744  006BC4  0100               	movlb	0	; () banked
  3745  006BC6  5174               	movf	pf_read@fs& (0+255),w,b
  3746  006BC8  26D9               	addwf	fsr2l,f,c
  3747  006BCA  0100               	movlb	0	; () banked
  3748  006BCC  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3749  006BCE  22DA               	addwfc	fsr2h,f,c
  3750  006BD0  CFDE F00D          	movff	postinc2,clust2sect@clst
  3751  006BD4  CFDE F00E          	movff	postinc2,clust2sect@clst+1
  3752  006BD8  CFDE F00F          	movff	postinc2,clust2sect@clst+2
  3753  006BDC  CFDE F010          	movff	postinc2,clust2sect@clst+3
  3754  006BE0  EC41  F029         	call	_clust2sect	;wreg free
  3755  006BE4  C00D  F065         	movff	?_clust2sect,pf_read@sect
  3756  006BE8  C00E  F066         	movff	?_clust2sect+1,pf_read@sect+1
  3757  006BEC  C00F  F067         	movff	?_clust2sect+2,pf_read@sect+2
  3758  006BF0  C010  F068         	movff	?_clust2sect+3,pf_read@sect+3
  3759                           
  3760                           ;pff.c: 897: if (!sect) {fs->flag = 0; return FR_DISK_ERR;};
  3761  006BF4  0100               	movlb	0	; () banked
  3762  006BF6  5168               	movf	(pf_read@sect+3)& (0+255),w,b
  3763  006BF8  1165               	iorwf	pf_read@sect& (0+255),w,b
  3764  006BFA  1166               	iorwf	(pf_read@sect+1)& (0+255),w,b
  3765  006BFC  1167               	iorwf	(pf_read@sect+2)& (0+255),w,b
  3766  006BFE  B4D8               	btfsc	status,2,c
  3767  006C00  D098               	goto	u3960
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;pff.c: 898: fs->dsect = sect + cs;
  3771                           
  3772                           ; BSR set to: 0
  3773                           
  3774                           ; BSR set to: 0
  3775                           
  3776                           ; BSR set to: 0
  3777                           
  3778                           ; BSR set to: 0
  3779  006C02  0100               	movlb	0	; () banked
  3780  006C04  5171               	movf	pf_read@cs& (0+255),w,b
  3781  006C06  0100               	movlb	0	; () banked
  3782  006C08  2565               	addwf	pf_read@sect& (0+255),w,b
  3783  006C0A  6E4D               	movwf	??_pf_read& (0+255),c
  3784  006C0C  0E00               	movlw	0
  3785  006C0E  0100               	movlb	0	; () banked
  3786  006C10  2166               	addwfc	(pf_read@sect+1)& (0+255),w,b
  3787  006C12  6E4E               	movwf	(??_pf_read+1)& (0+255),c
  3788  006C14  0E00               	movlw	0
  3789  006C16  0100               	movlb	0	; () banked
  3790  006C18  2167               	addwfc	(pf_read@sect+2)& (0+255),w,b
  3791  006C1A  6E4F               	movwf	(??_pf_read+2)& (0+255),c
  3792  006C1C  0E00               	movlw	0
  3793  006C1E  0100               	movlb	0	; () banked
  3794  006C20  2168               	addwfc	(pf_read@sect+3)& (0+255),w,b
  3795  006C22  6E50               	movwf	(??_pf_read+3)& (0+255),c
  3796  006C24  0100               	movlb	0	; () banked
  3797  006C26  EE20 F026          	lfsr	2,38
  3798  006C2A  0100               	movlb	0	; () banked
  3799  006C2C  5174               	movf	pf_read@fs& (0+255),w,b
  3800  006C2E  26D9               	addwf	fsr2l,f,c
  3801  006C30  0100               	movlb	0	; () banked
  3802  006C32  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3803  006C34  22DA               	addwfc	fsr2h,f,c
  3804  006C36  C04D  FFDE         	movff	??_pf_read,postinc2
  3805  006C3A  C04E  FFDE         	movff	??_pf_read+1,postinc2
  3806  006C3E  C04F  FFDE         	movff	??_pf_read+2,postinc2
  3807  006C42  C050  FFDD         	movff	??_pf_read+3,postdec2
  3808  006C46  06D9               	decf	fsr2l,f,c
  3809  006C48  06D9               	decf	fsr2l,f,c
  3810  006C4A                     l193:
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;pff.c: 899: }
  3814                           ;pff.c: 900: rcnt = 512 - (UINT)fs->fptr % 512;
  3815  006C4A  0EFF               	movlw	255
  3816  006C4C  6E4D               	movwf	??_pf_read& (0+255),c
  3817  006C4E  0E01               	movlw	1
  3818  006C50  6E4E               	movwf	(??_pf_read+1)& (0+255),c
  3819  006C52  0100               	movlb	0	; () banked
  3820  006C54  EE20 F016          	lfsr	2,22
  3821  006C58  0100               	movlb	0	; () banked
  3822  006C5A  5174               	movf	pf_read@fs& (0+255),w,b
  3823  006C5C  26D9               	addwf	fsr2l,f,c
  3824  006C5E  0100               	movlb	0	; () banked
  3825  006C60  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3826  006C62  22DA               	addwfc	fsr2h,f,c
  3827  006C64  CFDE F04F          	movff	postinc2,??_pf_read+2
  3828  006C68  CFDD F050          	movff	postdec2,??_pf_read+3
  3829  006C6C  504D               	movf	??_pf_read,w,c
  3830  006C6E  164F               	andwf	??_pf_read+2,f,c
  3831  006C70  504E               	movf	??_pf_read+1,w,c
  3832  006C72  1650               	andwf	??_pf_read+3,f,c
  3833  006C74  1E4F               	comf	??_pf_read+2,f,c
  3834  006C76  1E50               	comf	??_pf_read+3,f,c
  3835  006C78  4A4F               	infsnz	??_pf_read+2,f,c
  3836  006C7A  2A50               	incf	??_pf_read+3,f,c
  3837  006C7C  0E00               	movlw	0
  3838  006C7E  244F               	addwf	??_pf_read+2,w,c
  3839  006C80  0100               	movlb	0	; () banked
  3840  006C82  6F72               	movwf	pf_read@rcnt& (0+255),b
  3841  006C84  0E02               	movlw	2
  3842  006C86  2050               	addwfc	??_pf_read+3,w,c
  3843  006C88  0100               	movlb	0	; () banked
  3844  006C8A  6F73               	movwf	(pf_read@rcnt+1)& (0+255),b
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;pff.c: 901: if (rcnt > btr) rcnt = btr;
  3848  006C8C  0100               	movlb	0	; () banked
  3849  006C8E  5172               	movf	pf_read@rcnt& (0+255),w,b
  3850  006C90  5C49               	subwf	pf_read@btr,w,c
  3851  006C92  0100               	movlb	0	; () banked
  3852  006C94  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3853  006C96  584A               	subwfb	pf_read@btr+1,w,c
  3854  006C98  B0D8               	btfsc	status,0,c
  3855  006C9A  D004               	goto	l3986
  3856                           
  3857                           ; BSR set to: 0
  3858  006C9C  C049  F072         	movff	pf_read@btr,pf_read@rcnt
  3859  006CA0  C04A  F073         	movff	pf_read@btr+1,pf_read@rcnt+1
  3860  006CA4                     l3986:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;pff.c: 902: dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (UINT)fs->fptr % 512, rcnt);
  3864  006CA4  5048               	movf	pf_read@buff+1,w,c
  3865  006CA6  1047               	iorwf	pf_read@buff,w,c
  3866  006CA8  B4D8               	btfsc	status,2,c
  3867  006CAA  D007               	goto	l3990
  3868                           
  3869                           ; BSR set to: 0
  3870  006CAC  0100               	movlb	0	; () banked
  3871  006CAE  C061  F063         	movff	pf_read@rbuff+1,_pf_read$366+1
  3872  006CB2  0100               	movlb	0	; () banked
  3873  006CB4  C060  F062         	movff	pf_read@rbuff,_pf_read$366
  3874  006CB8  D006               	goto	l3992
  3875  006CBA                     l3990:
  3876                           
  3877                           ; BSR set to: 0
  3878  006CBA  0E00               	movlw	0
  3879  006CBC  0100               	movlb	0	; () banked
  3880  006CBE  6F63               	movwf	(_pf_read$366+1)& (0+255),b
  3881  006CC0  0E00               	movlw	0
  3882  006CC2  0100               	movlb	0	; () banked
  3883  006CC4  6F62               	movwf	_pf_read$366& (0+255),b
  3884  006CC6                     l3992:
  3885                           
  3886                           ; BSR set to: 0
  3887  006CC6  0100               	movlb	0	; () banked
  3888  006CC8  C063  F00A         	movff	_pf_read$366+1,disk_readp@rd+1
  3889  006CCC  0100               	movlb	0	; () banked
  3890  006CCE  C062  F009         	movff	_pf_read$366,disk_readp@rd
  3891  006CD2  0100               	movlb	0	; () banked
  3892  006CD4  EE20 F026          	lfsr	2,38
  3893  006CD8  0100               	movlb	0	; () banked
  3894  006CDA  5174               	movf	pf_read@fs& (0+255),w,b
  3895  006CDC  26D9               	addwf	fsr2l,f,c
  3896  006CDE  0100               	movlb	0	; () banked
  3897  006CE0  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3898  006CE2  22DA               	addwfc	fsr2h,f,c
  3899  006CE4  CFDE F00B          	movff	postinc2,disk_readp@sector
  3900  006CE8  CFDE F00C          	movff	postinc2,disk_readp@sector+1
  3901  006CEC  CFDE F00D          	movff	postinc2,disk_readp@sector+2
  3902  006CF0  CFDE F00E          	movff	postinc2,disk_readp@sector+3
  3903  006CF4  0100               	movlb	0	; () banked
  3904  006CF6  EE20 F016          	lfsr	2,22
  3905  006CFA  0100               	movlb	0	; () banked
  3906  006CFC  5174               	movf	pf_read@fs& (0+255),w,b
  3907  006CFE  26D9               	addwf	fsr2l,f,c
  3908  006D00  0100               	movlb	0	; () banked
  3909  006D02  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3910  006D04  22DA               	addwfc	fsr2h,f,c
  3911  006D06  CFDE F04D          	movff	postinc2,??_pf_read
  3912  006D0A  CFDD F04E          	movff	postdec2,??_pf_read+1
  3913  006D0E  0EFF               	movlw	255
  3914  006D10  144D               	andwf	??_pf_read,w,c
  3915  006D12  6E0F               	movwf	disk_readp@offset,c
  3916  006D14  0E01               	movlw	1
  3917  006D16  144E               	andwf	??_pf_read+1,w,c
  3918  006D18  6E10               	movwf	disk_readp@offset+1,c
  3919  006D1A  C072  F011         	movff	pf_read@rcnt,disk_readp@count
  3920  006D1E  C073  F012         	movff	pf_read@rcnt+1,disk_readp@count+1
  3921  006D22  EC46  F031         	call	_disk_readp	;wreg free
  3922  006D26  0100               	movlb	0	; () banked
  3923  006D28  6F64               	movwf	pf_read@dr& (0+255),b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;pff.c: 903: if (dr) {fs->flag = 0; return FR_DISK_ERR;};
  3927  006D2A  0100               	movlb	0	; () banked
  3928  006D2C  5164               	movf	pf_read@dr& (0+255),w,b
  3929  006D2E  B4D8               	btfsc	status,2,c
  3930  006D30  D00D               	goto	l4002
  3931  006D32                     u3960:
  3932                           
  3933                           ; BSR set to: 0
  3934  006D32  0100               	movlb	0	; () banked
  3935  006D34  EE20 F001          	lfsr	2,1
  3936  006D38  0100               	movlb	0	; () banked
  3937  006D3A  5174               	movf	pf_read@fs& (0+255),w,b
  3938  006D3C  26D9               	addwf	fsr2l,f,c
  3939  006D3E  0100               	movlb	0	; () banked
  3940  006D40  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3941  006D42  22DA               	addwfc	fsr2h,f,c
  3942  006D44  0E00               	movlw	0
  3943  006D46  6EDF               	movwf	indf2,c
  3944                           
  3945                           ; BSR set to: 0
  3946  006D48  0E01               	movlw	1
  3947  006D4A  D031               	goto	l188
  3948  006D4C                     l4002:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;pff.c: 904: fs->fptr += rcnt; rbuff += rcnt;
  3952  006D4C  0100               	movlb	0	; () banked
  3953  006D4E  EE20 F016          	lfsr	2,22
  3954  006D52  0100               	movlb	0	; () banked
  3955  006D54  5174               	movf	pf_read@fs& (0+255),w,b
  3956  006D56  26D9               	addwf	fsr2l,f,c
  3957  006D58  0100               	movlb	0	; () banked
  3958  006D5A  5175               	movf	(pf_read@fs+1)& (0+255),w,b
  3959  006D5C  22DA               	addwfc	fsr2h,f,c
  3960  006D5E  0100               	movlb	0	; () banked
  3961  006D60  5172               	movf	pf_read@rcnt& (0+255),w,b
  3962  006D62  26DE               	addwf	postinc2,f,c
  3963  006D64  0100               	movlb	0	; () banked
  3964  006D66  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3965  006D68  22DE               	addwfc	postinc2,f,c
  3966  006D6A  0E00               	movlw	0
  3967  006D6C  22DE               	addwfc	postinc2,f,c
  3968  006D6E  22DD               	addwfc	postdec2,f,c
  3969  006D70  52DD               	movf	postdec2,f,c
  3970  006D72  52DD               	movf	postdec2,f,c
  3971                           
  3972                           ; BSR set to: 0
  3973  006D74  0100               	movlb	0	; () banked
  3974  006D76  5172               	movf	pf_read@rcnt& (0+255),w,b
  3975  006D78  0100               	movlb	0	; () banked
  3976  006D7A  2760               	addwf	pf_read@rbuff& (0+255),f,b
  3977  006D7C  0100               	movlb	0	; () banked
  3978  006D7E  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3979  006D80  0100               	movlb	0	; () banked
  3980  006D82  2361               	addwfc	(pf_read@rbuff+1)& (0+255),f,b
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;pff.c: 905: btr -= rcnt; *br += rcnt;
  3984  006D84  0100               	movlb	0	; () banked
  3985  006D86  5172               	movf	pf_read@rcnt& (0+255),w,b
  3986  006D88  5E49               	subwf	pf_read@btr,f,c
  3987  006D8A  0100               	movlb	0	; () banked
  3988  006D8C  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3989  006D8E  5A4A               	subwfb	pf_read@btr+1,f,c
  3990                           
  3991                           ; BSR set to: 0
  3992  006D90  C04B  FFD9         	movff	pf_read@br,fsr2l
  3993  006D94  C04C  FFDA         	movff	pf_read@br+1,fsr2h
  3994  006D98  0100               	movlb	0	; () banked
  3995  006D9A  5172               	movf	pf_read@rcnt& (0+255),w,b
  3996  006D9C  26DE               	addwf	postinc2,f,c
  3997  006D9E  0100               	movlb	0	; () banked
  3998  006DA0  5173               	movf	(pf_read@rcnt+1)& (0+255),w,b
  3999  006DA2  22DD               	addwfc	postdec2,f,c
  4000  006DA4                     l4010:
  4001                           
  4002                           ; BSR set to: 0
  4003  006DA4  504A               	movf	pf_read@btr+1,w,c
  4004  006DA6  1049               	iorwf	pf_read@btr,w,c
  4005  006DA8  A4D8               	btfss	status,2,c
  4006  006DAA  D652               	goto	l3948
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;pff.c: 906: }
  4010                           ;pff.c: 908: return FR_OK;
  4011                           
  4012                           ; BSR set to: 0
  4013  006DAC  0E00               	movlw	0
  4014  006DAE                     l188:
  4015                           
  4016                           ; BSR set to: 0
  4017  006DAE  0012               	return	
  4018  006DB0                     __end_of_pf_read:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           tblptrh	equ	0xFF7
  4022                           tblptrl	equ	0xFF6
  4023                           tablat	equ	0xFF5
  4024                           postinc0	equ	0xFEE
  4025                           wreg	equ	0xFE8
  4026                           postdec1	equ	0xFE5
  4027                           fsr1h	equ	0xFE2
  4028                           fsr1l	equ	0xFE1
  4029                           indf2	equ	0xFDF
  4030                           postinc2	equ	0xFDE
  4031                           postdec2	equ	0xFDD
  4032                           plusw2	equ	0xFDB
  4033                           fsr2h	equ	0xFDA
  4034                           fsr2l	equ	0xFD9
  4035                           status	equ	0xFD8
  4036                           
  4037 ;; *************** function _pf_open *****************
  4038 ;; Defined at:
  4039 ;;		line 829 in file "pff.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  path            2   11[BANK0 ] PTR const unsigned char 
  4042 ;;		 -> STR_6(10), 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  dir            32   47[BANK0 ] unsigned char [32]
  4045 ;;  dj             16   82[BANK0 ] struct .
  4046 ;;  sp             12   35[BANK0 ] unsigned char [12]
  4047 ;;  fs              2   80[BANK0 ] PTR struct .
  4048 ;;		 -> main@fs(42), NULL(0), 
  4049 ;;  res             1   79[BANK0 ] enum E43
  4050 ;; Return value:  Size  Location     Type
  4051 ;;                  1    wreg      enum E43
  4052 ;; Registers used:
  4053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4054 ;; Tracked objects:
  4055 ;;		On entry : 0/0
  4056 ;;		On exit  : 0/0
  4057 ;;		Unchanged: 0/0
  4058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4059 ;;      Params:         0       2       0       0       0       0       0       0       0
  4060 ;;      Locals:         0      63       0       0       0       0       0       0       0
  4061 ;;      Temps:          0      22       0       0       0       0       0       0       0
  4062 ;;      Totals:         0      87       0       0       0       0       0       0       0
  4063 ;;Total ram usage:       87 bytes
  4064 ;; Hardware stack levels used:    1
  4065 ;; Hardware stack levels required when called:    9
  4066 ;; This function calls:
  4067 ;;		_follow_path
  4068 ;;		_get_clust
  4069 ;; This function is called by:
  4070 ;;		_main
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	text7
  4075  005C84                     __ptext7:
  4076                           	opt stack 0
  4077  005C84                     _pf_open:
  4078                           	opt stack 20
  4079                           
  4080                           ;pff.c: 833: FRESULT res;
  4081                           ;pff.c: 834: DIR dj;
  4082                           ;pff.c: 835: BYTE sp[12], dir[32];
  4083                           ;pff.c: 836: FATFS *fs = FatFs;
  4084                           
  4085                           ; BSR set to: 0
  4086                           ;incstack = 0
  4087  005C84  0100               	movlb	0	; () banked
  4088  005C86  C0F4  F0B1         	movff	_FatFs+1,pf_open@fs+1
  4089  005C8A  0100               	movlb	0	; () banked
  4090  005C8C  C0F3  F0B0         	movff	_FatFs,pf_open@fs
  4091                           
  4092                           ;pff.c: 838: if (!fs) return FR_NOT_ENABLED;
  4093  005C90  0100               	movlb	0	; () banked
  4094  005C92  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4095  005C94  11B0               	iorwf	pf_open@fs& (0+255),w,b
  4096  005C96  A4D8               	btfss	status,2,c
  4097  005C98  D002               	goto	l3894
  4098                           
  4099                           ; BSR set to: 0
  4100  005C9A  0E05               	movlw	5
  4101  005C9C  D0EC               	goto	l180
  4102  005C9E                     l3894:
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;pff.c: 840: fs->flag = 0;
  4106  005C9E  0100               	movlb	0	; () banked
  4107  005CA0  EE20 F001          	lfsr	2,1
  4108  005CA4  0100               	movlb	0	; () banked
  4109  005CA6  51B0               	movf	pf_open@fs& (0+255),w,b
  4110  005CA8  26D9               	addwf	fsr2l,f,c
  4111  005CAA  0100               	movlb	0	; () banked
  4112  005CAC  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4113  005CAE  22DA               	addwfc	fsr2h,f,c
  4114  005CB0  0E00               	movlw	0
  4115  005CB2  6EDF               	movwf	indf2,c
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;pff.c: 841: dj.fn = sp;
  4119  005CB4  0100               	movlb	0	; () banked
  4120  005CB6  0E00               	movlw	high pf_open@sp
  4121  005CB8  0100               	movlb	0	; () banked
  4122  005CBA  6FB5               	movwf	(pf_open@dj+3)& (0+255),b
  4123  005CBC  0100               	movlb	0	; () banked
  4124  005CBE  0E83               	movlw	low pf_open@sp
  4125  005CC0  0100               	movlb	0	; () banked
  4126  005CC2  6FB4               	movwf	(pf_open@dj+2)& (0+255),b
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;pff.c: 842: res = follow_path(&dj, dir, "check.txt" );
  4130  005CC4  0100               	movlb	0	; () banked
  4131  005CC6  0E00               	movlw	high pf_open@dj
  4132  005CC8  0100               	movlb	0	; () banked
  4133  005CCA  6F61               	movwf	(follow_path@dj+1)& (0+255),b
  4134  005CCC  0100               	movlb	0	; () banked
  4135  005CCE  0EB2               	movlw	low pf_open@dj
  4136  005CD0  0100               	movlb	0	; () banked
  4137  005CD2  6F60               	movwf	follow_path@dj& (0+255),b
  4138  005CD4  0100               	movlb	0	; () banked
  4139  005CD6  0E00               	movlw	high pf_open@dir
  4140  005CD8  0100               	movlb	0	; () banked
  4141  005CDA  6F63               	movwf	(follow_path@dir+1)& (0+255),b
  4142  005CDC  0100               	movlb	0	; () banked
  4143  005CDE  0E8F               	movlw	low pf_open@dir
  4144  005CE0  0100               	movlb	0	; () banked
  4145  005CE2  6F62               	movwf	follow_path@dir& (0+255),b
  4146  005CE4  0E7C               	movlw	high STR_1
  4147  005CE6  0100               	movlb	0	; () banked
  4148  005CE8  6F65               	movwf	(follow_path@path+1)& (0+255),b
  4149  005CEA  0EE5               	movlw	low STR_1
  4150  005CEC  0100               	movlb	0	; () banked
  4151  005CEE  6F64               	movwf	follow_path@path& (0+255),b
  4152  005CF0  EC9D  F02C         	call	_follow_path	;wreg free
  4153  005CF4  0100               	movlb	0	; () banked
  4154  005CF6  6FAF               	movwf	pf_open@res& (0+255),b
  4155                           
  4156                           ; BSR set to: 0
  4157                           ;pff.c: 843: if (res != FR_OK) return res;
  4158  005CF8  0100               	movlb	0	; () banked
  4159  005CFA  51AF               	movf	pf_open@res& (0+255),w,b
  4160  005CFC  B4D8               	btfsc	status,2,c
  4161  005CFE  D003               	goto	l3906
  4162                           
  4163                           ; BSR set to: 0
  4164  005D00  0100               	movlb	0	; () banked
  4165  005D02  51AF               	movf	pf_open@res& (0+255),w,b
  4166  005D04  D0B8               	goto	l180
  4167  005D06                     l3906:
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;pff.c: 844: if (!dir[0] || (dir[11] & 0x10))
  4171  005D06  0100               	movlb	0	; () banked
  4172  005D08  518F               	movf	pf_open@dir& (0+255),w,b
  4173  005D0A  B4D8               	btfsc	status,2,c
  4174  005D0C  D003               	goto	l3910
  4175                           
  4176                           ; BSR set to: 0
  4177  005D0E  0100               	movlb	0	; () banked
  4178  005D10  A99A               	btfss	(pf_open@dir+11)& (0+255),4,b
  4179  005D12  D002               	goto	l3914
  4180  005D14                     l3910:
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;pff.c: 845: return FR_NO_FILE;
  4184  005D14  0E03               	movlw	3
  4185  005D16  D0AF               	goto	l180
  4186  005D18                     l3914:
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;pff.c: 847: fs->org_clust = get_clust(dir);
  4190  005D18  0100               	movlb	0	; () banked
  4191  005D1A  0E00               	movlw	high pf_open@dir
  4192  005D1C  6E02               	movwf	get_clust@dir+1,c
  4193  005D1E  0100               	movlb	0	; () banked
  4194  005D20  0E8F               	movlw	low pf_open@dir
  4195  005D22  6E01               	movwf	get_clust@dir,c
  4196  005D24  ECDC  F028         	call	_get_clust	;wreg free
  4197  005D28  C001  F06D         	movff	?_get_clust,??_pf_open
  4198  005D2C  C002  F06E         	movff	?_get_clust+1,??_pf_open+1
  4199  005D30  C003  F06F         	movff	?_get_clust+2,??_pf_open+2
  4200  005D34  C004  F070         	movff	?_get_clust+3,??_pf_open+3
  4201  005D38  0100               	movlb	0	; () banked
  4202  005D3A  EE20 F01E          	lfsr	2,30
  4203  005D3E  0100               	movlb	0	; () banked
  4204  005D40  51B0               	movf	pf_open@fs& (0+255),w,b
  4205  005D42  26D9               	addwf	fsr2l,f,c
  4206  005D44  0100               	movlb	0	; () banked
  4207  005D46  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4208  005D48  22DA               	addwfc	fsr2h,f,c
  4209  005D4A  C06D  FFDE         	movff	??_pf_open,postinc2
  4210  005D4E  C06E  FFDE         	movff	??_pf_open+1,postinc2
  4211  005D52  C06F  FFDE         	movff	??_pf_open+2,postinc2
  4212  005D56  C070  FFDD         	movff	??_pf_open+3,postdec2
  4213  005D5A  06D9               	decf	fsr2l,f,c
  4214  005D5C  06D9               	decf	fsr2l,f,c
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;pff.c: 848: fs->fsize = (DWORD)(((DWORD)*((BYTE*)(dir+28)+3)<<24)|((DWORD)*((BYTE*)(dir
      +                          +28)+2)<<16)|((WORD)*((BYTE*)(dir+28)+1)<<8)|*(BYTE*)(dir+28));
  4218  005D5E  0100               	movlb	0	; () banked
  4219  005D60  51AC               	movf	(pf_open@dir+29)& (0+255),w,b
  4220  005D62  0100               	movlb	0	; () banked
  4221  005D64  6F6E               	movwf	(??_pf_open+1)& (0+255),b
  4222  005D66  6B6D               	clrf	??_pf_open& (0+255),b
  4223  005D68  0100               	movlb	0	; () banked
  4224  005D6A  C0AD  F06F         	movff	pf_open@dir+30,??_pf_open+2
  4225  005D6E  0100               	movlb	0	; () banked
  4226  005D70  6B70               	clrf	(??_pf_open+3)& (0+255),b
  4227  005D72  6B71               	clrf	(??_pf_open+4)& (0+255),b
  4228  005D74  6B72               	clrf	(??_pf_open+5)& (0+255),b
  4229  005D76  C070  F072         	movff	??_pf_open+3,??_pf_open+5
  4230  005D7A  C06F  F071         	movff	??_pf_open+2,??_pf_open+4
  4231  005D7E  0100               	movlb	0	; () banked
  4232  005D80  6B70               	clrf	(??_pf_open+3)& (0+255),b
  4233  005D82  6B6F               	clrf	(??_pf_open+2)& (0+255),b
  4234  005D84  0100               	movlb	0	; () banked
  4235  005D86  C0AE  F073         	movff	pf_open@dir+31,??_pf_open+6
  4236  005D8A  0100               	movlb	0	; () banked
  4237  005D8C  6B74               	clrf	(??_pf_open+7)& (0+255),b
  4238  005D8E  6B75               	clrf	(??_pf_open+8)& (0+255),b
  4239  005D90  6B76               	clrf	(??_pf_open+9)& (0+255),b
  4240  005D92  C073  F076         	movff	??_pf_open+6,??_pf_open+9
  4241  005D96  0100               	movlb	0	; () banked
  4242  005D98  6B75               	clrf	(??_pf_open+8)& (0+255),b
  4243  005D9A  6B74               	clrf	(??_pf_open+7)& (0+255),b
  4244  005D9C  6B73               	clrf	(??_pf_open+6)& (0+255),b
  4245  005D9E  0100               	movlb	0	; () banked
  4246  005DA0  516F               	movf	(??_pf_open+2)& (0+255),w,b
  4247  005DA2  0100               	movlb	0	; () banked
  4248  005DA4  1173               	iorwf	(??_pf_open+6)& (0+255),w,b
  4249  005DA6  0100               	movlb	0	; () banked
  4250  005DA8  6F77               	movwf	(??_pf_open+10)& (0+255),b
  4251  005DAA  0100               	movlb	0	; () banked
  4252  005DAC  5170               	movf	(??_pf_open+3)& (0+255),w,b
  4253  005DAE  0100               	movlb	0	; () banked
  4254  005DB0  1174               	iorwf	(??_pf_open+7)& (0+255),w,b
  4255  005DB2  0100               	movlb	0	; () banked
  4256  005DB4  6F78               	movwf	(??_pf_open+11)& (0+255),b
  4257  005DB6  0100               	movlb	0	; () banked
  4258  005DB8  5171               	movf	(??_pf_open+4)& (0+255),w,b
  4259  005DBA  0100               	movlb	0	; () banked
  4260  005DBC  1175               	iorwf	(??_pf_open+8)& (0+255),w,b
  4261  005DBE  0100               	movlb	0	; () banked
  4262  005DC0  6F79               	movwf	(??_pf_open+12)& (0+255),b
  4263  005DC2  0100               	movlb	0	; () banked
  4264  005DC4  5172               	movf	(??_pf_open+5)& (0+255),w,b
  4265  005DC6  0100               	movlb	0	; () banked
  4266  005DC8  1176               	iorwf	(??_pf_open+9)& (0+255),w,b
  4267  005DCA  0100               	movlb	0	; () banked
  4268  005DCC  6F7A               	movwf	(??_pf_open+13)& (0+255),b
  4269  005DCE  0100               	movlb	0	; () banked
  4270  005DD0  516D               	movf	??_pf_open& (0+255),w,b
  4271  005DD2  0100               	movlb	0	; () banked
  4272  005DD4  1177               	iorwf	(??_pf_open+10)& (0+255),w,b
  4273  005DD6  0100               	movlb	0	; () banked
  4274  005DD8  6F7B               	movwf	(??_pf_open+14)& (0+255),b
  4275  005DDA  0100               	movlb	0	; () banked
  4276  005DDC  516E               	movf	(??_pf_open+1)& (0+255),w,b
  4277  005DDE  0100               	movlb	0	; () banked
  4278  005DE0  1178               	iorwf	(??_pf_open+11)& (0+255),w,b
  4279  005DE2  0100               	movlb	0	; () banked
  4280  005DE4  6F7C               	movwf	(??_pf_open+15)& (0+255),b
  4281  005DE6  0E00               	movlw	0
  4282  005DE8  0100               	movlb	0	; () banked
  4283  005DEA  1179               	iorwf	(??_pf_open+12)& (0+255),w,b
  4284  005DEC  0100               	movlb	0	; () banked
  4285  005DEE  6F7D               	movwf	(??_pf_open+16)& (0+255),b
  4286  005DF0  0E00               	movlw	0
  4287  005DF2  0100               	movlb	0	; () banked
  4288  005DF4  117A               	iorwf	(??_pf_open+13)& (0+255),w,b
  4289  005DF6  0100               	movlb	0	; () banked
  4290  005DF8  6F7E               	movwf	(??_pf_open+17)& (0+255),b
  4291  005DFA  0100               	movlb	0	; () banked
  4292  005DFC  51AB               	movf	(pf_open@dir+28)& (0+255),w,b
  4293  005DFE  0100               	movlb	0	; () banked
  4294  005E00  117B               	iorwf	(??_pf_open+14)& (0+255),w,b
  4295  005E02  0100               	movlb	0	; () banked
  4296  005E04  6F7F               	movwf	(??_pf_open+18)& (0+255),b
  4297  005E06  0100               	movlb	0	; () banked
  4298  005E08  517C               	movf	(??_pf_open+15)& (0+255),w,b
  4299  005E0A  0100               	movlb	0	; () banked
  4300  005E0C  6F80               	movwf	(??_pf_open+19)& (0+255),b
  4301  005E0E  0100               	movlb	0	; () banked
  4302  005E10  517D               	movf	(??_pf_open+16)& (0+255),w,b
  4303  005E12  0100               	movlb	0	; () banked
  4304  005E14  6F81               	movwf	(??_pf_open+20)& (0+255),b
  4305  005E16  0100               	movlb	0	; () banked
  4306  005E18  517E               	movf	(??_pf_open+17)& (0+255),w,b
  4307  005E1A  0100               	movlb	0	; () banked
  4308  005E1C  6F82               	movwf	(??_pf_open+21)& (0+255),b
  4309  005E1E  0100               	movlb	0	; () banked
  4310  005E20  EE20 F01A          	lfsr	2,26
  4311  005E24  0100               	movlb	0	; () banked
  4312  005E26  51B0               	movf	pf_open@fs& (0+255),w,b
  4313  005E28  26D9               	addwf	fsr2l,f,c
  4314  005E2A  0100               	movlb	0	; () banked
  4315  005E2C  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4316  005E2E  22DA               	addwfc	fsr2h,f,c
  4317  005E30  C07F  FFDE         	movff	??_pf_open+18,postinc2
  4318  005E34  C080  FFDE         	movff	??_pf_open+19,postinc2
  4319  005E38  C081  FFDE         	movff	??_pf_open+20,postinc2
  4320  005E3C  C082  FFDD         	movff	??_pf_open+21,postdec2
  4321  005E40  06D9               	decf	fsr2l,f,c
  4322  005E42  06D9               	decf	fsr2l,f,c
  4323                           
  4324                           ; BSR set to: 0
  4325                           ;pff.c: 849: fs->fptr = 0;
  4326  005E44  0100               	movlb	0	; () banked
  4327  005E46  EE20 F016          	lfsr	2,22
  4328  005E4A  0100               	movlb	0	; () banked
  4329  005E4C  51B0               	movf	pf_open@fs& (0+255),w,b
  4330  005E4E  26D9               	addwf	fsr2l,f,c
  4331  005E50  0100               	movlb	0	; () banked
  4332  005E52  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4333  005E54  22DA               	addwfc	fsr2h,f,c
  4334  005E56  6ADE               	clrf	postinc2,c
  4335  005E58  6ADE               	clrf	postinc2,c
  4336  005E5A  6ADE               	clrf	postinc2,c
  4337  005E5C  6ADD               	clrf	postdec2,c
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;pff.c: 850: fs->flag = 0x01;
  4341  005E5E  0100               	movlb	0	; () banked
  4342  005E60  EE20 F001          	lfsr	2,1
  4343  005E64  0100               	movlb	0	; () banked
  4344  005E66  51B0               	movf	pf_open@fs& (0+255),w,b
  4345  005E68  26D9               	addwf	fsr2l,f,c
  4346  005E6A  0100               	movlb	0	; () banked
  4347  005E6C  51B1               	movf	(pf_open@fs+1)& (0+255),w,b
  4348  005E6E  22DA               	addwfc	fsr2h,f,c
  4349  005E70  0E01               	movlw	1
  4350  005E72  6EDF               	movwf	indf2,c
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;pff.c: 852: return FR_OK;
  4354  005E74  0E00               	movlw	0
  4355  005E76                     l180:
  4356                           
  4357                           ; BSR set to: 0
  4358  005E76  0012               	return	
  4359  005E78                     __end_of_pf_open:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           postinc0	equ	0xFEE
  4366                           wreg	equ	0xFE8
  4367                           postdec1	equ	0xFE5
  4368                           fsr1h	equ	0xFE2
  4369                           fsr1l	equ	0xFE1
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           plusw2	equ	0xFDB
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _follow_path *****************
  4379 ;; Defined at:
  4380 ;;		line 680 in file "pff.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  dj              2    0[BANK0 ] PTR struct .
  4383 ;;		 -> pf_open@dj(16), 
  4384 ;;  dir             2    2[BANK0 ] PTR unsigned char 
  4385 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  4386 ;;  path            2    4[BANK0 ] PTR const unsigned char 
  4387 ;;		 -> STR_1(10), 
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;  res             1   10[BANK0 ] enum E43
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      enum E43
  4392 ;; Registers used:
  4393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4399 ;;      Params:         0       6       0       0       0       0       0       0       0
  4400 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4401 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4402 ;;      Totals:         0      11       0       0       0       0       0       0       0
  4403 ;;Total ram usage:       11 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:    8
  4406 ;; This function calls:
  4407 ;;		_create_name
  4408 ;;		_dir_find
  4409 ;;		_dir_rewind
  4410 ;;		_get_clust
  4411 ;; This function is called by:
  4412 ;;		_pf_open
  4413 ;;		_pf_opendir
  4414 ;; This function uses a non-reentrant model
  4415 ;;
  4416                           
  4417                           	psect	text8
  4418  00593A                     __ptext8:
  4419                           	opt stack 0
  4420  00593A                     _follow_path:
  4421                           	opt stack 20
  4422                           
  4423                           ;pff.c: 686: FRESULT res;
  4424                           ;pff.c: 689: while (*path == ' ') path++;
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;incstack = 0
  4428  00593A  D003               	goto	l3440
  4429  00593C                     l3438:
  4430  00593C  0100               	movlb	0	; () banked
  4431  00593E  4B64               	infsnz	follow_path@path& (0+255),f,b
  4432  005940  2B65               	incf	(follow_path@path+1)& (0+255),f,b
  4433  005942                     l3440:
  4434  005942  0100               	movlb	0	; () banked
  4435  005944  C064  FFF6         	movff	follow_path@path,tblptrl
  4436  005948  0100               	movlb	0	; () banked
  4437  00594A  C065  FFF7         	movff	follow_path@path+1,tblptrh
  4438  00594E                     	if	0	;tblptru may be non-zero
  4439  00594E                     	endif
  4440  00594E                     	if	0	;tblptru may be non-zero
  4441  00594E                     	endif
  4442  00594E  0008               	tblrd		*
  4443  005950  50F5               	movf	tablat,w,c
  4444  005952  0A20               	xorlw	32
  4445  005954  B4D8               	btfsc	status,2,c
  4446  005956  D7F2               	goto	l3438
  4447                           
  4448                           ; BSR set to: 0
  4449                           ;pff.c: 690: if (*path == '/') path++;
  4450                           
  4451                           ; BSR set to: 0
  4452  005958  0100               	movlb	0	; () banked
  4453  00595A  C064  FFF6         	movff	follow_path@path,tblptrl
  4454  00595E  0100               	movlb	0	; () banked
  4455  005960  C065  FFF7         	movff	follow_path@path+1,tblptrh
  4456  005964                     	if	0	;tblptru may be non-zero
  4457  005964                     	endif
  4458  005964                     	if	0	;tblptru may be non-zero
  4459  005964                     	endif
  4460  005964  0008               	tblrd		*
  4461  005966  50F5               	movf	tablat,w,c
  4462  005968  0A2F               	xorlw	47
  4463  00596A  A4D8               	btfss	status,2,c
  4464  00596C  D003               	goto	l3446
  4465                           
  4466                           ; BSR set to: 0
  4467  00596E  0100               	movlb	0	; () banked
  4468  005970  4B64               	infsnz	follow_path@path& (0+255),f,b
  4469  005972  2B65               	incf	(follow_path@path+1)& (0+255),f,b
  4470  005974                     l3446:
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;pff.c: 691: dj->sclust = 0;
  4474  005974  0100               	movlb	0	; () banked
  4475  005976  EE20 F004          	lfsr	2,4
  4476  00597A  0100               	movlb	0	; () banked
  4477  00597C  5160               	movf	follow_path@dj& (0+255),w,b
  4478  00597E  26D9               	addwf	fsr2l,f,c
  4479  005980  0100               	movlb	0	; () banked
  4480  005982  5161               	movf	(follow_path@dj+1)& (0+255),w,b
  4481  005984  22DA               	addwfc	fsr2h,f,c
  4482  005986  6ADE               	clrf	postinc2,c
  4483  005988  6ADE               	clrf	postinc2,c
  4484  00598A  6ADE               	clrf	postinc2,c
  4485  00598C  6ADD               	clrf	postdec2,c
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;pff.c: 693: if ((BYTE)*path < ' ') {
  4489  00598E  0E20               	movlw	32
  4490  005990  0100               	movlb	0	; () banked
  4491  005992  C064  FFF6         	movff	follow_path@path,tblptrl
  4492  005996  0100               	movlb	0	; () banked
  4493  005998  C065  FFF7         	movff	follow_path@path+1,tblptrh
  4494  00599C                     	if	0	;tblptru may be non-zero
  4495  00599C                     	endif
  4496  00599C                     	if	0	;tblptru may be non-zero
  4497  00599C                     	endif
  4498  00599C  0008               	tblrd		*
  4499  00599E  CFF5 F066          	movff	tablat,??_follow_path
  4500  0059A2  0100               	movlb	0	; () banked
  4501  0059A4  5D66               	subwf	??_follow_path& (0+255),w,b
  4502  0059A6  B0D8               	btfsc	status,0,c
  4503  0059A8  D011               	goto	l3454
  4504                           
  4505                           ; BSR set to: 0
  4506                           ;pff.c: 694: res = dir_rewind(dj);
  4507  0059AA  0100               	movlb	0	; () banked
  4508  0059AC  C061  F01D         	movff	follow_path@dj+1,dir_rewind@dj+1
  4509  0059B0  0100               	movlb	0	; () banked
  4510  0059B2  C060  F01C         	movff	follow_path@dj,dir_rewind@dj
  4511  0059B6  ECB8  F02A         	call	_dir_rewind	;wreg free
  4512  0059BA  0100               	movlb	0	; () banked
  4513  0059BC  6F6A               	movwf	follow_path@res& (0+255),b
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;pff.c: 695: dir[0] = 0;
  4517  0059BE  C062  FFD9         	movff	follow_path@dir,fsr2l
  4518  0059C2  C063  FFDA         	movff	follow_path@dir+1,fsr2h
  4519  0059C6  0E00               	movlw	0
  4520  0059C8  6EDF               	movwf	indf2,c
  4521                           
  4522                           ;pff.c: 697: } else {
  4523  0059CA  D071               	goto	l3476
  4524  0059CC                     l3454:
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;pff.c: 699: res = create_name(dj, &path);
  4528  0059CC  0100               	movlb	0	; () banked
  4529  0059CE  C061  F00A         	movff	follow_path@dj+1,create_name@dj+1
  4530  0059D2  0100               	movlb	0	; () banked
  4531  0059D4  C060  F009         	movff	follow_path@dj,create_name@dj
  4532  0059D8  0100               	movlb	0	; () banked
  4533  0059DA  0E00               	movlw	high follow_path@path
  4534  0059DC  6E0C               	movwf	create_name@path+1,c
  4535  0059DE  0100               	movlb	0	; () banked
  4536  0059E0  0E64               	movlw	low follow_path@path
  4537  0059E2  6E0B               	movwf	create_name@path,c
  4538  0059E4  EC54  F02B         	call	_create_name	;wreg free
  4539  0059E8  0100               	movlb	0	; () banked
  4540  0059EA  6F6A               	movwf	follow_path@res& (0+255),b
  4541                           
  4542                           ; BSR set to: 0
  4543                           ;pff.c: 700: if (res != FR_OK) break;
  4544  0059EC  0100               	movlb	0	; () banked
  4545  0059EE  516A               	movf	follow_path@res& (0+255),w,b
  4546  0059F0  A4D8               	btfss	status,2,c
  4547  0059F2  D05D               	goto	l3476
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;pff.c: 701: res = dir_find(dj, dir);
  4551                           
  4552                           ; BSR set to: 0
  4553                           
  4554                           ; BSR set to: 0
  4555  0059F4  0100               	movlb	0	; () banked
  4556  0059F6  C061  F059         	movff	follow_path@dj+1,dir_find@dj+1
  4557  0059FA  0100               	movlb	0	; () banked
  4558  0059FC  C060  F058         	movff	follow_path@dj,dir_find@dj
  4559  005A00  0100               	movlb	0	; () banked
  4560  005A02  C063  F05B         	movff	follow_path@dir+1,dir_find@dir+1
  4561  005A06  0100               	movlb	0	; () banked
  4562  005A08  C062  F05A         	movff	follow_path@dir,dir_find@dir
  4563  005A0C  ECAB  F029         	call	_dir_find	;wreg free
  4564  005A10  0100               	movlb	0	; () banked
  4565  005A12  6F6A               	movwf	follow_path@res& (0+255),b
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;pff.c: 702: if (res != FR_OK) break;
  4569  005A14  0100               	movlb	0	; () banked
  4570  005A16  516A               	movf	follow_path@res& (0+255),w,b
  4571  005A18  A4D8               	btfss	status,2,c
  4572  005A1A  D049               	goto	l3476
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;pff.c: 703: if (dj->fn[11]) break;
  4576                           
  4577                           ; BSR set to: 0
  4578                           
  4579                           ; BSR set to: 0
  4580  005A1C  0100               	movlb	0	; () banked
  4581  005A1E  EE20 F002          	lfsr	2,2
  4582  005A22  0100               	movlb	0	; () banked
  4583  005A24  5160               	movf	follow_path@dj& (0+255),w,b
  4584  005A26  26D9               	addwf	fsr2l,f,c
  4585  005A28  0100               	movlb	0	; () banked
  4586  005A2A  5161               	movf	(follow_path@dj+1)& (0+255),w,b
  4587  005A2C  22DA               	addwfc	fsr2h,f,c
  4588  005A2E  EE10 F00B          	lfsr	1,11
  4589  005A32  50DE               	movf	postinc2,w,c
  4590  005A34  26E1               	addwf	fsr1l,f,c
  4591  005A36  50DD               	movf	postdec2,w,c
  4592  005A38  22E2               	addwfc	fsr1h,f,c
  4593  005A3A  50E7               	movf	indf1,w,c
  4594  005A3C  A4D8               	btfss	status,2,c
  4595  005A3E  D037               	goto	l3476
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;pff.c: 704: if (!(dir[11] & 0x10)) {
  4599                           
  4600                           ; BSR set to: 0
  4601                           
  4602                           ; BSR set to: 0
  4603  005A40  0100               	movlb	0	; () banked
  4604  005A42  EE20 F00B          	lfsr	2,11
  4605  005A46  0100               	movlb	0	; () banked
  4606  005A48  5162               	movf	follow_path@dir& (0+255),w,b
  4607  005A4A  26D9               	addwf	fsr2l,f,c
  4608  005A4C  0100               	movlb	0	; () banked
  4609  005A4E  5163               	movf	(follow_path@dir+1)& (0+255),w,b
  4610  005A50  22DA               	addwfc	fsr2h,f,c
  4611  005A52  50DF               	movf	indf2,w,c
  4612  005A54  0100               	movlb	0	; () banked
  4613  005A56  6F66               	movwf	??_follow_path& (0+255),b
  4614  005A58  0100               	movlb	0	; () banked
  4615  005A5A  B966               	btfsc	??_follow_path& (0+255),4,b
  4616  005A5C  D004               	goto	l3474
  4617                           
  4618                           ; BSR set to: 0
  4619                           ;pff.c: 705: res = FR_NO_FILE; break;
  4620  005A5E  0E03               	movlw	3
  4621  005A60  0100               	movlb	0	; () banked
  4622  005A62  6F6A               	movwf	follow_path@res& (0+255),b
  4623  005A64  D024               	goto	l3476
  4624  005A66                     l3474:
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;pff.c: 706: }
  4628                           ;pff.c: 707: dj->sclust = get_clust(dir);
  4629  005A66  0100               	movlb	0	; () banked
  4630  005A68  C063  F002         	movff	follow_path@dir+1,get_clust@dir+1
  4631  005A6C  0100               	movlb	0	; () banked
  4632  005A6E  C062  F001         	movff	follow_path@dir,get_clust@dir
  4633  005A72  ECDC  F028         	call	_get_clust	;wreg free
  4634  005A76  C001  F066         	movff	?_get_clust,??_follow_path
  4635  005A7A  C002  F067         	movff	?_get_clust+1,??_follow_path+1
  4636  005A7E  C003  F068         	movff	?_get_clust+2,??_follow_path+2
  4637  005A82  C004  F069         	movff	?_get_clust+3,??_follow_path+3
  4638  005A86  0100               	movlb	0	; () banked
  4639  005A88  EE20 F004          	lfsr	2,4
  4640  005A8C  0100               	movlb	0	; () banked
  4641  005A8E  5160               	movf	follow_path@dj& (0+255),w,b
  4642  005A90  26D9               	addwf	fsr2l,f,c
  4643  005A92  0100               	movlb	0	; () banked
  4644  005A94  5161               	movf	(follow_path@dj+1)& (0+255),w,b
  4645  005A96  22DA               	addwfc	fsr2h,f,c
  4646  005A98  C066  FFDE         	movff	??_follow_path,postinc2
  4647  005A9C  C067  FFDE         	movff	??_follow_path+1,postinc2
  4648  005AA0  C068  FFDE         	movff	??_follow_path+2,postinc2
  4649  005AA4  C069  FFDD         	movff	??_follow_path+3,postdec2
  4650  005AA8  06D9               	decf	fsr2l,f,c
  4651  005AAA  06D9               	decf	fsr2l,f,c
  4652                           
  4653                           ;pff.c: 708: }
  4654  005AAC  D78F               	goto	l3454
  4655  005AAE                     l3476:
  4656                           
  4657                           ; BSR set to: 0
  4658                           ;pff.c: 709: }
  4659                           ;pff.c: 711: return res;
  4660  005AAE  0100               	movlb	0	; () banked
  4661  005AB0  516A               	movf	follow_path@res& (0+255),w,b
  4662                           
  4663                           ; BSR set to: 0
  4664                           
  4665                           ; BSR set to: 0
  4666  005AB2  0012               	return	
  4667  005AB4                     __end_of_follow_path:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           indf1	equ	0xFE7
  4676                           postdec1	equ	0xFE5
  4677                           fsr1h	equ	0xFE2
  4678                           fsr1l	equ	0xFE1
  4679                           indf2	equ	0xFDF
  4680                           postinc2	equ	0xFDE
  4681                           postdec2	equ	0xFDD
  4682                           plusw2	equ	0xFDB
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _get_clust *****************
  4688 ;; Defined at:
  4689 ;;		line 414 in file "pff.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;  dir             2    0[COMRAM] PTR unsigned char 
  4692 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  4693 ;; Auto vars:     Size  Location     Type
  4694 ;;  clst            4   14[COMRAM] unsigned long 
  4695 ;;  fs              2   12[COMRAM] PTR struct .
  4696 ;;		 -> main@fs(42), NULL(0), 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  4    0[COMRAM] unsigned long 
  4699 ;; Registers used:
  4700 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4706 ;;      Params:         4       0       0       0       0       0       0       0       0
  4707 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4708 ;;      Temps:          8       0       0       0       0       0       0       0       0
  4709 ;;      Totals:        18       0       0       0       0       0       0       0       0
  4710 ;;Total ram usage:       18 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; This function calls:
  4713 ;;		Nothing
  4714 ;; This function is called by:
  4715 ;;		_follow_path
  4716 ;;		_pf_open
  4717 ;;		_pf_opendir
  4718 ;; This function uses a non-reentrant model
  4719 ;;
  4720                           
  4721                           	psect	text9
  4722  0051B8                     __ptext9:
  4723                           	opt stack 0
  4724  0051B8                     _get_clust:
  4725                           	opt stack 28
  4726                           
  4727                           ;pff.c: 418: FATFS *fs = FatFs;
  4728                           
  4729                           ; BSR set to: 0
  4730                           ;incstack = 0
  4731  0051B8  0100               	movlb	0	; () banked
  4732  0051BA  C0F4  F00E         	movff	_FatFs+1,get_clust@fs+1
  4733  0051BE  0100               	movlb	0	; () banked
  4734  0051C0  C0F3  F00D         	movff	_FatFs,get_clust@fs
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;pff.c: 422: if (0 || (1 && fs->fs_type == 3)) {
  4738  0051C4  0E00               	movlw	0
  4739  0051C6  6E0F               	movwf	get_clust@clst,c
  4740  0051C8  0E00               	movlw	0
  4741  0051CA  6E10               	movwf	get_clust@clst+1,c
  4742  0051CC  0E00               	movlw	0
  4743  0051CE  6E11               	movwf	get_clust@clst+2,c
  4744  0051D0  0E00               	movlw	0
  4745  0051D2  6E12               	movwf	get_clust@clst+3,c
  4746                           
  4747                           ; BSR set to: 0
  4748  0051D4  0E03               	movlw	3
  4749  0051D6  C00D  FFD9         	movff	get_clust@fs,fsr2l
  4750  0051DA  C00E  FFDA         	movff	get_clust@fs+1,fsr2h
  4751  0051DE  62DF               	cpfseq	indf2,c
  4752  0051E0  D025               	goto	l3308
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;pff.c: 423: clst = (WORD)(((WORD)*((BYTE*)(dir+20)+1)<<8)|(WORD)*(BYTE*)(dir+20));
  4756                           
  4757                           ; BSR set to: 0
  4758  0051E2  EE20 F015          	lfsr	2,21
  4759  0051E6  5001               	movf	get_clust@dir,w,c
  4760  0051E8  26D9               	addwf	fsr2l,f,c
  4761  0051EA  5002               	movf	get_clust@dir+1,w,c
  4762  0051EC  22DA               	addwfc	fsr2h,f,c
  4763  0051EE  50DF               	movf	indf2,w,c
  4764  0051F0  6E05               	movwf	??_get_clust& (0+255),c
  4765  0051F2  5005               	movf	??_get_clust,w,c
  4766  0051F4  6E07               	movwf	(??_get_clust+2)& (0+255),c
  4767  0051F6  6A06               	clrf	(??_get_clust+1)& (0+255),c
  4768  0051F8  EE20 F014          	lfsr	2,20
  4769  0051FC  5001               	movf	get_clust@dir,w,c
  4770  0051FE  26D9               	addwf	fsr2l,f,c
  4771  005200  5002               	movf	get_clust@dir+1,w,c
  4772  005202  22DA               	addwfc	fsr2h,f,c
  4773  005204  50DF               	movf	indf2,w,c
  4774  005206  6E08               	movwf	(??_get_clust+3)& (0+255),c
  4775  005208  5008               	movf	??_get_clust+3,w,c
  4776  00520A  1206               	iorwf	??_get_clust+1,f,c
  4777  00520C  0E00               	movlw	0
  4778  00520E  1207               	iorwf	??_get_clust+2,f,c
  4779  005210  C006  F00F         	movff	??_get_clust+1,get_clust@clst
  4780  005214  C007  F010         	movff	??_get_clust+2,get_clust@clst+1
  4781  005218  6A11               	clrf	get_clust@clst+2,c
  4782  00521A  6A12               	clrf	get_clust@clst+3,c
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;pff.c: 424: clst <<= 16;
  4786  00521C  0E10               	movlw	16
  4787  00521E                     u2935:
  4788  00521E  90D8               	bcf	status,0,c
  4789  005220  360F               	rlcf	get_clust@clst,f,c
  4790  005222  3610               	rlcf	get_clust@clst+1,f,c
  4791  005224  3611               	rlcf	get_clust@clst+2,f,c
  4792  005226  3612               	rlcf	get_clust@clst+3,f,c
  4793  005228  2EE8               	decfsz	wreg,f,c
  4794  00522A  D7F9               	goto	u2935
  4795  00522C                     l3308:
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;pff.c: 425: }
  4799                           ;pff.c: 426: clst |= (WORD)(((WORD)*((BYTE*)(dir+26)+1)<<8)|(WORD)*(BYTE*)(dir+26));
  4800  00522C  EE20 F01B          	lfsr	2,27
  4801  005230  5001               	movf	get_clust@dir,w,c
  4802  005232  26D9               	addwf	fsr2l,f,c
  4803  005234  5002               	movf	get_clust@dir+1,w,c
  4804  005236  22DA               	addwfc	fsr2h,f,c
  4805  005238  50DF               	movf	indf2,w,c
  4806  00523A  6E05               	movwf	??_get_clust& (0+255),c
  4807  00523C  5005               	movf	??_get_clust,w,c
  4808  00523E  6E07               	movwf	(??_get_clust+2)& (0+255),c
  4809  005240  6A06               	clrf	(??_get_clust+1)& (0+255),c
  4810  005242  EE20 F01A          	lfsr	2,26
  4811  005246  5001               	movf	get_clust@dir,w,c
  4812  005248  26D9               	addwf	fsr2l,f,c
  4813  00524A  5002               	movf	get_clust@dir+1,w,c
  4814  00524C  22DA               	addwfc	fsr2h,f,c
  4815  00524E  50DF               	movf	indf2,w,c
  4816  005250  6E08               	movwf	(??_get_clust+3)& (0+255),c
  4817  005252  5008               	movf	??_get_clust+3,w,c
  4818  005254  1006               	iorwf	??_get_clust+1,w,c
  4819  005256  6E09               	movwf	(??_get_clust+4)& (0+255),c
  4820  005258  5007               	movf	??_get_clust+2,w,c
  4821  00525A  6E0A               	movwf	(??_get_clust+5)& (0+255),c
  4822  00525C  6A0B               	clrf	(??_get_clust+6)& (0+255),c
  4823  00525E  6A0C               	clrf	(??_get_clust+7)& (0+255),c
  4824  005260  5009               	movf	??_get_clust+4,w,c
  4825  005262  120F               	iorwf	get_clust@clst,f,c
  4826  005264  500A               	movf	??_get_clust+5,w,c
  4827  005266  1210               	iorwf	get_clust@clst+1,f,c
  4828  005268  500B               	movf	??_get_clust+6,w,c
  4829  00526A  1211               	iorwf	get_clust@clst+2,f,c
  4830  00526C  500C               	movf	??_get_clust+7,w,c
  4831  00526E  1212               	iorwf	get_clust@clst+3,f,c
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;pff.c: 428: return clst;
  4835  005270  C00F  F001         	movff	get_clust@clst,?_get_clust
  4836  005274  C010  F002         	movff	get_clust@clst+1,?_get_clust+1
  4837  005278  C011  F003         	movff	get_clust@clst+2,?_get_clust+2
  4838  00527C  C012  F004         	movff	get_clust@clst+3,?_get_clust+3
  4839                           
  4840                           ; BSR set to: 0
  4841                           
  4842                           ; BSR set to: 0
  4843  005280  0012               	return	
  4844  005282                     __end_of_get_clust:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           indf1	equ	0xFE7
  4853                           postdec1	equ	0xFE5
  4854                           fsr1h	equ	0xFE2
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           plusw2	equ	0xFDB
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _dir_find *****************
  4865 ;; Defined at:
  4866 ;;		line 510 in file "pff.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  dj              2   87[COMRAM] PTR struct .
  4869 ;;		 -> pf_open@dj(16), 
  4870 ;;  dir             2   89[COMRAM] PTR unsigned char 
  4871 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;  res             1   94[COMRAM] enum E43
  4874 ;;  c               1   93[COMRAM] unsigned char 
  4875 ;; Return value:  Size  Location     Type
  4876 ;;                  1    wreg      enum E43
  4877 ;; Registers used:
  4878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4879 ;; Tracked objects:
  4880 ;;		On entry : 0/0
  4881 ;;		On exit  : 0/0
  4882 ;;		Unchanged: 0/0
  4883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4884 ;;      Params:         4       0       0       0       0       0       0       0       0
  4885 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4886 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4887 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4888 ;;Total ram usage:        8 bytes
  4889 ;; Hardware stack levels used:    1
  4890 ;; Hardware stack levels required when called:    7
  4891 ;; This function calls:
  4892 ;;		_dir_next
  4893 ;;		_dir_rewind
  4894 ;;		_disk_readp
  4895 ;;		_mem_cmp
  4896 ;; This function is called by:
  4897 ;;		_follow_path
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900                           
  4901                           	psect	text10
  4902  005356                     __ptext10:
  4903                           	opt stack 0
  4904  005356                     _dir_find:
  4905                           	opt stack 20
  4906                           
  4907                           ;pff.c: 515: FRESULT res;
  4908                           ;pff.c: 516: BYTE c;
  4909                           ;pff.c: 519: res = dir_rewind(dj);
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;incstack = 0
  4913  005356  C059  F01D         	movff	dir_find@dj+1,dir_rewind@dj+1
  4914  00535A  C058  F01C         	movff	dir_find@dj,dir_rewind@dj
  4915  00535E  ECB8  F02A         	call	_dir_rewind	;wreg free
  4916  005362  6E5F               	movwf	dir_find@res,c
  4917                           
  4918                           ;pff.c: 520: if (res != FR_OK) return res;
  4919  005364  505F               	movf	dir_find@res,w,c
  4920  005366  A4D8               	btfss	status,2,c
  4921  005368  D06F               	goto	l3344
  4922  00536A                     l3322:
  4923                           
  4924                           ;pff.c: 523: res = disk_readp(dir, dj->sect, (dj->index % 16) * 32, 32)
  4925                           ;pff.c: 524: ? FR_DISK_ERR : FR_OK;
  4926  00536A  C05B  F00A         	movff	dir_find@dir+1,disk_readp@rd+1
  4927  00536E  C05A  F009         	movff	dir_find@dir,disk_readp@rd
  4928  005372  EE20 F00C          	lfsr	2,12
  4929  005376  5058               	movf	dir_find@dj,w,c
  4930  005378  26D9               	addwf	fsr2l,f,c
  4931  00537A  5059               	movf	dir_find@dj+1,w,c
  4932  00537C  22DA               	addwfc	fsr2h,f,c
  4933  00537E  CFDE F00B          	movff	postinc2,disk_readp@sector
  4934  005382  CFDE F00C          	movff	postinc2,disk_readp@sector+1
  4935  005386  CFDE F00D          	movff	postinc2,disk_readp@sector+2
  4936  00538A  CFDE F00E          	movff	postinc2,disk_readp@sector+3
  4937  00538E  C058  FFD9         	movff	dir_find@dj,fsr2l
  4938  005392  C059  FFDA         	movff	dir_find@dj+1,fsr2h
  4939  005396  CFDE F05C          	movff	postinc2,??_dir_find
  4940  00539A  CFDD F05D          	movff	postdec2,??_dir_find+1
  4941  00539E  0E0F               	movlw	15
  4942  0053A0  165C               	andwf	??_dir_find,f,c
  4943  0053A2  0E00               	movlw	0
  4944  0053A4  165D               	andwf	??_dir_find+1,f,c
  4945  0053A6  0E05               	movlw	5
  4946  0053A8                     u2955:
  4947  0053A8  90D8               	bcf	status,0,c
  4948  0053AA  365C               	rlcf	??_dir_find,f,c
  4949  0053AC  365D               	rlcf	??_dir_find+1,f,c
  4950  0053AE  2EE8               	decfsz	wreg,f,c
  4951  0053B0  D7FB               	goto	u2955
  4952  0053B2  C05C  F00F         	movff	??_dir_find,disk_readp@offset
  4953  0053B6  C05D  F010         	movff	??_dir_find+1,disk_readp@offset+1
  4954  0053BA  0E00               	movlw	0
  4955  0053BC  6E12               	movwf	disk_readp@count+1,c
  4956  0053BE  0E20               	movlw	32
  4957  0053C0  6E11               	movwf	disk_readp@count,c
  4958  0053C2  EC46  F031         	call	_disk_readp	;wreg free
  4959  0053C6  0900               	iorlw	0
  4960  0053C8  B4D8               	btfsc	status,2,c
  4961  0053CA  D002               	goto	u2960
  4962  0053CC  0E01               	movlw	1
  4963  0053CE  D001               	goto	u2966
  4964  0053D0                     u2960:
  4965  0053D0  0E00               	movlw	0
  4966  0053D2                     u2966:
  4967  0053D2  6E5F               	movwf	dir_find@res,c
  4968                           
  4969                           ;pff.c: 525: if (res != FR_OK) break;
  4970  0053D4  505F               	movf	dir_find@res,w,c
  4971  0053D6  A4D8               	btfss	status,2,c
  4972  0053D8  D037               	goto	l3344
  4973                           
  4974                           ;pff.c: 526: c = dir[0];
  4975  0053DA  C05A  FFD9         	movff	dir_find@dir,fsr2l
  4976  0053DE  C05B  FFDA         	movff	dir_find@dir+1,fsr2h
  4977  0053E2  50DF               	movf	indf2,w,c
  4978  0053E4  6E5E               	movwf	dir_find@c,c
  4979                           
  4980                           ;pff.c: 527: if (c == 0) { res = FR_NO_FILE; break; }
  4981  0053E6  665E               	tstfsz	dir_find@c,c
  4982  0053E8  D003               	goto	l3334
  4983  0053EA  0E03               	movlw	3
  4984  0053EC  6E5F               	movwf	dir_find@res,c
  4985  0053EE  D02C               	goto	l3344
  4986  0053F0                     l3334:
  4987                           
  4988                           ;pff.c: 528: if (!(dir[11] & 0x08) && !mem_cmp(dir, dj->fn, 11))
  4989  0053F0  EE20 F00B          	lfsr	2,11
  4990  0053F4  505A               	movf	dir_find@dir,w,c
  4991  0053F6  26D9               	addwf	fsr2l,f,c
  4992  0053F8  505B               	movf	dir_find@dir+1,w,c
  4993  0053FA  22DA               	addwfc	fsr2h,f,c
  4994  0053FC  50DF               	movf	indf2,w,c
  4995  0053FE  6E5C               	movwf	??_dir_find& (0+255),c
  4996  005400  B65C               	btfsc	??_dir_find,3,c
  4997  005402  D018               	goto	l3340
  4998  005404  C05B  F002         	movff	dir_find@dir+1,mem_cmp@dst+1
  4999  005408  C05A  F001         	movff	dir_find@dir,mem_cmp@dst
  5000  00540C  EE20 F002          	lfsr	2,2
  5001  005410  5058               	movf	dir_find@dj,w,c
  5002  005412  26D9               	addwf	fsr2l,f,c
  5003  005414  5059               	movf	dir_find@dj+1,w,c
  5004  005416  22DA               	addwfc	fsr2h,f,c
  5005  005418  CFDE F003          	movff	postinc2,mem_cmp@src
  5006  00541C  CFDD F004          	movff	postdec2,mem_cmp@src+1
  5007  005420  0E00               	movlw	0
  5008  005422  6E06               	movwf	mem_cmp@cnt+1,c
  5009  005424  0E0B               	movlw	11
  5010  005426  6E05               	movwf	mem_cmp@cnt,c
  5011  005428  EC25  F028         	call	_mem_cmp	;wreg free
  5012  00542C  5002               	movf	?_mem_cmp+1,w,c
  5013  00542E  1001               	iorwf	?_mem_cmp,w,c
  5014  005430  B4D8               	btfsc	status,2,c
  5015  005432  D00A               	goto	l3344
  5016  005434                     l3340:
  5017                           
  5018                           ;pff.c: 530: res = dir_next(dj);
  5019  005434  C059  F048         	movff	dir_find@dj+1,dir_next@dj+1
  5020  005438  C058  F047         	movff	dir_find@dj,dir_next@dj
  5021  00543C  EC3F  F030         	call	_dir_next	;wreg free
  5022  005440  6E5F               	movwf	dir_find@res,c
  5023                           
  5024                           ;pff.c: 531: } while (res == FR_OK);
  5025  005442  505F               	movf	dir_find@res,w,c
  5026  005444  B4D8               	btfsc	status,2,c
  5027  005446  D791               	goto	l3322
  5028  005448                     l3344:
  5029                           
  5030                           ;pff.c: 533: return res;
  5031  005448  505F               	movf	dir_find@res,w,c
  5032  00544A  0012               	return	
  5033  00544C                     __end_of_dir_find:
  5034                           	opt stack 0
  5035                           tblptru	equ	0xFF8
  5036                           tblptrh	equ	0xFF7
  5037                           tblptrl	equ	0xFF6
  5038                           tablat	equ	0xFF5
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           indf1	equ	0xFE7
  5042                           postdec1	equ	0xFE5
  5043                           fsr1h	equ	0xFE2
  5044                           fsr1l	equ	0xFE1
  5045                           indf2	equ	0xFDF
  5046                           postinc2	equ	0xFDE
  5047                           postdec2	equ	0xFDD
  5048                           plusw2	equ	0xFDB
  5049                           fsr2h	equ	0xFDA
  5050                           fsr2l	equ	0xFD9
  5051                           status	equ	0xFD8
  5052                           
  5053 ;; *************** function _mem_cmp *****************
  5054 ;; Defined at:
  5055 ;;		line 336 in file "pff.c"
  5056 ;; Parameters:    Size  Location     Type
  5057 ;;  dst             2    0[COMRAM] PTR const void 
  5058 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  5059 ;;  src             2    2[COMRAM] PTR const void 
  5060 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  5061 ;;  cnt             2    4[COMRAM] int 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  r               2   13[COMRAM] int 
  5064 ;;  s               2   11[COMRAM] PTR const unsigned char 
  5065 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  5066 ;;  d               2    9[COMRAM] PTR const unsigned char 
  5067 ;;		 -> pf_opendir@dir(32), pf_open@dir(32), 
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  2    0[COMRAM] int 
  5070 ;; Registers used:
  5071 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/0
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5077 ;;      Params:         6       0       0       0       0       0       0       0       0
  5078 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5079 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5080 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5081 ;;Total ram usage:       15 bytes
  5082 ;; Hardware stack levels used:    1
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_dir_find
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text11
  5091  00504A                     __ptext11:
  5092                           	opt stack 0
  5093  00504A                     _mem_cmp:
  5094                           	opt stack 26
  5095                           
  5096                           ;pff.c: 337: const char *d = (const char *)dst, *s = (const char *)src;
  5097                           
  5098                           ;incstack = 0
  5099  00504A  C002  F00B         	movff	mem_cmp@dst+1,mem_cmp@d+1
  5100  00504E  C001  F00A         	movff	mem_cmp@dst,mem_cmp@d
  5101  005052  C004  F00D         	movff	mem_cmp@src+1,mem_cmp@s+1
  5102  005056  C003  F00C         	movff	mem_cmp@src,mem_cmp@s
  5103                           
  5104                           ;pff.c: 338: int r = 0;
  5105  00505A  0E00               	movlw	0
  5106  00505C  6E0F               	movwf	mem_cmp@r+1,c
  5107  00505E  0E00               	movlw	0
  5108  005060  6E0E               	movwf	mem_cmp@r,c
  5109  005062                     l3214:
  5110  005062  0605               	decf	mem_cmp@cnt,f,c
  5111  005064  A0D8               	btfss	status,0,c
  5112  005066  0606               	decf	mem_cmp@cnt+1,f,c
  5113  005068  2805               	incf	mem_cmp@cnt& (0+255),w,c
  5114  00506A  B4D8               	btfsc	status,2,c
  5115  00506C  2806               	incf	(mem_cmp@cnt+1)& (0+255),w,c
  5116  00506E  B4D8               	btfsc	status,2,c
  5117  005070  D01F               	goto	l21
  5118  005072  C00C  FFD9         	movff	mem_cmp@s,fsr2l
  5119  005076  C00D  FFDA         	movff	mem_cmp@s+1,fsr2h
  5120  00507A  4A0C               	infsnz	mem_cmp@s,f,c
  5121  00507C  2A0D               	incf	mem_cmp@s+1,f,c
  5122  00507E  50DF               	movf	indf2,w,c
  5123  005080  6E07               	movwf	??_mem_cmp& (0+255),c
  5124  005082  6A08               	clrf	(??_mem_cmp+1)& (0+255),c
  5125  005084  1E07               	comf	??_mem_cmp,f,c
  5126  005086  1E08               	comf	??_mem_cmp+1,f,c
  5127  005088  4A07               	infsnz	??_mem_cmp,f,c
  5128  00508A  2A08               	incf	??_mem_cmp+1,f,c
  5129  00508C  C00A  FFD9         	movff	mem_cmp@d,fsr2l
  5130  005090  C00B  FFDA         	movff	mem_cmp@d+1,fsr2h
  5131  005094  4A0A               	infsnz	mem_cmp@d,f,c
  5132  005096  2A0B               	incf	mem_cmp@d+1,f,c
  5133  005098  50DF               	movf	indf2,w,c
  5134  00509A  6E09               	movwf	(??_mem_cmp+2)& (0+255),c
  5135  00509C  5009               	movf	??_mem_cmp+2,w,c
  5136  00509E  2407               	addwf	??_mem_cmp,w,c
  5137  0050A0  6E0E               	movwf	mem_cmp@r,c
  5138  0050A2  0E00               	movlw	0
  5139  0050A4  2008               	addwfc	??_mem_cmp+1,w,c
  5140  0050A6  6E0F               	movwf	mem_cmp@r+1,c
  5141  0050A8  500F               	movf	(mem_cmp@r+1)& (0+255),w,c
  5142  0050AA  100E               	iorwf	mem_cmp@r& (0+255),w,c
  5143  0050AC  B4D8               	btfsc	status,2,c
  5144  0050AE  D7D9               	goto	l3214
  5145  0050B0                     l21:
  5146                           
  5147                           ;pff.c: 340: return r;
  5148  0050B0  C00E  F001         	movff	mem_cmp@r,?_mem_cmp
  5149  0050B4  C00F  F002         	movff	mem_cmp@r+1,?_mem_cmp+1
  5150  0050B8  0012               	return	
  5151  0050BA                     __end_of_mem_cmp:
  5152                           	opt stack 0
  5153                           tblptru	equ	0xFF8
  5154                           tblptrh	equ	0xFF7
  5155                           tblptrl	equ	0xFF6
  5156                           tablat	equ	0xFF5
  5157                           postinc0	equ	0xFEE
  5158                           wreg	equ	0xFE8
  5159                           indf1	equ	0xFE7
  5160                           postdec1	equ	0xFE5
  5161                           fsr1h	equ	0xFE2
  5162                           fsr1l	equ	0xFE1
  5163                           indf2	equ	0xFDF
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           plusw2	equ	0xFDB
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171 ;; *************** function _dir_rewind *****************
  5172 ;; Defined at:
  5173 ;;		line 437 in file "pff.c"
  5174 ;; Parameters:    Size  Location     Type
  5175 ;;  dj              2   27[COMRAM] PTR struct .
  5176 ;;		 -> pf_open@dj(16), 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  clst            4   39[COMRAM] unsigned long 
  5179 ;;  fs              2   37[COMRAM] PTR struct .
  5180 ;;		 -> main@fs(42), NULL(0), 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      enum E43
  5183 ;; Registers used:
  5184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5190 ;;      Params:         2       0       0       0       0       0       0       0       0
  5191 ;;      Locals:        10       0       0       0       0       0       0       0       0
  5192 ;;      Temps:          4       0       0       0       0       0       0       0       0
  5193 ;;      Totals:        16       0       0       0       0       0       0       0       0
  5194 ;;Total ram usage:       16 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    2
  5197 ;; This function calls:
  5198 ;;		_clust2sect
  5199 ;; This function is called by:
  5200 ;;		_dir_find
  5201 ;;		_follow_path
  5202 ;;		_pf_opendir
  5203 ;;		_pf_readdir
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           	psect	text12
  5208  005570                     __ptext12:
  5209                           	opt stack 0
  5210  005570                     _dir_rewind:
  5211                           	opt stack 25
  5212                           
  5213                           ;pff.c: 441: DWORD clst;
  5214                           ;pff.c: 442: FATFS *fs = FatFs;
  5215                           
  5216                           ;incstack = 0
  5217  005570  0100               	movlb	0	; () banked
  5218  005572  C0F4  F027         	movff	_FatFs+1,dir_rewind@fs+1
  5219  005576  0100               	movlb	0	; () banked
  5220  005578  C0F3  F026         	movff	_FatFs,dir_rewind@fs
  5221                           
  5222                           ; BSR set to: 0
  5223                           ;pff.c: 445: dj->index = 0;
  5224  00557C  C01C  FFD9         	movff	dir_rewind@dj,fsr2l
  5225  005580  C01D  FFDA         	movff	dir_rewind@dj+1,fsr2h
  5226  005584  0E00               	movlw	0
  5227  005586  6EDE               	movwf	postinc2,c
  5228  005588  0E00               	movlw	0
  5229  00558A  6EDD               	movwf	postdec2,c
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;pff.c: 446: clst = dj->sclust;
  5233  00558C  EE20 F004          	lfsr	2,4
  5234  005590  501C               	movf	dir_rewind@dj,w,c
  5235  005592  26D9               	addwf	fsr2l,f,c
  5236  005594  501D               	movf	dir_rewind@dj+1,w,c
  5237  005596  22DA               	addwfc	fsr2h,f,c
  5238  005598  CFDE F028          	movff	postinc2,dir_rewind@clst
  5239  00559C  CFDE F029          	movff	postinc2,dir_rewind@clst+1
  5240  0055A0  CFDE F02A          	movff	postinc2,dir_rewind@clst+2
  5241  0055A4  CFDE F02B          	movff	postinc2,dir_rewind@clst+3
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;pff.c: 447: if (clst == 1 || clst >= fs->n_fatent)
  5245  0055A8  0428               	decf	dir_rewind@clst,w,c
  5246  0055AA  1029               	iorwf	dir_rewind@clst+1,w,c
  5247  0055AC  102A               	iorwf	dir_rewind@clst+2,w,c
  5248  0055AE  102B               	iorwf	dir_rewind@clst+3,w,c
  5249  0055B0  B4D8               	btfsc	status,2,c
  5250  0055B2  D018               	goto	l3228
  5251                           
  5252                           ; BSR set to: 0
  5253  0055B4  EE20 F006          	lfsr	2,6
  5254  0055B8  5026               	movf	dir_rewind@fs,w,c
  5255  0055BA  26D9               	addwf	fsr2l,f,c
  5256  0055BC  5027               	movf	dir_rewind@fs+1,w,c
  5257  0055BE  22DA               	addwfc	fsr2h,f,c
  5258  0055C0  CFDE F01E          	movff	postinc2,??_dir_rewind
  5259  0055C4  CFDE F01F          	movff	postinc2,??_dir_rewind+1
  5260  0055C8  CFDE F020          	movff	postinc2,??_dir_rewind+2
  5261  0055CC  CFDE F021          	movff	postinc2,??_dir_rewind+3
  5262  0055D0  501E               	movf	??_dir_rewind,w,c
  5263  0055D2  5C28               	subwf	dir_rewind@clst,w,c
  5264  0055D4  501F               	movf	??_dir_rewind+1,w,c
  5265  0055D6  5829               	subwfb	dir_rewind@clst+1,w,c
  5266  0055D8  5020               	movf	??_dir_rewind+2,w,c
  5267  0055DA  582A               	subwfb	dir_rewind@clst+2,w,c
  5268  0055DC  5021               	movf	??_dir_rewind+3,w,c
  5269  0055DE  582B               	subwfb	dir_rewind@clst+3,w,c
  5270  0055E0  A0D8               	btfss	status,0,c
  5271  0055E2  D002               	goto	l3232
  5272  0055E4                     l3228:
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;pff.c: 448: return FR_DISK_ERR;
  5276  0055E4  0E01               	movlw	1
  5277  0055E6  D05F               	goto	l60
  5278  0055E8                     l3232:
  5279                           
  5280                           ; BSR set to: 0
  5281  0055E8  502B               	movf	dir_rewind@clst+3,w,c
  5282  0055EA  1028               	iorwf	dir_rewind@clst,w,c
  5283  0055EC  1029               	iorwf	dir_rewind@clst+1,w,c
  5284  0055EE  102A               	iorwf	dir_rewind@clst+2,w,c
  5285  0055F0  A4D8               	btfss	status,2,c
  5286  0055F2  D015               	goto	l61
  5287                           
  5288                           ; BSR set to: 0
  5289  0055F4  0E03               	movlw	3
  5290  0055F6  C026  FFD9         	movff	dir_rewind@fs,fsr2l
  5291  0055FA  C027  FFDA         	movff	dir_rewind@fs+1,fsr2h
  5292  0055FE  62DF               	cpfseq	indf2,c
  5293  005600  D00E               	goto	l61
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;pff.c: 450: clst = (DWORD)fs->dirbase;
  5297                           
  5298                           ; BSR set to: 0
  5299  005602  EE20 F00E          	lfsr	2,14
  5300  005606  5026               	movf	dir_rewind@fs,w,c
  5301  005608  26D9               	addwf	fsr2l,f,c
  5302  00560A  5027               	movf	dir_rewind@fs+1,w,c
  5303  00560C  22DA               	addwfc	fsr2h,f,c
  5304  00560E  CFDE F028          	movff	postinc2,dir_rewind@clst
  5305  005612  CFDE F029          	movff	postinc2,dir_rewind@clst+1
  5306  005616  CFDE F02A          	movff	postinc2,dir_rewind@clst+2
  5307  00561A  CFDE F02B          	movff	postinc2,dir_rewind@clst+3
  5308  00561E                     l61:
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;pff.c: 452: dj->sect = (0 || clst) ? clust2sect(clst) : fs->dirbase;
  5312  00561E  EE20 F008          	lfsr	2,8
  5313  005622  501C               	movf	dir_rewind@dj,w,c
  5314  005624  26D9               	addwf	fsr2l,f,c
  5315  005626  501D               	movf	dir_rewind@dj+1,w,c
  5316  005628  22DA               	addwfc	fsr2h,f,c
  5317  00562A  C028  FFDE         	movff	dir_rewind@clst,postinc2
  5318  00562E  C029  FFDE         	movff	dir_rewind@clst+1,postinc2
  5319  005632  C02A  FFDE         	movff	dir_rewind@clst+2,postinc2
  5320  005636  C02B  FFDE         	movff	dir_rewind@clst+3,postinc2
  5321                           
  5322                           ; BSR set to: 0
  5323  00563A  502B               	movf	dir_rewind@clst+3,w,c
  5324  00563C  1028               	iorwf	dir_rewind@clst,w,c
  5325  00563E  1029               	iorwf	dir_rewind@clst+1,w,c
  5326  005640  102A               	iorwf	dir_rewind@clst+2,w,c
  5327  005642  A4D8               	btfss	status,2,c
  5328  005644  D00F               	goto	l3242
  5329                           
  5330                           ; BSR set to: 0
  5331  005646  EE20 F00E          	lfsr	2,14
  5332  00564A  5026               	movf	dir_rewind@fs,w,c
  5333  00564C  26D9               	addwf	fsr2l,f,c
  5334  00564E  5027               	movf	dir_rewind@fs+1,w,c
  5335  005650  22DA               	addwfc	fsr2h,f,c
  5336  005652  CFDE F022          	movff	postinc2,_dir_rewind$173
  5337  005656  CFDE F023          	movff	postinc2,_dir_rewind$173+1
  5338  00565A  CFDE F024          	movff	postinc2,_dir_rewind$173+2
  5339  00565E  CFDE F025          	movff	postinc2,_dir_rewind$173+3
  5340  005662  D012               	goto	l3244
  5341  005664                     l3242:
  5342                           
  5343                           ; BSR set to: 0
  5344  005664  C028  F00D         	movff	dir_rewind@clst,clust2sect@clst
  5345  005668  C029  F00E         	movff	dir_rewind@clst+1,clust2sect@clst+1
  5346  00566C  C02A  F00F         	movff	dir_rewind@clst+2,clust2sect@clst+2
  5347  005670  C02B  F010         	movff	dir_rewind@clst+3,clust2sect@clst+3
  5348  005674  EC41  F029         	call	_clust2sect	;wreg free
  5349  005678  C00D  F022         	movff	?_clust2sect,_dir_rewind$173
  5350  00567C  C00E  F023         	movff	?_clust2sect+1,_dir_rewind$173+1
  5351  005680  C00F  F024         	movff	?_clust2sect+2,_dir_rewind$173+2
  5352  005684  C010  F025         	movff	?_clust2sect+3,_dir_rewind$173+3
  5353  005688                     l3244:
  5354  005688  EE20 F00C          	lfsr	2,12
  5355  00568C  501C               	movf	dir_rewind@dj,w,c
  5356  00568E  26D9               	addwf	fsr2l,f,c
  5357  005690  501D               	movf	dir_rewind@dj+1,w,c
  5358  005692  22DA               	addwfc	fsr2h,f,c
  5359  005694  C022  FFDE         	movff	_dir_rewind$173,postinc2
  5360  005698  C023  FFDE         	movff	_dir_rewind$173+1,postinc2
  5361  00569C  C024  FFDE         	movff	_dir_rewind$173+2,postinc2
  5362  0056A0  C025  FFDE         	movff	_dir_rewind$173+3,postinc2
  5363                           
  5364                           ;pff.c: 454: return FR_OK;
  5365  0056A4  0E00               	movlw	0
  5366  0056A6                     l60:
  5367  0056A6  0012               	return	
  5368  0056A8                     __end_of_dir_rewind:
  5369                           	opt stack 0
  5370                           tblptru	equ	0xFF8
  5371                           tblptrh	equ	0xFF7
  5372                           tblptrl	equ	0xFF6
  5373                           tablat	equ	0xFF5
  5374                           postinc0	equ	0xFEE
  5375                           wreg	equ	0xFE8
  5376                           indf1	equ	0xFE7
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           postdec2	equ	0xFDD
  5383                           plusw2	equ	0xFDB
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function _dir_next *****************
  5389 ;; Defined at:
  5390 ;;		line 465 in file "pff.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  dj              2   70[COMRAM] PTR struct .
  5393 ;;		 -> pf_open@dj(16), 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  clst            4   81[COMRAM] unsigned long 
  5396 ;;  i               2   85[COMRAM] unsigned short 
  5397 ;;  fs              2   79[COMRAM] PTR struct .
  5398 ;;		 -> main@fs(42), NULL(0), 
  5399 ;; Return value:  Size  Location     Type
  5400 ;;                  1    wreg      enum E43
  5401 ;; Registers used:
  5402 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5403 ;; Tracked objects:
  5404 ;;		On entry : 0/0
  5405 ;;		On exit  : 0/0
  5406 ;;		Unchanged: 0/0
  5407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5408 ;;      Params:         2       0       0       0       0       0       0       0       0
  5409 ;;      Locals:         8       0       0       0       0       0       0       0       0
  5410 ;;      Temps:          7       0       0       0       0       0       0       0       0
  5411 ;;      Totals:        17       0       0       0       0       0       0       0       0
  5412 ;;Total ram usage:       17 bytes
  5413 ;; Hardware stack levels used:    1
  5414 ;; Hardware stack levels required when called:    6
  5415 ;; This function calls:
  5416 ;;		_clust2sect
  5417 ;;		_get_fat
  5418 ;; This function is called by:
  5419 ;;		_dir_find
  5420 ;;		_dir_read
  5421 ;;		_pf_readdir
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           	psect	text13
  5426  00607E                     __ptext13:
  5427                           	opt stack 0
  5428  00607E                     _dir_next:
  5429                           	opt stack 20
  5430                           
  5431                           ;pff.c: 469: DWORD clst;
  5432                           ;pff.c: 470: WORD i;
  5433                           ;pff.c: 471: FATFS *fs = FatFs;
  5434                           
  5435                           ;incstack = 0
  5436  00607E  0100               	movlb	0	; () banked
  5437  006080  C0F4  F051         	movff	_FatFs+1,dir_next@fs+1
  5438  006084  0100               	movlb	0	; () banked
  5439  006086  C0F3  F050         	movff	_FatFs,dir_next@fs
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;pff.c: 474: i = dj->index + 1;
  5443  00608A  C047  FFD9         	movff	dir_next@dj,fsr2l
  5444  00608E  C048  FFDA         	movff	dir_next@dj+1,fsr2h
  5445  006092  CFDE F049          	movff	postinc2,??_dir_next
  5446  006096  CFDD F04A          	movff	postdec2,??_dir_next+1
  5447  00609A  0E01               	movlw	1
  5448  00609C  2449               	addwf	??_dir_next,w,c
  5449  00609E  6E56               	movwf	dir_next@i,c
  5450  0060A0  0E00               	movlw	0
  5451  0060A2  204A               	addwfc	??_dir_next+1,w,c
  5452  0060A4  6E57               	movwf	dir_next@i+1,c
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;pff.c: 475: if (!i || !dj->sect)
  5456  0060A6  5057               	movf	dir_next@i+1,w,c
  5457  0060A8  1056               	iorwf	dir_next@i,w,c
  5458  0060AA  B4D8               	btfsc	status,2,c
  5459  0060AC  D0B3               	goto	u2910
  5460                           
  5461                           ; BSR set to: 0
  5462  0060AE  EE20 F00C          	lfsr	2,12
  5463  0060B2  5047               	movf	dir_next@dj,w,c
  5464  0060B4  26D9               	addwf	fsr2l,f,c
  5465  0060B6  5048               	movf	dir_next@dj+1,w,c
  5466  0060B8  22DA               	addwfc	fsr2h,f,c
  5467  0060BA  CFDE F049          	movff	postinc2,??_dir_next
  5468  0060BE  CFDE F04A          	movff	postinc2,??_dir_next+1
  5469  0060C2  CFDE F04B          	movff	postinc2,??_dir_next+2
  5470  0060C6  CFDE F04C          	movff	postinc2,??_dir_next+3
  5471  0060CA  504C               	movf	??_dir_next+3,w,c
  5472  0060CC  1049               	iorwf	??_dir_next,w,c
  5473  0060CE  104A               	iorwf	??_dir_next+1,w,c
  5474  0060D0  104B               	iorwf	??_dir_next+2,w,c
  5475  0060D2  B4D8               	btfsc	status,2,c
  5476                           
  5477                           ; BSR set to: 0
  5478  0060D4  D09F               	goto	u2910
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;pff.c: 478: if (!(i % 16)) {
  5482                           
  5483                           ; BSR set to: 0
  5484                           
  5485                           ; BSR set to: 0
  5486                           
  5487                           ; BSR set to: 0
  5488                           ;pff.c: 476: return FR_NO_FILE;
  5489  0060D6  0E0F               	movlw	15
  5490  0060D8  1456               	andwf	dir_next@i,w,c
  5491  0060DA  6E49               	movwf	??_dir_next& (0+255),c
  5492  0060DC  0E00               	movlw	0
  5493  0060DE  1457               	andwf	dir_next@i+1,w,c
  5494  0060E0  6E4A               	movwf	(??_dir_next+1)& (0+255),c
  5495  0060E2  504A               	movf	??_dir_next+1,w,c
  5496  0060E4  1049               	iorwf	??_dir_next,w,c
  5497  0060E6  A4D8               	btfss	status,2,c
  5498  0060E8  D0C7               	goto	l3292
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;pff.c: 479: dj->sect++;
  5502  0060EA  EE20 F00C          	lfsr	2,12
  5503  0060EE  5047               	movf	dir_next@dj,w,c
  5504  0060F0  26D9               	addwf	fsr2l,f,c
  5505  0060F2  5048               	movf	dir_next@dj+1,w,c
  5506  0060F4  22DA               	addwfc	fsr2h,f,c
  5507  0060F6  2ADE               	incf	postinc2,f,c
  5508  0060F8  0E00               	movlw	0
  5509  0060FA  22DE               	addwfc	postinc2,f,c
  5510  0060FC  22DE               	addwfc	postinc2,f,c
  5511  0060FE  22DD               	addwfc	postdec2,f,c
  5512                           
  5513                           ;pff.c: 481: if (dj->clust == 0) {
  5514  006100  EE20 F008          	lfsr	2,8
  5515  006104  5047               	movf	dir_next@dj,w,c
  5516  006106  26D9               	addwf	fsr2l,f,c
  5517  006108  5048               	movf	dir_next@dj+1,w,c
  5518  00610A  22DA               	addwfc	fsr2h,f,c
  5519  00610C  CFDE F049          	movff	postinc2,??_dir_next
  5520  006110  CFDE F04A          	movff	postinc2,??_dir_next+1
  5521  006114  CFDE F04B          	movff	postinc2,??_dir_next+2
  5522  006118  CFDE F04C          	movff	postinc2,??_dir_next+3
  5523  00611C  504C               	movf	??_dir_next+3,w,c
  5524  00611E  1049               	iorwf	??_dir_next,w,c
  5525  006120  104A               	iorwf	??_dir_next+1,w,c
  5526  006122  104B               	iorwf	??_dir_next+2,w,c
  5527  006124  A4D8               	btfss	status,2,c
  5528  006126  D011               	goto	l3272
  5529                           
  5530                           ; BSR set to: 0
  5531                           ;pff.c: 482: if (i >= fs->n_rootdir)
  5532  006128  EE20 F004          	lfsr	2,4
  5533  00612C  5050               	movf	dir_next@fs,w,c
  5534  00612E  26D9               	addwf	fsr2l,f,c
  5535  006130  5051               	movf	dir_next@fs+1,w,c
  5536  006132  22DA               	addwfc	fsr2h,f,c
  5537  006134  CFDE F049          	movff	postinc2,??_dir_next
  5538  006138  CFDD F04A          	movff	postdec2,??_dir_next+1
  5539  00613C  5049               	movf	??_dir_next,w,c
  5540  00613E  5C56               	subwf	dir_next@i,w,c
  5541  006140  504A               	movf	??_dir_next+1,w,c
  5542  006142  5857               	subwfb	dir_next@i+1,w,c
  5543  006144  A0D8               	btfss	status,0,c
  5544  006146  D098               	goto	l3292
  5545  006148  D065               	goto	u2910
  5546  00614A                     l3272:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;pff.c: 485: else {
  5550                           ;pff.c: 486: if (((i / 16) & (fs->csize - 1)) == 0) {
  5551  00614A  C056  F049         	movff	dir_next@i,??_dir_next
  5552  00614E  C057  F04A         	movff	dir_next@i+1,??_dir_next+1
  5553  006152  0E04               	movlw	4
  5554  006154  6E4B               	movwf	(??_dir_next+2)& (0+255),c
  5555  006156                     u2885:
  5556  006156  90D8               	bcf	status,0,c
  5557  006158  324A               	rrcf	??_dir_next+1,f,c
  5558  00615A  3249               	rrcf	??_dir_next,f,c
  5559  00615C  2E4B               	decfsz	(??_dir_next+2)& (0+255),f,c
  5560  00615E  D7FB               	goto	u2885
  5561  006160  0EFF               	movlw	255
  5562  006162  6E4C               	movwf	(??_dir_next+3)& (0+255),c
  5563  006164  0EFF               	movlw	255
  5564  006166  6E4D               	movwf	(??_dir_next+4)& (0+255),c
  5565  006168  EE20 F002          	lfsr	2,2
  5566  00616C  5050               	movf	dir_next@fs,w,c
  5567  00616E  26D9               	addwf	fsr2l,f,c
  5568  006170  5051               	movf	dir_next@fs+1,w,c
  5569  006172  22DA               	addwfc	fsr2h,f,c
  5570  006174  50DF               	movf	indf2,w,c
  5571  006176  6E4E               	movwf	(??_dir_next+5)& (0+255),c
  5572  006178  6A4F               	clrf	(??_dir_next+6)& (0+255),c
  5573  00617A  504C               	movf	??_dir_next+3,w,c
  5574  00617C  264E               	addwf	??_dir_next+5,f,c
  5575  00617E  504D               	movf	??_dir_next+4,w,c
  5576  006180  224F               	addwfc	??_dir_next+6,f,c
  5577  006182  5049               	movf	??_dir_next,w,c
  5578  006184  164E               	andwf	??_dir_next+5,f,c
  5579  006186  504A               	movf	??_dir_next+1,w,c
  5580  006188  164F               	andwf	??_dir_next+6,f,c
  5581  00618A  504F               	movf	??_dir_next+6,w,c
  5582  00618C  104E               	iorwf	??_dir_next+5,w,c
  5583  00618E  A4D8               	btfss	status,2,c
  5584  006190  D073               	goto	l3292
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;pff.c: 487: clst = get_fat(dj->clust);
  5588  006192  EE20 F008          	lfsr	2,8
  5589  006196  5047               	movf	dir_next@dj,w,c
  5590  006198  26D9               	addwf	fsr2l,f,c
  5591  00619A  5048               	movf	dir_next@dj+1,w,c
  5592  00619C  22DA               	addwfc	fsr2h,f,c
  5593  00619E  CFDE F01F          	movff	postinc2,get_fat@clst
  5594  0061A2  CFDE F020          	movff	postinc2,get_fat@clst+1
  5595  0061A6  CFDE F021          	movff	postinc2,get_fat@clst+2
  5596  0061AA  CFDE F022          	movff	postinc2,get_fat@clst+3
  5597  0061AE  ECC1  F032         	call	_get_fat	;wreg free
  5598  0061B2  C01F  F052         	movff	?_get_fat,dir_next@clst
  5599  0061B6  C020  F053         	movff	?_get_fat+1,dir_next@clst+1
  5600  0061BA  C021  F054         	movff	?_get_fat+2,dir_next@clst+2
  5601  0061BE  C022  F055         	movff	?_get_fat+3,dir_next@clst+3
  5602                           
  5603                           ;pff.c: 488: if (clst <= 1) return FR_DISK_ERR;
  5604  0061C2  0E02               	movlw	2
  5605  0061C4  6E49               	movwf	??_dir_next& (0+255),c
  5606  0061C6  6A4A               	clrf	(??_dir_next+1)& (0+255),c
  5607  0061C8  6A4B               	clrf	(??_dir_next+2)& (0+255),c
  5608  0061CA  6A4C               	clrf	(??_dir_next+3)& (0+255),c
  5609  0061CC  5049               	movf	??_dir_next,w,c
  5610  0061CE  5C52               	subwf	dir_next@clst,w,c
  5611  0061D0  504A               	movf	??_dir_next+1,w,c
  5612  0061D2  5853               	subwfb	dir_next@clst+1,w,c
  5613  0061D4  504B               	movf	??_dir_next+2,w,c
  5614  0061D6  5854               	subwfb	dir_next@clst+2,w,c
  5615  0061D8  504C               	movf	??_dir_next+3,w,c
  5616  0061DA  5855               	subwfb	dir_next@clst+3,w,c
  5617  0061DC  B0D8               	btfsc	status,0,c
  5618  0061DE  D002               	goto	l3282
  5619  0061E0  0E01               	movlw	1
  5620  0061E2  D053               	goto	l73
  5621  0061E4                     l3282:
  5622                           
  5623                           ;pff.c: 489: if (clst >= fs->n_fatent)
  5624  0061E4  EE20 F006          	lfsr	2,6
  5625  0061E8  5050               	movf	dir_next@fs,w,c
  5626  0061EA  26D9               	addwf	fsr2l,f,c
  5627  0061EC  5051               	movf	dir_next@fs+1,w,c
  5628  0061EE  22DA               	addwfc	fsr2h,f,c
  5629  0061F0  CFDE F049          	movff	postinc2,??_dir_next
  5630  0061F4  CFDE F04A          	movff	postinc2,??_dir_next+1
  5631  0061F8  CFDE F04B          	movff	postinc2,??_dir_next+2
  5632  0061FC  CFDE F04C          	movff	postinc2,??_dir_next+3
  5633  006200  5049               	movf	??_dir_next,w,c
  5634  006202  5C52               	subwf	dir_next@clst,w,c
  5635  006204  504A               	movf	??_dir_next+1,w,c
  5636  006206  5853               	subwfb	dir_next@clst+1,w,c
  5637  006208  504B               	movf	??_dir_next+2,w,c
  5638  00620A  5854               	subwfb	dir_next@clst+2,w,c
  5639  00620C  504C               	movf	??_dir_next+3,w,c
  5640  00620E  5855               	subwfb	dir_next@clst+3,w,c
  5641  006210  A0D8               	btfss	status,0,c
  5642  006212  D002               	goto	l3288
  5643  006214                     u2910:
  5644                           
  5645                           ;pff.c: 490: return FR_NO_FILE;
  5646  006214  0E03               	movlw	3
  5647  006216  D039               	goto	l73
  5648  006218                     l3288:
  5649                           
  5650                           ;pff.c: 491: dj->clust = clst;
  5651  006218  EE20 F008          	lfsr	2,8
  5652  00621C  5047               	movf	dir_next@dj,w,c
  5653  00621E  26D9               	addwf	fsr2l,f,c
  5654  006220  5048               	movf	dir_next@dj+1,w,c
  5655  006222  22DA               	addwfc	fsr2h,f,c
  5656  006224  C052  FFDE         	movff	dir_next@clst,postinc2
  5657  006228  C053  FFDE         	movff	dir_next@clst+1,postinc2
  5658  00622C  C054  FFDE         	movff	dir_next@clst+2,postinc2
  5659  006230  C055  FFDE         	movff	dir_next@clst+3,postinc2
  5660                           
  5661                           ;pff.c: 492: dj->sect = clust2sect(clst);
  5662  006234  C052  F00D         	movff	dir_next@clst,clust2sect@clst
  5663  006238  C053  F00E         	movff	dir_next@clst+1,clust2sect@clst+1
  5664  00623C  C054  F00F         	movff	dir_next@clst+2,clust2sect@clst+2
  5665  006240  C055  F010         	movff	dir_next@clst+3,clust2sect@clst+3
  5666  006244  EC41  F029         	call	_clust2sect	;wreg free
  5667  006248  C00D  F049         	movff	?_clust2sect,??_dir_next
  5668  00624C  C00E  F04A         	movff	?_clust2sect+1,??_dir_next+1
  5669  006250  C00F  F04B         	movff	?_clust2sect+2,??_dir_next+2
  5670  006254  C010  F04C         	movff	?_clust2sect+3,??_dir_next+3
  5671  006258  EE20 F00C          	lfsr	2,12
  5672  00625C  5047               	movf	dir_next@dj,w,c
  5673  00625E  26D9               	addwf	fsr2l,f,c
  5674  006260  5048               	movf	dir_next@dj+1,w,c
  5675  006262  22DA               	addwfc	fsr2h,f,c
  5676  006264  C049  FFDE         	movff	??_dir_next,postinc2
  5677  006268  C04A  FFDE         	movff	??_dir_next+1,postinc2
  5678  00626C  C04B  FFDE         	movff	??_dir_next+2,postinc2
  5679  006270  C04C  FFDD         	movff	??_dir_next+3,postdec2
  5680  006274  06D9               	decf	fsr2l,f,c
  5681  006276  06D9               	decf	fsr2l,f,c
  5682  006278                     l3292:
  5683                           
  5684                           ;pff.c: 493: }
  5685                           ;pff.c: 494: }
  5686                           ;pff.c: 495: }
  5687                           ;pff.c: 497: dj->index = i;
  5688  006278  C047  FFD9         	movff	dir_next@dj,fsr2l
  5689  00627C  C048  FFDA         	movff	dir_next@dj+1,fsr2h
  5690  006280  C056  FFDE         	movff	dir_next@i,postinc2
  5691  006284  C057  FFDD         	movff	dir_next@i+1,postdec2
  5692                           
  5693                           ;pff.c: 499: return FR_OK;
  5694  006288  0E00               	movlw	0
  5695  00628A                     l73:
  5696  00628A  0012               	return	
  5697  00628C                     __end_of_dir_next:
  5698                           	opt stack 0
  5699                           tblptru	equ	0xFF8
  5700                           tblptrh	equ	0xFF7
  5701                           tblptrl	equ	0xFF6
  5702                           tablat	equ	0xFF5
  5703                           postinc0	equ	0xFEE
  5704                           wreg	equ	0xFE8
  5705                           indf1	equ	0xFE7
  5706                           postdec1	equ	0xFE5
  5707                           fsr1h	equ	0xFE2
  5708                           fsr1l	equ	0xFE1
  5709                           indf2	equ	0xFDF
  5710                           postinc2	equ	0xFDE
  5711                           postdec2	equ	0xFDD
  5712                           plusw2	equ	0xFDB
  5713                           fsr2h	equ	0xFDA
  5714                           fsr2l	equ	0xFD9
  5715                           status	equ	0xFD8
  5716                           
  5717 ;; *************** function _get_fat *****************
  5718 ;; Defined at:
  5719 ;;		line 350 in file "pff.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  clst            4   30[COMRAM] unsigned long 
  5722 ;; Auto vars:     Size  Location     Type
  5723 ;;  bc              2   66[COMRAM] unsigned int 
  5724 ;;  ofs             2   60[COMRAM] unsigned int 
  5725 ;;  wc              2   58[COMRAM] unsigned int 
  5726 ;;  buf             4   62[COMRAM] unsigned char [4]
  5727 ;;  fs              2   68[COMRAM] PTR struct .
  5728 ;;		 -> main@fs(42), NULL(0), 
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  4   30[COMRAM] unsigned long 
  5731 ;; Registers used:
  5732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5738 ;;      Params:         4       0       0       0       0       0       0       0       0
  5739 ;;      Locals:        14       0       0       0       0       0       0       0       0
  5740 ;;      Temps:         22       0       0       0       0       0       0       0       0
  5741 ;;      Totals:        40       0       0       0       0       0       0       0       0
  5742 ;;Total ram usage:       40 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    5
  5745 ;; This function calls:
  5746 ;;		_disk_readp
  5747 ;; This function is called by:
  5748 ;;		_dir_next
  5749 ;;		_pf_read
  5750 ;;		_pf_write
  5751 ;;		_pf_lseek
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text14
  5756  006582                     __ptext14:
  5757                           	opt stack 0
  5758  006582                     _get_fat:
  5759                           	opt stack 23
  5760                           
  5761                           ;pff.c: 354: BYTE buf[4];
  5762                           ;pff.c: 355: FATFS *fs = FatFs;
  5763                           
  5764                           ;incstack = 0
  5765  006582  0100               	movlb	0	; () banked
  5766  006584  C0F4  F046         	movff	_FatFs+1,get_fat@fs+1
  5767  006588  0100               	movlb	0	; () banked
  5768  00658A  C0F3  F045         	movff	_FatFs,get_fat@fs
  5769                           
  5770                           ;pff.c: 357: if (clst < 2 || clst >= fs->n_fatent)
  5771  00658E  0E02               	movlw	2
  5772  006590  5C1F               	subwf	get_fat@clst,w,c
  5773  006592  0E00               	movlw	0
  5774  006594  5820               	subwfb	get_fat@clst+1,w,c
  5775  006596  0E00               	movlw	0
  5776  006598  5821               	subwfb	get_fat@clst+2,w,c
  5777  00659A  0E00               	movlw	0
  5778  00659C  5822               	subwfb	get_fat@clst+3,w,c
  5779  00659E  A0D8               	btfss	status,0,c
  5780  0065A0  D1D0               	goto	l3186
  5781                           
  5782                           ; BSR set to: 0
  5783  0065A2  EE20 F006          	lfsr	2,6
  5784  0065A6  5045               	movf	get_fat@fs,w,c
  5785  0065A8  26D9               	addwf	fsr2l,f,c
  5786  0065AA  5046               	movf	get_fat@fs+1,w,c
  5787  0065AC  22DA               	addwfc	fsr2h,f,c
  5788  0065AE  CFDE F023          	movff	postinc2,??_get_fat
  5789  0065B2  CFDE F024          	movff	postinc2,??_get_fat+1
  5790  0065B6  CFDE F025          	movff	postinc2,??_get_fat+2
  5791  0065BA  CFDE F026          	movff	postinc2,??_get_fat+3
  5792  0065BE  5023               	movf	??_get_fat,w,c
  5793  0065C0  5C1F               	subwf	get_fat@clst,w,c
  5794  0065C2  5024               	movf	??_get_fat+1,w,c
  5795  0065C4  5820               	subwfb	get_fat@clst+1,w,c
  5796  0065C6  5025               	movf	??_get_fat+2,w,c
  5797  0065C8  5821               	subwfb	get_fat@clst+2,w,c
  5798  0065CA  5026               	movf	??_get_fat+3,w,c
  5799  0065CC  5822               	subwfb	get_fat@clst+3,w,c
  5800  0065CE  A0D8               	btfss	status,0,c
  5801  0065D0  D1AA               	goto	l3184
  5802                           
  5803                           ; BSR set to: 0
  5804  0065D2  D1B7               	goto	l3186
  5805  0065D4                     l30:
  5806                           
  5807                           ;pff.c: 363: UINT wc, bc, ofs;
  5808                           ;pff.c: 365: bc = (UINT)clst; bc += bc / 2;
  5809  0065D4  C01F  F043         	movff	get_fat@clst,get_fat@bc
  5810  0065D8  C020  F044         	movff	get_fat@clst+1,get_fat@bc+1
  5811  0065DC  90D8               	bcf	status,0,c
  5812  0065DE  3044               	rrcf	get_fat@bc+1,w,c
  5813  0065E0  6E24               	movwf	(??_get_fat+1)& (0+255),c
  5814  0065E2  3043               	rrcf	get_fat@bc,w,c
  5815  0065E4  6E23               	movwf	??_get_fat& (0+255),c
  5816  0065E6  5023               	movf	??_get_fat,w,c
  5817  0065E8  2643               	addwf	get_fat@bc,f,c
  5818  0065EA  5024               	movf	??_get_fat+1,w,c
  5819  0065EC  2244               	addwfc	get_fat@bc+1,f,c
  5820                           
  5821                           ;pff.c: 366: ofs = bc % 512; bc /= 512;
  5822  0065EE  0EFF               	movlw	255
  5823  0065F0  1443               	andwf	get_fat@bc,w,c
  5824  0065F2  6E3D               	movwf	get_fat@ofs,c
  5825  0065F4  0E01               	movlw	1
  5826  0065F6  1444               	andwf	get_fat@bc+1,w,c
  5827  0065F8  6E3E               	movwf	get_fat@ofs+1,c
  5828  0065FA  0E09               	movlw	9
  5829  0065FC  6E23               	movwf	??_get_fat& (0+255),c
  5830  0065FE                     u2645:
  5831  0065FE  90D8               	bcf	status,0,c
  5832  006600  3244               	rrcf	get_fat@bc+1,f,c
  5833  006602  3243               	rrcf	get_fat@bc,f,c
  5834  006604  2E23               	decfsz	??_get_fat& (0+255),f,c
  5835  006606  D7FB               	goto	u2645
  5836                           
  5837                           ;pff.c: 367: if (ofs != 511) {
  5838  006608  283D               	incf	get_fat@ofs,w,c
  5839  00660A  B4D8               	btfsc	status,2,c
  5840  00660C  043E               	decf	get_fat@ofs+1,w,c
  5841  00660E  B4D8               	btfsc	status,2,c
  5842  006610  D029               	goto	l3146
  5843                           
  5844                           ;pff.c: 368: if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
  5845  006612  0E00               	movlw	high get_fat@buf
  5846  006614  6E0A               	movwf	disk_readp@rd+1,c
  5847  006616  0E3F               	movlw	low get_fat@buf
  5848  006618  6E09               	movwf	disk_readp@rd,c
  5849  00661A  EE20 F00A          	lfsr	2,10
  5850  00661E  5045               	movf	get_fat@fs,w,c
  5851  006620  26D9               	addwf	fsr2l,f,c
  5852  006622  5046               	movf	get_fat@fs+1,w,c
  5853  006624  22DA               	addwfc	fsr2h,f,c
  5854  006626  CFDE F023          	movff	postinc2,??_get_fat
  5855  00662A  CFDE F024          	movff	postinc2,??_get_fat+1
  5856  00662E  CFDE F025          	movff	postinc2,??_get_fat+2
  5857  006632  CFDE F026          	movff	postinc2,??_get_fat+3
  5858  006636  5043               	movf	get_fat@bc,w,c
  5859  006638  2423               	addwf	??_get_fat,w,c
  5860  00663A  6E0B               	movwf	disk_readp@sector,c
  5861  00663C  5044               	movf	get_fat@bc+1,w,c
  5862  00663E  2024               	addwfc	??_get_fat+1,w,c
  5863  006640  6E0C               	movwf	disk_readp@sector+1,c
  5864  006642  0E00               	movlw	0
  5865  006644  2025               	addwfc	??_get_fat+2,w,c
  5866  006646  6E0D               	movwf	disk_readp@sector+2,c
  5867  006648  0E00               	movlw	0
  5868  00664A  2026               	addwfc	??_get_fat+3,w,c
  5869  00664C  6E0E               	movwf	disk_readp@sector+3,c
  5870  00664E  C03D  F00F         	movff	get_fat@ofs,disk_readp@offset
  5871  006652  C03E  F010         	movff	get_fat@ofs+1,disk_readp@offset+1
  5872  006656  0E00               	movlw	0
  5873  006658  6E12               	movwf	disk_readp@count+1,c
  5874  00665A  0E02               	movlw	2
  5875  00665C  6E11               	movwf	disk_readp@count,c
  5876  00665E  EC46  F031         	call	_disk_readp	;wreg free
  5877  006662  D05E               	goto	L5
  5878  006664                     l3146:
  5879                           
  5880                           ;pff.c: 370: if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
  5881  006664  0E00               	movlw	high get_fat@buf
  5882  006666  6E0A               	movwf	disk_readp@rd+1,c
  5883  006668  0E3F               	movlw	low get_fat@buf
  5884  00666A  6E09               	movwf	disk_readp@rd,c
  5885  00666C  EE20 F00A          	lfsr	2,10
  5886  006670  5045               	movf	get_fat@fs,w,c
  5887  006672  26D9               	addwf	fsr2l,f,c
  5888  006674  5046               	movf	get_fat@fs+1,w,c
  5889  006676  22DA               	addwfc	fsr2h,f,c
  5890  006678  CFDE F023          	movff	postinc2,??_get_fat
  5891  00667C  CFDE F024          	movff	postinc2,??_get_fat+1
  5892  006680  CFDE F025          	movff	postinc2,??_get_fat+2
  5893  006684  CFDE F026          	movff	postinc2,??_get_fat+3
  5894  006688  5043               	movf	get_fat@bc,w,c
  5895  00668A  2423               	addwf	??_get_fat,w,c
  5896  00668C  6E0B               	movwf	disk_readp@sector,c
  5897  00668E  5044               	movf	get_fat@bc+1,w,c
  5898  006690  2024               	addwfc	??_get_fat+1,w,c
  5899  006692  6E0C               	movwf	disk_readp@sector+1,c
  5900  006694  0E00               	movlw	0
  5901  006696  2025               	addwfc	??_get_fat+2,w,c
  5902  006698  6E0D               	movwf	disk_readp@sector+2,c
  5903  00669A  0E00               	movlw	0
  5904  00669C  2026               	addwfc	??_get_fat+3,w,c
  5905  00669E  6E0E               	movwf	disk_readp@sector+3,c
  5906  0066A0  0E01               	movlw	1
  5907  0066A2  6E10               	movwf	disk_readp@offset+1,c
  5908  0066A4  680F               	setf	disk_readp@offset,c
  5909  0066A6  0E00               	movlw	0
  5910  0066A8  6E12               	movwf	disk_readp@count+1,c
  5911  0066AA  0E01               	movlw	1
  5912  0066AC  6E11               	movwf	disk_readp@count,c
  5913  0066AE  EC46  F031         	call	_disk_readp	;wreg free
  5914  0066B2  0900               	iorlw	0
  5915  0066B4  A4D8               	btfss	status,2,c
  5916  0066B6  D145               	goto	l3186
  5917                           
  5918                           ;pff.c: 371: if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
  5919  0066B8  0E00               	movlw	high (get_fat@buf+1)
  5920  0066BA  6E0A               	movwf	disk_readp@rd+1,c
  5921  0066BC  0E40               	movlw	low (get_fat@buf+1)
  5922  0066BE  6E09               	movwf	disk_readp@rd,c
  5923  0066C0  EE20 F00A          	lfsr	2,10
  5924  0066C4  5045               	movf	get_fat@fs,w,c
  5925  0066C6  26D9               	addwf	fsr2l,f,c
  5926  0066C8  5046               	movf	get_fat@fs+1,w,c
  5927  0066CA  22DA               	addwfc	fsr2h,f,c
  5928  0066CC  CFDE F023          	movff	postinc2,??_get_fat
  5929  0066D0  CFDE F024          	movff	postinc2,??_get_fat+1
  5930  0066D4  CFDE F025          	movff	postinc2,??_get_fat+2
  5931  0066D8  CFDE F026          	movff	postinc2,??_get_fat+3
  5932  0066DC  5043               	movf	get_fat@bc,w,c
  5933  0066DE  2423               	addwf	??_get_fat,w,c
  5934  0066E0  6E27               	movwf	(??_get_fat+4)& (0+255),c
  5935  0066E2  5044               	movf	get_fat@bc+1,w,c
  5936  0066E4  2024               	addwfc	??_get_fat+1,w,c
  5937  0066E6  6E28               	movwf	(??_get_fat+5)& (0+255),c
  5938  0066E8  0E00               	movlw	0
  5939  0066EA  2025               	addwfc	??_get_fat+2,w,c
  5940  0066EC  6E29               	movwf	(??_get_fat+6)& (0+255),c
  5941  0066EE  0E00               	movlw	0
  5942  0066F0  2026               	addwfc	??_get_fat+3,w,c
  5943  0066F2  6E2A               	movwf	(??_get_fat+7)& (0+255),c
  5944  0066F4  0E01               	movlw	1
  5945  0066F6  2427               	addwf	??_get_fat+4,w,c
  5946  0066F8  6E0B               	movwf	disk_readp@sector,c
  5947  0066FA  0E00               	movlw	0
  5948  0066FC  2028               	addwfc	??_get_fat+5,w,c
  5949  0066FE  6E0C               	movwf	disk_readp@sector+1,c
  5950  006700  0E00               	movlw	0
  5951  006702  2029               	addwfc	??_get_fat+6,w,c
  5952  006704  6E0D               	movwf	disk_readp@sector+2,c
  5953  006706  0E00               	movlw	0
  5954  006708  202A               	addwfc	??_get_fat+7,w,c
  5955  00670A  6E0E               	movwf	disk_readp@sector+3,c
  5956  00670C  0E00               	movlw	0
  5957  00670E  6E10               	movwf	disk_readp@offset+1,c
  5958  006710  0E00               	movlw	0
  5959  006712  6E0F               	movwf	disk_readp@offset,c
  5960  006714  0E00               	movlw	0
  5961  006716  6E12               	movwf	disk_readp@count+1,c
  5962  006718  0E01               	movlw	1
  5963  00671A  6E11               	movwf	disk_readp@count,c
  5964  00671C  EC46  F031         	call	_disk_readp	;wreg free
  5965  006720                     L5:
  5966  006720  0900               	iorlw	0
  5967  006722  A4D8               	btfss	status,2,c
  5968  006724  D10E               	goto	l3186
  5969                           
  5970                           ;pff.c: 372: }
  5971                           ;pff.c: 373: wc = (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  5972  006726  5040               	movf	get_fat@buf+1,w,c
  5973  006728  6E3C               	movwf	get_fat@wc+1,c
  5974  00672A  503F               	movf	get_fat@buf,w,c
  5975  00672C  6E3B               	movwf	get_fat@wc,c
  5976                           
  5977                           ;pff.c: 374: return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
  5978  00672E  B01F               	btfsc	get_fat@clst,0,c
  5979  006730  D007               	goto	l3160
  5980  006732  0EFF               	movlw	255
  5981  006734  143B               	andwf	get_fat@wc,w,c
  5982  006736  6E39               	movwf	_get_fat$113,c
  5983  006738  0E0F               	movlw	15
  5984  00673A  143C               	andwf	get_fat@wc+1,w,c
  5985  00673C  6E3A               	movwf	_get_fat$113+1,c
  5986  00673E  D00F               	goto	l3162
  5987  006740                     l3160:
  5988  006740  C03B  F023         	movff	get_fat@wc,??_get_fat
  5989  006744  C03C  F024         	movff	get_fat@wc+1,??_get_fat+1
  5990  006748  0E04               	movlw	4
  5991  00674A  6E25               	movwf	(??_get_fat+2)& (0+255),c
  5992  00674C                     u2705:
  5993  00674C  90D8               	bcf	status,0,c
  5994  00674E  3224               	rrcf	??_get_fat+1,f,c
  5995  006750  3223               	rrcf	??_get_fat,f,c
  5996  006752  2E25               	decfsz	(??_get_fat+2)& (0+255),f,c
  5997  006754  D7FB               	goto	u2705
  5998  006756  C023  F039         	movff	??_get_fat,_get_fat$113
  5999  00675A  C024  F03A         	movff	??_get_fat+1,_get_fat$113+1
  6000  00675E                     l3162:
  6001  00675E  C039  F01F         	movff	_get_fat$113,?_get_fat
  6002  006762  C03A  F020         	movff	_get_fat$113+1,?_get_fat+1
  6003  006766  D04F               	goto	L3
  6004  006768                     l3166:
  6005                           
  6006                           ;pff.c: 379: if (disk_readp(buf, fs->fatbase + clst / 256, ((UINT)clst % 256) * 2, 2)) b
      +                          reak;
  6007  006768  0E00               	movlw	high get_fat@buf
  6008  00676A  6E0A               	movwf	disk_readp@rd+1,c
  6009  00676C  0E3F               	movlw	low get_fat@buf
  6010  00676E  6E09               	movwf	disk_readp@rd,c
  6011  006770  EE20 F00A          	lfsr	2,10
  6012  006774  5045               	movf	get_fat@fs,w,c
  6013  006776  26D9               	addwf	fsr2l,f,c
  6014  006778  5046               	movf	get_fat@fs+1,w,c
  6015  00677A  22DA               	addwfc	fsr2h,f,c
  6016  00677C  CFDE F023          	movff	postinc2,??_get_fat
  6017  006780  CFDE F024          	movff	postinc2,??_get_fat+1
  6018  006784  CFDE F025          	movff	postinc2,??_get_fat+2
  6019  006788  CFDE F026          	movff	postinc2,??_get_fat+3
  6020  00678C  C01F  F027         	movff	get_fat@clst,??_get_fat+4
  6021  006790  C020  F028         	movff	get_fat@clst+1,??_get_fat+5
  6022  006794  C021  F029         	movff	get_fat@clst+2,??_get_fat+6
  6023  006798  C022  F02A         	movff	get_fat@clst+3,??_get_fat+7
  6024  00679C  C028  F027         	movff	??_get_fat+5,??_get_fat+4
  6025  0067A0  C029  F028         	movff	??_get_fat+6,??_get_fat+5
  6026  0067A4  C02A  F029         	movff	??_get_fat+7,??_get_fat+6
  6027  0067A8  6A2A               	clrf	??_get_fat+7,c
  6028  0067AA  5023               	movf	??_get_fat,w,c
  6029  0067AC  2427               	addwf	??_get_fat+4,w,c
  6030  0067AE  6E0B               	movwf	disk_readp@sector,c
  6031  0067B0  5024               	movf	??_get_fat+1,w,c
  6032  0067B2  2028               	addwfc	??_get_fat+5,w,c
  6033  0067B4  6E0C               	movwf	disk_readp@sector+1,c
  6034  0067B6  5025               	movf	??_get_fat+2,w,c
  6035  0067B8  2029               	addwfc	??_get_fat+6,w,c
  6036  0067BA  6E0D               	movwf	disk_readp@sector+2,c
  6037  0067BC  5026               	movf	??_get_fat+3,w,c
  6038  0067BE  202A               	addwfc	??_get_fat+7,w,c
  6039  0067C0  6E0E               	movwf	disk_readp@sector+3,c
  6040  0067C2  0EFF               	movlw	255
  6041  0067C4  141F               	andwf	get_fat@clst,w,c
  6042  0067C6  6E2B               	movwf	(??_get_fat+8)& (0+255),c
  6043  0067C8  0E00               	movlw	0
  6044  0067CA  1420               	andwf	get_fat@clst+1,w,c
  6045  0067CC  6E2C               	movwf	(??_get_fat+9)& (0+255),c
  6046  0067CE  90D8               	bcf	status,0,c
  6047  0067D0  342B               	rlcf	??_get_fat+8,w,c
  6048  0067D2  6E0F               	movwf	disk_readp@offset,c
  6049  0067D4  342C               	rlcf	??_get_fat+9,w,c
  6050  0067D6  6E10               	movwf	disk_readp@offset+1,c
  6051  0067D8  0E00               	movlw	0
  6052  0067DA  6E12               	movwf	disk_readp@count+1,c
  6053  0067DC  0E02               	movlw	2
  6054  0067DE  6E11               	movwf	disk_readp@count,c
  6055  0067E0  EC46  F031         	call	_disk_readp	;wreg free
  6056  0067E4  0900               	iorlw	0
  6057  0067E6  A4D8               	btfss	status,2,c
  6058  0067E8  D0AC               	goto	l3186
  6059                           
  6060                           ;pff.c: 380: return (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf));
  6061  0067EA  503F               	movf	get_fat@buf,w,c
  6062  0067EC  C040  F023         	movff	get_fat@buf+1,??_get_fat
  6063  0067F0  6A24               	clrf	(??_get_fat+1)& (0+255),c
  6064  0067F2  C023  F024         	movff	??_get_fat,??_get_fat+1
  6065  0067F6  6A23               	clrf	??_get_fat,c
  6066  0067F8  1223               	iorwf	??_get_fat,f,c
  6067  0067FA  0E00               	movlw	0
  6068  0067FC  1224               	iorwf	??_get_fat+1,f,c
  6069  0067FE  C023  F01F         	movff	??_get_fat,?_get_fat
  6070  006802  C024  F020         	movff	??_get_fat+1,?_get_fat+1
  6071  006806                     L3:
  6072  006806  6A21               	clrf	?_get_fat+2,c
  6073  006808  6A22               	clrf	?_get_fat+3,c
  6074  00680A  D0A3               	goto	l28
  6075  00680C                     l3174:
  6076                           
  6077                           ;pff.c: 384: if (disk_readp(buf, fs->fatbase + clst / 128, ((UINT)clst % 128) * 4, 4)) b
      +                          reak;
  6078  00680C  0E00               	movlw	high get_fat@buf
  6079  00680E  6E0A               	movwf	disk_readp@rd+1,c
  6080  006810  0E3F               	movlw	low get_fat@buf
  6081  006812  6E09               	movwf	disk_readp@rd,c
  6082  006814  EE20 F00A          	lfsr	2,10
  6083  006818  5045               	movf	get_fat@fs,w,c
  6084  00681A  26D9               	addwf	fsr2l,f,c
  6085  00681C  5046               	movf	get_fat@fs+1,w,c
  6086  00681E  22DA               	addwfc	fsr2h,f,c
  6087  006820  CFDE F023          	movff	postinc2,??_get_fat
  6088  006824  CFDE F024          	movff	postinc2,??_get_fat+1
  6089  006828  CFDE F025          	movff	postinc2,??_get_fat+2
  6090  00682C  CFDE F026          	movff	postinc2,??_get_fat+3
  6091  006830  C01F  F027         	movff	get_fat@clst,??_get_fat+4
  6092  006834  C020  F028         	movff	get_fat@clst+1,??_get_fat+5
  6093  006838  C021  F029         	movff	get_fat@clst+2,??_get_fat+6
  6094  00683C  C022  F02A         	movff	get_fat@clst+3,??_get_fat+7
  6095  006840  0E08               	movlw	8
  6096  006842  D005               	goto	u2720
  6097  006844                     u2725:
  6098  006844  90D8               	bcf	status,0,c
  6099  006846  322A               	rrcf	??_get_fat+7,f,c
  6100  006848  3229               	rrcf	??_get_fat+6,f,c
  6101  00684A  3228               	rrcf	??_get_fat+5,f,c
  6102  00684C  3227               	rrcf	??_get_fat+4,f,c
  6103  00684E                     u2720:
  6104  00684E  2EE8               	decfsz	wreg,f,c
  6105  006850  D7F9               	goto	u2725
  6106  006852  5023               	movf	??_get_fat,w,c
  6107  006854  2427               	addwf	??_get_fat+4,w,c
  6108  006856  6E0B               	movwf	disk_readp@sector,c
  6109  006858  5024               	movf	??_get_fat+1,w,c
  6110  00685A  2028               	addwfc	??_get_fat+5,w,c
  6111  00685C  6E0C               	movwf	disk_readp@sector+1,c
  6112  00685E  5025               	movf	??_get_fat+2,w,c
  6113  006860  2029               	addwfc	??_get_fat+6,w,c
  6114  006862  6E0D               	movwf	disk_readp@sector+2,c
  6115  006864  5026               	movf	??_get_fat+3,w,c
  6116  006866  202A               	addwfc	??_get_fat+7,w,c
  6117  006868  6E0E               	movwf	disk_readp@sector+3,c
  6118  00686A  0E7F               	movlw	127
  6119  00686C  141F               	andwf	get_fat@clst,w,c
  6120  00686E  6E2B               	movwf	(??_get_fat+8)& (0+255),c
  6121  006870  0E00               	movlw	0
  6122  006872  1420               	andwf	get_fat@clst+1,w,c
  6123  006874  6E2C               	movwf	(??_get_fat+9)& (0+255),c
  6124  006876  90D8               	bcf	status,0,c
  6125  006878  362B               	rlcf	??_get_fat+8,f,c
  6126  00687A  362C               	rlcf	??_get_fat+9,f,c
  6127  00687C  90D8               	bcf	status,0,c
  6128  00687E  362B               	rlcf	??_get_fat+8,f,c
  6129  006880  362C               	rlcf	??_get_fat+9,f,c
  6130  006882  C02B  F00F         	movff	??_get_fat+8,disk_readp@offset
  6131  006886  C02C  F010         	movff	??_get_fat+9,disk_readp@offset+1
  6132  00688A  0E00               	movlw	0
  6133  00688C  6E12               	movwf	disk_readp@count+1,c
  6134  00688E  0E04               	movlw	4
  6135  006890  6E11               	movwf	disk_readp@count,c
  6136  006892  EC46  F031         	call	_disk_readp	;wreg free
  6137  006896  0900               	iorlw	0
  6138  006898  A4D8               	btfss	status,2,c
  6139  00689A  D053               	goto	l3186
  6140                           
  6141                           ;pff.c: 385: return (DWORD)(((DWORD)*((BYTE*)(buf)+3)<<24)|((DWORD)*((BYTE*)(buf)+2)<<16
      +                          )|((WORD)*((BYTE*)(buf)+1)<<8)|*(BYTE*)(buf)) & 0x0FFFFFFF;
  6142  00689C  5040               	movf	get_fat@buf+1,w,c
  6143  00689E  6E24               	movwf	(??_get_fat+1)& (0+255),c
  6144  0068A0  6A23               	clrf	??_get_fat& (0+255),c
  6145  0068A2  C041  F025         	movff	get_fat@buf+2,??_get_fat+2
  6146  0068A6  6A26               	clrf	(??_get_fat+3)& (0+255),c
  6147  0068A8  6A27               	clrf	(??_get_fat+4)& (0+255),c
  6148  0068AA  6A28               	clrf	(??_get_fat+5)& (0+255),c
  6149  0068AC  C026  F028         	movff	??_get_fat+3,??_get_fat+5
  6150  0068B0  C025  F027         	movff	??_get_fat+2,??_get_fat+4
  6151  0068B4  6A26               	clrf	??_get_fat+3,c
  6152  0068B6  6A25               	clrf	??_get_fat+2,c
  6153  0068B8  C042  F029         	movff	get_fat@buf+3,??_get_fat+6
  6154  0068BC  6A2A               	clrf	(??_get_fat+7)& (0+255),c
  6155  0068BE  6A2B               	clrf	(??_get_fat+8)& (0+255),c
  6156  0068C0  6A2C               	clrf	(??_get_fat+9)& (0+255),c
  6157  0068C2  C029  F02C         	movff	??_get_fat+6,??_get_fat+9
  6158  0068C6  6A2B               	clrf	??_get_fat+8,c
  6159  0068C8  6A2A               	clrf	??_get_fat+7,c
  6160  0068CA  6A29               	clrf	??_get_fat+6,c
  6161  0068CC  5025               	movf	??_get_fat+2,w,c
  6162  0068CE  1029               	iorwf	??_get_fat+6,w,c
  6163  0068D0  6E2D               	movwf	(??_get_fat+10)& (0+255),c
  6164  0068D2  5026               	movf	??_get_fat+3,w,c
  6165  0068D4  102A               	iorwf	??_get_fat+7,w,c
  6166  0068D6  6E2E               	movwf	(??_get_fat+11)& (0+255),c
  6167  0068D8  5027               	movf	??_get_fat+4,w,c
  6168  0068DA  102B               	iorwf	??_get_fat+8,w,c
  6169  0068DC  6E2F               	movwf	(??_get_fat+12)& (0+255),c
  6170  0068DE  5028               	movf	??_get_fat+5,w,c
  6171  0068E0  102C               	iorwf	??_get_fat+9,w,c
  6172  0068E2  6E30               	movwf	(??_get_fat+13)& (0+255),c
  6173  0068E4  5023               	movf	??_get_fat,w,c
  6174  0068E6  102D               	iorwf	??_get_fat+10,w,c
  6175  0068E8  6E31               	movwf	(??_get_fat+14)& (0+255),c
  6176  0068EA  5024               	movf	??_get_fat+1,w,c
  6177  0068EC  102E               	iorwf	??_get_fat+11,w,c
  6178  0068EE  6E32               	movwf	(??_get_fat+15)& (0+255),c
  6179  0068F0  0E00               	movlw	0
  6180  0068F2  102F               	iorwf	??_get_fat+12,w,c
  6181  0068F4  6E33               	movwf	(??_get_fat+16)& (0+255),c
  6182  0068F6  0E00               	movlw	0
  6183  0068F8  1030               	iorwf	??_get_fat+13,w,c
  6184  0068FA  6E34               	movwf	(??_get_fat+17)& (0+255),c
  6185  0068FC  503F               	movf	get_fat@buf,w,c
  6186  0068FE  1031               	iorwf	??_get_fat+14,w,c
  6187  006900  6E35               	movwf	(??_get_fat+18)& (0+255),c
  6188  006902  5032               	movf	??_get_fat+15,w,c
  6189  006904  6E36               	movwf	(??_get_fat+19)& (0+255),c
  6190  006906  5033               	movf	??_get_fat+16,w,c
  6191  006908  6E37               	movwf	(??_get_fat+20)& (0+255),c
  6192  00690A  5034               	movf	??_get_fat+17,w,c
  6193  00690C  6E38               	movwf	(??_get_fat+21)& (0+255),c
  6194  00690E  0EFF               	movlw	255
  6195  006910  1435               	andwf	??_get_fat+18,w,c
  6196  006912  6E1F               	movwf	?_get_fat,c
  6197  006914  0EFF               	movlw	255
  6198  006916  1436               	andwf	??_get_fat+19,w,c
  6199  006918  6E20               	movwf	?_get_fat+1,c
  6200  00691A  0EFF               	movlw	255
  6201  00691C  1437               	andwf	??_get_fat+20,w,c
  6202  00691E  6E21               	movwf	?_get_fat+2,c
  6203  006920  0E0F               	movlw	15
  6204  006922  1438               	andwf	??_get_fat+21,w,c
  6205  006924  D015               	goto	L4
  6206  006926                     l3184:
  6207  006926  C045  FFD9         	movff	get_fat@fs,fsr2l
  6208  00692A  C046  FFDA         	movff	get_fat@fs+1,fsr2h
  6209  00692E  50DF               	movf	indf2,w,c
  6210                           
  6211                           ; Switch size 1, requested type "space"
  6212                           ; Number of cases is 3, Range of values is 1 to 3
  6213                           ; switch strategies available:
  6214                           ; Name         Instructions Cycles
  6215                           ; simple_byte           10     6 (average)
  6216                           ;	Chosen strategy is simple_byte
  6217  006930  0A01               	xorlw	1	; case 1
  6218  006932  B4D8               	btfsc	status,2,c
  6219  006934  D64F               	goto	l30
  6220  006936  0A03               	xorlw	3	; case 2
  6221  006938  B4D8               	btfsc	status,2,c
  6222  00693A  D716               	goto	l3166
  6223  00693C  0A01               	xorlw	1	; case 3
  6224  00693E  B4D8               	btfsc	status,2,c
  6225  006940  D765               	goto	l3174
  6226  006942                     l3186:
  6227                           
  6228                           ;pff.c: 389: return 1;
  6229  006942  0E01               	movlw	1
  6230  006944  6E1F               	movwf	?_get_fat,c
  6231  006946  0E00               	movlw	0
  6232  006948  6E20               	movwf	?_get_fat+1,c
  6233  00694A  0E00               	movlw	0
  6234  00694C  6E21               	movwf	?_get_fat+2,c
  6235  00694E  0E00               	movlw	0
  6236  006950                     L4:
  6237  006950  6E22               	movwf	?_get_fat+3,c
  6238  006952                     l28:
  6239  006952  0012               	return	
  6240  006954                     __end_of_get_fat:
  6241                           	opt stack 0
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           postinc0	equ	0xFEE
  6247                           wreg	equ	0xFE8
  6248                           indf1	equ	0xFE7
  6249                           postdec1	equ	0xFE5
  6250                           fsr1h	equ	0xFE2
  6251                           fsr1l	equ	0xFE1
  6252                           indf2	equ	0xFDF
  6253                           postinc2	equ	0xFDE
  6254                           postdec2	equ	0xFDD
  6255                           plusw2	equ	0xFDB
  6256                           fsr2h	equ	0xFDA
  6257                           fsr2l	equ	0xFD9
  6258                           status	equ	0xFD8
  6259                           
  6260 ;; *************** function _clust2sect *****************
  6261 ;; Defined at:
  6262 ;;		line 400 in file "pff.c"
  6263 ;; Parameters:    Size  Location     Type
  6264 ;;  clst            4   12[COMRAM] unsigned long 
  6265 ;; Auto vars:     Size  Location     Type
  6266 ;;  fs              2   25[COMRAM] PTR struct .
  6267 ;;		 -> main@fs(42), NULL(0), 
  6268 ;; Return value:  Size  Location     Type
  6269 ;;                  4   12[COMRAM] unsigned long 
  6270 ;; Registers used:
  6271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6272 ;; Tracked objects:
  6273 ;;		On entry : 0/0
  6274 ;;		On exit  : 0/0
  6275 ;;		Unchanged: 0/0
  6276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6277 ;;      Params:         4       0       0       0       0       0       0       0       0
  6278 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6279 ;;      Temps:          9       0       0       0       0       0       0       0       0
  6280 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6281 ;;Total ram usage:       15 bytes
  6282 ;; Hardware stack levels used:    1
  6283 ;; Hardware stack levels required when called:    1
  6284 ;; This function calls:
  6285 ;;		___lmul
  6286 ;; This function is called by:
  6287 ;;		_dir_rewind
  6288 ;;		_dir_next
  6289 ;;		_pf_read
  6290 ;;		_pf_write
  6291 ;;		_pf_lseek
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text15
  6296  005282                     __ptext15:
  6297                           	opt stack 0
  6298  005282                     _clust2sect:
  6299                           	opt stack 27
  6300                           
  6301                           ;pff.c: 404: FATFS *fs = FatFs;
  6302                           
  6303                           ;incstack = 0
  6304  005282  0100               	movlb	0	; () banked
  6305  005284  C0F4  F01B         	movff	_FatFs+1,clust2sect@fs+1
  6306  005288  0100               	movlb	0	; () banked
  6307  00528A  C0F3  F01A         	movff	_FatFs,clust2sect@fs
  6308                           
  6309                           ;pff.c: 407: clst -= 2;
  6310  00528E  0E02               	movlw	2
  6311  005290  5E0D               	subwf	clust2sect@clst,f,c
  6312  005292  0E00               	movlw	0
  6313  005294  5A0E               	subwfb	clust2sect@clst+1,f,c
  6314  005296  5A0F               	subwfb	clust2sect@clst+2,f,c
  6315  005298  5A10               	subwfb	clust2sect@clst+3,f,c
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;pff.c: 408: if (clst >= (fs->n_fatent - 2)) return 0;
  6319  00529A  EE20 F006          	lfsr	2,6
  6320  00529E  501A               	movf	clust2sect@fs,w,c
  6321  0052A0  26D9               	addwf	fsr2l,f,c
  6322  0052A2  501B               	movf	clust2sect@fs+1,w,c
  6323  0052A4  22DA               	addwfc	fsr2h,f,c
  6324  0052A6  0EFE               	movlw	254
  6325  0052A8  24DE               	addwf	postinc2,w,c
  6326  0052AA  6E11               	movwf	??_clust2sect& (0+255),c
  6327  0052AC  0EFF               	movlw	255
  6328  0052AE  20DE               	addwfc	postinc2,w,c
  6329  0052B0  6E12               	movwf	(??_clust2sect+1)& (0+255),c
  6330  0052B2  0EFF               	movlw	255
  6331  0052B4  20DE               	addwfc	postinc2,w,c
  6332  0052B6  6E13               	movwf	(??_clust2sect+2)& (0+255),c
  6333  0052B8  0EFF               	movlw	255
  6334  0052BA  20DE               	addwfc	postinc2,w,c
  6335  0052BC  6E14               	movwf	(??_clust2sect+3)& (0+255),c
  6336  0052BE  5011               	movf	??_clust2sect,w,c
  6337  0052C0  5C0D               	subwf	clust2sect@clst,w,c
  6338  0052C2  5012               	movf	??_clust2sect+1,w,c
  6339  0052C4  580E               	subwfb	clust2sect@clst+1,w,c
  6340  0052C6  5013               	movf	??_clust2sect+2,w,c
  6341  0052C8  580F               	subwfb	clust2sect@clst+2,w,c
  6342  0052CA  5014               	movf	??_clust2sect+3,w,c
  6343  0052CC  5810               	subwfb	clust2sect@clst+3,w,c
  6344  0052CE  A0D8               	btfss	status,0,c
  6345  0052D0  D008               	goto	l3198
  6346                           
  6347                           ; BSR set to: 0
  6348  0052D2  0E00               	movlw	0
  6349  0052D4  6E0D               	movwf	?_clust2sect,c
  6350  0052D6  0E00               	movlw	0
  6351  0052D8  6E0E               	movwf	?_clust2sect+1,c
  6352  0052DA  0E00               	movlw	0
  6353  0052DC  6E0F               	movwf	?_clust2sect+2,c
  6354  0052DE  0E00               	movlw	0
  6355  0052E0  D038               	goto	L6
  6356  0052E2                     l3198:
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;pff.c: 409: return (DWORD)clst * fs->csize + fs->database;
  6360  0052E2  EE20 F012          	lfsr	2,18
  6361  0052E6  501A               	movf	clust2sect@fs,w,c
  6362  0052E8  26D9               	addwf	fsr2l,f,c
  6363  0052EA  501B               	movf	clust2sect@fs+1,w,c
  6364  0052EC  22DA               	addwfc	fsr2h,f,c
  6365  0052EE  CFDE F011          	movff	postinc2,??_clust2sect
  6366  0052F2  CFDE F012          	movff	postinc2,??_clust2sect+1
  6367  0052F6  CFDE F013          	movff	postinc2,??_clust2sect+2
  6368  0052FA  CFDE F014          	movff	postinc2,??_clust2sect+3
  6369  0052FE  EE20 F002          	lfsr	2,2
  6370  005302  501A               	movf	clust2sect@fs,w,c
  6371  005304  26D9               	addwf	fsr2l,f,c
  6372  005306  501B               	movf	clust2sect@fs+1,w,c
  6373  005308  22DA               	addwfc	fsr2h,f,c
  6374  00530A  50DF               	movf	indf2,w,c
  6375  00530C  6E15               	movwf	(??_clust2sect+4)& (0+255),c
  6376  00530E  5015               	movf	??_clust2sect+4,w,c
  6377  005310  6E01               	movwf	___lmul@multiplier,c
  6378  005312  6A02               	clrf	___lmul@multiplier+1,c
  6379  005314  6A03               	clrf	___lmul@multiplier+2,c
  6380  005316  6A04               	clrf	___lmul@multiplier+3,c
  6381  005318  C00D  F005         	movff	clust2sect@clst,___lmul@multiplicand
  6382  00531C  C00E  F006         	movff	clust2sect@clst+1,___lmul@multiplicand+1
  6383  005320  C00F  F007         	movff	clust2sect@clst+2,___lmul@multiplicand+2
  6384  005324  C010  F008         	movff	clust2sect@clst+3,___lmul@multiplicand+3
  6385  005328  EC6E  F027         	call	___lmul	;wreg free
  6386  00532C  C001  F016         	movff	?___lmul,??_clust2sect+5
  6387  005330  C002  F017         	movff	?___lmul+1,??_clust2sect+6
  6388  005334  C003  F018         	movff	?___lmul+2,??_clust2sect+7
  6389  005338  C004  F019         	movff	?___lmul+3,??_clust2sect+8
  6390  00533C  5011               	movf	??_clust2sect,w,c
  6391  00533E  2416               	addwf	??_clust2sect+5,w,c
  6392  005340  6E0D               	movwf	?_clust2sect,c
  6393  005342  5012               	movf	??_clust2sect+1,w,c
  6394  005344  2017               	addwfc	??_clust2sect+6,w,c
  6395  005346  6E0E               	movwf	?_clust2sect+1,c
  6396  005348  5013               	movf	??_clust2sect+2,w,c
  6397  00534A  2018               	addwfc	??_clust2sect+7,w,c
  6398  00534C  6E0F               	movwf	?_clust2sect+2,c
  6399  00534E  5014               	movf	??_clust2sect+3,w,c
  6400  005350  2019               	addwfc	??_clust2sect+8,w,c
  6401  005352                     L6:
  6402  005352  6E10               	movwf	?_clust2sect+3,c
  6403  005354  0012               	return	
  6404  005356                     __end_of_clust2sect:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           postinc0	equ	0xFEE
  6411                           wreg	equ	0xFE8
  6412                           indf1	equ	0xFE7
  6413                           postdec1	equ	0xFE5
  6414                           fsr1h	equ	0xFE2
  6415                           fsr1l	equ	0xFE1
  6416                           indf2	equ	0xFDF
  6417                           postinc2	equ	0xFDE
  6418                           postdec2	equ	0xFDD
  6419                           plusw2	equ	0xFDB
  6420                           fsr2h	equ	0xFDA
  6421                           fsr2l	equ	0xFD9
  6422                           status	equ	0xFD8
  6423                           
  6424 ;; *************** function _create_name *****************
  6425 ;; Defined at:
  6426 ;;		line 581 in file "pff.c"
  6427 ;; Parameters:    Size  Location     Type
  6428 ;;  dj              2    8[COMRAM] PTR struct .
  6429 ;;		 -> pf_open@dj(16), 
  6430 ;;  path            2   10[COMRAM] PTR PTR const unsigned c
  6431 ;;		 -> follow_path@path(2), 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  d               1   19[COMRAM] unsigned char 
  6434 ;;  sfn             2   24[COMRAM] PTR unsigned char 
  6435 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6436 ;;  p               2   20[COMRAM] PTR const unsigned char 
  6437 ;;		 -> STR_1(10), 
  6438 ;;  c               1   27[COMRAM] unsigned char 
  6439 ;;  i               1   26[COMRAM] unsigned char 
  6440 ;;  si              1   23[COMRAM] unsigned char 
  6441 ;;  ni              1   22[COMRAM] unsigned char 
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      enum E43
  6444 ;; Registers used:
  6445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6451 ;;      Params:         4       0       0       0       0       0       0       0       0
  6452 ;;      Locals:         9       0       0       0       0       0       0       0       0
  6453 ;;      Temps:          7       0       0       0       0       0       0       0       0
  6454 ;;      Totals:        20       0       0       0       0       0       0       0       0
  6455 ;;Total ram usage:       20 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    1
  6458 ;; This function calls:
  6459 ;;		_mem_set
  6460 ;; This function is called by:
  6461 ;;		_follow_path
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           	psect	text16
  6466  0056A8                     __ptext16:
  6467                           	opt stack 0
  6468  0056A8                     _create_name:
  6469                           	opt stack 26
  6470                           
  6471                           ;pff.c: 586: BYTE c, ni, si, i, *sfn;
  6472                           ;pff.c: 587: const char *p;
  6473                           ;pff.c: 590: static const BYTE cvt[] = {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x4
      +                          5,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0
      +                          x9B,0x9C,0x9D,0x9E,0x9F, 0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0x
  6474                           ;pff.c: 595: sfn = dj->fn;
  6475                           
  6476                           ;incstack = 0
  6477  0056A8  EE20 F002          	lfsr	2,2
  6478  0056AC  5009               	movf	create_name@dj,w,c
  6479  0056AE  26D9               	addwf	fsr2l,f,c
  6480  0056B0  500A               	movf	create_name@dj+1,w,c
  6481  0056B2  22DA               	addwfc	fsr2h,f,c
  6482  0056B4  CFDE F019          	movff	postinc2,create_name@sfn
  6483  0056B8  CFDD F01A          	movff	postdec2,create_name@sfn+1
  6484                           
  6485                           ;pff.c: 596: mem_set(sfn, ' ', 11);
  6486  0056BC  C01A  F002         	movff	create_name@sfn+1,mem_set@dst+1
  6487  0056C0  C019  F001         	movff	create_name@sfn,mem_set@dst
  6488  0056C4  0E00               	movlw	0
  6489  0056C6  6E04               	movwf	mem_set@val+1,c
  6490  0056C8  0E20               	movlw	32
  6491  0056CA  6E03               	movwf	mem_set@val,c
  6492  0056CC  0E00               	movlw	0
  6493  0056CE  6E06               	movwf	mem_set@cnt+1,c
  6494  0056D0  0E0B               	movlw	11
  6495  0056D2  6E05               	movwf	mem_set@cnt,c
  6496  0056D4  ECE4  F026         	call	_mem_set	;wreg free
  6497                           
  6498                           ;pff.c: 597: si = i = 0; ni = 8;
  6499  0056D8  0E00               	movlw	0
  6500  0056DA  6E1B               	movwf	create_name@i,c
  6501  0056DC  C01B  F018         	movff	create_name@i,create_name@si
  6502  0056E0  0E08               	movlw	8
  6503  0056E2  6E17               	movwf	create_name@ni,c
  6504                           
  6505                           ;pff.c: 598: p = *path;
  6506  0056E4  C00B  FFD9         	movff	create_name@path,fsr2l
  6507  0056E8  C00C  FFDA         	movff	create_name@path+1,fsr2h
  6508  0056EC  CFDE F015          	movff	postinc2,create_name@p
  6509  0056F0  CFDD F016          	movff	postdec2,create_name@p+1
  6510  0056F4                     l3358:
  6511                           
  6512                           ;pff.c: 600: c = p[si++];
  6513  0056F4  5018               	movf	create_name@si,w,c
  6514  0056F6  0D01               	mullw	1
  6515  0056F8  C015  F00D         	movff	create_name@p,??_create_name
  6516  0056FC  C016  F00E         	movff	create_name@p+1,??_create_name+1
  6517  005700  50F3               	movf	prodl,w,c
  6518  005702  260D               	addwf	??_create_name,f,c
  6519  005704  50F4               	movf	prodh,w,c
  6520  005706  220E               	addwfc	??_create_name+1,f,c
  6521  005708  C00D  FFF6         	movff	??_create_name,tblptrl
  6522  00570C  C00E  FFF7         	movff	??_create_name+1,tblptrh
  6523  005710                     	if	0	;tblptru may be non-zero
  6524  005710                     	endif
  6525  005710                     	if	0	;tblptru may be non-zero
  6526  005710                     	endif
  6527  005710  0008               	tblrd		*
  6528  005712  CFF5 F01C          	movff	tablat,create_name@c
  6529  005716  2A18               	incf	create_name@si,f,c
  6530                           
  6531                           ;pff.c: 601: if (c <= ' ' || c == '/') break;
  6532  005718  0E20               	movlw	32
  6533  00571A  641C               	cpfsgt	create_name@c,c
  6534  00571C  D045               	goto	l3404
  6535  00571E  501C               	movf	create_name@c,w,c
  6536  005720  0A2F               	xorlw	47
  6537  005722  B4D8               	btfsc	status,2,c
  6538  005724  D041               	goto	l3404
  6539                           
  6540                           ;pff.c: 602: if (c == '.' || i >= ni) {
  6541  005726  501C               	movf	create_name@c,w,c
  6542  005728  0A2E               	xorlw	46
  6543  00572A  B4D8               	btfsc	status,2,c
  6544  00572C  D004               	goto	l3370
  6545  00572E  5017               	movf	create_name@ni,w,c
  6546  005730  5C1B               	subwf	create_name@i,w,c
  6547  005732  A0D8               	btfss	status,0,c
  6548  005734  D00D               	goto	l3376
  6549  005736                     l3370:
  6550                           
  6551                           ;pff.c: 603: if (ni != 8 || c != '.') break;
  6552  005736  5017               	movf	create_name@ni,w,c
  6553  005738  0A08               	xorlw	8
  6554  00573A  A4D8               	btfss	status,2,c
  6555  00573C  D035               	goto	l3404
  6556  00573E  501C               	movf	create_name@c,w,c
  6557  005740  0A2E               	xorlw	46
  6558  005742  A4D8               	btfss	status,2,c
  6559  005744  D031               	goto	l3404
  6560                           
  6561                           ;pff.c: 604: i = 8; ni = 11;
  6562  005746  0E08               	movlw	8
  6563  005748  6E1B               	movwf	create_name@i,c
  6564  00574A  0E0B               	movlw	11
  6565  00574C  6E17               	movwf	create_name@ni,c
  6566                           
  6567                           ;pff.c: 605: continue;
  6568  00574E  D7D2               	goto	l3358
  6569  005750                     l3376:
  6570                           
  6571                           ;pff.c: 606: }
  6572                           ;pff.c: 609: if (c >= 0x80)
  6573  005750  0E7F               	movlw	127
  6574  005752  641C               	cpfsgt	create_name@c,c
  6575  005754  D014               	goto	l3394
  6576                           
  6577                           ;pff.c: 610: c = cvt[c - 0x80];
  6578  005756  0E80               	movlw	128
  6579  005758  6E0D               	movwf	??_create_name& (0+255),c
  6580  00575A  0EFF               	movlw	255
  6581  00575C  6E0E               	movwf	(??_create_name+1)& (0+255),c
  6582  00575E  501C               	movf	create_name@c,w,c
  6583  005760  6E0F               	movwf	(??_create_name+2)& (0+255),c
  6584  005762  6A10               	clrf	(??_create_name+3)& (0+255),c
  6585  005764  500D               	movf	??_create_name,w,c
  6586  005766  260F               	addwf	??_create_name+2,f,c
  6587  005768  500E               	movf	??_create_name+1,w,c
  6588  00576A  2210               	addwfc	??_create_name+3,f,c
  6589  00576C  0E69               	movlw	low create_name@cvt
  6590  00576E  240F               	addwf	??_create_name+2,w,c
  6591  005770  6EF6               	movwf	tblptrl,c
  6592  005772  0E7A               	movlw	high create_name@cvt
  6593  005774  2010               	addwfc	??_create_name+3,w,c
  6594  005776  6EF7               	movwf	tblptrh,c
  6595  005778                     	if	0	;There are less than 3 active tblptr bytes
  6596  005778                     	endif
  6597  005778  0008               	tblrd		*
  6598  00577A  CFF5 F01C          	movff	tablat,create_name@c
  6599  00577E                     l3394:
  6600  00577E  0E60               	movlw	96
  6601  005780  641C               	cpfsgt	create_name@c,c
  6602  005782  D006               	goto	l3400
  6603  005784  0E7B               	movlw	123
  6604  005786  5C1C               	subwf	create_name@c,w,c
  6605  005788  B0D8               	btfsc	status,0,c
  6606  00578A  D002               	goto	l3400
  6607  00578C  0E20               	movlw	32
  6608  00578E  5E1C               	subwf	create_name@c,f,c
  6609  005790                     l3400:
  6610                           
  6611                           ;pff.c: 620: sfn[i++] = c;
  6612  005790  501B               	movf	create_name@i,w,c
  6613  005792  0D01               	mullw	1
  6614  005794  50F3               	movf	prodl,w,c
  6615  005796  2419               	addwf	create_name@sfn,w,c
  6616  005798  6ED9               	movwf	fsr2l,c
  6617  00579A  50F4               	movf	prodh,w,c
  6618  00579C  201A               	addwfc	create_name@sfn+1,w,c
  6619  00579E  6EDA               	movwf	fsr2h,c
  6620  0057A0  C01C  FFDF         	movff	create_name@c,indf2
  6621  0057A4  2A1B               	incf	create_name@i,f,c
  6622  0057A6  D7A6               	goto	l3358
  6623  0057A8                     l3404:
  6624                           
  6625                           ;pff.c: 623: *path = &p[si];
  6626  0057A8  5018               	movf	create_name@si,w,c
  6627  0057AA  0D01               	mullw	1
  6628  0057AC  C015  F00D         	movff	create_name@p,??_create_name
  6629  0057B0  C016  F00E         	movff	create_name@p+1,??_create_name+1
  6630  0057B4  50F3               	movf	prodl,w,c
  6631  0057B6  260D               	addwf	??_create_name,f,c
  6632  0057B8  50F4               	movf	prodh,w,c
  6633  0057BA  220E               	addwfc	??_create_name+1,f,c
  6634  0057BC  C00B  FFD9         	movff	create_name@path,fsr2l
  6635  0057C0  C00C  FFDA         	movff	create_name@path+1,fsr2h
  6636  0057C4  C00D  FFDE         	movff	??_create_name,postinc2
  6637  0057C8  C00E  FFDD         	movff	??_create_name+1,postdec2
  6638                           
  6639                           ;pff.c: 625: sfn[11] = (c <= ' ') ? 1 : 0;
  6640  0057CC  EE20 F00B          	lfsr	2,11
  6641  0057D0  5019               	movf	create_name@sfn,w,c
  6642  0057D2  26D9               	addwf	fsr2l,f,c
  6643  0057D4  501A               	movf	create_name@sfn+1,w,c
  6644  0057D6  22DA               	addwfc	fsr2h,f,c
  6645  0057D8  0E20               	movlw	32
  6646  0057DA  6AF3               	clrf	prodl,c
  6647  0057DC  641C               	cpfsgt	create_name@c,c
  6648  0057DE  2AF3               	incf	prodl,f,c
  6649  0057E0  CFF3 F00D          	movff	prodl,??_create_name
  6650  0057E4  500D               	movf	??_create_name,w,c
  6651  0057E6  6EDF               	movwf	indf2,c
  6652                           
  6653                           ;pff.c: 627: return FR_OK;
  6654  0057E8  0E00               	movlw	0
  6655  0057EA  0012               	return	
  6656  0057EC                     __end_of_create_name:
  6657                           	opt stack 0
  6658                           tblptru	equ	0xFF8
  6659                           tblptrh	equ	0xFF7
  6660                           tblptrl	equ	0xFF6
  6661                           tablat	equ	0xFF5
  6662                           prodh	equ	0xFF4
  6663                           prodl	equ	0xFF3
  6664                           postinc0	equ	0xFEE
  6665                           wreg	equ	0xFE8
  6666                           indf1	equ	0xFE7
  6667                           postdec1	equ	0xFE5
  6668                           fsr1h	equ	0xFE2
  6669                           fsr1l	equ	0xFE1
  6670                           indf2	equ	0xFDF
  6671                           postinc2	equ	0xFDE
  6672                           postdec2	equ	0xFDD
  6673                           plusw2	equ	0xFDB
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _mem_set *****************
  6679 ;; Defined at:
  6680 ;;		line 329 in file "pff.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  dst             2    0[COMRAM] PTR void 
  6683 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6684 ;;  val             2    2[COMRAM] int 
  6685 ;;  cnt             2    4[COMRAM] int 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  d               2    6[COMRAM] PTR unsigned char 
  6688 ;;		 -> pf_readdir@sp(12), pf_opendir@sp(12), pf_open@sp(12), 
  6689 ;; Return value:  Size  Location     Type
  6690 ;;		None               void
  6691 ;; Registers used:
  6692 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6698 ;;      Params:         6       0       0       0       0       0       0       0       0
  6699 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6701 ;;      Totals:         8       0       0       0       0       0       0       0       0
  6702 ;;Total ram usage:        8 bytes
  6703 ;; Hardware stack levels used:    1
  6704 ;; This function calls:
  6705 ;;		Nothing
  6706 ;; This function is called by:
  6707 ;;		_create_name
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text17
  6712  004DC8                     __ptext17:
  6713                           	opt stack 0
  6714  004DC8                     _mem_set:
  6715                           	opt stack 26
  6716                           
  6717                           ;pff.c: 330: char *d = (char*)dst;
  6718                           
  6719                           ;incstack = 0
  6720  004DC8  C002  F008         	movff	mem_set@dst+1,mem_set@d+1
  6721  004DCC  C001  F007         	movff	mem_set@dst,mem_set@d
  6722                           
  6723                           ;pff.c: 331: while (cnt--) *d++ = (char)val;
  6724  004DD0  D008               	goto	l3208
  6725  004DD2                     l3204:
  6726  004DD2  C007  FFD9         	movff	mem_set@d,fsr2l
  6727  004DD6  C008  FFDA         	movff	mem_set@d+1,fsr2h
  6728  004DDA  C003  FFDF         	movff	mem_set@val,indf2
  6729  004DDE  4A07               	infsnz	mem_set@d,f,c
  6730  004DE0  2A08               	incf	mem_set@d+1,f,c
  6731  004DE2                     l3208:
  6732  004DE2  0605               	decf	mem_set@cnt,f,c
  6733  004DE4  A0D8               	btfss	status,0,c
  6734  004DE6  0606               	decf	mem_set@cnt+1,f,c
  6735  004DE8  2805               	incf	mem_set@cnt& (0+255),w,c
  6736  004DEA  B4D8               	btfsc	status,2,c
  6737  004DEC  2806               	incf	(mem_set@cnt+1)& (0+255),w,c
  6738  004DEE  B4D8               	btfsc	status,2,c
  6739  004DF0  0012               	return	
  6740  004DF2  D7EF               	goto	l3204
  6741  004DF4                     __end_of_mem_set:
  6742                           	opt stack 0
  6743                           tblptru	equ	0xFF8
  6744                           tblptrh	equ	0xFF7
  6745                           tblptrl	equ	0xFF6
  6746                           tablat	equ	0xFF5
  6747                           prodh	equ	0xFF4
  6748                           prodl	equ	0xFF3
  6749                           postinc0	equ	0xFEE
  6750                           wreg	equ	0xFE8
  6751                           indf1	equ	0xFE7
  6752                           postdec1	equ	0xFE5
  6753                           fsr1h	equ	0xFE2
  6754                           fsr1l	equ	0xFE1
  6755                           indf2	equ	0xFDF
  6756                           postinc2	equ	0xFDE
  6757                           postdec2	equ	0xFDD
  6758                           plusw2	equ	0xFDB
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763 ;; *************** function _pf_mount *****************
  6764 ;; Defined at:
  6765 ;;		line 755 in file "pff.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  fs              2   40[COMRAM] PTR struct .
  6768 ;;		 -> main@fs(42), 
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;  buf            36    0[BANK0 ] unsigned char [36]
  6771 ;;  fsize           4   48[BANK0 ] unsigned long 
  6772 ;;  bsect           4   44[BANK0 ] unsigned long 
  6773 ;;  mclst           4   40[BANK0 ] unsigned long 
  6774 ;;  tsect           4   36[BANK0 ] unsigned long 
  6775 ;;  fmt             1   52[BANK0 ] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      enum E43
  6778 ;; Registers used:
  6779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6785 ;;      Params:         2       0       0       0       0       0       0       0       0
  6786 ;;      Locals:         0      53       0       0       0       0       0       0       0
  6787 ;;      Temps:         22       0       0       0       0       0       0       0       0
  6788 ;;      Totals:        24      53       0       0       0       0       0       0       0
  6789 ;;Total ram usage:       77 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    6
  6792 ;; This function calls:
  6793 ;;		___lldiv
  6794 ;;		___lmul
  6795 ;;		_check_fs
  6796 ;;		_disk_initialize
  6797 ;;		_disk_readp
  6798 ;; This function is called by:
  6799 ;;		_main
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text18
  6804  007312                     __ptext18:
  6805                           	opt stack 0
  6806  007312                     _pf_mount:
  6807                           	opt stack 23
  6808                           
  6809                           ;pff.c: 759: BYTE fmt, buf[36];
  6810                           ;pff.c: 760: DWORD bsect, fsize, tsect, mclst;
  6811                           ;pff.c: 763: FatFs = 0;
  6812                           
  6813                           ;incstack = 0
  6814  007312  0E00               	movlw	0
  6815  007314  0100               	movlb	0	; () banked
  6816  007316  6FF4               	movwf	(_FatFs+1)& (0+255),b
  6817  007318  0E00               	movlw	0
  6818  00731A  0100               	movlb	0	; () banked
  6819  00731C  6FF3               	movwf	_FatFs& (0+255),b
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;pff.c: 764: if (disk_initialize() & 0x01)
  6823  00731E  EC5A  F02D         	call	_disk_initialize	;wreg free
  6824  007322  6E2B               	movwf	??_pf_mount& (0+255),c
  6825  007324  A02B               	btfss	??_pf_mount,0,c
  6826  007326  D002               	goto	l3796
  6827                           
  6828                           ;pff.c: 765: return FR_NOT_READY;
  6829  007328  0E02               	movlw	2
  6830  00732A  D39D               	goto	l159
  6831  00732C                     l3796:
  6832                           
  6833                           ;pff.c: 767: bsect = 0;
  6834  00732C  0E00               	movlw	0
  6835  00732E  0100               	movlb	0	; () banked
  6836  007330  6F8C               	movwf	pf_mount@bsect& (0+255),b
  6837  007332  0E00               	movlw	0
  6838  007334  0100               	movlb	0	; () banked
  6839  007336  6F8D               	movwf	(pf_mount@bsect+1)& (0+255),b
  6840  007338  0E00               	movlw	0
  6841  00733A  0100               	movlb	0	; () banked
  6842  00733C  6F8E               	movwf	(pf_mount@bsect+2)& (0+255),b
  6843  00733E  0E00               	movlw	0
  6844  007340  0100               	movlb	0	; () banked
  6845  007342  6F8F               	movwf	(pf_mount@bsect+3)& (0+255),b
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;pff.c: 768: fmt = check_fs(buf, bsect);
  6849  007344  0100               	movlb	0	; () banked
  6850  007346  0E00               	movlw	high pf_mount@buf
  6851  007348  6E20               	movwf	check_fs@buf+1,c
  6852  00734A  0100               	movlb	0	; () banked
  6853  00734C  0E60               	movlw	low pf_mount@buf
  6854  00734E  6E1F               	movwf	check_fs@buf,c
  6855  007350  C08C  F021         	movff	pf_mount@bsect,check_fs@sect
  6856  007354  C08D  F022         	movff	pf_mount@bsect+1,check_fs@sect+1
  6857  007358  C08E  F023         	movff	pf_mount@bsect+2,check_fs@sect+2
  6858  00735C  C08F  F024         	movff	pf_mount@bsect+3,check_fs@sect+3
  6859  007360  ECF6  F02B         	call	_check_fs	;wreg free
  6860  007364  0100               	movlb	0	; () banked
  6861  007366  6F94               	movwf	pf_mount@fmt& (0+255),b
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;pff.c: 769: if (fmt == 1) {
  6865  007368  0100               	movlb	0	; () banked
  6866  00736A  0594               	decf	pf_mount@fmt& (0+255),w,b
  6867  00736C  A4D8               	btfss	status,2,c
  6868  00736E  D074               	goto	l3812
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;pff.c: 771: if (disk_readp(buf, bsect, 446, 16)) {
  6872  007370  0100               	movlb	0	; () banked
  6873  007372  0E00               	movlw	high pf_mount@buf
  6874  007374  6E0A               	movwf	disk_readp@rd+1,c
  6875  007376  0100               	movlb	0	; () banked
  6876  007378  0E60               	movlw	low pf_mount@buf
  6877  00737A  6E09               	movwf	disk_readp@rd,c
  6878  00737C  C08C  F00B         	movff	pf_mount@bsect,disk_readp@sector
  6879  007380  C08D  F00C         	movff	pf_mount@bsect+1,disk_readp@sector+1
  6880  007384  C08E  F00D         	movff	pf_mount@bsect+2,disk_readp@sector+2
  6881  007388  C08F  F00E         	movff	pf_mount@bsect+3,disk_readp@sector+3
  6882  00738C  0E01               	movlw	1
  6883  00738E  6E10               	movwf	disk_readp@offset+1,c
  6884  007390  0EBE               	movlw	190
  6885  007392  6E0F               	movwf	disk_readp@offset,c
  6886  007394  0E00               	movlw	0
  6887  007396  6E12               	movwf	disk_readp@count+1,c
  6888  007398  0E10               	movlw	16
  6889  00739A  6E11               	movwf	disk_readp@count,c
  6890  00739C  EC46  F031         	call	_disk_readp	;wreg free
  6891  0073A0  0900               	iorlw	0
  6892  0073A2  B4D8               	btfsc	status,2,c
  6893  0073A4  D002               	goto	l3806
  6894                           
  6895                           ;pff.c: 772: fmt = 3;
  6896  0073A6  0E03               	movlw	3
  6897  0073A8  D055               	goto	L7
  6898  0073AA                     l3806:
  6899                           
  6900                           ;pff.c: 774: if (buf[4]) {
  6901  0073AA  0100               	movlb	0	; () banked
  6902  0073AC  5164               	movf	(pf_mount@buf+4)& (0+255),w,b
  6903  0073AE  B4D8               	btfsc	status,2,c
  6904  0073B0  D053               	goto	l3812
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;pff.c: 775: bsect = (DWORD)(((DWORD)*((BYTE*)(&buf[8])+3)<<24)|((DWORD)*((BYTE*)(&buf[8
      +                          ])+2)<<16)|((WORD)*((BYTE*)(&buf[8])+1)<<8)|*(BYTE*)(&buf[8]));
  6908  0073B2  0100               	movlb	0	; () banked
  6909  0073B4  5169               	movf	(pf_mount@buf+9)& (0+255),w,b
  6910  0073B6  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  6911  0073B8  6A2B               	clrf	??_pf_mount& (0+255),c
  6912  0073BA  0100               	movlb	0	; () banked
  6913  0073BC  C06A  F02D         	movff	pf_mount@buf+10,??_pf_mount+2
  6914  0073C0  6A2E               	clrf	(??_pf_mount+3)& (0+255),c
  6915  0073C2  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  6916  0073C4  6A30               	clrf	(??_pf_mount+5)& (0+255),c
  6917  0073C6  C02E  F030         	movff	??_pf_mount+3,??_pf_mount+5
  6918  0073CA  C02D  F02F         	movff	??_pf_mount+2,??_pf_mount+4
  6919  0073CE  6A2E               	clrf	??_pf_mount+3,c
  6920  0073D0  6A2D               	clrf	??_pf_mount+2,c
  6921  0073D2  0100               	movlb	0	; () banked
  6922  0073D4  C06B  F031         	movff	pf_mount@buf+11,??_pf_mount+6
  6923  0073D8  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  6924  0073DA  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  6925  0073DC  6A34               	clrf	(??_pf_mount+9)& (0+255),c
  6926  0073DE  C031  F034         	movff	??_pf_mount+6,??_pf_mount+9
  6927  0073E2  6A33               	clrf	??_pf_mount+8,c
  6928  0073E4  6A32               	clrf	??_pf_mount+7,c
  6929  0073E6  6A31               	clrf	??_pf_mount+6,c
  6930  0073E8  502D               	movf	??_pf_mount+2,w,c
  6931  0073EA  1031               	iorwf	??_pf_mount+6,w,c
  6932  0073EC  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  6933  0073EE  502E               	movf	??_pf_mount+3,w,c
  6934  0073F0  1032               	iorwf	??_pf_mount+7,w,c
  6935  0073F2  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  6936  0073F4  502F               	movf	??_pf_mount+4,w,c
  6937  0073F6  1033               	iorwf	??_pf_mount+8,w,c
  6938  0073F8  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  6939  0073FA  5030               	movf	??_pf_mount+5,w,c
  6940  0073FC  1034               	iorwf	??_pf_mount+9,w,c
  6941  0073FE  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  6942  007400  502B               	movf	??_pf_mount,w,c
  6943  007402  1035               	iorwf	??_pf_mount+10,w,c
  6944  007404  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  6945  007406  502C               	movf	??_pf_mount+1,w,c
  6946  007408  1036               	iorwf	??_pf_mount+11,w,c
  6947  00740A  6E3A               	movwf	(??_pf_mount+15)& (0+255),c
  6948  00740C  0E00               	movlw	0
  6949  00740E  1037               	iorwf	??_pf_mount+12,w,c
  6950  007410  6E3B               	movwf	(??_pf_mount+16)& (0+255),c
  6951  007412  0E00               	movlw	0
  6952  007414  1038               	iorwf	??_pf_mount+13,w,c
  6953  007416  6E3C               	movwf	(??_pf_mount+17)& (0+255),c
  6954  007418  0100               	movlb	0	; () banked
  6955  00741A  5168               	movf	(pf_mount@buf+8)& (0+255),w,b
  6956  00741C  1039               	iorwf	??_pf_mount+14,w,c
  6957  00741E  0100               	movlb	0	; () banked
  6958  007420  6F8C               	movwf	pf_mount@bsect& (0+255),b
  6959  007422  503A               	movf	??_pf_mount+15,w,c
  6960  007424  0100               	movlb	0	; () banked
  6961  007426  6F8D               	movwf	(pf_mount@bsect+1)& (0+255),b
  6962  007428  503B               	movf	??_pf_mount+16,w,c
  6963  00742A  0100               	movlb	0	; () banked
  6964  00742C  6F8E               	movwf	(pf_mount@bsect+2)& (0+255),b
  6965  00742E  503C               	movf	??_pf_mount+17,w,c
  6966  007430  0100               	movlb	0	; () banked
  6967  007432  6F8F               	movwf	(pf_mount@bsect+3)& (0+255),b
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;pff.c: 776: fmt = check_fs(buf, bsect);
  6971  007434  0100               	movlb	0	; () banked
  6972  007436  0E00               	movlw	high pf_mount@buf
  6973  007438  6E20               	movwf	check_fs@buf+1,c
  6974  00743A  0100               	movlb	0	; () banked
  6975  00743C  0E60               	movlw	low pf_mount@buf
  6976  00743E  6E1F               	movwf	check_fs@buf,c
  6977  007440  C08C  F021         	movff	pf_mount@bsect,check_fs@sect
  6978  007444  C08D  F022         	movff	pf_mount@bsect+1,check_fs@sect+1
  6979  007448  C08E  F023         	movff	pf_mount@bsect+2,check_fs@sect+2
  6980  00744C  C08F  F024         	movff	pf_mount@bsect+3,check_fs@sect+3
  6981  007450  ECF6  F02B         	call	_check_fs	;wreg free
  6982  007454                     L7:
  6983  007454  0100               	movlb	0	; () banked
  6984  007456  6F94               	movwf	pf_mount@fmt& (0+255),b
  6985  007458                     l3812:
  6986                           
  6987                           ; BSR set to: 0
  6988                           ;pff.c: 777: }
  6989                           ;pff.c: 778: }
  6990                           ;pff.c: 779: }
  6991                           ;pff.c: 780: if (fmt == 3) return FR_DISK_ERR;
  6992  007458  0100               	movlb	0	; () banked
  6993  00745A  5194               	movf	pf_mount@fmt& (0+255),w,b
  6994  00745C  0A03               	xorlw	3
  6995  00745E  B4D8               	btfsc	status,2,c
  6996  007460  D01F               	goto	u3700
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;pff.c: 781: if (fmt) return FR_NO_FILESYSTEM;
  7000                           
  7001                           ; BSR set to: 0
  7002                           
  7003                           ; BSR set to: 0
  7004                           
  7005                           ; BSR set to: 0
  7006  007462  0100               	movlb	0	; () banked
  7007  007464  5194               	movf	pf_mount@fmt& (0+255),w,b
  7008  007466  A4D8               	btfss	status,2,c
  7009  007468  D21C               	goto	u3780
  7010                           
  7011                           ; BSR set to: 0
  7012                           ;pff.c: 784: if (disk_readp(buf, bsect, 13, sizeof (buf))) return FR_DISK_ERR;
  7013                           
  7014                           ; BSR set to: 0
  7015                           
  7016                           ; BSR set to: 0
  7017                           
  7018                           ; BSR set to: 0
  7019  00746A  0100               	movlb	0	; () banked
  7020  00746C  0E00               	movlw	high pf_mount@buf
  7021  00746E  6E0A               	movwf	disk_readp@rd+1,c
  7022  007470  0100               	movlb	0	; () banked
  7023  007472  0E60               	movlw	low pf_mount@buf
  7024  007474  6E09               	movwf	disk_readp@rd,c
  7025  007476  C08C  F00B         	movff	pf_mount@bsect,disk_readp@sector
  7026  00747A  C08D  F00C         	movff	pf_mount@bsect+1,disk_readp@sector+1
  7027  00747E  C08E  F00D         	movff	pf_mount@bsect+2,disk_readp@sector+2
  7028  007482  C08F  F00E         	movff	pf_mount@bsect+3,disk_readp@sector+3
  7029  007486  0E00               	movlw	0
  7030  007488  6E10               	movwf	disk_readp@offset+1,c
  7031  00748A  0E0D               	movlw	13
  7032  00748C  6E0F               	movwf	disk_readp@offset,c
  7033  00748E  0E00               	movlw	0
  7034  007490  6E12               	movwf	disk_readp@count+1,c
  7035  007492  0E24               	movlw	36
  7036  007494  6E11               	movwf	disk_readp@count,c
  7037  007496  EC46  F031         	call	_disk_readp	;wreg free
  7038  00749A  0900               	iorlw	0
  7039  00749C  B4D8               	btfsc	status,2,c
  7040  00749E  D002               	goto	l3830
  7041  0074A0                     u3700:
  7042  0074A0  0E01               	movlw	1
  7043  0074A2  D2E1               	goto	l159
  7044  0074A4                     l3830:
  7045                           
  7046                           ;pff.c: 786: fsize = (WORD)(((WORD)*((BYTE*)(buf+22-13)+1)<<8)|(WORD)*(BYTE*)(buf+22-13)
      +                          );
  7047  0074A4  0100               	movlb	0	; () banked
  7048  0074A6  5169               	movf	(pf_mount@buf+9)& (0+255),w,b
  7049  0074A8  0100               	movlb	0	; () banked
  7050  0074AA  C06A  F02B         	movff	pf_mount@buf+10,??_pf_mount
  7051  0074AE  6A2C               	clrf	(??_pf_mount+1)& (0+255),c
  7052  0074B0  C02B  F02C         	movff	??_pf_mount,??_pf_mount+1
  7053  0074B4  6A2B               	clrf	??_pf_mount,c
  7054  0074B6  122B               	iorwf	??_pf_mount,f,c
  7055  0074B8  0E00               	movlw	0
  7056  0074BA  122C               	iorwf	??_pf_mount+1,f,c
  7057  0074BC  0100               	movlb	0	; () banked
  7058  0074BE  C02B  F090         	movff	??_pf_mount,pf_mount@fsize
  7059  0074C2  0100               	movlb	0	; () banked
  7060  0074C4  C02C  F091         	movff	??_pf_mount+1,pf_mount@fsize+1
  7061  0074C8  0100               	movlb	0	; () banked
  7062  0074CA  6B92               	clrf	(pf_mount@fsize+2)& (0+255),b
  7063  0074CC  0100               	movlb	0	; () banked
  7064  0074CE  6B93               	clrf	(pf_mount@fsize+3)& (0+255),b
  7065                           
  7066                           ;pff.c: 787: if (!fsize) fsize = (DWORD)(((DWORD)*((BYTE*)(buf+36-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+36-13)+2)<<16)|((WORD)*((BYTE*)(buf+36-13)+1)<<8)|*(BYTE*)(buf+36-13));
  7067  0074D0  0100               	movlb	0	; () banked
  7068  0074D2  5193               	movf	(pf_mount@fsize+3)& (0+255),w,b
  7069  0074D4  1190               	iorwf	pf_mount@fsize& (0+255),w,b
  7070  0074D6  1191               	iorwf	(pf_mount@fsize+1)& (0+255),w,b
  7071  0074D8  1192               	iorwf	(pf_mount@fsize+2)& (0+255),w,b
  7072  0074DA  A4D8               	btfss	status,2,c
  7073  0074DC  D041               	goto	l3834
  7074                           
  7075                           ; BSR set to: 0
  7076  0074DE  0100               	movlb	0	; () banked
  7077  0074E0  5178               	movf	(pf_mount@buf+24)& (0+255),w,b
  7078  0074E2  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7079  0074E4  6A2B               	clrf	??_pf_mount& (0+255),c
  7080  0074E6  0100               	movlb	0	; () banked
  7081  0074E8  C079  F02D         	movff	pf_mount@buf+25,??_pf_mount+2
  7082  0074EC  6A2E               	clrf	(??_pf_mount+3)& (0+255),c
  7083  0074EE  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  7084  0074F0  6A30               	clrf	(??_pf_mount+5)& (0+255),c
  7085  0074F2  C02E  F030         	movff	??_pf_mount+3,??_pf_mount+5
  7086  0074F6  C02D  F02F         	movff	??_pf_mount+2,??_pf_mount+4
  7087  0074FA  6A2E               	clrf	??_pf_mount+3,c
  7088  0074FC  6A2D               	clrf	??_pf_mount+2,c
  7089  0074FE  0100               	movlb	0	; () banked
  7090  007500  C07A  F031         	movff	pf_mount@buf+26,??_pf_mount+6
  7091  007504  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  7092  007506  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  7093  007508  6A34               	clrf	(??_pf_mount+9)& (0+255),c
  7094  00750A  C031  F034         	movff	??_pf_mount+6,??_pf_mount+9
  7095  00750E  6A33               	clrf	??_pf_mount+8,c
  7096  007510  6A32               	clrf	??_pf_mount+7,c
  7097  007512  6A31               	clrf	??_pf_mount+6,c
  7098  007514  502D               	movf	??_pf_mount+2,w,c
  7099  007516  1031               	iorwf	??_pf_mount+6,w,c
  7100  007518  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7101  00751A  502E               	movf	??_pf_mount+3,w,c
  7102  00751C  1032               	iorwf	??_pf_mount+7,w,c
  7103  00751E  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7104  007520  502F               	movf	??_pf_mount+4,w,c
  7105  007522  1033               	iorwf	??_pf_mount+8,w,c
  7106  007524  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7107  007526  5030               	movf	??_pf_mount+5,w,c
  7108  007528  1034               	iorwf	??_pf_mount+9,w,c
  7109  00752A  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7110  00752C  502B               	movf	??_pf_mount,w,c
  7111  00752E  1035               	iorwf	??_pf_mount+10,w,c
  7112  007530  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  7113  007532  502C               	movf	??_pf_mount+1,w,c
  7114  007534  1036               	iorwf	??_pf_mount+11,w,c
  7115  007536  6E3A               	movwf	(??_pf_mount+15)& (0+255),c
  7116  007538  0E00               	movlw	0
  7117  00753A  1037               	iorwf	??_pf_mount+12,w,c
  7118  00753C  6E3B               	movwf	(??_pf_mount+16)& (0+255),c
  7119  00753E  0E00               	movlw	0
  7120  007540  1038               	iorwf	??_pf_mount+13,w,c
  7121  007542  6E3C               	movwf	(??_pf_mount+17)& (0+255),c
  7122  007544  0100               	movlb	0	; () banked
  7123  007546  5177               	movf	(pf_mount@buf+23)& (0+255),w,b
  7124  007548  1039               	iorwf	??_pf_mount+14,w,c
  7125  00754A  0100               	movlb	0	; () banked
  7126  00754C  6F90               	movwf	pf_mount@fsize& (0+255),b
  7127  00754E  503A               	movf	??_pf_mount+15,w,c
  7128  007550  0100               	movlb	0	; () banked
  7129  007552  6F91               	movwf	(pf_mount@fsize+1)& (0+255),b
  7130  007554  503B               	movf	??_pf_mount+16,w,c
  7131  007556  0100               	movlb	0	; () banked
  7132  007558  6F92               	movwf	(pf_mount@fsize+2)& (0+255),b
  7133  00755A  503C               	movf	??_pf_mount+17,w,c
  7134  00755C  0100               	movlb	0	; () banked
  7135  00755E  6F93               	movwf	(pf_mount@fsize+3)& (0+255),b
  7136  007560                     l3834:
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;pff.c: 789: fsize *= buf[16-13];
  7140  007560  C090  F001         	movff	pf_mount@fsize,___lmul@multiplier
  7141  007564  C091  F002         	movff	pf_mount@fsize+1,___lmul@multiplier+1
  7142  007568  C092  F003         	movff	pf_mount@fsize+2,___lmul@multiplier+2
  7143  00756C  C093  F004         	movff	pf_mount@fsize+3,___lmul@multiplier+3
  7144  007570  0100               	movlb	0	; () banked
  7145  007572  5163               	movf	(pf_mount@buf+3)& (0+255),w,b
  7146  007574  6E05               	movwf	___lmul@multiplicand,c
  7147  007576  6A06               	clrf	___lmul@multiplicand+1,c
  7148  007578  6A07               	clrf	___lmul@multiplicand+2,c
  7149  00757A  6A08               	clrf	___lmul@multiplicand+3,c
  7150  00757C  EC6E  F027         	call	___lmul	;wreg free
  7151  007580  C001  F090         	movff	?___lmul,pf_mount@fsize
  7152  007584  C002  F091         	movff	?___lmul+1,pf_mount@fsize+1
  7153  007588  C003  F092         	movff	?___lmul+2,pf_mount@fsize+2
  7154  00758C  C004  F093         	movff	?___lmul+3,pf_mount@fsize+3
  7155                           
  7156                           ;pff.c: 790: fs->fatbase = bsect + (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYT
      +                          E*)(buf+14-13));
  7157  007590  0100               	movlb	0	; () banked
  7158  007592  5161               	movf	(pf_mount@buf+1)& (0+255),w,b
  7159  007594  0100               	movlb	0	; () banked
  7160  007596  C062  F02B         	movff	pf_mount@buf+2,??_pf_mount
  7161  00759A  6A2C               	clrf	(??_pf_mount+1)& (0+255),c
  7162  00759C  C02B  F02C         	movff	??_pf_mount,??_pf_mount+1
  7163  0075A0  6A2B               	clrf	??_pf_mount,c
  7164  0075A2  122B               	iorwf	??_pf_mount,f,c
  7165  0075A4  0E00               	movlw	0
  7166  0075A6  122C               	iorwf	??_pf_mount+1,f,c
  7167  0075A8  502B               	movf	??_pf_mount,w,c
  7168  0075AA  0100               	movlb	0	; () banked
  7169  0075AC  258C               	addwf	pf_mount@bsect& (0+255),w,b
  7170  0075AE  6E2D               	movwf	(??_pf_mount+2)& (0+255),c
  7171  0075B0  502C               	movf	??_pf_mount+1,w,c
  7172  0075B2  0100               	movlb	0	; () banked
  7173  0075B4  218D               	addwfc	(pf_mount@bsect+1)& (0+255),w,b
  7174  0075B6  6E2E               	movwf	(??_pf_mount+3)& (0+255),c
  7175  0075B8  0E00               	movlw	0
  7176  0075BA  0100               	movlb	0	; () banked
  7177  0075BC  218E               	addwfc	(pf_mount@bsect+2)& (0+255),w,b
  7178  0075BE  6E2F               	movwf	(??_pf_mount+4)& (0+255),c
  7179  0075C0  0E00               	movlw	0
  7180  0075C2  0100               	movlb	0	; () banked
  7181  0075C4  218F               	addwfc	(pf_mount@bsect+3)& (0+255),w,b
  7182  0075C6  6E30               	movwf	(??_pf_mount+5)& (0+255),c
  7183  0075C8  EE20 F00A          	lfsr	2,10
  7184  0075CC  5029               	movf	pf_mount@fs,w,c
  7185  0075CE  26D9               	addwf	fsr2l,f,c
  7186  0075D0  502A               	movf	pf_mount@fs+1,w,c
  7187  0075D2  22DA               	addwfc	fsr2h,f,c
  7188  0075D4  C02D  FFDE         	movff	??_pf_mount+2,postinc2
  7189  0075D8  C02E  FFDE         	movff	??_pf_mount+3,postinc2
  7190  0075DC  C02F  FFDE         	movff	??_pf_mount+4,postinc2
  7191  0075E0  C030  FFDD         	movff	??_pf_mount+5,postdec2
  7192  0075E4  06D9               	decf	fsr2l,f,c
  7193  0075E6  06D9               	decf	fsr2l,f,c
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;pff.c: 791: fs->csize = buf[13-13];
  7197  0075E8  EE20 F002          	lfsr	2,2
  7198  0075EC  5029               	movf	pf_mount@fs,w,c
  7199  0075EE  26D9               	addwf	fsr2l,f,c
  7200  0075F0  502A               	movf	pf_mount@fs+1,w,c
  7201  0075F2  22DA               	addwfc	fsr2h,f,c
  7202  0075F4  0100               	movlb	0	; () banked
  7203  0075F6  C060  FFDF         	movff	pf_mount@buf,indf2
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;pff.c: 792: fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(buf+17-13)+1)<<8)|(WORD)*(BYTE*)(bu
      +                          f+17-13));
  7207  0075FA  0100               	movlb	0	; () banked
  7208  0075FC  5164               	movf	(pf_mount@buf+4)& (0+255),w,b
  7209  0075FE  0100               	movlb	0	; () banked
  7210  007600  C065  F02B         	movff	pf_mount@buf+5,??_pf_mount
  7211  007604  6A2C               	clrf	(??_pf_mount+1)& (0+255),c
  7212  007606  C02B  F02C         	movff	??_pf_mount,??_pf_mount+1
  7213  00760A  6A2B               	clrf	??_pf_mount,c
  7214  00760C  122B               	iorwf	??_pf_mount,f,c
  7215  00760E  0E00               	movlw	0
  7216  007610  122C               	iorwf	??_pf_mount+1,f,c
  7217  007612  EE20 F004          	lfsr	2,4
  7218  007616  5029               	movf	pf_mount@fs,w,c
  7219  007618  26D9               	addwf	fsr2l,f,c
  7220  00761A  502A               	movf	pf_mount@fs+1,w,c
  7221  00761C  22DA               	addwfc	fsr2h,f,c
  7222  00761E  C02B  FFDE         	movff	??_pf_mount,postinc2
  7223  007622  C02C  FFDD         	movff	??_pf_mount+1,postdec2
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;pff.c: 793: tsect = (WORD)(((WORD)*((BYTE*)(buf+19-13)+1)<<8)|(WORD)*(BYTE*)(buf+19-13)
      +                          );
  7227  007626  0100               	movlb	0	; () banked
  7228  007628  5166               	movf	(pf_mount@buf+6)& (0+255),w,b
  7229  00762A  0100               	movlb	0	; () banked
  7230  00762C  C067  F02B         	movff	pf_mount@buf+7,??_pf_mount
  7231  007630  6A2C               	clrf	(??_pf_mount+1)& (0+255),c
  7232  007632  C02B  F02C         	movff	??_pf_mount,??_pf_mount+1
  7233  007636  6A2B               	clrf	??_pf_mount,c
  7234  007638  122B               	iorwf	??_pf_mount,f,c
  7235  00763A  0E00               	movlw	0
  7236  00763C  122C               	iorwf	??_pf_mount+1,f,c
  7237  00763E  0100               	movlb	0	; () banked
  7238  007640  C02B  F084         	movff	??_pf_mount,pf_mount@tsect
  7239  007644  0100               	movlb	0	; () banked
  7240  007646  C02C  F085         	movff	??_pf_mount+1,pf_mount@tsect+1
  7241  00764A  0100               	movlb	0	; () banked
  7242  00764C  6B86               	clrf	(pf_mount@tsect+2)& (0+255),b
  7243  00764E  0100               	movlb	0	; () banked
  7244  007650  6B87               	clrf	(pf_mount@tsect+3)& (0+255),b
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;pff.c: 794: if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(buf+32-13)+3)<<24)|((DWORD)*(
      +                          (BYTE*)(buf+32-13)+2)<<16)|((WORD)*((BYTE*)(buf+32-13)+1)<<8)|*(BYTE*)(buf+32-13));
  7248  007652  0100               	movlb	0	; () banked
  7249  007654  5187               	movf	(pf_mount@tsect+3)& (0+255),w,b
  7250  007656  1184               	iorwf	pf_mount@tsect& (0+255),w,b
  7251  007658  1185               	iorwf	(pf_mount@tsect+1)& (0+255),w,b
  7252  00765A  1186               	iorwf	(pf_mount@tsect+2)& (0+255),w,b
  7253  00765C  A4D8               	btfss	status,2,c
  7254  00765E  D041               	goto	l3848
  7255                           
  7256                           ; BSR set to: 0
  7257  007660  0100               	movlb	0	; () banked
  7258  007662  5174               	movf	(pf_mount@buf+20)& (0+255),w,b
  7259  007664  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7260  007666  6A2B               	clrf	??_pf_mount& (0+255),c
  7261  007668  0100               	movlb	0	; () banked
  7262  00766A  C075  F02D         	movff	pf_mount@buf+21,??_pf_mount+2
  7263  00766E  6A2E               	clrf	(??_pf_mount+3)& (0+255),c
  7264  007670  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  7265  007672  6A30               	clrf	(??_pf_mount+5)& (0+255),c
  7266  007674  C02E  F030         	movff	??_pf_mount+3,??_pf_mount+5
  7267  007678  C02D  F02F         	movff	??_pf_mount+2,??_pf_mount+4
  7268  00767C  6A2E               	clrf	??_pf_mount+3,c
  7269  00767E  6A2D               	clrf	??_pf_mount+2,c
  7270  007680  0100               	movlb	0	; () banked
  7271  007682  C076  F031         	movff	pf_mount@buf+22,??_pf_mount+6
  7272  007686  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  7273  007688  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  7274  00768A  6A34               	clrf	(??_pf_mount+9)& (0+255),c
  7275  00768C  C031  F034         	movff	??_pf_mount+6,??_pf_mount+9
  7276  007690  6A33               	clrf	??_pf_mount+8,c
  7277  007692  6A32               	clrf	??_pf_mount+7,c
  7278  007694  6A31               	clrf	??_pf_mount+6,c
  7279  007696  502D               	movf	??_pf_mount+2,w,c
  7280  007698  1031               	iorwf	??_pf_mount+6,w,c
  7281  00769A  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7282  00769C  502E               	movf	??_pf_mount+3,w,c
  7283  00769E  1032               	iorwf	??_pf_mount+7,w,c
  7284  0076A0  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7285  0076A2  502F               	movf	??_pf_mount+4,w,c
  7286  0076A4  1033               	iorwf	??_pf_mount+8,w,c
  7287  0076A6  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7288  0076A8  5030               	movf	??_pf_mount+5,w,c
  7289  0076AA  1034               	iorwf	??_pf_mount+9,w,c
  7290  0076AC  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7291  0076AE  502B               	movf	??_pf_mount,w,c
  7292  0076B0  1035               	iorwf	??_pf_mount+10,w,c
  7293  0076B2  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  7294  0076B4  502C               	movf	??_pf_mount+1,w,c
  7295  0076B6  1036               	iorwf	??_pf_mount+11,w,c
  7296  0076B8  6E3A               	movwf	(??_pf_mount+15)& (0+255),c
  7297  0076BA  0E00               	movlw	0
  7298  0076BC  1037               	iorwf	??_pf_mount+12,w,c
  7299  0076BE  6E3B               	movwf	(??_pf_mount+16)& (0+255),c
  7300  0076C0  0E00               	movlw	0
  7301  0076C2  1038               	iorwf	??_pf_mount+13,w,c
  7302  0076C4  6E3C               	movwf	(??_pf_mount+17)& (0+255),c
  7303  0076C6  0100               	movlb	0	; () banked
  7304  0076C8  5173               	movf	(pf_mount@buf+19)& (0+255),w,b
  7305  0076CA  1039               	iorwf	??_pf_mount+14,w,c
  7306  0076CC  0100               	movlb	0	; () banked
  7307  0076CE  6F84               	movwf	pf_mount@tsect& (0+255),b
  7308  0076D0  503A               	movf	??_pf_mount+15,w,c
  7309  0076D2  0100               	movlb	0	; () banked
  7310  0076D4  6F85               	movwf	(pf_mount@tsect+1)& (0+255),b
  7311  0076D6  503B               	movf	??_pf_mount+16,w,c
  7312  0076D8  0100               	movlb	0	; () banked
  7313  0076DA  6F86               	movwf	(pf_mount@tsect+2)& (0+255),b
  7314  0076DC  503C               	movf	??_pf_mount+17,w,c
  7315  0076DE  0100               	movlb	0	; () banked
  7316  0076E0  6F87               	movwf	(pf_mount@tsect+3)& (0+255),b
  7317  0076E2                     l3848:
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;pff.c: 795: mclst = (tsect
  7321                           ;pff.c: 796: - (WORD)(((WORD)*((BYTE*)(buf+14-13)+1)<<8)|(WORD)*(BYTE*)(buf+14-13)) - fs
      +                          ize - fs->n_rootdir / 16
  7322                           ;pff.c: 797: ) / fs->csize + 2;
  7323  0076E2  EE20 F004          	lfsr	2,4
  7324  0076E6  5029               	movf	pf_mount@fs,w,c
  7325  0076E8  26D9               	addwf	fsr2l,f,c
  7326  0076EA  502A               	movf	pf_mount@fs+1,w,c
  7327  0076EC  22DA               	addwfc	fsr2h,f,c
  7328  0076EE  CFDE F02B          	movff	postinc2,??_pf_mount
  7329  0076F2  CFDD F02C          	movff	postdec2,??_pf_mount+1
  7330  0076F6  0E04               	movlw	4
  7331  0076F8  6E2D               	movwf	(??_pf_mount+2)& (0+255),c
  7332  0076FA                     u3735:
  7333  0076FA  90D8               	bcf	status,0,c
  7334  0076FC  322C               	rrcf	??_pf_mount+1,f,c
  7335  0076FE  322B               	rrcf	??_pf_mount,f,c
  7336  007700  2E2D               	decfsz	(??_pf_mount+2)& (0+255),f,c
  7337  007702  D7FB               	goto	u3735
  7338  007704  0100               	movlb	0	; () banked
  7339  007706  5161               	movf	(pf_mount@buf+1)& (0+255),w,b
  7340  007708  0100               	movlb	0	; () banked
  7341  00770A  C062  F02E         	movff	pf_mount@buf+2,??_pf_mount+3
  7342  00770E  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  7343  007710  C02E  F02F         	movff	??_pf_mount+3,??_pf_mount+4
  7344  007714  6A2E               	clrf	??_pf_mount+3,c
  7345  007716  122E               	iorwf	??_pf_mount+3,f,c
  7346  007718  0E00               	movlw	0
  7347  00771A  122F               	iorwf	??_pf_mount+4,f,c
  7348  00771C  502E               	movf	??_pf_mount+3,w,c
  7349  00771E  242B               	addwf	??_pf_mount,w,c
  7350  007720  6E30               	movwf	(??_pf_mount+5)& (0+255),c
  7351  007722  502F               	movf	??_pf_mount+4,w,c
  7352  007724  202C               	addwfc	??_pf_mount+1,w,c
  7353  007726  6E31               	movwf	(??_pf_mount+6)& (0+255),c
  7354  007728  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  7355  00772A  B0D8               	btfsc	status,0,c
  7356  00772C  2A32               	incf	(??_pf_mount+7)& (0+255),f,c
  7357  00772E  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  7358  007730  0100               	movlb	0	; () banked
  7359  007732  5190               	movf	pf_mount@fsize& (0+255),w,b
  7360  007734  2430               	addwf	??_pf_mount+5,w,c
  7361  007736  6E34               	movwf	(??_pf_mount+9)& (0+255),c
  7362  007738  0100               	movlb	0	; () banked
  7363  00773A  5191               	movf	(pf_mount@fsize+1)& (0+255),w,b
  7364  00773C  2031               	addwfc	??_pf_mount+6,w,c
  7365  00773E  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7366  007740  0100               	movlb	0	; () banked
  7367  007742  5192               	movf	(pf_mount@fsize+2)& (0+255),w,b
  7368  007744  2032               	addwfc	??_pf_mount+7,w,c
  7369  007746  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7370  007748  0100               	movlb	0	; () banked
  7371  00774A  5193               	movf	(pf_mount@fsize+3)& (0+255),w,b
  7372  00774C  2033               	addwfc	??_pf_mount+8,w,c
  7373  00774E  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7374  007750  1E34               	comf	??_pf_mount+9,f,c
  7375  007752  1E35               	comf	??_pf_mount+10,f,c
  7376  007754  1E36               	comf	??_pf_mount+11,f,c
  7377  007756  1E37               	comf	??_pf_mount+12,f,c
  7378  007758  2A34               	incf	??_pf_mount+9,f,c
  7379  00775A  0E00               	movlw	0
  7380  00775C  2235               	addwfc	??_pf_mount+10,f,c
  7381  00775E  2236               	addwfc	??_pf_mount+11,f,c
  7382  007760  2237               	addwfc	??_pf_mount+12,f,c
  7383  007762  0100               	movlb	0	; () banked
  7384  007764  5184               	movf	pf_mount@tsect& (0+255),w,b
  7385  007766  2434               	addwf	??_pf_mount+9,w,c
  7386  007768  6E01               	movwf	___lldiv@dividend,c
  7387  00776A  0100               	movlb	0	; () banked
  7388  00776C  5185               	movf	(pf_mount@tsect+1)& (0+255),w,b
  7389  00776E  2035               	addwfc	??_pf_mount+10,w,c
  7390  007770  6E02               	movwf	___lldiv@dividend+1,c
  7391  007772  0100               	movlb	0	; () banked
  7392  007774  5186               	movf	(pf_mount@tsect+2)& (0+255),w,b
  7393  007776  2036               	addwfc	??_pf_mount+11,w,c
  7394  007778  6E03               	movwf	___lldiv@dividend+2,c
  7395  00777A  0100               	movlb	0	; () banked
  7396  00777C  5187               	movf	(pf_mount@tsect+3)& (0+255),w,b
  7397  00777E  2037               	addwfc	??_pf_mount+12,w,c
  7398  007780  6E04               	movwf	___lldiv@dividend+3,c
  7399  007782  EE20 F002          	lfsr	2,2
  7400  007786  5029               	movf	pf_mount@fs,w,c
  7401  007788  26D9               	addwf	fsr2l,f,c
  7402  00778A  502A               	movf	pf_mount@fs+1,w,c
  7403  00778C  22DA               	addwfc	fsr2h,f,c
  7404  00778E  50DF               	movf	indf2,w,c
  7405  007790  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7406  007792  5038               	movf	??_pf_mount+13,w,c
  7407  007794  6E05               	movwf	___lldiv@divisor,c
  7408  007796  6A06               	clrf	___lldiv@divisor+1,c
  7409  007798  6A07               	clrf	___lldiv@divisor+2,c
  7410  00779A  6A08               	clrf	___lldiv@divisor+3,c
  7411  00779C  EC9B  F028         	call	___lldiv	;wreg free
  7412  0077A0  C001  F039         	movff	?___lldiv,??_pf_mount+14
  7413  0077A4  C002  F03A         	movff	?___lldiv+1,??_pf_mount+15
  7414  0077A8  C003  F03B         	movff	?___lldiv+2,??_pf_mount+16
  7415  0077AC  C004  F03C         	movff	?___lldiv+3,??_pf_mount+17
  7416  0077B0  0E02               	movlw	2
  7417  0077B2  2439               	addwf	??_pf_mount+14,w,c
  7418  0077B4  0100               	movlb	0	; () banked
  7419  0077B6  6F88               	movwf	pf_mount@mclst& (0+255),b
  7420  0077B8  0E00               	movlw	0
  7421  0077BA  203A               	addwfc	??_pf_mount+15,w,c
  7422  0077BC  0100               	movlb	0	; () banked
  7423  0077BE  6F89               	movwf	(pf_mount@mclst+1)& (0+255),b
  7424  0077C0  0E00               	movlw	0
  7425  0077C2  203B               	addwfc	??_pf_mount+16,w,c
  7426  0077C4  0100               	movlb	0	; () banked
  7427  0077C6  6F8A               	movwf	(pf_mount@mclst+2)& (0+255),b
  7428  0077C8  0E00               	movlw	0
  7429  0077CA  203C               	addwfc	??_pf_mount+17,w,c
  7430  0077CC  0100               	movlb	0	; () banked
  7431  0077CE  6F8B               	movwf	(pf_mount@mclst+3)& (0+255),b
  7432                           
  7433                           ; BSR set to: 0
  7434                           ;pff.c: 798: fs->n_fatent = (DWORD)mclst;
  7435  0077D0  EE20 F006          	lfsr	2,6
  7436  0077D4  5029               	movf	pf_mount@fs,w,c
  7437  0077D6  26D9               	addwf	fsr2l,f,c
  7438  0077D8  502A               	movf	pf_mount@fs+1,w,c
  7439  0077DA  22DA               	addwfc	fsr2h,f,c
  7440  0077DC  0100               	movlb	0	; () banked
  7441  0077DE  C088  FFDE         	movff	pf_mount@mclst,postinc2
  7442  0077E2  0100               	movlb	0	; () banked
  7443  0077E4  C089  FFDE         	movff	pf_mount@mclst+1,postinc2
  7444  0077E8  0100               	movlb	0	; () banked
  7445  0077EA  C08A  FFDE         	movff	pf_mount@mclst+2,postinc2
  7446  0077EE  0100               	movlb	0	; () banked
  7447  0077F0  C08B  FFDE         	movff	pf_mount@mclst+3,postinc2
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;pff.c: 801: if (1 && mclst < 0xFF7)
  7451  0077F4  0E00               	movlw	0
  7452  0077F6  0100               	movlb	0	; () banked
  7453  0077F8  6F94               	movwf	pf_mount@fmt& (0+255),b
  7454                           
  7455                           ; BSR set to: 0
  7456  0077FA  0EF7               	movlw	247
  7457  0077FC  6E2B               	movwf	??_pf_mount& (0+255),c
  7458  0077FE  0E0F               	movlw	15
  7459  007800  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7460  007802  0E00               	movlw	0
  7461  007804  6E2D               	movwf	(??_pf_mount+2)& (0+255),c
  7462  007806  0E00               	movlw	0
  7463  007808  6E2E               	movwf	(??_pf_mount+3)& (0+255),c
  7464  00780A  502B               	movf	??_pf_mount,w,c
  7465  00780C  0100               	movlb	0	; () banked
  7466  00780E  5D88               	subwf	pf_mount@mclst& (0+255),w,b
  7467  007810  502C               	movf	??_pf_mount+1,w,c
  7468  007812  0100               	movlb	0	; () banked
  7469  007814  5989               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  7470  007816  502D               	movf	??_pf_mount+2,w,c
  7471  007818  0100               	movlb	0	; () banked
  7472  00781A  598A               	subwfb	(pf_mount@mclst+2)& (0+255),w,b
  7473  00781C  502E               	movf	??_pf_mount+3,w,c
  7474  00781E  0100               	movlb	0	; () banked
  7475  007820  598B               	subwfb	(pf_mount@mclst+3)& (0+255),w,b
  7476  007822  B0D8               	btfsc	status,0,c
  7477  007824  D003               	goto	l3858
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;pff.c: 802: fmt = 1;
  7481  007826  0E01               	movlw	1
  7482  007828  0100               	movlb	0	; () banked
  7483  00782A  6F94               	movwf	pf_mount@fmt& (0+255),b
  7484  00782C                     l3858:
  7485                           
  7486                           ; BSR set to: 0
  7487  00782C  0EF8               	movlw	248
  7488  00782E  0100               	movlb	0	; () banked
  7489  007830  5D88               	subwf	pf_mount@mclst& (0+255),w,b
  7490  007832  0E0F               	movlw	15
  7491  007834  0100               	movlb	0	; () banked
  7492  007836  5989               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  7493  007838  0E00               	movlw	0
  7494  00783A  0100               	movlb	0	; () banked
  7495  00783C  598A               	subwfb	(pf_mount@mclst+2)& (0+255),w,b
  7496  00783E  0E00               	movlw	0
  7497  007840  0100               	movlb	0	; () banked
  7498  007842  598B               	subwfb	(pf_mount@mclst+3)& (0+255),w,b
  7499  007844  A0D8               	btfss	status,0,c
  7500  007846  D019               	goto	l3864
  7501                           
  7502                           ; BSR set to: 0
  7503  007848  0EF7               	movlw	247
  7504  00784A  6E2B               	movwf	??_pf_mount& (0+255),c
  7505  00784C  0EFF               	movlw	255
  7506  00784E  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7507  007850  0E00               	movlw	0
  7508  007852  6E2D               	movwf	(??_pf_mount+2)& (0+255),c
  7509  007854  0E00               	movlw	0
  7510  007856  6E2E               	movwf	(??_pf_mount+3)& (0+255),c
  7511  007858  502B               	movf	??_pf_mount,w,c
  7512  00785A  0100               	movlb	0	; () banked
  7513  00785C  5D88               	subwf	pf_mount@mclst& (0+255),w,b
  7514  00785E  502C               	movf	??_pf_mount+1,w,c
  7515  007860  0100               	movlb	0	; () banked
  7516  007862  5989               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  7517  007864  502D               	movf	??_pf_mount+2,w,c
  7518  007866  0100               	movlb	0	; () banked
  7519  007868  598A               	subwfb	(pf_mount@mclst+2)& (0+255),w,b
  7520  00786A  502E               	movf	??_pf_mount+3,w,c
  7521  00786C  0100               	movlb	0	; () banked
  7522  00786E  598B               	subwfb	(pf_mount@mclst+3)& (0+255),w,b
  7523  007870  B0D8               	btfsc	status,0,c
  7524  007872  D003               	goto	l3864
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;pff.c: 804: fmt = 2;
  7528  007874  0E02               	movlw	2
  7529  007876  0100               	movlb	0	; () banked
  7530  007878  6F94               	movwf	pf_mount@fmt& (0+255),b
  7531  00787A                     l3864:
  7532                           
  7533                           ; BSR set to: 0
  7534  00787A  0EF7               	movlw	247
  7535  00787C  0100               	movlb	0	; () banked
  7536  00787E  5D88               	subwf	pf_mount@mclst& (0+255),w,b
  7537  007880  0EFF               	movlw	255
  7538  007882  0100               	movlb	0	; () banked
  7539  007884  5989               	subwfb	(pf_mount@mclst+1)& (0+255),w,b
  7540  007886  0E00               	movlw	0
  7541  007888  0100               	movlb	0	; () banked
  7542  00788A  598A               	subwfb	(pf_mount@mclst+2)& (0+255),w,b
  7543  00788C  0E00               	movlw	0
  7544  00788E  0100               	movlb	0	; () banked
  7545  007890  598B               	subwfb	(pf_mount@mclst+3)& (0+255),w,b
  7546  007892  A0D8               	btfss	status,0,c
  7547  007894  D003               	goto	l3868
  7548                           
  7549                           ; BSR set to: 0
  7550                           ;pff.c: 806: fmt = 3;
  7551  007896  0E03               	movlw	3
  7552  007898  0100               	movlb	0	; () banked
  7553  00789A  6F94               	movwf	pf_mount@fmt& (0+255),b
  7554  00789C                     l3868:
  7555                           
  7556                           ; BSR set to: 0
  7557                           ;pff.c: 807: if (!fmt) return FR_NO_FILESYSTEM;
  7558  00789C  0100               	movlb	0	; () banked
  7559  00789E  6794               	tstfsz	pf_mount@fmt& (0+255),b
  7560  0078A0  D002               	goto	l3874
  7561  0078A2                     u3780:
  7562                           
  7563                           ; BSR set to: 0
  7564  0078A2  0E06               	movlw	6
  7565  0078A4  D0E0               	goto	l159
  7566  0078A6                     l3874:
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;pff.c: 810: if (0 || (1 && fmt == 3))
  7570  0078A6  C029  FFD9         	movff	pf_mount@fs,fsr2l
  7571  0078AA  C02A  FFDA         	movff	pf_mount@fs+1,fsr2h
  7572  0078AE  0100               	movlb	0	; () banked
  7573  0078B0  C094  FFDF         	movff	pf_mount@fmt,indf2
  7574                           
  7575                           ; BSR set to: 0
  7576  0078B4  0100               	movlb	0	; () banked
  7577  0078B6  5194               	movf	pf_mount@fmt& (0+255),w,b
  7578  0078B8  0A03               	xorlw	3
  7579  0078BA  A4D8               	btfss	status,2,c
  7580  0078BC  D04C               	goto	l3880
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;pff.c: 811: fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(buf+(44-13))+3)<<24)|((DWORD)*((BYT
      +                          E*)(buf+(44-13))+2)<<16)|((WORD)*((BYTE*)(buf+(44-13))+1)<<8)|*(BYTE*)(buf+(44-13)));
  7584                           
  7585                           ; BSR set to: 0
  7586  0078BE  0100               	movlb	0	; () banked
  7587  0078C0  5180               	movf	(pf_mount@buf+32)& (0+255),w,b
  7588  0078C2  6E2C               	movwf	(??_pf_mount+1)& (0+255),c
  7589  0078C4  6A2B               	clrf	??_pf_mount& (0+255),c
  7590  0078C6  0100               	movlb	0	; () banked
  7591  0078C8  C081  F02D         	movff	pf_mount@buf+33,??_pf_mount+2
  7592  0078CC  6A2E               	clrf	(??_pf_mount+3)& (0+255),c
  7593  0078CE  6A2F               	clrf	(??_pf_mount+4)& (0+255),c
  7594  0078D0  6A30               	clrf	(??_pf_mount+5)& (0+255),c
  7595  0078D2  C02E  F030         	movff	??_pf_mount+3,??_pf_mount+5
  7596  0078D6  C02D  F02F         	movff	??_pf_mount+2,??_pf_mount+4
  7597  0078DA  6A2E               	clrf	??_pf_mount+3,c
  7598  0078DC  6A2D               	clrf	??_pf_mount+2,c
  7599  0078DE  0100               	movlb	0	; () banked
  7600  0078E0  C082  F031         	movff	pf_mount@buf+34,??_pf_mount+6
  7601  0078E4  6A32               	clrf	(??_pf_mount+7)& (0+255),c
  7602  0078E6  6A33               	clrf	(??_pf_mount+8)& (0+255),c
  7603  0078E8  6A34               	clrf	(??_pf_mount+9)& (0+255),c
  7604  0078EA  C031  F034         	movff	??_pf_mount+6,??_pf_mount+9
  7605  0078EE  6A33               	clrf	??_pf_mount+8,c
  7606  0078F0  6A32               	clrf	??_pf_mount+7,c
  7607  0078F2  6A31               	clrf	??_pf_mount+6,c
  7608  0078F4  502D               	movf	??_pf_mount+2,w,c
  7609  0078F6  1031               	iorwf	??_pf_mount+6,w,c
  7610  0078F8  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7611  0078FA  502E               	movf	??_pf_mount+3,w,c
  7612  0078FC  1032               	iorwf	??_pf_mount+7,w,c
  7613  0078FE  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7614  007900  502F               	movf	??_pf_mount+4,w,c
  7615  007902  1033               	iorwf	??_pf_mount+8,w,c
  7616  007904  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7617  007906  5030               	movf	??_pf_mount+5,w,c
  7618  007908  1034               	iorwf	??_pf_mount+9,w,c
  7619  00790A  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7620  00790C  502B               	movf	??_pf_mount,w,c
  7621  00790E  1035               	iorwf	??_pf_mount+10,w,c
  7622  007910  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  7623  007912  502C               	movf	??_pf_mount+1,w,c
  7624  007914  1036               	iorwf	??_pf_mount+11,w,c
  7625  007916  6E3A               	movwf	(??_pf_mount+15)& (0+255),c
  7626  007918  0E00               	movlw	0
  7627  00791A  1037               	iorwf	??_pf_mount+12,w,c
  7628  00791C  6E3B               	movwf	(??_pf_mount+16)& (0+255),c
  7629  00791E  0E00               	movlw	0
  7630  007920  1038               	iorwf	??_pf_mount+13,w,c
  7631  007922  6E3C               	movwf	(??_pf_mount+17)& (0+255),c
  7632  007924  0100               	movlb	0	; () banked
  7633  007926  517F               	movf	(pf_mount@buf+31)& (0+255),w,b
  7634  007928  1039               	iorwf	??_pf_mount+14,w,c
  7635  00792A  6E3D               	movwf	(??_pf_mount+18)& (0+255),c
  7636  00792C  503A               	movf	??_pf_mount+15,w,c
  7637  00792E  6E3E               	movwf	(??_pf_mount+19)& (0+255),c
  7638  007930  503B               	movf	??_pf_mount+16,w,c
  7639  007932  6E3F               	movwf	(??_pf_mount+20)& (0+255),c
  7640  007934  503C               	movf	??_pf_mount+17,w,c
  7641  007936  6E40               	movwf	(??_pf_mount+21)& (0+255),c
  7642  007938  EE20 F00E          	lfsr	2,14
  7643  00793C  5029               	movf	pf_mount@fs,w,c
  7644  00793E  26D9               	addwf	fsr2l,f,c
  7645  007940  502A               	movf	pf_mount@fs+1,w,c
  7646  007942  22DA               	addwfc	fsr2h,f,c
  7647  007944  C03D  FFDE         	movff	??_pf_mount+18,postinc2
  7648  007948  C03E  FFDE         	movff	??_pf_mount+19,postinc2
  7649  00794C  C03F  FFDE         	movff	??_pf_mount+20,postinc2
  7650  007950  C040  FFDD         	movff	??_pf_mount+21,postdec2
  7651  007954  D02C               	goto	L8
  7652  007956                     l3880:
  7653                           
  7654                           ; BSR set to: 0
  7655                           ;pff.c: 812: else
  7656                           ;pff.c: 813: fs->dirbase = fs->fatbase + fsize;
  7657  007956  EE20 F00A          	lfsr	2,10
  7658  00795A  5029               	movf	pf_mount@fs,w,c
  7659  00795C  26D9               	addwf	fsr2l,f,c
  7660  00795E  502A               	movf	pf_mount@fs+1,w,c
  7661  007960  22DA               	addwfc	fsr2h,f,c
  7662  007962  CFDE F02B          	movff	postinc2,??_pf_mount
  7663  007966  CFDE F02C          	movff	postinc2,??_pf_mount+1
  7664  00796A  CFDE F02D          	movff	postinc2,??_pf_mount+2
  7665  00796E  CFDE F02E          	movff	postinc2,??_pf_mount+3
  7666  007972  0100               	movlb	0	; () banked
  7667  007974  5190               	movf	pf_mount@fsize& (0+255),w,b
  7668  007976  242B               	addwf	??_pf_mount,w,c
  7669  007978  6E2F               	movwf	(??_pf_mount+4)& (0+255),c
  7670  00797A  0100               	movlb	0	; () banked
  7671  00797C  5191               	movf	(pf_mount@fsize+1)& (0+255),w,b
  7672  00797E  202C               	addwfc	??_pf_mount+1,w,c
  7673  007980  6E30               	movwf	(??_pf_mount+5)& (0+255),c
  7674  007982  0100               	movlb	0	; () banked
  7675  007984  5192               	movf	(pf_mount@fsize+2)& (0+255),w,b
  7676  007986  202D               	addwfc	??_pf_mount+2,w,c
  7677  007988  6E31               	movwf	(??_pf_mount+6)& (0+255),c
  7678  00798A  0100               	movlb	0	; () banked
  7679  00798C  5193               	movf	(pf_mount@fsize+3)& (0+255),w,b
  7680  00798E  202E               	addwfc	??_pf_mount+3,w,c
  7681  007990  6E32               	movwf	(??_pf_mount+7)& (0+255),c
  7682  007992  EE20 F00E          	lfsr	2,14
  7683  007996  5029               	movf	pf_mount@fs,w,c
  7684  007998  26D9               	addwf	fsr2l,f,c
  7685  00799A  502A               	movf	pf_mount@fs+1,w,c
  7686  00799C  22DA               	addwfc	fsr2h,f,c
  7687  00799E  C02F  FFDE         	movff	??_pf_mount+4,postinc2
  7688  0079A2  C030  FFDE         	movff	??_pf_mount+5,postinc2
  7689  0079A6  C031  FFDE         	movff	??_pf_mount+6,postinc2
  7690  0079AA  C032  FFDD         	movff	??_pf_mount+7,postdec2
  7691  0079AE                     L8:
  7692  0079AE  06D9               	decf	fsr2l,f,c
  7693  0079B0  06D9               	decf	fsr2l,f,c
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;pff.c: 814: fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;
  7697  0079B2  EE20 F00A          	lfsr	2,10
  7698  0079B6  5029               	movf	pf_mount@fs,w,c
  7699  0079B8  26D9               	addwf	fsr2l,f,c
  7700  0079BA  502A               	movf	pf_mount@fs+1,w,c
  7701  0079BC  22DA               	addwfc	fsr2h,f,c
  7702  0079BE  CFDE F02B          	movff	postinc2,??_pf_mount
  7703  0079C2  CFDE F02C          	movff	postinc2,??_pf_mount+1
  7704  0079C6  CFDE F02D          	movff	postinc2,??_pf_mount+2
  7705  0079CA  CFDE F02E          	movff	postinc2,??_pf_mount+3
  7706  0079CE  EE20 F004          	lfsr	2,4
  7707  0079D2  5029               	movf	pf_mount@fs,w,c
  7708  0079D4  26D9               	addwf	fsr2l,f,c
  7709  0079D6  502A               	movf	pf_mount@fs+1,w,c
  7710  0079D8  22DA               	addwfc	fsr2h,f,c
  7711  0079DA  CFDE F02F          	movff	postinc2,??_pf_mount+4
  7712  0079DE  CFDD F030          	movff	postdec2,??_pf_mount+5
  7713  0079E2  0E04               	movlw	4
  7714  0079E4  6E31               	movwf	(??_pf_mount+6)& (0+255),c
  7715  0079E6                     u3805:
  7716  0079E6  90D8               	bcf	status,0,c
  7717  0079E8  3230               	rrcf	??_pf_mount+5,f,c
  7718  0079EA  322F               	rrcf	??_pf_mount+4,f,c
  7719  0079EC  2E31               	decfsz	(??_pf_mount+6)& (0+255),f,c
  7720  0079EE  D7FB               	goto	u3805
  7721  0079F0  502F               	movf	??_pf_mount+4,w,c
  7722  0079F2  242B               	addwf	??_pf_mount,w,c
  7723  0079F4  6E32               	movwf	(??_pf_mount+7)& (0+255),c
  7724  0079F6  5030               	movf	??_pf_mount+5,w,c
  7725  0079F8  202C               	addwfc	??_pf_mount+1,w,c
  7726  0079FA  6E33               	movwf	(??_pf_mount+8)& (0+255),c
  7727  0079FC  0E00               	movlw	0
  7728  0079FE  202D               	addwfc	??_pf_mount+2,w,c
  7729  007A00  6E34               	movwf	(??_pf_mount+9)& (0+255),c
  7730  007A02  0E00               	movlw	0
  7731  007A04  202E               	addwfc	??_pf_mount+3,w,c
  7732  007A06  6E35               	movwf	(??_pf_mount+10)& (0+255),c
  7733  007A08  0100               	movlb	0	; () banked
  7734  007A0A  5190               	movf	pf_mount@fsize& (0+255),w,b
  7735  007A0C  2432               	addwf	??_pf_mount+7,w,c
  7736  007A0E  6E36               	movwf	(??_pf_mount+11)& (0+255),c
  7737  007A10  0100               	movlb	0	; () banked
  7738  007A12  5191               	movf	(pf_mount@fsize+1)& (0+255),w,b
  7739  007A14  2033               	addwfc	??_pf_mount+8,w,c
  7740  007A16  6E37               	movwf	(??_pf_mount+12)& (0+255),c
  7741  007A18  0100               	movlb	0	; () banked
  7742  007A1A  5192               	movf	(pf_mount@fsize+2)& (0+255),w,b
  7743  007A1C  2034               	addwfc	??_pf_mount+9,w,c
  7744  007A1E  6E38               	movwf	(??_pf_mount+13)& (0+255),c
  7745  007A20  0100               	movlb	0	; () banked
  7746  007A22  5193               	movf	(pf_mount@fsize+3)& (0+255),w,b
  7747  007A24  2035               	addwfc	??_pf_mount+10,w,c
  7748  007A26  6E39               	movwf	(??_pf_mount+14)& (0+255),c
  7749  007A28  EE20 F012          	lfsr	2,18
  7750  007A2C  5029               	movf	pf_mount@fs,w,c
  7751  007A2E  26D9               	addwf	fsr2l,f,c
  7752  007A30  502A               	movf	pf_mount@fs+1,w,c
  7753  007A32  22DA               	addwfc	fsr2h,f,c
  7754  007A34  C036  FFDE         	movff	??_pf_mount+11,postinc2
  7755  007A38  C037  FFDE         	movff	??_pf_mount+12,postinc2
  7756  007A3C  C038  FFDE         	movff	??_pf_mount+13,postinc2
  7757  007A40  C039  FFDD         	movff	??_pf_mount+14,postdec2
  7758  007A44  06D9               	decf	fsr2l,f,c
  7759  007A46  06D9               	decf	fsr2l,f,c
  7760                           
  7761                           ;pff.c: 816: fs->flag = 0;
  7762  007A48  EE20 F001          	lfsr	2,1
  7763  007A4C  5029               	movf	pf_mount@fs,w,c
  7764  007A4E  26D9               	addwf	fsr2l,f,c
  7765  007A50  502A               	movf	pf_mount@fs+1,w,c
  7766  007A52  22DA               	addwfc	fsr2h,f,c
  7767  007A54  0E00               	movlw	0
  7768  007A56  6EDF               	movwf	indf2,c
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;pff.c: 817: FatFs = fs;
  7772  007A58  0100               	movlb	0	; () banked
  7773  007A5A  C02A  F0F4         	movff	pf_mount@fs+1,_FatFs+1
  7774  007A5E  0100               	movlb	0	; () banked
  7775  007A60  C029  F0F3         	movff	pf_mount@fs,_FatFs
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;pff.c: 819: return FR_OK;
  7779  007A64  0E00               	movlw	0
  7780  007A66                     l159:
  7781  007A66  0012               	return	
  7782  007A68                     __end_of_pf_mount:
  7783                           	opt stack 0
  7784                           tblptru	equ	0xFF8
  7785                           tblptrh	equ	0xFF7
  7786                           tblptrl	equ	0xFF6
  7787                           tablat	equ	0xFF5
  7788                           prodh	equ	0xFF4
  7789                           prodl	equ	0xFF3
  7790                           postinc0	equ	0xFEE
  7791                           wreg	equ	0xFE8
  7792                           indf1	equ	0xFE7
  7793                           postdec1	equ	0xFE5
  7794                           fsr1h	equ	0xFE2
  7795                           fsr1l	equ	0xFE1
  7796                           indf2	equ	0xFDF
  7797                           postinc2	equ	0xFDE
  7798                           postdec2	equ	0xFDD
  7799                           plusw2	equ	0xFDB
  7800                           fsr2h	equ	0xFDA
  7801                           fsr2l	equ	0xFD9
  7802                           status	equ	0xFD8
  7803                           
  7804 ;; *************** function _disk_initialize *****************
  7805 ;; Defined at:
  7806 ;;		line 53 in file "diskio.c"
  7807 ;; Parameters:    Size  Location     Type
  7808 ;;		None
  7809 ;; Auto vars:     Size  Location     Type
  7810 ;;  count2          2   18[COMRAM] int 
  7811 ;;  count1          2   15[COMRAM] int 
  7812 ;;  i               2   13[COMRAM] int 
  7813 ;;  buff            1   20[COMRAM] unsigned char 
  7814 ;;  stat            1   17[COMRAM] unsigned char 
  7815 ;; Return value:  Size  Location     Type
  7816 ;;                  1    wreg      unsigned char 
  7817 ;; Registers used:
  7818 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7819 ;; Tracked objects:
  7820 ;;		On entry : 0/0
  7821 ;;		On exit  : 0/0
  7822 ;;		Unchanged: 0/0
  7823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7824 ;;      Params:         0       0       0       0       0       0       0       0       0
  7825 ;;      Locals:         8       0       0       0       0       0       0       0       0
  7826 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7827 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7828 ;;Total ram usage:        8 bytes
  7829 ;; Hardware stack levels used:    1
  7830 ;; Hardware stack levels required when called:    5
  7831 ;; This function calls:
  7832 ;;		_Command
  7833 ;;		_Delay_s
  7834 ;;		_delay_ms
  7835 ;;		_dummy_clocks
  7836 ;;		_proceed
  7837 ;;		_putsUART
  7838 ;;		_reset
  7839 ;;		_response
  7840 ;; This function is called by:
  7841 ;;		_pf_mount
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text19
  7846  005AB4                     __ptext19:
  7847                           	opt stack 0
  7848  005AB4                     _disk_initialize:
  7849                           	opt stack 23
  7850                           
  7851                           ;diskio.c: 55: DSTATUS stat;
  7852                           ;diskio.c: 56: int i = 0, count1 = 0, count2 = 0;
  7853                           
  7854                           ;incstack = 0
  7855  005AB4  0E00               	movlw	0
  7856  005AB6  6E0F               	movwf	disk_initialize@i+1,c
  7857  005AB8  0E00               	movlw	0
  7858  005ABA  6E0E               	movwf	disk_initialize@i,c
  7859  005ABC  0E00               	movlw	0
  7860  005ABE  6E11               	movwf	disk_initialize@count1+1,c
  7861  005AC0  0E00               	movlw	0
  7862  005AC2  6E10               	movwf	disk_initialize@count1,c
  7863  005AC4  0E00               	movlw	0
  7864  005AC6  6E14               	movwf	disk_initialize@count2+1,c
  7865  005AC8  0E00               	movlw	0
  7866  005ACA  6E13               	movwf	disk_initialize@count2,c
  7867                           
  7868                           ;diskio.c: 57: unsigned char buff;
  7869                           ;diskio.c: 58: reset();
  7870  005ACC  EC5D  F028         	call	_reset	;wreg free
  7871                           
  7872                           ;diskio.c: 59: delay_ms(500);
  7873  005AD0  0EF4               	movlw	244
  7874  005AD2  ECB6  F026         	call	_delay_ms
  7875                           
  7876                           ;diskio.c: 61: dummy_clocks(8);
  7877  005AD6  0E00               	movlw	0
  7878  005AD8  6E05               	movwf	dummy_clocks@n+1,c
  7879  005ADA  0E08               	movlw	8
  7880  005ADC  6E04               	movwf	dummy_clocks@n,c
  7881  005ADE  EC2F  F027         	call	_dummy_clocks	;wreg free
  7882                           
  7883                           ;diskio.c: 63: Command(0X41, 0X00000000, 0XFF);
  7884  005AE2  0E00               	movlw	0
  7885  005AE4  6E03               	movwf	Command@arg,c
  7886  005AE6  0E00               	movlw	0
  7887  005AE8  6E04               	movwf	Command@arg+1,c
  7888  005AEA  0E00               	movlw	0
  7889  005AEC  6E05               	movwf	Command@arg+2,c
  7890  005AEE  0E00               	movlw	0
  7891  005AF0  6E06               	movwf	Command@arg+3,c
  7892  005AF2  0EFF               	movlw	255
  7893  005AF4  6E07               	movwf	Command@CRCbits,c
  7894  005AF6  0E41               	movlw	65
  7895  005AF8  ECFA  F026         	call	_Command
  7896                           
  7897                           ;diskio.c: 64: proceed();
  7898  005AFC  EC79  F026         	call	_proceed	;wreg free
  7899  005B00                     l3524:
  7900                           
  7901                           ;diskio.c: 67: buff = response();
  7902  005B00  EC7F  F026         	call	_response	;wreg free
  7903  005B04  6E15               	movwf	disk_initialize@buff,c
  7904                           
  7905                           ;diskio.c: 68: }while(buff!=0x01);
  7906  005B06  0415               	decf	disk_initialize@buff,w,c
  7907  005B08  A4D8               	btfss	status,2,c
  7908  005B0A  D7FA               	goto	l3524
  7909                           
  7910                           ;diskio.c: 72: Delay_s(1);
  7911  005B0C  0E01               	movlw	1
  7912  005B0E  ECD0  F026         	call	_Delay_s
  7913                           
  7914                           ;diskio.c: 74: proceed();
  7915  005B12  EC79  F026         	call	_proceed	;wreg free
  7916                           
  7917                           ;diskio.c: 75: if (buff == 0x01)
  7918  005B16  0415               	decf	disk_initialize@buff,w,c
  7919  005B18  A4D8               	btfss	status,2,c
  7920  005B1A  D077               	goto	l3580
  7921                           
  7922                           ;diskio.c: 76: {
  7923                           ;diskio.c: 78: delay_ms(1);
  7924  005B1C  0E01               	movlw	1
  7925  005B1E  ECB6  F026         	call	_delay_ms
  7926                           
  7927                           ;diskio.c: 79: count1 = 0;
  7928  005B22  0E00               	movlw	0
  7929  005B24  6E11               	movwf	disk_initialize@count1+1,c
  7930  005B26  0E00               	movlw	0
  7931  005B28  6E10               	movwf	disk_initialize@count1,c
  7932  005B2A                     l3538:
  7933                           
  7934                           ;diskio.c: 81: count2 = 0;
  7935  005B2A  0E00               	movlw	0
  7936  005B2C  6E14               	movwf	disk_initialize@count2+1,c
  7937  005B2E  0E00               	movlw	0
  7938  005B30  6E13               	movwf	disk_initialize@count2,c
  7939                           
  7940                           ;diskio.c: 82: dummy_clocks(8);
  7941  005B32  0E00               	movlw	0
  7942  005B34  6E05               	movwf	dummy_clocks@n+1,c
  7943  005B36  0E08               	movlw	8
  7944  005B38  6E04               	movwf	dummy_clocks@n,c
  7945  005B3A  EC2F  F027         	call	_dummy_clocks	;wreg free
  7946                           
  7947                           ;diskio.c: 84: Command(0X77, 0X00000000, 0X95);
  7948  005B3E  0E00               	movlw	0
  7949  005B40  6E03               	movwf	Command@arg,c
  7950  005B42  0E00               	movlw	0
  7951  005B44  6E04               	movwf	Command@arg+1,c
  7952  005B46  0E00               	movlw	0
  7953  005B48  6E05               	movwf	Command@arg+2,c
  7954  005B4A  0E00               	movlw	0
  7955  005B4C  6E06               	movwf	Command@arg+3,c
  7956  005B4E  0E95               	movlw	149
  7957  005B50  6E07               	movwf	Command@CRCbits,c
  7958  005B52  0E77               	movlw	119
  7959  005B54  ECFA  F026         	call	_Command
  7960                           
  7961                           ;diskio.c: 85: buff = 0XFF;
  7962  005B58  6815               	setf	disk_initialize@buff,c
  7963  005B5A                     l3542:
  7964                           
  7965                           ;diskio.c: 88: buff = response();
  7966  005B5A  EC7F  F026         	call	_response	;wreg free
  7967  005B5E  6E15               	movwf	disk_initialize@buff,c
  7968                           
  7969                           ;diskio.c: 89: count2++;
  7970  005B60  4A13               	infsnz	disk_initialize@count2,f,c
  7971  005B62  2A14               	incf	disk_initialize@count2+1,f,c
  7972                           
  7973                           ;diskio.c: 90: }while((buff!=0X01)&&(count2<10));
  7974  005B64  0415               	decf	disk_initialize@buff,w,c
  7975  005B66  B4D8               	btfsc	status,2,c
  7976  005B68  D008               	goto	l3550
  7977  005B6A  5014               	movf	disk_initialize@count2+1,w,c
  7978  005B6C  0A80               	xorlw	128
  7979  005B6E  0F80               	addlw	-128
  7980  005B70  0E0A               	movlw	10
  7981  005B72  B4D8               	btfsc	status,2,c
  7982  005B74  5C13               	subwf	disk_initialize@count2,w,c
  7983  005B76  A0D8               	btfss	status,0,c
  7984  005B78  D7F0               	goto	l3542
  7985  005B7A                     l3550:
  7986                           
  7987                           ;diskio.c: 92: delay_ms(1);
  7988  005B7A  0E01               	movlw	1
  7989  005B7C  ECB6  F026         	call	_delay_ms
  7990                           
  7991                           ;diskio.c: 93: count2 = 0;
  7992  005B80  0E00               	movlw	0
  7993  005B82  6E14               	movwf	disk_initialize@count2+1,c
  7994  005B84  0E00               	movlw	0
  7995  005B86  6E13               	movwf	disk_initialize@count2,c
  7996                           
  7997                           ;diskio.c: 94: dummy_clocks(8);
  7998  005B88  0E00               	movlw	0
  7999  005B8A  6E05               	movwf	dummy_clocks@n+1,c
  8000  005B8C  0E08               	movlw	8
  8001  005B8E  6E04               	movwf	dummy_clocks@n,c
  8002  005B90  EC2F  F027         	call	_dummy_clocks	;wreg free
  8003                           
  8004                           ;diskio.c: 96: Command(0X69,0X40000000,0X95);
  8005  005B94  0E00               	movlw	0
  8006  005B96  6E03               	movwf	Command@arg,c
  8007  005B98  0E00               	movlw	0
  8008  005B9A  6E04               	movwf	Command@arg+1,c
  8009  005B9C  0E00               	movlw	0
  8010  005B9E  6E05               	movwf	Command@arg+2,c
  8011  005BA0  0E40               	movlw	64
  8012  005BA2  6E06               	movwf	Command@arg+3,c
  8013  005BA4  0E95               	movlw	149
  8014  005BA6  6E07               	movwf	Command@CRCbits,c
  8015  005BA8  0E69               	movlw	105
  8016  005BAA  ECFA  F026         	call	_Command
  8017                           
  8018                           ;diskio.c: 97: buff = 0XFF;
  8019  005BAE  6815               	setf	disk_initialize@buff,c
  8020                           
  8021                           ;diskio.c: 99: proceed();
  8022  005BB0  EC79  F026         	call	_proceed	;wreg free
  8023  005BB4                     l3562:
  8024                           
  8025                           ;diskio.c: 101: buff = response();
  8026  005BB4  EC7F  F026         	call	_response	;wreg free
  8027  005BB8  6E15               	movwf	disk_initialize@buff,c
  8028                           
  8029                           ;diskio.c: 102: count2++;
  8030  005BBA  4A13               	infsnz	disk_initialize@count2,f,c
  8031  005BBC  2A14               	incf	disk_initialize@count2+1,f,c
  8032                           
  8033                           ;diskio.c: 103: }while((buff!=0X00)&&(count2<10));
  8034  005BBE  5015               	movf	disk_initialize@buff,w,c
  8035  005BC0  B4D8               	btfsc	status,2,c
  8036  005BC2  D008               	goto	l439
  8037  005BC4  5014               	movf	disk_initialize@count2+1,w,c
  8038  005BC6  0A80               	xorlw	128
  8039  005BC8  0F80               	addlw	-128
  8040  005BCA  0E0A               	movlw	10
  8041  005BCC  B4D8               	btfsc	status,2,c
  8042  005BCE  5C13               	subwf	disk_initialize@count2,w,c
  8043  005BD0  A0D8               	btfss	status,0,c
  8044  005BD2  D7F0               	goto	l3562
  8045  005BD4                     l439:
  8046                           
  8047                           ;diskio.c: 104: }while(buff != 0X00);
  8048  005BD4  6615               	tstfsz	disk_initialize@buff,c
  8049  005BD6  D7A9               	goto	l3538
  8050                           
  8051                           ;diskio.c: 107: count1 = 0;
  8052  005BD8  0E00               	movlw	0
  8053  005BDA  6E11               	movwf	disk_initialize@count1+1,c
  8054  005BDC  0E00               	movlw	0
  8055  005BDE  6E10               	movwf	disk_initialize@count1,c
  8056                           
  8057                           ;diskio.c: 109: delay_ms(1);
  8058  005BE0  0E01               	movlw	1
  8059  005BE2  ECB6  F026         	call	_delay_ms
  8060                           
  8061                           ;diskio.c: 110: stat = 0X00;
  8062  005BE6  0E00               	movlw	0
  8063  005BE8  6E12               	movwf	disk_initialize@stat,c
  8064                           
  8065                           ;diskio.c: 111: putsUART("\n\r");
  8066  005BEA  0E7C               	movlw	high (STR_27+8)
  8067  005BEC  6E06               	movwf	putsUART@data+1,c
  8068  005BEE  0ED8               	movlw	low (STR_27+8)
  8069  005BF0  6E05               	movwf	putsUART@data,c
  8070  005BF2  ECC4  F027         	call	_putsUART	;wreg free
  8071                           
  8072                           ;diskio.c: 112: putsUART("SUCCESS\n\r");
  8073  005BF6  0E7C               	movlw	high STR_26
  8074  005BF8  6E06               	movwf	putsUART@data+1,c
  8075  005BFA  0EDB               	movlw	low STR_26
  8076  005BFC  6E05               	movwf	putsUART@data,c
  8077  005BFE  ECC4  F027         	call	_putsUART	;wreg free
  8078                           
  8079                           ;diskio.c: 113: Delay_s(2);
  8080  005C02  0E02               	movlw	2
  8081  005C04  ECD0  F026         	call	_Delay_s
  8082                           
  8083                           ;diskio.c: 114: }
  8084  005C08  D00F               	goto	l3588
  8085  005C0A                     l3580:
  8086                           
  8087                           ;diskio.c: 116: else if(buff == 0x05)
  8088  005C0A  5015               	movf	disk_initialize@buff,w,c
  8089  005C0C  0A05               	xorlw	5
  8090  005C0E  A4D8               	btfss	status,2,c
  8091  005C10  D00B               	goto	l3588
  8092                           
  8093                           ;diskio.c: 117: {
  8094                           ;diskio.c: 118: stat = 0x01;
  8095  005C12  0E01               	movlw	1
  8096  005C14  6E12               	movwf	disk_initialize@stat,c
  8097                           
  8098                           ;diskio.c: 119: putsUART("Error!!!\n\r");
  8099  005C16  0E7C               	movlw	high STR_27
  8100  005C18  6E06               	movwf	putsUART@data+1,c
  8101  005C1A  0ED0               	movlw	low STR_27
  8102  005C1C  6E05               	movwf	putsUART@data,c
  8103  005C1E  ECC4  F027         	call	_putsUART	;wreg free
  8104                           
  8105                           ;diskio.c: 120: Delay_s(3);
  8106  005C22  0E03               	movlw	3
  8107  005C24  ECD0  F026         	call	_Delay_s
  8108  005C28                     l3588:
  8109                           
  8110                           ;diskio.c: 121: }
  8111                           ;diskio.c: 122: Delay_s(1);
  8112  005C28  0E01               	movlw	1
  8113  005C2A  ECD0  F026         	call	_Delay_s
  8114                           
  8115                           ;diskio.c: 124: dummy_clocks(8);
  8116  005C2E  0E00               	movlw	0
  8117  005C30  6E05               	movwf	dummy_clocks@n+1,c
  8118  005C32  0E08               	movlw	8
  8119  005C34  6E04               	movwf	dummy_clocks@n,c
  8120  005C36  EC2F  F027         	call	_dummy_clocks	;wreg free
  8121                           
  8122                           ;diskio.c: 126: Command(0X50,0X00000200,0XFF);
  8123  005C3A  0E00               	movlw	0
  8124  005C3C  6E03               	movwf	Command@arg,c
  8125  005C3E  0E02               	movlw	2
  8126  005C40  6E04               	movwf	Command@arg+1,c
  8127  005C42  0E00               	movlw	0
  8128  005C44  6E05               	movwf	Command@arg+2,c
  8129  005C46  0E00               	movlw	0
  8130  005C48  6E06               	movwf	Command@arg+3,c
  8131  005C4A  0EFF               	movlw	255
  8132  005C4C  6E07               	movwf	Command@CRCbits,c
  8133  005C4E  0E50               	movlw	80
  8134  005C50  ECFA  F026         	call	_Command
  8135                           
  8136                           ;diskio.c: 127: proceed();
  8137  005C54  EC79  F026         	call	_proceed	;wreg free
  8138  005C58                     l3596:
  8139                           
  8140                           ;diskio.c: 129: buff = response();
  8141  005C58  EC7F  F026         	call	_response	;wreg free
  8142  005C5C  6E15               	movwf	disk_initialize@buff,c
  8143                           
  8144                           ;diskio.c: 130: }while(buff!=0x00);
  8145  005C5E  6615               	tstfsz	disk_initialize@buff,c
  8146  005C60  D7FB               	goto	l3596
  8147                           
  8148                           ;diskio.c: 132: putsUART("\n\r512 Bytes Set\n\r");
  8149  005C62  0E7C               	movlw	high STR_28
  8150  005C64  6E06               	movwf	putsUART@data+1,c
  8151  005C66  0EAD               	movlw	low STR_28
  8152  005C68  6E05               	movwf	putsUART@data,c
  8153  005C6A  ECC4  F027         	call	_putsUART	;wreg free
  8154                           
  8155                           ;diskio.c: 133: Delay_s(2);
  8156  005C6E  0E02               	movlw	2
  8157  005C70  ECD0  F026         	call	_Delay_s
  8158                           
  8159                           ;diskio.c: 134: putsUART("\n\rCOMPLETING INITIALIZATION");
  8160  005C74  0E7C               	movlw	high STR_29
  8161  005C76  6E06               	movwf	putsUART@data+1,c
  8162  005C78  0E65               	movlw	low STR_29
  8163  005C7A  6E05               	movwf	putsUART@data,c
  8164  005C7C  ECC4  F027         	call	_putsUART	;wreg free
  8165                           
  8166                           ;diskio.c: 137: return stat;
  8167  005C80  5012               	movf	disk_initialize@stat,w,c
  8168  005C82  0012               	return	
  8169  005C84                     __end_of_disk_initialize:
  8170                           	opt stack 0
  8171                           tblptru	equ	0xFF8
  8172                           tblptrh	equ	0xFF7
  8173                           tblptrl	equ	0xFF6
  8174                           tablat	equ	0xFF5
  8175                           prodh	equ	0xFF4
  8176                           prodl	equ	0xFF3
  8177                           postinc0	equ	0xFEE
  8178                           wreg	equ	0xFE8
  8179                           indf1	equ	0xFE7
  8180                           postdec1	equ	0xFE5
  8181                           fsr1h	equ	0xFE2
  8182                           fsr1l	equ	0xFE1
  8183                           indf2	equ	0xFDF
  8184                           postinc2	equ	0xFDE
  8185                           postdec2	equ	0xFDD
  8186                           plusw2	equ	0xFDB
  8187                           fsr2h	equ	0xFDA
  8188                           fsr2l	equ	0xFD9
  8189                           status	equ	0xFD8
  8190                           
  8191 ;; *************** function _reset *****************
  8192 ;; Defined at:
  8193 ;;		line 31 in file "diskio.c"
  8194 ;; Parameters:    Size  Location     Type
  8195 ;;		None
  8196 ;; Auto vars:     Size  Location     Type
  8197 ;;  count           2   10[COMRAM] int 
  8198 ;;  i               2    8[COMRAM] int 
  8199 ;;  buff            1   12[COMRAM] unsigned char 
  8200 ;; Return value:  Size  Location     Type
  8201 ;;		None               void
  8202 ;; Registers used:
  8203 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8209 ;;      Params:         0       0       0       0       0       0       0       0       0
  8210 ;;      Locals:         5       0       0       0       0       0       0       0       0
  8211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8212 ;;      Totals:         5       0       0       0       0       0       0       0       0
  8213 ;;Total ram usage:        5 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    4
  8216 ;; This function calls:
  8217 ;;		_Command
  8218 ;;		_Delay_s
  8219 ;;		_dummy_clocks
  8220 ;;		_proceed
  8221 ;;		_putsUART
  8222 ;;		_response
  8223 ;; This function is called by:
  8224 ;;		_disk_initialize
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           	psect	text20
  8229  0050BA                     __ptext20:
  8230                           	opt stack 0
  8231  0050BA                     _reset:
  8232                           	opt stack 23
  8233                           
  8234                           ;diskio.c: 33: int i = 0, count = 0;
  8235                           
  8236                           ;incstack = 0
  8237  0050BA  0E00               	movlw	0
  8238  0050BC  6E0A               	movwf	reset@i+1,c
  8239  0050BE  0E00               	movlw	0
  8240  0050C0  6E09               	movwf	reset@i,c
  8241  0050C2  0E00               	movlw	0
  8242  0050C4  6E0C               	movwf	reset@count+1,c
  8243  0050C6  0E00               	movlw	0
  8244  0050C8  6E0B               	movwf	reset@count,c
  8245  0050CA                     l3414:
  8246                           
  8247                           ;diskio.c: 37: dummy_clocks(8);
  8248  0050CA  0E00               	movlw	0
  8249  0050CC  6E05               	movwf	dummy_clocks@n+1,c
  8250  0050CE  0E08               	movlw	8
  8251  0050D0  6E04               	movwf	dummy_clocks@n,c
  8252  0050D2  EC2F  F027         	call	_dummy_clocks	;wreg free
  8253                           
  8254                           ;diskio.c: 39: Command(0X40, 0X00000000, 0X95);
  8255  0050D6  0E00               	movlw	0
  8256  0050D8  6E03               	movwf	Command@arg,c
  8257  0050DA  0E00               	movlw	0
  8258  0050DC  6E04               	movwf	Command@arg+1,c
  8259  0050DE  0E00               	movlw	0
  8260  0050E0  6E05               	movwf	Command@arg+2,c
  8261  0050E2  0E00               	movlw	0
  8262  0050E4  6E06               	movwf	Command@arg+3,c
  8263  0050E6  0E95               	movlw	149
  8264  0050E8  6E07               	movwf	Command@CRCbits,c
  8265  0050EA  0E40               	movlw	64
  8266  0050EC  ECFA  F026         	call	_Command
  8267                           
  8268                           ;diskio.c: 40: proceed();
  8269  0050F0  EC79  F026         	call	_proceed	;wreg free
  8270  0050F4                     l3420:
  8271                           
  8272                           ;diskio.c: 42: buff = response();
  8273  0050F4  EC7F  F026         	call	_response	;wreg free
  8274  0050F8  6E0D               	movwf	reset@buff,c
  8275                           
  8276                           ;diskio.c: 43: count++;
  8277  0050FA  4A0B               	infsnz	reset@count,f,c
  8278  0050FC  2A0C               	incf	reset@count+1,f,c
  8279                           
  8280                           ;diskio.c: 44: }while((buff!=0X01) && (count<10) );
  8281  0050FE  040D               	decf	reset@buff,w,c
  8282  005100  B4D8               	btfsc	status,2,c
  8283  005102  D008               	goto	l3426
  8284  005104  500C               	movf	reset@count+1,w,c
  8285  005106  0A80               	xorlw	128
  8286  005108  0F80               	addlw	-128
  8287  00510A  0E0A               	movlw	10
  8288  00510C  B4D8               	btfsc	status,2,c
  8289  00510E  5C0B               	subwf	reset@count,w,c
  8290  005110  A0D8               	btfss	status,0,c
  8291  005112  D7F0               	goto	l3420
  8292  005114                     l3426:
  8293                           
  8294                           ;diskio.c: 45: count = 0;
  8295  005114  0E00               	movlw	0
  8296  005116  6E0C               	movwf	reset@count+1,c
  8297  005118  0E00               	movlw	0
  8298  00511A  6E0B               	movwf	reset@count,c
  8299                           
  8300                           ;diskio.c: 46: }while(buff!=0X01);
  8301  00511C  040D               	decf	reset@buff,w,c
  8302  00511E  A4D8               	btfss	status,2,c
  8303  005120  D7D4               	goto	l3414
  8304                           
  8305                           ;diskio.c: 48: putsUART("\n\rSD Card Inserted\n\r");
  8306  005122  0E7C               	movlw	high STR_24
  8307  005124  6E06               	movwf	putsUART@data+1,c
  8308  005126  0E98               	movlw	low STR_24
  8309  005128  6E05               	movwf	putsUART@data,c
  8310  00512A  ECC4  F027         	call	_putsUART	;wreg free
  8311                           
  8312                           ;diskio.c: 49: Delay_s(2);
  8313  00512E  0E02               	movlw	2
  8314  005130  ECD0  F026         	call	_Delay_s
  8315                           
  8316                           ;diskio.c: 50: return;
  8317  005134  0012               	return	
  8318  005136                     __end_of_reset:
  8319                           	opt stack 0
  8320                           tblptru	equ	0xFF8
  8321                           tblptrh	equ	0xFF7
  8322                           tblptrl	equ	0xFF6
  8323                           tablat	equ	0xFF5
  8324                           prodh	equ	0xFF4
  8325                           prodl	equ	0xFF3
  8326                           postinc0	equ	0xFEE
  8327                           wreg	equ	0xFE8
  8328                           indf1	equ	0xFE7
  8329                           postdec1	equ	0xFE5
  8330                           fsr1h	equ	0xFE2
  8331                           fsr1l	equ	0xFE1
  8332                           indf2	equ	0xFDF
  8333                           postinc2	equ	0xFDE
  8334                           postdec2	equ	0xFDD
  8335                           plusw2	equ	0xFDB
  8336                           fsr2h	equ	0xFDA
  8337                           fsr2l	equ	0xFD9
  8338                           status	equ	0xFD8
  8339                           
  8340 ;; *************** function _check_fs *****************
  8341 ;; Defined at:
  8342 ;;		line 722 in file "pff.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;  buf             2   30[COMRAM] PTR unsigned char 
  8345 ;;		 -> pf_mount@buf(36), 
  8346 ;;  sect            4   32[COMRAM] unsigned long 
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;		None
  8349 ;; Return value:  Size  Location     Type
  8350 ;;                  1    wreg      unsigned char 
  8351 ;; Registers used:
  8352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8353 ;; Tracked objects:
  8354 ;;		On entry : 0/0
  8355 ;;		On exit  : 0/0
  8356 ;;		Unchanged: 0/0
  8357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8358 ;;      Params:         6       0       0       0       0       0       0       0       0
  8359 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8360 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8361 ;;      Totals:        10       0       0       0       0       0       0       0       0
  8362 ;;Total ram usage:       10 bytes
  8363 ;; Hardware stack levels used:    1
  8364 ;; Hardware stack levels required when called:    5
  8365 ;; This function calls:
  8366 ;;		_disk_readp
  8367 ;; This function is called by:
  8368 ;;		_pf_mount
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           	psect	text21
  8373  0057EC                     __ptext21:
  8374                           	opt stack 0
  8375  0057EC                     _check_fs:
  8376                           	opt stack 23
  8377                           
  8378                           ;pff.c: 727: if (disk_readp(buf, sect, 510, 2))
  8379                           
  8380                           ;incstack = 0
  8381  0057EC  C020  F00A         	movff	check_fs@buf+1,disk_readp@rd+1
  8382  0057F0  C01F  F009         	movff	check_fs@buf,disk_readp@rd
  8383  0057F4  C021  F00B         	movff	check_fs@sect,disk_readp@sector
  8384  0057F8  C022  F00C         	movff	check_fs@sect+1,disk_readp@sector+1
  8385  0057FC  C023  F00D         	movff	check_fs@sect+2,disk_readp@sector+2
  8386  005800  C024  F00E         	movff	check_fs@sect+3,disk_readp@sector+3
  8387  005804  0E01               	movlw	1
  8388  005806  6E10               	movwf	disk_readp@offset+1,c
  8389  005808  0EFE               	movlw	254
  8390  00580A  6E0F               	movwf	disk_readp@offset,c
  8391  00580C  0E00               	movlw	0
  8392  00580E  6E12               	movwf	disk_readp@count+1,c
  8393  005810  0E02               	movlw	2
  8394  005812  6E11               	movwf	disk_readp@count,c
  8395  005814  EC46  F031         	call	_disk_readp	;wreg free
  8396  005818  0900               	iorlw	0
  8397  00581A  B4D8               	btfsc	status,2,c
  8398  00581C  D002               	goto	l3486
  8399                           
  8400                           ;pff.c: 728: return 3;
  8401  00581E  0E03               	movlw	3
  8402  005820  D08B               	goto	l152
  8403  005822                     l3486:
  8404                           
  8405                           ;pff.c: 729: if ( (WORD)(((WORD)*((BYTE*)(buf)+1)<<8)|(WORD)*(BYTE*)(buf)) != 0xAA55)
  8406  005822  EE20 F001          	lfsr	2,1
  8407  005826  501F               	movf	check_fs@buf,w,c
  8408  005828  26D9               	addwf	fsr2l,f,c
  8409  00582A  5020               	movf	check_fs@buf+1,w,c
  8410  00582C  22DA               	addwfc	fsr2h,f,c
  8411  00582E  50DF               	movf	indf2,w,c
  8412  005830  6E25               	movwf	??_check_fs& (0+255),c
  8413  005832  5025               	movf	??_check_fs,w,c
  8414  005834  6E27               	movwf	(??_check_fs+2)& (0+255),c
  8415  005836  6A26               	clrf	(??_check_fs+1)& (0+255),c
  8416  005838  C01F  FFD9         	movff	check_fs@buf,fsr2l
  8417  00583C  C020  FFDA         	movff	check_fs@buf+1,fsr2h
  8418  005840  50DF               	movf	indf2,w,c
  8419  005842  6E28               	movwf	(??_check_fs+3)& (0+255),c
  8420  005844  5028               	movf	??_check_fs+3,w,c
  8421  005846  1226               	iorwf	??_check_fs+1,f,c
  8422  005848  0E00               	movlw	0
  8423  00584A  1227               	iorwf	??_check_fs+2,f,c
  8424  00584C  5027               	movf	??_check_fs+2,w,c
  8425  00584E  0AAA               	xorlw	170
  8426  005850  0E55               	movlw	85
  8427  005852  B4D8               	btfsc	status,2,c
  8428  005854  1826               	xorwf	??_check_fs+1,w,c
  8429  005856  B4D8               	btfsc	status,2,c
  8430  005858  D002               	goto	l3492
  8431                           
  8432                           ;pff.c: 730: {
  8433                           ;pff.c: 731: return 2;
  8434  00585A  0E02               	movlw	2
  8435  00585C  D06D               	goto	l152
  8436  00585E                     l3492:
  8437  00585E  C020  F00A         	movff	check_fs@buf+1,disk_readp@rd+1
  8438  005862  C01F  F009         	movff	check_fs@buf,disk_readp@rd
  8439  005866  C021  F00B         	movff	check_fs@sect,disk_readp@sector
  8440  00586A  C022  F00C         	movff	check_fs@sect+1,disk_readp@sector+1
  8441  00586E  C023  F00D         	movff	check_fs@sect+2,disk_readp@sector+2
  8442  005872  C024  F00E         	movff	check_fs@sect+3,disk_readp@sector+3
  8443  005876  0E00               	movlw	0
  8444  005878  6E10               	movwf	disk_readp@offset+1,c
  8445  00587A  0E36               	movlw	54
  8446  00587C  6E0F               	movwf	disk_readp@offset,c
  8447  00587E  0E00               	movlw	0
  8448  005880  6E12               	movwf	disk_readp@count+1,c
  8449  005882  0E02               	movlw	2
  8450  005884  6E11               	movwf	disk_readp@count,c
  8451  005886  EC46  F031         	call	_disk_readp	;wreg free
  8452  00588A  0900               	iorlw	0
  8453  00588C  A4D8               	btfss	status,2,c
  8454  00588E  D01C               	goto	l3500
  8455  005890  EE20 F001          	lfsr	2,1
  8456  005894  501F               	movf	check_fs@buf,w,c
  8457  005896  26D9               	addwf	fsr2l,f,c
  8458  005898  5020               	movf	check_fs@buf+1,w,c
  8459  00589A  22DA               	addwfc	fsr2h,f,c
  8460  00589C  50DF               	movf	indf2,w,c
  8461  00589E  6E25               	movwf	??_check_fs& (0+255),c
  8462  0058A0  5025               	movf	??_check_fs,w,c
  8463  0058A2  6E27               	movwf	(??_check_fs+2)& (0+255),c
  8464  0058A4  6A26               	clrf	(??_check_fs+1)& (0+255),c
  8465  0058A6  C01F  FFD9         	movff	check_fs@buf,fsr2l
  8466  0058AA  C020  FFDA         	movff	check_fs@buf+1,fsr2h
  8467  0058AE  50DF               	movf	indf2,w,c
  8468  0058B0  6E28               	movwf	(??_check_fs+3)& (0+255),c
  8469  0058B2  5028               	movf	??_check_fs+3,w,c
  8470  0058B4  1226               	iorwf	??_check_fs+1,f,c
  8471  0058B6  0E00               	movlw	0
  8472  0058B8  1227               	iorwf	??_check_fs+2,f,c
  8473  0058BA  5027               	movf	??_check_fs+2,w,c
  8474  0058BC  0A41               	xorlw	65
  8475  0058BE  0E46               	movlw	70
  8476  0058C0  B4D8               	btfsc	status,2,c
  8477  0058C2  1826               	xorwf	??_check_fs+1,w,c
  8478  0058C4  B4D8               	btfsc	status,2,c
  8479  0058C6  D035               	goto	u3270
  8480  0058C8                     l3500:
  8481  0058C8  C020  F00A         	movff	check_fs@buf+1,disk_readp@rd+1
  8482  0058CC  C01F  F009         	movff	check_fs@buf,disk_readp@rd
  8483  0058D0  C021  F00B         	movff	check_fs@sect,disk_readp@sector
  8484  0058D4  C022  F00C         	movff	check_fs@sect+1,disk_readp@sector+1
  8485  0058D8  C023  F00D         	movff	check_fs@sect+2,disk_readp@sector+2
  8486  0058DC  C024  F00E         	movff	check_fs@sect+3,disk_readp@sector+3
  8487  0058E0  0E00               	movlw	0
  8488  0058E2  6E10               	movwf	disk_readp@offset+1,c
  8489  0058E4  0E52               	movlw	82
  8490  0058E6  6E0F               	movwf	disk_readp@offset,c
  8491  0058E8  0E00               	movlw	0
  8492  0058EA  6E12               	movwf	disk_readp@count+1,c
  8493  0058EC  0E02               	movlw	2
  8494  0058EE  6E11               	movwf	disk_readp@count,c
  8495  0058F0  EC46  F031         	call	_disk_readp	;wreg free
  8496  0058F4  0900               	iorlw	0
  8497  0058F6  A4D8               	btfss	status,2,c
  8498  0058F8  D01E               	goto	l3508
  8499  0058FA  EE20 F001          	lfsr	2,1
  8500  0058FE  501F               	movf	check_fs@buf,w,c
  8501  005900  26D9               	addwf	fsr2l,f,c
  8502  005902  5020               	movf	check_fs@buf+1,w,c
  8503  005904  22DA               	addwfc	fsr2h,f,c
  8504  005906  50DF               	movf	indf2,w,c
  8505  005908  6E25               	movwf	??_check_fs& (0+255),c
  8506  00590A  5025               	movf	??_check_fs,w,c
  8507  00590C  6E27               	movwf	(??_check_fs+2)& (0+255),c
  8508  00590E  6A26               	clrf	(??_check_fs+1)& (0+255),c
  8509  005910  C01F  FFD9         	movff	check_fs@buf,fsr2l
  8510  005914  C020  FFDA         	movff	check_fs@buf+1,fsr2h
  8511  005918  50DF               	movf	indf2,w,c
  8512  00591A  6E28               	movwf	(??_check_fs+3)& (0+255),c
  8513  00591C  5028               	movf	??_check_fs+3,w,c
  8514  00591E  1226               	iorwf	??_check_fs+1,f,c
  8515  005920  0E00               	movlw	0
  8516  005922  1227               	iorwf	??_check_fs+2,f,c
  8517  005924  5027               	movf	??_check_fs+2,w,c
  8518  005926  0A41               	xorlw	65
  8519  005928  0E46               	movlw	70
  8520  00592A  B4D8               	btfsc	status,2,c
  8521  00592C  1826               	xorwf	??_check_fs+1,w,c
  8522  00592E  A4D8               	btfss	status,2,c
  8523  005930  D002               	goto	l3508
  8524  005932                     u3270:
  8525                           
  8526                           ;pff.c: 736: return 0;
  8527  005932  0E00               	movlw	0
  8528  005934  D001               	goto	l152
  8529  005936                     l3508:
  8530                           
  8531                           ;pff.c: 737: return 1;
  8532  005936  0E01               	movlw	1
  8533  005938                     l152:
  8534  005938  0012               	return	
  8535  00593A                     __end_of_check_fs:
  8536                           	opt stack 0
  8537                           tblptru	equ	0xFF8
  8538                           tblptrh	equ	0xFF7
  8539                           tblptrl	equ	0xFF6
  8540                           tablat	equ	0xFF5
  8541                           prodh	equ	0xFF4
  8542                           prodl	equ	0xFF3
  8543                           postinc0	equ	0xFEE
  8544                           wreg	equ	0xFE8
  8545                           indf1	equ	0xFE7
  8546                           postdec1	equ	0xFE5
  8547                           fsr1h	equ	0xFE2
  8548                           fsr1l	equ	0xFE1
  8549                           indf2	equ	0xFDF
  8550                           postinc2	equ	0xFDE
  8551                           postdec2	equ	0xFDD
  8552                           plusw2	equ	0xFDB
  8553                           fsr2h	equ	0xFDA
  8554                           fsr2l	equ	0xFD9
  8555                           status	equ	0xFD8
  8556                           
  8557 ;; *************** function _disk_readp *****************
  8558 ;; Defined at:
  8559 ;;		line 145 in file "diskio.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;  rd              2    8[COMRAM] PTR unsigned char 
  8562 ;;		 -> data_buffer_32(32), pf_readdir@dir(32), pf_opendir@dir(32), pf_open@dir(32), 
  8563 ;;		 -> pf_mount@buf(36), NULL(0), get_fat@buf(4), 
  8564 ;;  sector          4   10[COMRAM] unsigned long 
  8565 ;;  offset          2   14[COMRAM] unsigned int 
  8566 ;;  count           2   16[COMRAM] unsigned int 
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  start_add       4   23[COMRAM] unsigned long 
  8569 ;;  length          2   28[COMRAM] int 
  8570 ;;  i               2    0        int 
  8571 ;;  buff            1   27[COMRAM] unsigned char 
  8572 ;;  ptr             1   22[COMRAM] unsigned char 
  8573 ;;  res             1    0        enum E14
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  1    wreg      enum E73
  8576 ;; Registers used:
  8577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8583 ;;      Params:        10       0       0       0       0       0       0       0       0
  8584 ;;      Locals:         8       0       0       0       0       0       0       0       0
  8585 ;;      Temps:          4       0       0       0       0       0       0       0       0
  8586 ;;      Totals:        22       0       0       0       0       0       0       0       0
  8587 ;;Total ram usage:       22 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    4
  8590 ;; This function calls:
  8591 ;;		_Command
  8592 ;;		_Delay_s
  8593 ;;		_WriteUART
  8594 ;;		_dummy_clocks
  8595 ;;		_proceed
  8596 ;;		_putsUART
  8597 ;;		_response
  8598 ;; This function is called by:
  8599 ;;		_get_fat
  8600 ;;		_dir_find
  8601 ;;		_check_fs
  8602 ;;		_pf_mount
  8603 ;;		_pf_read
  8604 ;;		_dir_read
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text22
  8609  00628C                     __ptext22:
  8610                           	opt stack 0
  8611  00628C                     _disk_readp:
  8612                           	opt stack 23
  8613                           
  8614                           ;diskio.c: 152: DRESULT res;
  8615                           ;diskio.c: 153: unsigned char ptr=0X00,buff;
  8616                           
  8617                           ;incstack = 0
  8618  00628C  0E00               	movlw	0
  8619  00628E  6E17               	movwf	disk_readp@ptr,c
  8620                           
  8621                           ;diskio.c: 154: unsigned long int start_add;
  8622                           ;diskio.c: 155: static unsigned char arr[512];
  8623                           ;diskio.c: 156: int length,i;
  8624                           ;diskio.c: 158: if(offset == 0){
  8625  006290  5010               	movf	disk_readp@offset+1,w,c
  8626  006292  100F               	iorwf	disk_readp@offset,w,c
  8627  006294  A4D8               	btfss	status,2,c
  8628  006296  D08C               	goto	l3046
  8629                           
  8630                           ;diskio.c: 159: start_add = ((sector*512));
  8631  006298  C00B  F013         	movff	disk_readp@sector,??_disk_readp
  8632  00629C  C00C  F014         	movff	disk_readp@sector+1,??_disk_readp+1
  8633  0062A0  C00D  F015         	movff	disk_readp@sector+2,??_disk_readp+2
  8634  0062A4  C00E  F016         	movff	disk_readp@sector+3,??_disk_readp+3
  8635  0062A8  0E09               	movlw	9
  8636  0062AA                     u2435:
  8637  0062AA  90D8               	bcf	status,0,c
  8638  0062AC  3613               	rlcf	??_disk_readp,f,c
  8639  0062AE  3614               	rlcf	??_disk_readp+1,f,c
  8640  0062B0  3615               	rlcf	??_disk_readp+2,f,c
  8641  0062B2  3616               	rlcf	??_disk_readp+3,f,c
  8642  0062B4  2EE8               	decfsz	wreg,f,c
  8643  0062B6  D7F9               	goto	u2435
  8644  0062B8  C013  F018         	movff	??_disk_readp,disk_readp@start_add
  8645  0062BC  C014  F019         	movff	??_disk_readp+1,disk_readp@start_add+1
  8646  0062C0  C015  F01A         	movff	??_disk_readp+2,disk_readp@start_add+2
  8647  0062C4  C016  F01B         	movff	??_disk_readp+3,disk_readp@start_add+3
  8648                           
  8649                           ;diskio.c: 161: Delay_s(1);
  8650  0062C8  0E01               	movlw	1
  8651  0062CA  ECD0  F026         	call	_Delay_s
  8652                           
  8653                           ;diskio.c: 162: dummy_clocks(8);
  8654  0062CE  0E00               	movlw	0
  8655  0062D0  6E05               	movwf	dummy_clocks@n+1,c
  8656  0062D2  0E08               	movlw	8
  8657  0062D4  6E04               	movwf	dummy_clocks@n,c
  8658  0062D6  EC2F  F027         	call	_dummy_clocks	;wreg free
  8659                           
  8660                           ;diskio.c: 164: Command(0X52,start_add,0X00);
  8661  0062DA  C018  F003         	movff	disk_readp@start_add,Command@arg
  8662  0062DE  C019  F004         	movff	disk_readp@start_add+1,Command@arg+1
  8663  0062E2  C01A  F005         	movff	disk_readp@start_add+2,Command@arg+2
  8664  0062E6  C01B  F006         	movff	disk_readp@start_add+3,Command@arg+3
  8665  0062EA  0E00               	movlw	0
  8666  0062EC  6E07               	movwf	Command@CRCbits,c
  8667  0062EE  0E52               	movlw	82
  8668  0062F0  ECFA  F026         	call	_Command
  8669                           
  8670                           ;diskio.c: 165: proceed();
  8671  0062F4  EC79  F026         	call	_proceed	;wreg free
  8672  0062F8                     l3004:
  8673                           
  8674                           ;diskio.c: 167: buff = response();
  8675  0062F8  EC7F  F026         	call	_response	;wreg free
  8676  0062FC  6E1C               	movwf	disk_readp@buff,c
  8677                           
  8678                           ;diskio.c: 168: }while(buff!=0x00);
  8679  0062FE  661C               	tstfsz	disk_readp@buff,c
  8680  006300  D7FB               	goto	l3004
  8681                           
  8682                           ;diskio.c: 171: Delay_s(1);
  8683  006302  0E01               	movlw	1
  8684  006304  ECD0  F026         	call	_Delay_s
  8685                           
  8686                           ;diskio.c: 174: proceed();
  8687  006308  EC79  F026         	call	_proceed	;wreg free
  8688  00630C                     l3012:
  8689                           
  8690                           ;diskio.c: 177: buff = response();
  8691  00630C  EC7F  F026         	call	_response	;wreg free
  8692  006310  6E1C               	movwf	disk_readp@buff,c
  8693                           
  8694                           ;diskio.c: 178: }while(buff!=0xFE);
  8695  006312  501C               	movf	disk_readp@buff,w,c
  8696  006314  0AFE               	xorlw	254
  8697  006316  A4D8               	btfss	status,2,c
  8698  006318  D7F9               	goto	l3012
  8699                           
  8700                           ;diskio.c: 180: length = 0;
  8701  00631A  0E00               	movlw	0
  8702  00631C  6E1E               	movwf	disk_readp@length+1,c
  8703  00631E  0E00               	movlw	0
  8704  006320  6E1D               	movwf	disk_readp@length,c
  8705                           
  8706                           ;diskio.c: 182: while ( length < count )
  8707  006322  D00B               	goto	l3022
  8708  006324                     l3018:
  8709                           
  8710                           ;diskio.c: 183: {
  8711                           ;diskio.c: 184: arr[length] = response();
  8712  006324  0E00               	movlw	low disk_readp@arr
  8713  006326  241D               	addwf	disk_readp@length,w,c
  8714  006328  6ED9               	movwf	fsr2l,c
  8715  00632A  0E06               	movlw	high disk_readp@arr
  8716  00632C  201E               	addwfc	disk_readp@length+1,w,c
  8717  00632E  6EDA               	movwf	fsr2h,c
  8718  006330  EC7F  F026         	call	_response	;wreg free
  8719  006334  6EDF               	movwf	indf2,c
  8720                           
  8721                           ;diskio.c: 185: length++;
  8722  006336  4A1D               	infsnz	disk_readp@length,f,c
  8723  006338  2A1E               	incf	disk_readp@length+1,f,c
  8724  00633A                     l3022:
  8725  00633A  5011               	movf	disk_readp@count,w,c
  8726  00633C  5C1D               	subwf	disk_readp@length,w,c
  8727  00633E  5012               	movf	disk_readp@count+1,w,c
  8728  006340  581E               	subwfb	disk_readp@length+1,w,c
  8729  006342  A0D8               	btfss	status,0,c
  8730  006344  D7EF               	goto	l3018
  8731                           
  8732                           ;diskio.c: 186: }
  8733                           ;diskio.c: 188: Delay_s(1);
  8734  006346  0E01               	movlw	1
  8735  006348  ECD0  F026         	call	_Delay_s
  8736                           
  8737                           ;diskio.c: 189: dummy_clocks(8);
  8738  00634C  0E00               	movlw	0
  8739  00634E  6E05               	movwf	dummy_clocks@n+1,c
  8740  006350  0E08               	movlw	8
  8741  006352  6E04               	movwf	dummy_clocks@n,c
  8742  006354  EC2F  F027         	call	_dummy_clocks	;wreg free
  8743                           
  8744                           ;diskio.c: 191: Command(0X4C,0X00000000,0X00);
  8745  006358  0E00               	movlw	0
  8746  00635A  6E03               	movwf	Command@arg,c
  8747  00635C  0E00               	movlw	0
  8748  00635E  6E04               	movwf	Command@arg+1,c
  8749  006360  0E00               	movlw	0
  8750  006362  6E05               	movwf	Command@arg+2,c
  8751  006364  0E00               	movlw	0
  8752  006366  6E06               	movwf	Command@arg+3,c
  8753  006368  0E00               	movlw	0
  8754  00636A  6E07               	movwf	Command@CRCbits,c
  8755  00636C  0E4C               	movlw	76
  8756  00636E  ECFA  F026         	call	_Command
  8757                           
  8758                           ;diskio.c: 192: proceed();
  8759  006372  EC79  F026         	call	_proceed	;wreg free
  8760  006376                     l3028:
  8761                           
  8762                           ;diskio.c: 194: buff = response();
  8763  006376  EC7F  F026         	call	_response	;wreg free
  8764  00637A  6E1C               	movwf	disk_readp@buff,c
  8765                           
  8766                           ;diskio.c: 195: }while(buff!=0xFF);
  8767  00637C  281C               	incf	disk_readp@buff,w,c
  8768  00637E  A4D8               	btfss	status,2,c
  8769  006380  D7FA               	goto	l3028
  8770                           
  8771                           ;diskio.c: 197: length = 0;
  8772  006382  0E00               	movlw	0
  8773  006384  6E1E               	movwf	disk_readp@length+1,c
  8774  006386  0E00               	movlw	0
  8775  006388  6E1D               	movwf	disk_readp@length,c
  8776                           
  8777                           ;diskio.c: 199: while(arr[length]!='\0')
  8778  00638A  D002               	goto	l3036
  8779  00638C                     l3034:
  8780                           
  8781                           ;diskio.c: 200: {
  8782                           ;diskio.c: 202: length++;
  8783  00638C  4A1D               	infsnz	disk_readp@length,f,c
  8784  00638E  2A1E               	incf	disk_readp@length+1,f,c
  8785  006390                     l3036:
  8786  006390  0E00               	movlw	low disk_readp@arr
  8787  006392  241D               	addwf	disk_readp@length,w,c
  8788  006394  6ED9               	movwf	fsr2l,c
  8789  006396  0E06               	movlw	high disk_readp@arr
  8790  006398  201E               	addwfc	disk_readp@length+1,w,c
  8791  00639A  6EDA               	movwf	fsr2h,c
  8792  00639C  50DF               	movf	indf2,w,c
  8793  00639E  A4D8               	btfss	status,2,c
  8794  0063A0  D7F5               	goto	l3034
  8795                           
  8796                           ;diskio.c: 203: }
  8797                           ;diskio.c: 205: *rd = length;
  8798  0063A2  C009  FFD9         	movff	disk_readp@rd,fsr2l
  8799  0063A6  C00A  FFDA         	movff	disk_readp@rd+1,fsr2h
  8800  0063AA  C01D  FFDF         	movff	disk_readp@length,indf2
  8801  0063AE  D0E7               	goto	L9
  8802  0063B0                     l3046:
  8803                           
  8804                           ;diskio.c: 210: else
  8805                           ;diskio.c: 211: {
  8806                           ;diskio.c: 212: start_add = (sector*512);
  8807  0063B0  C00B  F013         	movff	disk_readp@sector,??_disk_readp
  8808  0063B4  C00C  F014         	movff	disk_readp@sector+1,??_disk_readp+1
  8809  0063B8  C00D  F015         	movff	disk_readp@sector+2,??_disk_readp+2
  8810  0063BC  C00E  F016         	movff	disk_readp@sector+3,??_disk_readp+3
  8811  0063C0  0E09               	movlw	9
  8812  0063C2                     u2495:
  8813  0063C2  90D8               	bcf	status,0,c
  8814  0063C4  3613               	rlcf	??_disk_readp,f,c
  8815  0063C6  3614               	rlcf	??_disk_readp+1,f,c
  8816  0063C8  3615               	rlcf	??_disk_readp+2,f,c
  8817  0063CA  3616               	rlcf	??_disk_readp+3,f,c
  8818  0063CC  2EE8               	decfsz	wreg,f,c
  8819  0063CE  D7F9               	goto	u2495
  8820  0063D0  C013  F018         	movff	??_disk_readp,disk_readp@start_add
  8821  0063D4  C014  F019         	movff	??_disk_readp+1,disk_readp@start_add+1
  8822  0063D8  C015  F01A         	movff	??_disk_readp+2,disk_readp@start_add+2
  8823  0063DC  C016  F01B         	movff	??_disk_readp+3,disk_readp@start_add+3
  8824                           
  8825                           ;diskio.c: 214: length = 0;
  8826  0063E0  0E00               	movlw	0
  8827  0063E2  6E1E               	movwf	disk_readp@length+1,c
  8828  0063E4  0E00               	movlw	0
  8829  0063E6  6E1D               	movwf	disk_readp@length,c
  8830                           
  8831                           ;diskio.c: 215: while(length<512)
  8832  0063E8  D00A               	goto	l3054
  8833  0063EA                     l3050:
  8834                           
  8835                           ;diskio.c: 216: {
  8836                           ;diskio.c: 217: arr[length] = 0;
  8837  0063EA  0E00               	movlw	low disk_readp@arr
  8838  0063EC  241D               	addwf	disk_readp@length,w,c
  8839  0063EE  6ED9               	movwf	fsr2l,c
  8840  0063F0  0E06               	movlw	high disk_readp@arr
  8841  0063F2  201E               	addwfc	disk_readp@length+1,w,c
  8842  0063F4  6EDA               	movwf	fsr2h,c
  8843  0063F6  0E00               	movlw	0
  8844  0063F8  6EDF               	movwf	indf2,c
  8845                           
  8846                           ;diskio.c: 218: length++;
  8847  0063FA  4A1D               	infsnz	disk_readp@length,f,c
  8848  0063FC  2A1E               	incf	disk_readp@length+1,f,c
  8849  0063FE                     l3054:
  8850  0063FE  501E               	movf	disk_readp@length+1,w,c
  8851  006400  0A80               	xorlw	128
  8852  006402  0F7E               	addlw	-130
  8853  006404  0E00               	movlw	0
  8854  006406  B4D8               	btfsc	status,2,c
  8855  006408  5C1D               	subwf	disk_readp@length,w,c
  8856  00640A  A0D8               	btfss	status,0,c
  8857  00640C  D7EE               	goto	l3050
  8858                           
  8859                           ;diskio.c: 219: }
  8860                           ;diskio.c: 221: Delay_s(1);
  8861  00640E  0E01               	movlw	1
  8862  006410  ECD0  F026         	call	_Delay_s
  8863                           
  8864                           ;diskio.c: 222: dummy_clocks(8);
  8865  006414  0E00               	movlw	0
  8866  006416  6E05               	movwf	dummy_clocks@n+1,c
  8867  006418  0E08               	movlw	8
  8868  00641A  6E04               	movwf	dummy_clocks@n,c
  8869  00641C  EC2F  F027         	call	_dummy_clocks	;wreg free
  8870                           
  8871                           ;diskio.c: 224: Command(0X51,start_add,0X00);
  8872  006420  C018  F003         	movff	disk_readp@start_add,Command@arg
  8873  006424  C019  F004         	movff	disk_readp@start_add+1,Command@arg+1
  8874  006428  C01A  F005         	movff	disk_readp@start_add+2,Command@arg+2
  8875  00642C  C01B  F006         	movff	disk_readp@start_add+3,Command@arg+3
  8876  006430  0E00               	movlw	0
  8877  006432  6E07               	movwf	Command@CRCbits,c
  8878  006434  0E51               	movlw	81
  8879  006436  ECFA  F026         	call	_Command
  8880                           
  8881                           ;diskio.c: 225: proceed();
  8882  00643A  EC79  F026         	call	_proceed	;wreg free
  8883  00643E                     l3060:
  8884                           
  8885                           ;diskio.c: 227: buff = response();
  8886  00643E  EC7F  F026         	call	_response	;wreg free
  8887  006442  6E1C               	movwf	disk_readp@buff,c
  8888                           
  8889                           ;diskio.c: 228: }while(buff!=0x00);
  8890  006444  661C               	tstfsz	disk_readp@buff,c
  8891  006446  D7FB               	goto	l3060
  8892  006448                     l3064:
  8893                           
  8894                           ;diskio.c: 230: buff = response();
  8895  006448  EC7F  F026         	call	_response	;wreg free
  8896  00644C  6E1C               	movwf	disk_readp@buff,c
  8897                           
  8898                           ;diskio.c: 231: }while(buff!=0xFE);
  8899  00644E  501C               	movf	disk_readp@buff,w,c
  8900  006450  0AFE               	xorlw	254
  8901  006452  A4D8               	btfss	status,2,c
  8902  006454  D7F9               	goto	l3064
  8903                           
  8904                           ;diskio.c: 233: length = 0;
  8905  006456  0E00               	movlw	0
  8906  006458  6E1E               	movwf	disk_readp@length+1,c
  8907  00645A  0E00               	movlw	0
  8908  00645C  6E1D               	movwf	disk_readp@length,c
  8909                           
  8910                           ;diskio.c: 234: while ( length < 512 )
  8911  00645E  D047               	goto	l3092
  8912  006460                     l3070:
  8913                           
  8914                           ;diskio.c: 237: {
  8915                           ;diskio.c: 238: arr[length] = response();
  8916  006460  0E00               	movlw	low disk_readp@arr
  8917  006462  241D               	addwf	disk_readp@length,w,c
  8918  006464  6ED9               	movwf	fsr2l,c
  8919  006466  0E06               	movlw	high disk_readp@arr
  8920  006468  201E               	addwfc	disk_readp@length+1,w,c
  8921  00646A  6EDA               	movwf	fsr2h,c
  8922  00646C  EC7F  F026         	call	_response	;wreg free
  8923  006470  6EDF               	movwf	indf2,c
  8924                           
  8925                           ;diskio.c: 239: length++;
  8926  006472  4A1D               	infsnz	disk_readp@length,f,c
  8927  006474  2A1E               	incf	disk_readp@length+1,f,c
  8928  006476                     l3074:
  8929  006476  060F               	decf	disk_readp@offset,f,c
  8930  006478  A0D8               	btfss	status,0,c
  8931  00647A  0610               	decf	disk_readp@offset+1,f,c
  8932  00647C  280F               	incf	disk_readp@offset& (0+255),w,c
  8933  00647E  B4D8               	btfsc	status,2,c
  8934  006480  2810               	incf	(disk_readp@offset+1)& (0+255),w,c
  8935  006482  B4D8               	btfsc	status,2,c
  8936  006484  D018               	goto	l3084
  8937  006486  D7EC               	goto	l3070
  8938  006488                     l3076:
  8939                           
  8940                           ;diskio.c: 242: {
  8941                           ;diskio.c: 243: *rd = response();
  8942  006488  EC7F  F026         	call	_response	;wreg free
  8943  00648C  C009  FFD9         	movff	disk_readp@rd,fsr2l
  8944  006490  C00A  FFDA         	movff	disk_readp@rd+1,fsr2h
  8945  006494  6EDF               	movwf	indf2,c
  8946                           
  8947                           ;diskio.c: 244: arr[length] = *rd;
  8948  006496  C009  FFD9         	movff	disk_readp@rd,fsr2l
  8949  00649A  C00A  FFDA         	movff	disk_readp@rd+1,fsr2h
  8950  00649E  0E00               	movlw	low disk_readp@arr
  8951  0064A0  241D               	addwf	disk_readp@length,w,c
  8952  0064A2  6EE1               	movwf	fsr1l,c
  8953  0064A4  0E06               	movlw	high disk_readp@arr
  8954  0064A6  201E               	addwfc	disk_readp@length+1,w,c
  8955  0064A8  6EE2               	movwf	fsr1h,c
  8956  0064AA  CFDF FFE7          	movff	indf2,indf1
  8957                           
  8958                           ;diskio.c: 245: rd++;
  8959  0064AE  4A09               	infsnz	disk_readp@rd,f,c
  8960  0064B0  2A0A               	incf	disk_readp@rd+1,f,c
  8961                           
  8962                           ;diskio.c: 246: length++;
  8963  0064B2  4A1D               	infsnz	disk_readp@length,f,c
  8964  0064B4  2A1E               	incf	disk_readp@length+1,f,c
  8965  0064B6                     l3084:
  8966  0064B6  0611               	decf	disk_readp@count,f,c
  8967  0064B8  A0D8               	btfss	status,0,c
  8968  0064BA  0612               	decf	disk_readp@count+1,f,c
  8969  0064BC  2811               	incf	disk_readp@count& (0+255),w,c
  8970  0064BE  B4D8               	btfsc	status,2,c
  8971  0064C0  2812               	incf	(disk_readp@count+1)& (0+255),w,c
  8972  0064C2  B4D8               	btfsc	status,2,c
  8973  0064C4  D00C               	goto	l3090
  8974  0064C6  D7E0               	goto	l3076
  8975  0064C8                     l3086:
  8976                           
  8977                           ;diskio.c: 249: {
  8978                           ;diskio.c: 250: arr[length] = response();
  8979  0064C8  0E00               	movlw	low disk_readp@arr
  8980  0064CA  241D               	addwf	disk_readp@length,w,c
  8981  0064CC  6ED9               	movwf	fsr2l,c
  8982  0064CE  0E06               	movlw	high disk_readp@arr
  8983  0064D0  201E               	addwfc	disk_readp@length+1,w,c
  8984  0064D2  6EDA               	movwf	fsr2h,c
  8985  0064D4  EC7F  F026         	call	_response	;wreg free
  8986  0064D8  6EDF               	movwf	indf2,c
  8987                           
  8988                           ;diskio.c: 251: length++;
  8989  0064DA  4A1D               	infsnz	disk_readp@length,f,c
  8990  0064DC  2A1E               	incf	disk_readp@length+1,f,c
  8991  0064DE                     l3090:
  8992  0064DE  501E               	movf	disk_readp@length+1,w,c
  8993  0064E0  0A80               	xorlw	128
  8994  0064E2  0F7E               	addlw	-130
  8995  0064E4  0E00               	movlw	0
  8996  0064E6  B4D8               	btfsc	status,2,c
  8997  0064E8  5C1D               	subwf	disk_readp@length,w,c
  8998  0064EA  A0D8               	btfss	status,0,c
  8999  0064EC  D7ED               	goto	l3086
  9000  0064EE                     l3092:
  9001  0064EE  501E               	movf	disk_readp@length+1,w,c
  9002  0064F0  0A80               	xorlw	128
  9003  0064F2  0F7E               	addlw	-130
  9004  0064F4  0E00               	movlw	0
  9005  0064F6  B4D8               	btfsc	status,2,c
  9006  0064F8  5C1D               	subwf	disk_readp@length,w,c
  9007  0064FA  A0D8               	btfss	status,0,c
  9008  0064FC  D7BC               	goto	l3074
  9009                           
  9010                           ;diskio.c: 252: }
  9011                           ;diskio.c: 253: }
  9012                           ;diskio.c: 254: Delay_s(1);
  9013  0064FE  0E01               	movlw	1
  9014  006500  ECD0  F026         	call	_Delay_s
  9015                           
  9016                           ;diskio.c: 257: Command(0X4C,0X00000000,0X00);
  9017  006504  0E00               	movlw	0
  9018  006506  6E03               	movwf	Command@arg,c
  9019  006508  0E00               	movlw	0
  9020  00650A  6E04               	movwf	Command@arg+1,c
  9021  00650C  0E00               	movlw	0
  9022  00650E  6E05               	movwf	Command@arg+2,c
  9023  006510  0E00               	movlw	0
  9024  006512  6E06               	movwf	Command@arg+3,c
  9025  006514  0E00               	movlw	0
  9026  006516  6E07               	movwf	Command@CRCbits,c
  9027  006518  0E4C               	movlw	76
  9028  00651A  ECFA  F026         	call	_Command
  9029                           
  9030                           ;diskio.c: 258: proceed();
  9031  00651E  EC79  F026         	call	_proceed	;wreg free
  9032  006522                     l3098:
  9033                           
  9034                           ;diskio.c: 260: buff = response();
  9035  006522  EC7F  F026         	call	_response	;wreg free
  9036  006526  6E1C               	movwf	disk_readp@buff,c
  9037                           
  9038                           ;diskio.c: 261: }while(buff!=0xFF);
  9039  006528  281C               	incf	disk_readp@buff,w,c
  9040  00652A  A4D8               	btfss	status,2,c
  9041  00652C  D7FA               	goto	l3098
  9042                           
  9043                           ;diskio.c: 263: length = 0;
  9044  00652E  0E00               	movlw	0
  9045  006530  6E1E               	movwf	disk_readp@length+1,c
  9046  006532  0E00               	movlw	0
  9047  006534  6E1D               	movwf	disk_readp@length,c
  9048                           
  9049                           ;diskio.c: 265: if(flag == 1){
  9050  006536  0100               	movlb	0	; () banked
  9051  006538  05F5               	decf	_flag& (0+255),w,b
  9052  00653A  11F6               	iorwf	(_flag+1)& (0+255),w,b
  9053  00653C  B4D8               	btfsc	status,2,c
  9054  00653E  D00C               	goto	l3112
  9055  006540  D015               	goto	l3114
  9056  006542                     l3108:
  9057                           
  9058                           ;diskio.c: 267: {
  9059                           ;diskio.c: 268: WriteUART(arr[length]);
  9060  006542  0E00               	movlw	low disk_readp@arr
  9061  006544  241D               	addwf	disk_readp@length,w,c
  9062  006546  6ED9               	movwf	fsr2l,c
  9063  006548  0E06               	movlw	high disk_readp@arr
  9064  00654A  201E               	addwfc	disk_readp@length+1,w,c
  9065  00654C  6EDA               	movwf	fsr2h,c
  9066  00654E  50DF               	movf	indf2,w,c
  9067  006550  EC12  F027         	call	_WriteUART
  9068                           
  9069                           ;diskio.c: 269: length++;
  9070  006554  4A1D               	infsnz	disk_readp@length,f,c
  9071  006556  2A1E               	incf	disk_readp@length+1,f,c
  9072  006558                     l3112:
  9073  006558  0E00               	movlw	low disk_readp@arr
  9074  00655A  241D               	addwf	disk_readp@length,w,c
  9075  00655C  6ED9               	movwf	fsr2l,c
  9076  00655E  0E06               	movlw	high disk_readp@arr
  9077  006560  201E               	addwfc	disk_readp@length+1,w,c
  9078  006562  6EDA               	movwf	fsr2h,c
  9079  006564  50DF               	movf	indf2,w,c
  9080  006566  B4D8               	btfsc	status,2,c
  9081  006568  D007               	goto	l3116
  9082  00656A  D7EB               	goto	l3108
  9083  00656C                     l3114:
  9084                           
  9085                           ;diskio.c: 272: else
  9086                           ;diskio.c: 273: putsUART("..");
  9087  00656C  0E7C               	movlw	high STR_30
  9088  00656E  6E06               	movwf	putsUART@data+1,c
  9089  006570  0EFC               	movlw	low STR_30
  9090  006572  6E05               	movwf	putsUART@data,c
  9091  006574  ECC4  F027         	call	_putsUART	;wreg free
  9092  006578                     l3116:
  9093                           
  9094                           ;diskio.c: 275: Delay_s(2);
  9095  006578  0E02               	movlw	2
  9096  00657A  ECD0  F026         	call	_Delay_s
  9097  00657E                     L9:
  9098                           
  9099                           ;diskio.c: 277: return RES_OK;
  9100  00657E  0E00               	movlw	0
  9101  006580  0012               	return	
  9102  006582                     __end_of_disk_readp:
  9103                           	opt stack 0
  9104                           tblptru	equ	0xFF8
  9105                           tblptrh	equ	0xFF7
  9106                           tblptrl	equ	0xFF6
  9107                           tablat	equ	0xFF5
  9108                           prodh	equ	0xFF4
  9109                           prodl	equ	0xFF3
  9110                           postinc0	equ	0xFEE
  9111                           wreg	equ	0xFE8
  9112                           indf1	equ	0xFE7
  9113                           postdec1	equ	0xFE5
  9114                           fsr1h	equ	0xFE2
  9115                           fsr1l	equ	0xFE1
  9116                           indf2	equ	0xFDF
  9117                           postinc2	equ	0xFDE
  9118                           postdec2	equ	0xFDD
  9119                           plusw2	equ	0xFDB
  9120                           fsr2h	equ	0xFDA
  9121                           fsr2l	equ	0xFD9
  9122                           status	equ	0xFD8
  9123                           
  9124 ;; *************** function _response *****************
  9125 ;; Defined at:
  9126 ;;		line 118 in file "main.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;		None
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;  buff            1    1[COMRAM] unsigned char 
  9131 ;; Return value:  Size  Location     Type
  9132 ;;                  1    wreg      unsigned char 
  9133 ;; Registers used:
  9134 ;;		wreg, status,2, cstack
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9140 ;;      Params:         0       0       0       0       0       0       0       0       0
  9141 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9142 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9143 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9144 ;;Total ram usage:        1 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    1
  9147 ;; This function calls:
  9148 ;;		_ReadSPI_
  9149 ;; This function is called by:
  9150 ;;		_reset
  9151 ;;		_disk_initialize
  9152 ;;		_disk_readp
  9153 ;;		_disk_writep
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           	psect	text23
  9158  004CFE                     __ptext23:
  9159                           	opt stack 0
  9160  004CFE                     _response:
  9161                           	opt stack 25
  9162                           
  9163                           ;main.c: 120: BYTE buff;
  9164                           ;main.c: 121: LATB4 = 0;
  9165                           
  9166                           ;incstack = 0
  9167  004CFE  988A               	bcf	3978,4,c	;volatile
  9168                           
  9169                           ;main.c: 122: buff=ReadSPI_();
  9170  004D00  EC96  F026         	call	_ReadSPI_	;wreg free
  9171  004D04  6E02               	movwf	response@buff,c
  9172                           
  9173                           ;main.c: 123: LATB4 = 1;
  9174  004D06  888A               	bsf	3978,4,c	;volatile
  9175                           
  9176                           ;main.c: 124: return buff;
  9177  004D08  5002               	movf	response@buff,w,c
  9178  004D0A  0012               	return	
  9179  004D0C                     __end_of_response:
  9180                           	opt stack 0
  9181                           tblptru	equ	0xFF8
  9182                           tblptrh	equ	0xFF7
  9183                           tblptrl	equ	0xFF6
  9184                           tablat	equ	0xFF5
  9185                           prodh	equ	0xFF4
  9186                           prodl	equ	0xFF3
  9187                           postinc0	equ	0xFEE
  9188                           wreg	equ	0xFE8
  9189                           indf1	equ	0xFE7
  9190                           postdec1	equ	0xFE5
  9191                           fsr1h	equ	0xFE2
  9192                           fsr1l	equ	0xFE1
  9193                           indf2	equ	0xFDF
  9194                           postinc2	equ	0xFDE
  9195                           postdec2	equ	0xFDD
  9196                           plusw2	equ	0xFDB
  9197                           fsr2h	equ	0xFDA
  9198                           fsr2l	equ	0xFD9
  9199                           status	equ	0xFD8
  9200                           
  9201 ;; *************** function _ReadSPI_ *****************
  9202 ;; Defined at:
  9203 ;;		line 107 in file "main.c"
  9204 ;; Parameters:    Size  Location     Type
  9205 ;;		None
  9206 ;; Auto vars:     Size  Location     Type
  9207 ;;  TempVar         1    0[COMRAM] unsigned char 
  9208 ;; Return value:  Size  Location     Type
  9209 ;;                  1    wreg      unsigned char 
  9210 ;; Registers used:
  9211 ;;		wreg, status,2
  9212 ;; Tracked objects:
  9213 ;;		On entry : 0/0
  9214 ;;		On exit  : 0/0
  9215 ;;		Unchanged: 0/0
  9216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9217 ;;      Params:         0       0       0       0       0       0       0       0       0
  9218 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9220 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9221 ;;Total ram usage:        1 bytes
  9222 ;; Hardware stack levels used:    1
  9223 ;; This function calls:
  9224 ;;		Nothing
  9225 ;; This function is called by:
  9226 ;;		_response
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           	psect	text24
  9231  004D2C                     __ptext24:
  9232                           	opt stack 0
  9233  004D2C                     _ReadSPI_:
  9234                           	opt stack 25
  9235                           
  9236                           ;main.c: 109: unsigned char TempVar;
  9237                           ;main.c: 110: TempVar = SSPBUF;
  9238                           
  9239                           ;incstack = 0
  9240  004D2C  CFC9 F001          	movff	4041,ReadSPI_@TempVar	;volatile
  9241                           
  9242                           ;main.c: 111: PIR1bits.SSPIF = 0;
  9243  004D30  969E               	bcf	3998,3,c	;volatile
  9244                           
  9245                           ;main.c: 112: SSPBUF = 0xFF;
  9246  004D32  68C9               	setf	4041,c	;volatile
  9247  004D34                     l351:
  9248  004D34  A69E               	btfss	3998,3,c	;volatile
  9249  004D36  D7FE               	goto	l351
  9250                           
  9251                           ;main.c: 115: return ( SSPBUF );
  9252  004D38  50C9               	movf	4041,w,c	;volatile
  9253  004D3A  0012               	return	
  9254  004D3C                     __end_of_ReadSPI_:
  9255                           	opt stack 0
  9256                           tblptru	equ	0xFF8
  9257                           tblptrh	equ	0xFF7
  9258                           tblptrl	equ	0xFF6
  9259                           tablat	equ	0xFF5
  9260                           prodh	equ	0xFF4
  9261                           prodl	equ	0xFF3
  9262                           postinc0	equ	0xFEE
  9263                           wreg	equ	0xFE8
  9264                           indf1	equ	0xFE7
  9265                           postdec1	equ	0xFE5
  9266                           fsr1h	equ	0xFE2
  9267                           fsr1l	equ	0xFE1
  9268                           indf2	equ	0xFDF
  9269                           postinc2	equ	0xFDE
  9270                           postdec2	equ	0xFDD
  9271                           plusw2	equ	0xFDB
  9272                           fsr2h	equ	0xFDA
  9273                           fsr2l	equ	0xFD9
  9274                           status	equ	0xFD8
  9275                           
  9276 ;; *************** function _putsUART *****************
  9277 ;; Defined at:
  9278 ;;		line 58 in file "sw_uart.c"
  9279 ;; Parameters:    Size  Location     Type
  9280 ;;  data            2    4[COMRAM] PTR unsigned char 
  9281 ;;		 -> STR_30(3), STR_29(28), STR_28(18), STR_27(11), 
  9282 ;;		 -> STR_26(10), STR_25(3), STR_24(21), STR_23(38), 
  9283 ;;		 -> STR_22(4), STR_21(39), STR_20(39), STR_19(5), 
  9284 ;;		 -> STR_18(4), STR_17(37), STR_16(4), STR_15(30), 
  9285 ;;		 -> STR_14(4), STR_13(30), STR_12(33), STR_11(4), 
  9286 ;;		 -> STR_10(34), STR_9(23), STR_7(34), STR_5(17), 
  9287 ;;		 -> STR_4(4), fileName(10), STR_3(29), STR_2(37), 
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;		None
  9290 ;; Return value:  Size  Location     Type
  9291 ;;		None               void
  9292 ;; Registers used:
  9293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9299 ;;      Params:         2       0       0       0       0       0       0       0       0
  9300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9301 ;;      Temps:          2       0       0       0       0       0       0       0       0
  9302 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9303 ;;Total ram usage:        4 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    3
  9306 ;; This function calls:
  9307 ;;		_WriteUART
  9308 ;; This function is called by:
  9309 ;;		_main
  9310 ;;		_reset
  9311 ;;		_disk_initialize
  9312 ;;		_disk_readp
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           	psect	text25
  9317  004F88                     __ptext25:
  9318                           	opt stack 0
  9319  004F88                     _putsUART:
  9320                           	opt stack 26
  9321  004F88                     l576:
  9322                           
  9323                           ;sw_uart.c: 61: {
  9324                           ;sw_uart.c: 62: WriteUART(*data);
  9325  004F88  C005  FFF6         	movff	putsUART@data,tblptrl
  9326  004F8C  C006  FFF7         	movff	putsUART@data+1,tblptrh
  9327  004F90  6AF8               	clrf	tblptru,c
  9328  004F92  0E07               	movlw	(high __ramtop+-1)
  9329  004F94  64F7               	cpfsgt	tblptrh,c
  9330  004F96  D003               	bra	u2367
  9331  004F98  0008               	tblrd		*
  9332  004F9A  50F5               	movf	tablat,w,c
  9333  004F9C  D005               	bra	u2360
  9334  004F9E                     u2367:
  9335  004F9E  CFF6 FFE9          	movff	tblptrl,fsr0l
  9336  004FA2  CFF7 FFEA          	movff	tblptrh,fsr0h
  9337  004FA6  50EF               	movf	indf0,w,c
  9338  004FA8                     u2360:
  9339  004FA8  EC12  F027         	call	_WriteUART
  9340                           
  9341                           ;sw_uart.c: 63: } while( *data++ );
  9342  004FAC  5005               	movf	putsUART@data,w,c
  9343  004FAE  6E07               	movwf	??_putsUART& (0+255),c
  9344  004FB0  5006               	movf	putsUART@data+1,w,c
  9345  004FB2  6E08               	movwf	(??_putsUART+1)& (0+255),c
  9346  004FB4  4A05               	infsnz	putsUART@data,f,c
  9347  004FB6  2A06               	incf	putsUART@data+1,f,c
  9348  004FB8  C007  FFF6         	movff	??_putsUART,tblptrl
  9349  004FBC  C008  FFF7         	movff	??_putsUART+1,tblptrh
  9350  004FC0  6AF8               	clrf	tblptru,c
  9351  004FC2  0E07               	movlw	(high __ramtop+-1)
  9352  004FC4  64F7               	cpfsgt	tblptrh,c
  9353  004FC6  D003               	bra	u2377
  9354  004FC8  0008               	tblrd		*
  9355  004FCA  50F5               	movf	tablat,w,c
  9356  004FCC  D005               	bra	u2370
  9357  004FCE                     u2377:
  9358  004FCE  CFF6 FFE9          	movff	tblptrl,fsr0l
  9359  004FD2  CFF7 FFEA          	movff	tblptrh,fsr0h
  9360  004FD6  50EF               	movf	indf0,w,c
  9361  004FD8                     u2370:
  9362  004FD8  0900               	iorlw	0
  9363  004FDA  B4D8               	btfsc	status,2,c
  9364  004FDC  0012               	return	
  9365  004FDE  D7D4               	goto	l576
  9366  004FE0                     __end_of_putsUART:
  9367                           	opt stack 0
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           indf0	equ	0xFEF
  9375                           postinc0	equ	0xFEE
  9376                           fsr0h	equ	0xFEA
  9377                           fsr0l	equ	0xFE9
  9378                           wreg	equ	0xFE8
  9379                           indf1	equ	0xFE7
  9380                           postdec1	equ	0xFE5
  9381                           fsr1h	equ	0xFE2
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           plusw2	equ	0xFDB
  9387                           fsr2h	equ	0xFDA
  9388                           fsr2l	equ	0xFD9
  9389                           status	equ	0xFD8
  9390                           
  9391 ;; *************** function _WriteUART *****************
  9392 ;; Defined at:
  9393 ;;		line 82 in file "sw_uart.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;  uartdata        1    wreg     unsigned char 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;  uartdata        1    2[COMRAM] unsigned char 
  9398 ;;  bitcount        1    3[COMRAM] unsigned char 
  9399 ;; Return value:  Size  Location     Type
  9400 ;;		None               void
  9401 ;; Registers used:
  9402 ;;		wreg, status,2, status,0, cstack
  9403 ;; Tracked objects:
  9404 ;;		On entry : 0/0
  9405 ;;		On exit  : 0/0
  9406 ;;		Unchanged: 0/0
  9407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9408 ;;      Params:         0       0       0       0       0       0       0       0       0
  9409 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9410 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9411 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9412 ;;Total ram usage:        3 bytes
  9413 ;; Hardware stack levels used:    1
  9414 ;; Hardware stack levels required when called:    2
  9415 ;; This function calls:
  9416 ;;		_DelayTXBitUART
  9417 ;; This function is called by:
  9418 ;;		_main
  9419 ;;		_disk_readp
  9420 ;;		_putsUART
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           	psect	text26
  9425  004E24                     __ptext26:
  9426                           	opt stack 0
  9427  004E24                     _WriteUART:
  9428                           	opt stack 26
  9429                           
  9430                           ;incstack = 0
  9431                           ;WriteUART@uartdata stored from wreg
  9432  004E24  6E03               	movwf	WriteUART@uartdata,c
  9433                           
  9434                           ;sw_uart.c: 84: unsigned char bitcount = 8;
  9435  004E26  0E08               	movlw	8
  9436  004E28  6E04               	movwf	WriteUART@bitcount,c
  9437                           
  9438                           ;sw_uart.c: 87: PORTDbits.RD4 = 0;
  9439  004E2A  9883               	bcf	3971,4,c	;volatile
  9440                           
  9441                           ;sw_uart.c: 88: DelayTXBitUART();
  9442  004E2C  ECC3  F026         	call	_DelayTXBitUART	;wreg free
  9443                           
  9444                           ;sw_uart.c: 90: while (bitcount--){
  9445  004E30  D00E               	goto	l2918
  9446  004E32                     l2912:
  9447                           
  9448                           ;sw_uart.c: 92: PORTDbits.RD4 = (uartdata&0x01);
  9449  004E32  C003  F002         	movff	WriteUART@uartdata,??_WriteUART
  9450  004E36  0E01               	movlw	1
  9451  004E38  1602               	andwf	??_WriteUART,f,c
  9452  004E3A  3A02               	swapf	??_WriteUART,f,c
  9453  004E3C  5083               	movf	3971,w,c	;volatile
  9454  004E3E  1802               	xorwf	??_WriteUART,w,c
  9455  004E40  0BEF               	andlw	-17
  9456  004E42  1802               	xorwf	??_WriteUART,w,c
  9457  004E44  6E83               	movwf	3971,c	;volatile
  9458                           
  9459                           ;sw_uart.c: 93: DelayTXBitUART();
  9460  004E46  ECC3  F026         	call	_DelayTXBitUART	;wreg free
  9461                           
  9462                           ;sw_uart.c: 94: uartdata >>= 1;
  9463  004E4A  90D8               	bcf	status,0,c
  9464  004E4C  3203               	rrcf	WriteUART@uartdata,f,c
  9465  004E4E                     l2918:
  9466  004E4E  0604               	decf	WriteUART@bitcount,f,c
  9467  004E50  2804               	incf	WriteUART@bitcount& (0+255),w,c
  9468  004E52  A4D8               	btfss	status,2,c
  9469  004E54  D7EE               	goto	l2912
  9470                           
  9471                           ;sw_uart.c: 95: }
  9472                           ;sw_uart.c: 98: PORTDbits.RD4 = 1;
  9473  004E56  8883               	bsf	3971,4,c	;volatile
  9474                           
  9475                           ;sw_uart.c: 99: DelayTXBitUART();
  9476  004E58  ECC3  F026         	call	_DelayTXBitUART	;wreg free
  9477  004E5C  0012               	return	
  9478  004E5E                     __end_of_WriteUART:
  9479                           	opt stack 0
  9480                           tblptru	equ	0xFF8
  9481                           tblptrh	equ	0xFF7
  9482                           tblptrl	equ	0xFF6
  9483                           tablat	equ	0xFF5
  9484                           prodh	equ	0xFF4
  9485                           prodl	equ	0xFF3
  9486                           indf0	equ	0xFEF
  9487                           postinc0	equ	0xFEE
  9488                           fsr0h	equ	0xFEA
  9489                           fsr0l	equ	0xFE9
  9490                           wreg	equ	0xFE8
  9491                           indf1	equ	0xFE7
  9492                           postdec1	equ	0xFE5
  9493                           fsr1h	equ	0xFE2
  9494                           fsr1l	equ	0xFE1
  9495                           indf2	equ	0xFDF
  9496                           postinc2	equ	0xFDE
  9497                           postdec2	equ	0xFDD
  9498                           plusw2	equ	0xFDB
  9499                           fsr2h	equ	0xFDA
  9500                           fsr2l	equ	0xFD9
  9501                           status	equ	0xFD8
  9502                           
  9503 ;; *************** function _DelayTXBitUART *****************
  9504 ;; Defined at:
  9505 ;;		line 23 in file "sw_uart.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;		None
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;		None
  9510 ;; Return value:  Size  Location     Type
  9511 ;;		None               void
  9512 ;; Registers used:
  9513 ;;		wreg, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9519 ;;      Params:         0       0       0       0       0       0       0       0       0
  9520 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9521 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9522 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9523 ;;Total ram usage:        0 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    1
  9526 ;; This function calls:
  9527 ;;		_Delay100TCYx
  9528 ;; This function is called by:
  9529 ;;		_WriteUART
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           	psect	text27
  9534  004D86                     __ptext27:
  9535                           	opt stack 0
  9536  004D86                     _DelayTXBitUART:
  9537                           	opt stack 26
  9538                           
  9539                           ;sw_uart.c: 25: Delay100TCYx( 5 );
  9540                           
  9541                           ;incstack = 0
  9542  004D86  0E05               	movlw	5
  9543  004D88  EC8E  F026         	call	_Delay100TCYx
  9544                           
  9545                           ;sw_uart.c: 27: _delay(1); _delay(1); _delay(1); _delay(1); _delay(1);
  9546  004D8C  F000               	nop	
  9547  004D8E  F000               	nop	
  9548  004D90  F000               	nop	
  9549  004D92  F000               	nop	
  9550  004D94  F000               	nop	
  9551                           
  9552                           ;sw_uart.c: 28: _delay(1); _delay(1); _delay(1); _delay(1);
  9553  004D96  F000               	nop	
  9554  004D98  F000               	nop	
  9555  004D9A  F000               	nop	
  9556  004D9C  F000               	nop	
  9557  004D9E  0012               	return	
  9558  004DA0                     __end_of_DelayTXBitUART:
  9559                           	opt stack 0
  9560                           tblptru	equ	0xFF8
  9561                           tblptrh	equ	0xFF7
  9562                           tblptrl	equ	0xFF6
  9563                           tablat	equ	0xFF5
  9564                           prodh	equ	0xFF4
  9565                           prodl	equ	0xFF3
  9566                           indf0	equ	0xFEF
  9567                           postinc0	equ	0xFEE
  9568                           fsr0h	equ	0xFEA
  9569                           fsr0l	equ	0xFE9
  9570                           wreg	equ	0xFE8
  9571                           indf1	equ	0xFE7
  9572                           postdec1	equ	0xFE5
  9573                           fsr1h	equ	0xFE2
  9574                           fsr1l	equ	0xFE1
  9575                           indf2	equ	0xFDF
  9576                           postinc2	equ	0xFDE
  9577                           postdec2	equ	0xFDD
  9578                           plusw2	equ	0xFDB
  9579                           fsr2h	equ	0xFDA
  9580                           fsr2l	equ	0xFD9
  9581                           status	equ	0xFD8
  9582                           
  9583 ;; *************** function _Delay100TCYx *****************
  9584 ;; Defined at:
  9585 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d100tcyx.c"
  9586 ;; Parameters:    Size  Location     Type
  9587 ;;  unit            1    wreg     unsigned char 
  9588 ;; Auto vars:     Size  Location     Type
  9589 ;;  unit            1    0[COMRAM] unsigned char 
  9590 ;; Return value:  Size  Location     Type
  9591 ;;		None               void
  9592 ;; Registers used:
  9593 ;;		wreg
  9594 ;; Tracked objects:
  9595 ;;		On entry : 0/0
  9596 ;;		On exit  : 0/0
  9597 ;;		Unchanged: 0/0
  9598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9599 ;;      Params:         0       0       0       0       0       0       0       0       0
  9600 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9601 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9602 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9603 ;;Total ram usage:        1 bytes
  9604 ;; Hardware stack levels used:    1
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_DelayTXBitUART
  9609 ;;		_DelayRXHalfBitUART
  9610 ;;		_DelayRXBitUART
  9611 ;; This function uses a non-reentrant model
  9612 ;;
  9613                           
  9614                           	psect	text28
  9615  004D1C                     __ptext28:
  9616                           	opt stack 0
  9617  004D1C                     _Delay100TCYx:
  9618                           	opt stack 26
  9619                           
  9620                           ;incstack = 0
  9621                           ;Delay100TCYx@unit stored from wreg
  9622  004D1C  6E01               	movwf	Delay100TCYx@unit,c
  9623  004D1E                     l870:
  9624  004D1E  0E21               	movlw	33
  9625  004D20                     u4537:
  9626  004D20  2EE8               	decfsz	wreg,f,c
  9627  004D22  D7FE               	goto	u4537
  9628  004D24  F000               	nop	
  9629  004D26  2E01               	decfsz	Delay100TCYx@unit,f,c
  9630  004D28  D7FA               	goto	l870
  9631  004D2A  0012               	return	
  9632  004D2C                     __end_of_Delay100TCYx:
  9633                           	opt stack 0
  9634                           tblptru	equ	0xFF8
  9635                           tblptrh	equ	0xFF7
  9636                           tblptrl	equ	0xFF6
  9637                           tablat	equ	0xFF5
  9638                           prodh	equ	0xFF4
  9639                           prodl	equ	0xFF3
  9640                           indf0	equ	0xFEF
  9641                           postinc0	equ	0xFEE
  9642                           fsr0h	equ	0xFEA
  9643                           fsr0l	equ	0xFE9
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postdec1	equ	0xFE5
  9647                           fsr1h	equ	0xFE2
  9648                           fsr1l	equ	0xFE1
  9649                           indf2	equ	0xFDF
  9650                           postinc2	equ	0xFDE
  9651                           postdec2	equ	0xFDD
  9652                           plusw2	equ	0xFDB
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function _proceed *****************
  9658 ;; Defined at:
  9659 ;;		line 100 in file "main.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;		None
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;		None
  9664 ;; Return value:  Size  Location     Type
  9665 ;;		None               void
  9666 ;; Registers used:
  9667 ;;		wreg, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9673 ;;      Params:         0       0       0       0       0       0       0       0       0
  9674 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9675 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9676 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9677 ;;Total ram usage:        0 bytes
  9678 ;; Hardware stack levels used:    1
  9679 ;; Hardware stack levels required when called:    1
  9680 ;; This function calls:
  9681 ;;		_WriteSPI
  9682 ;; This function is called by:
  9683 ;;		_main
  9684 ;;		_reset
  9685 ;;		_disk_initialize
  9686 ;;		_disk_readp
  9687 ;;		_disk_writep
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           	psect	text29
  9692  004CF2                     __ptext29:
  9693                           	opt stack 0
  9694  004CF2                     _proceed:
  9695                           	opt stack 28
  9696                           
  9697                           ;main.c: 102: LATB4 = 0;
  9698                           
  9699                           ;incstack = 0
  9700  004CF2  988A               	bcf	3978,4,c	;volatile
  9701                           
  9702                           ;main.c: 103: WriteSPI(0XFF);
  9703  004CF4  0EFF               	movlw	255
  9704  004CF6  ECAA  F026         	call	_WriteSPI
  9705                           
  9706                           ;main.c: 104: LATB4 = 1;
  9707  004CFA  888A               	bsf	3978,4,c	;volatile
  9708  004CFC  0012               	return	
  9709  004CFE                     __end_of_proceed:
  9710                           	opt stack 0
  9711                           tblptru	equ	0xFF8
  9712                           tblptrh	equ	0xFF7
  9713                           tblptrl	equ	0xFF6
  9714                           tablat	equ	0xFF5
  9715                           prodh	equ	0xFF4
  9716                           prodl	equ	0xFF3
  9717                           indf0	equ	0xFEF
  9718                           postinc0	equ	0xFEE
  9719                           fsr0h	equ	0xFEA
  9720                           fsr0l	equ	0xFE9
  9721                           wreg	equ	0xFE8
  9722                           indf1	equ	0xFE7
  9723                           postdec1	equ	0xFE5
  9724                           fsr1h	equ	0xFE2
  9725                           fsr1l	equ	0xFE1
  9726                           indf2	equ	0xFDF
  9727                           postinc2	equ	0xFDE
  9728                           postdec2	equ	0xFDD
  9729                           plusw2	equ	0xFDB
  9730                           fsr2h	equ	0xFDA
  9731                           fsr2l	equ	0xFD9
  9732                           status	equ	0xFD8
  9733                           
  9734 ;; *************** function _dummy_clocks *****************
  9735 ;; Defined at:
  9736 ;;		line 87 in file "main.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;  n               2    3[COMRAM] int 
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;  i               2    6[COMRAM] int 
  9741 ;; Return value:  Size  Location     Type
  9742 ;;		None               void
  9743 ;; Registers used:
  9744 ;;		wreg, status,2, status,0, cstack
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9750 ;;      Params:         2       0       0       0       0       0       0       0       0
  9751 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9752 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9753 ;;      Totals:         5       0       0       0       0       0       0       0       0
  9754 ;;Total ram usage:        5 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    2
  9757 ;; This function calls:
  9758 ;;		_WriteSPI
  9759 ;;		_delay_ms
  9760 ;; This function is called by:
  9761 ;;		_reset
  9762 ;;		_disk_initialize
  9763 ;;		_disk_readp
  9764 ;;		_disk_writep
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           	psect	text30
  9769  004E5E                     __ptext30:
  9770                           	opt stack 0
  9771  004E5E                     _dummy_clocks:
  9772                           	opt stack 24
  9773                           
  9774                           ;main.c: 89: int i = 0;
  9775                           
  9776                           ;incstack = 0
  9777  004E5E  0E00               	movlw	0
  9778  004E60  6E08               	movwf	dummy_clocks@i+1,c
  9779  004E62  0E00               	movlw	0
  9780  004E64  6E07               	movwf	dummy_clocks@i,c
  9781                           
  9782                           ;main.c: 90: delay_ms(1);
  9783  004E66  0E01               	movlw	1
  9784  004E68  ECB6  F026         	call	_delay_ms
  9785                           
  9786                           ;main.c: 91: LATB0 = 1;
  9787  004E6C  808A               	bsf	3978,0,c	;volatile
  9788                           
  9789                           ;main.c: 92: for(i=0;i<n;i++)
  9790  004E6E  0E00               	movlw	0
  9791  004E70  6E08               	movwf	dummy_clocks@i+1,c
  9792  004E72  0E00               	movlw	0
  9793  004E74  6E07               	movwf	dummy_clocks@i,c
  9794  004E76  D007               	goto	l2950
  9795  004E78                     l343:
  9796                           
  9797                           ;main.c: 93: {
  9798                           ;main.c: 94: LATB4 = 1;
  9799  004E78  888A               	bsf	3978,4,c	;volatile
  9800                           
  9801                           ;main.c: 95: WriteSPI(0XFF);
  9802  004E7A  0EFF               	movlw	255
  9803  004E7C  ECAA  F026         	call	_WriteSPI
  9804                           
  9805                           ;main.c: 96: LATB4 = 0;
  9806  004E80  988A               	bcf	3978,4,c	;volatile
  9807  004E82  4A07               	infsnz	dummy_clocks@i,f,c
  9808  004E84  2A08               	incf	dummy_clocks@i+1,f,c
  9809  004E86                     l2950:
  9810  004E86  5008               	movf	dummy_clocks@i+1,w,c
  9811  004E88  0A80               	xorlw	128
  9812  004E8A  6E06               	movwf	??_dummy_clocks& (0+255),c
  9813  004E8C  5004               	movf	dummy_clocks@n,w,c
  9814  004E8E  5C07               	subwf	dummy_clocks@i,w,c
  9815  004E90  5005               	movf	dummy_clocks@n+1,w,c
  9816  004E92  0A80               	xorlw	128
  9817  004E94  5806               	subwfb	??_dummy_clocks& (0+255),w,c
  9818  004E96  B0D8               	btfsc	status,0,c
  9819  004E98  0012               	return	
  9820  004E9A  D7EE               	goto	l343
  9821  004E9C                     __end_of_dummy_clocks:
  9822                           	opt stack 0
  9823                           tblptru	equ	0xFF8
  9824                           tblptrh	equ	0xFF7
  9825                           tblptrl	equ	0xFF6
  9826                           tablat	equ	0xFF5
  9827                           prodh	equ	0xFF4
  9828                           prodl	equ	0xFF3
  9829                           indf0	equ	0xFEF
  9830                           postinc0	equ	0xFEE
  9831                           fsr0h	equ	0xFEA
  9832                           fsr0l	equ	0xFE9
  9833                           wreg	equ	0xFE8
  9834                           indf1	equ	0xFE7
  9835                           postdec1	equ	0xFE5
  9836                           fsr1h	equ	0xFE2
  9837                           fsr1l	equ	0xFE1
  9838                           indf2	equ	0xFDF
  9839                           postinc2	equ	0xFDE
  9840                           postdec2	equ	0xFDD
  9841                           plusw2	equ	0xFDB
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function _WriteSPI *****************
  9847 ;; Defined at:
  9848 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi_writ.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  data_out        1    wreg     unsigned char 
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;  data_out        1    1[COMRAM] unsigned char 
  9853 ;;  TempVar         1    0[COMRAM] unsigned char 
  9854 ;; Return value:  Size  Location     Type
  9855 ;;                  1    wreg      char 
  9856 ;; Registers used:
  9857 ;;		wreg
  9858 ;; Tracked objects:
  9859 ;;		On entry : 0/0
  9860 ;;		On exit  : 0/0
  9861 ;;		Unchanged: 0/0
  9862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9863 ;;      Params:         0       0       0       0       0       0       0       0       0
  9864 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9866 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9867 ;;Total ram usage:        2 bytes
  9868 ;; Hardware stack levels used:    1
  9869 ;; This function calls:
  9870 ;;		Nothing
  9871 ;; This function is called by:
  9872 ;;		_dummy_clocks
  9873 ;;		_proceed
  9874 ;; This function uses a non-reentrant model
  9875 ;;
  9876                           
  9877                           	psect	text31
  9878  004D54                     __ptext31:
  9879                           	opt stack 0
  9880  004D54                     _WriteSPI:
  9881                           	opt stack 28
  9882                           
  9883                           ;incstack = 0
  9884                           ;WriteSPI@data_out stored from wreg
  9885  004D54  6E02               	movwf	WriteSPI@data_out,c
  9886  004D56  CFC9 F001          	movff	4041,WriteSPI@TempVar	;volatile
  9887  004D5A  969E               	bcf	3998,3,c	;volatile
  9888  004D5C  9EC6               	bcf	4038,7,c	;volatile
  9889  004D5E  C002  FFC9         	movff	WriteSPI@data_out,4041	;volatile
  9890  004D62  BEC6               	btfsc	4038,7,c	;volatile
  9891  004D64  D002               	goto	l640
  9892  004D66                     l642:
  9893  004D66  A69E               	btfss	3998,3,c	;volatile
  9894  004D68  D7FE               	goto	l642
  9895  004D6A                     l640:
  9896  004D6A  0012               	return	
  9897  004D6C                     __end_of_WriteSPI:
  9898                           	opt stack 0
  9899                           tblptru	equ	0xFF8
  9900                           tblptrh	equ	0xFF7
  9901                           tblptrl	equ	0xFF6
  9902                           tablat	equ	0xFF5
  9903                           prodh	equ	0xFF4
  9904                           prodl	equ	0xFF3
  9905                           indf0	equ	0xFEF
  9906                           postinc0	equ	0xFEE
  9907                           fsr0h	equ	0xFEA
  9908                           fsr0l	equ	0xFE9
  9909                           wreg	equ	0xFE8
  9910                           indf1	equ	0xFE7
  9911                           postdec1	equ	0xFE5
  9912                           fsr1h	equ	0xFE2
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           plusw2	equ	0xFDB
  9918                           fsr2h	equ	0xFDA
  9919                           fsr2l	equ	0xFD9
  9920                           status	equ	0xFD8
  9921                           
  9922 ;; *************** function _Delay_s *****************
  9923 ;; Defined at:
  9924 ;;		line 44 in file "delay.c"
  9925 ;; Parameters:    Size  Location     Type
  9926 ;;  t               1    wreg     unsigned char 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  t               1    3[COMRAM] unsigned char 
  9929 ;;  j               1    5[COMRAM] unsigned char 
  9930 ;;  i               1    4[COMRAM] unsigned char 
  9931 ;; Return value:  Size  Location     Type
  9932 ;;		None               void
  9933 ;; Registers used:
  9934 ;;		wreg, status,2, status,0, cstack
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9940 ;;      Params:         0       0       0       0       0       0       0       0       0
  9941 ;;      Locals:         3       0       0       0       0       0       0       0       0
  9942 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9943 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9944 ;;Total ram usage:        3 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    2
  9947 ;; This function calls:
  9948 ;;		_delay_ms
  9949 ;; This function is called by:
  9950 ;;		_reset
  9951 ;;		_disk_initialize
  9952 ;;		_disk_readp
  9953 ;;		_disk_writep
  9954 ;; This function uses a non-reentrant model
  9955 ;;
  9956                           
  9957                           	psect	text32
  9958  004DA0                     __ptext32:
  9959                           	opt stack 0
  9960  004DA0                     _Delay_s:
  9961                           	opt stack 24
  9962                           
  9963                           ;incstack = 0
  9964                           ;Delay_s@t stored from wreg
  9965  004DA0  6E04               	movwf	Delay_s@t,c
  9966                           
  9967                           ;delay.c: 46: unsigned char i,j;
  9968                           ;delay.c: 47: for(i=0;i<t;i++)
  9969  004DA2  0E00               	movlw	0
  9970  004DA4  6E05               	movwf	Delay_s@i,c
  9971  004DA6  D00B               	goto	l2988
  9972  004DA8                     l2974:
  9973                           
  9974                           ;delay.c: 48: for(j=0;j<10;j++)
  9975  004DA8  0E00               	movlw	0
  9976  004DAA  6E06               	movwf	Delay_s@j,c
  9977  004DAC  D004               	goto	L10
  9978  004DAE                     l2980:
  9979                           
  9980                           ;delay.c: 49: delay_ms(100);
  9981  004DAE  0E64               	movlw	100
  9982  004DB0  ECB6  F026         	call	_delay_ms
  9983  004DB4  2A06               	incf	Delay_s@j,f,c
  9984  004DB6                     L10:
  9985  004DB6  0E09               	movlw	9
  9986  004DB8  6406               	cpfsgt	Delay_s@j,c
  9987  004DBA  D7F9               	goto	l2980
  9988  004DBC  2A05               	incf	Delay_s@i,f,c
  9989  004DBE                     l2988:
  9990  004DBE  5004               	movf	Delay_s@t,w,c
  9991  004DC0  5C05               	subwf	Delay_s@i,w,c
  9992  004DC2  B0D8               	btfsc	status,0,c
  9993  004DC4  0012               	return	
  9994  004DC6  D7F0               	goto	l2974
  9995  004DC8                     __end_of_Delay_s:
  9996                           	opt stack 0
  9997                           tblptru	equ	0xFF8
  9998                           tblptrh	equ	0xFF7
  9999                           tblptrl	equ	0xFF6
 10000                           tablat	equ	0xFF5
 10001                           prodh	equ	0xFF4
 10002                           prodl	equ	0xFF3
 10003                           indf0	equ	0xFEF
 10004                           postinc0	equ	0xFEE
 10005                           fsr0h	equ	0xFEA
 10006                           fsr0l	equ	0xFE9
 10007                           wreg	equ	0xFE8
 10008                           indf1	equ	0xFE7
 10009                           postdec1	equ	0xFE5
 10010                           fsr1h	equ	0xFE2
 10011                           fsr1l	equ	0xFE1
 10012                           indf2	equ	0xFDF
 10013                           postinc2	equ	0xFDE
 10014                           postdec2	equ	0xFDD
 10015                           plusw2	equ	0xFDB
 10016                           fsr2h	equ	0xFDA
 10017                           fsr2l	equ	0xFD9
 10018                           status	equ	0xFD8
 10019                           
 10020 ;; *************** function _delay_ms *****************
 10021 ;; Defined at:
 10022 ;;		line 33 in file "delay.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;  t               1    wreg     unsigned char 
 10025 ;; Auto vars:     Size  Location     Type
 10026 ;;  t               1    1[COMRAM] unsigned char 
 10027 ;;  i               1    2[COMRAM] unsigned char 
 10028 ;; Return value:  Size  Location     Type
 10029 ;;		None               void
 10030 ;; Registers used:
 10031 ;;		wreg, status,2, status,0, cstack
 10032 ;; Tracked objects:
 10033 ;;		On entry : 0/0
 10034 ;;		On exit  : 0/0
 10035 ;;		Unchanged: 0/0
 10036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10037 ;;      Params:         0       0       0       0       0       0       0       0       0
 10038 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10039 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10040 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10041 ;;Total ram usage:        2 bytes
 10042 ;; Hardware stack levels used:    1
 10043 ;; Hardware stack levels required when called:    1
 10044 ;; This function calls:
 10045 ;;		_Delay1KTCYx
 10046 ;; This function is called by:
 10047 ;;		_dummy_clocks
 10048 ;;		_disk_initialize
 10049 ;;		_Delay_s
 10050 ;; This function uses a non-reentrant model
 10051 ;;
 10052                           
 10053                           	psect	text33
 10054  004D6C                     __ptext33:
 10055                           	opt stack 0
 10056  004D6C                     _delay_ms:
 10057                           	opt stack 24
 10058                           
 10059                           ;incstack = 0
 10060                           ;delay_ms@t stored from wreg
 10061  004D6C  6E02               	movwf	delay_ms@t,c
 10062                           
 10063                           ;delay.c: 35: unsigned char i;
 10064                           ;delay.c: 36: for (i=0;i<=t;i++)
 10065  004D6E  0E00               	movlw	0
 10066  004D70  6E03               	movwf	delay_ms@i,c
 10067  004D72  D004               	goto	l2888
 10068  004D74                     l2884:
 10069                           
 10070                           ;delay.c: 37: Delay1KTCYx(5);
 10071  004D74  0E05               	movlw	5
 10072  004D76  EC86  F026         	call	_Delay1KTCYx
 10073  004D7A  2A03               	incf	delay_ms@i,f,c
 10074  004D7C                     l2888:
 10075  004D7C  5003               	movf	delay_ms@i,w,c
 10076  004D7E  5C02               	subwf	delay_ms@t,w,c
 10077  004D80  A0D8               	btfss	status,0,c
 10078                           
 10079                           ;delay.c: 41: return;
 10080  004D82  0012               	return	
 10081  004D84  D7F7               	goto	l2884
 10082  004D86                     __end_of_delay_ms:
 10083                           	opt stack 0
 10084                           tblptru	equ	0xFF8
 10085                           tblptrh	equ	0xFF7
 10086                           tblptrl	equ	0xFF6
 10087                           tablat	equ	0xFF5
 10088                           prodh	equ	0xFF4
 10089                           prodl	equ	0xFF3
 10090                           indf0	equ	0xFEF
 10091                           postinc0	equ	0xFEE
 10092                           fsr0h	equ	0xFEA
 10093                           fsr0l	equ	0xFE9
 10094                           wreg	equ	0xFE8
 10095                           indf1	equ	0xFE7
 10096                           postdec1	equ	0xFE5
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           plusw2	equ	0xFDB
 10103                           fsr2h	equ	0xFDA
 10104                           fsr2l	equ	0xFD9
 10105                           status	equ	0xFD8
 10106                           
 10107 ;; *************** function _Delay1KTCYx *****************
 10108 ;; Defined at:
 10109 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d1ktcyx.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;  unit            1    wreg     unsigned char 
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;  unit            1    0[COMRAM] unsigned char 
 10114 ;; Return value:  Size  Location     Type
 10115 ;;		None               void
 10116 ;; Registers used:
 10117 ;;		wreg
 10118 ;; Tracked objects:
 10119 ;;		On entry : 0/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10123 ;;      Params:         0       0       0       0       0       0       0       0       0
 10124 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10125 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10126 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10127 ;;Total ram usage:        1 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; This function calls:
 10130 ;;		Nothing
 10131 ;; This function is called by:
 10132 ;;		_delay_ms
 10133 ;;		_DelayPORXLCD
 10134 ;;		_DelayXLCD
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           	psect	text34
 10139  004D0C                     __ptext34:
 10140                           	opt stack 0
 10141  004D0C                     _Delay1KTCYx:
 10142                           	opt stack 24
 10143                           
 10144                           ;incstack = 0
 10145                           ;Delay1KTCYx@unit stored from wreg
 10146  004D0C  6E01               	movwf	Delay1KTCYx@unit,c
 10147  004D0E                     l891:
 10148  004D0E  0EFA               	movlw	250
 10149  004D10                     u4547:
 10150  004D10  F000               	nop	
 10151  004D12  2EE8               	decfsz	wreg,f,c
 10152  004D14  D7FD               	goto	u4547
 10153  004D16  2E01               	decfsz	Delay1KTCYx@unit,f,c
 10154  004D18  D7FA               	goto	l891
 10155  004D1A  0012               	return	
 10156  004D1C                     __end_of_Delay1KTCYx:
 10157                           	opt stack 0
 10158                           tblptru	equ	0xFF8
 10159                           tblptrh	equ	0xFF7
 10160                           tblptrl	equ	0xFF6
 10161                           tablat	equ	0xFF5
 10162                           prodh	equ	0xFF4
 10163                           prodl	equ	0xFF3
 10164                           indf0	equ	0xFEF
 10165                           postinc0	equ	0xFEE
 10166                           fsr0h	equ	0xFEA
 10167                           fsr0l	equ	0xFE9
 10168                           wreg	equ	0xFE8
 10169                           indf1	equ	0xFE7
 10170                           postdec1	equ	0xFE5
 10171                           fsr1h	equ	0xFE2
 10172                           fsr1l	equ	0xFE1
 10173                           indf2	equ	0xFDF
 10174                           postinc2	equ	0xFDE
 10175                           postdec2	equ	0xFDD
 10176                           plusw2	equ	0xFDB
 10177                           fsr2h	equ	0xFDA
 10178                           fsr2l	equ	0xFD9
 10179                           status	equ	0xFD8
 10180                           
 10181 ;; *************** function _Command *****************
 10182 ;; Defined at:
 10183 ;;		line 76 in file "main.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;  cmd             1    wreg     unsigned char 
 10186 ;;  arg             4    2[COMRAM] unsigned long 
 10187 ;;  CRCbits         1    6[COMRAM] unsigned char 
 10188 ;; Auto vars:     Size  Location     Type
 10189 ;;  cmd             1    7[COMRAM] unsigned char 
 10190 ;; Return value:  Size  Location     Type
 10191 ;;		None               void
 10192 ;; Registers used:
 10193 ;;		wreg, status,2, status,0, cstack
 10194 ;; Tracked objects:
 10195 ;;		On entry : 0/0
 10196 ;;		On exit  : 0/0
 10197 ;;		Unchanged: 0/0
 10198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10199 ;;      Params:         5       0       0       0       0       0       0       0       0
 10200 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10201 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10202 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10203 ;;Total ram usage:        6 bytes
 10204 ;; Hardware stack levels used:    1
 10205 ;; Hardware stack levels required when called:    1
 10206 ;; This function calls:
 10207 ;;		_WriteSPI_
 10208 ;; This function is called by:
 10209 ;;		_reset
 10210 ;;		_disk_initialize
 10211 ;;		_disk_readp
 10212 ;;		_disk_writep
 10213 ;; This function uses a non-reentrant model
 10214 ;;
 10215                           
 10216                           	psect	text35
 10217  004DF4                     __ptext35:
 10218                           	opt stack 0
 10219  004DF4                     _Command:
 10220                           	opt stack 25
 10221                           
 10222                           ;incstack = 0
 10223                           ;Command@cmd stored from wreg
 10224  004DF4  6E08               	movwf	Command@cmd,c
 10225                           
 10226                           ;main.c: 78: WriteSPI_(0xff);
 10227  004DF6  0EFF               	movlw	255
 10228  004DF8  EC9E  F026         	call	_WriteSPI_
 10229                           
 10230                           ;main.c: 79: WriteSPI_(0b01000000 | cmd);
 10231  004DFC  5008               	movf	Command@cmd,w,c
 10232  004DFE  0940               	iorlw	64
 10233  004E00  EC9E  F026         	call	_WriteSPI_
 10234                           
 10235                           ;main.c: 80: WriteSPI_((unsigned char) (arg >> 24));
 10236  004E04  5006               	movf	Command@arg+3,w,c
 10237  004E06  EC9E  F026         	call	_WriteSPI_
 10238                           
 10239                           ;main.c: 81: WriteSPI_((unsigned char) (arg >> 16));
 10240  004E0A  5005               	movf	Command@arg+2,w,c
 10241  004E0C  EC9E  F026         	call	_WriteSPI_
 10242                           
 10243                           ;main.c: 82: WriteSPI_((unsigned char) (arg >> 8));
 10244  004E10  5004               	movf	Command@arg+1,w,c
 10245  004E12  EC9E  F026         	call	_WriteSPI_
 10246                           
 10247                           ;main.c: 83: WriteSPI_((unsigned char) arg);
 10248  004E16  5003               	movf	Command@arg,w,c
 10249  004E18  EC9E  F026         	call	_WriteSPI_
 10250                           
 10251                           ;main.c: 84: WriteSPI_(CRCbits);
 10252  004E1C  5007               	movf	Command@CRCbits,w,c
 10253  004E1E  EC9E  F026         	call	_WriteSPI_
 10254  004E22  0012               	return	
 10255  004E24                     __end_of_Command:
 10256                           	opt stack 0
 10257                           tblptru	equ	0xFF8
 10258                           tblptrh	equ	0xFF7
 10259                           tblptrl	equ	0xFF6
 10260                           tablat	equ	0xFF5
 10261                           prodh	equ	0xFF4
 10262                           prodl	equ	0xFF3
 10263                           indf0	equ	0xFEF
 10264                           postinc0	equ	0xFEE
 10265                           fsr0h	equ	0xFEA
 10266                           fsr0l	equ	0xFE9
 10267                           wreg	equ	0xFE8
 10268                           indf1	equ	0xFE7
 10269                           postdec1	equ	0xFE5
 10270                           fsr1h	equ	0xFE2
 10271                           fsr1l	equ	0xFE1
 10272                           indf2	equ	0xFDF
 10273                           postinc2	equ	0xFDE
 10274                           postdec2	equ	0xFDD
 10275                           plusw2	equ	0xFDB
 10276                           fsr2h	equ	0xFDA
 10277                           fsr2l	equ	0xFD9
 10278                           status	equ	0xFD8
 10279                           
 10280 ;; *************** function _WriteSPI_ *****************
 10281 ;; Defined at:
 10282 ;;		line 58 in file "main.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;  data_out        1    wreg     unsigned char 
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;  data_out        1    1[COMRAM] unsigned char 
 10287 ;;  TempVar         1    0[COMRAM] unsigned char 
 10288 ;; Return value:  Size  Location     Type
 10289 ;;                  1    wreg      char 
 10290 ;; Registers used:
 10291 ;;		wreg
 10292 ;; Tracked objects:
 10293 ;;		On entry : 0/0
 10294 ;;		On exit  : 0/0
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10297 ;;      Params:         0       0       0       0       0       0       0       0       0
 10298 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10299 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10300 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10301 ;;Total ram usage:        2 bytes
 10302 ;; Hardware stack levels used:    1
 10303 ;; This function calls:
 10304 ;;		Nothing
 10305 ;; This function is called by:
 10306 ;;		_Command
 10307 ;;		_disk_writep
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           	psect	text36
 10312  004D3C                     __ptext36:
 10313                           	opt stack 0
 10314  004D3C                     _WriteSPI_:
 10315                           	opt stack 25
 10316                           
 10317                           ;incstack = 0
 10318                           ;WriteSPI_@data_out stored from wreg
 10319  004D3C  6E02               	movwf	WriteSPI_@data_out,c
 10320                           
 10321                           ;main.c: 60: unsigned char TempVar;
 10322                           ;main.c: 62: TempVar = SSPBUF;
 10323  004D3E  CFC9 F001          	movff	4041,WriteSPI_@TempVar	;volatile
 10324                           
 10325                           ;main.c: 63: PIR1bits.SSPIF = 0;
 10326  004D42  969E               	bcf	3998,3,c	;volatile
 10327                           
 10328                           ;main.c: 64: SSPCON1bits.WCOL = 0;
 10329  004D44  9EC6               	bcf	4038,7,c	;volatile
 10330                           
 10331                           ;main.c: 65: SSPBUF = data_out;
 10332  004D46  C002  FFC9         	movff	WriteSPI_@data_out,4041	;volatile
 10333                           
 10334                           ;main.c: 66: if ( SSPCON1 & 0x80 )
 10335  004D4A  BEC6               	btfsc	4038,7,c	;volatile
 10336  004D4C  D002               	goto	l332
 10337  004D4E                     l334:
 10338  004D4E  A69E               	btfss	3998,3,c	;volatile
 10339  004D50  D7FE               	goto	l334
 10340  004D52                     l332:
 10341  004D52  0012               	return	
 10342  004D54                     __end_of_WriteSPI_:
 10343                           	opt stack 0
 10344                           tblptru	equ	0xFF8
 10345                           tblptrh	equ	0xFF7
 10346                           tblptrl	equ	0xFF6
 10347                           tablat	equ	0xFF5
 10348                           prodh	equ	0xFF4
 10349                           prodl	equ	0xFF3
 10350                           indf0	equ	0xFEF
 10351                           postinc0	equ	0xFEE
 10352                           fsr0h	equ	0xFEA
 10353                           fsr0l	equ	0xFE9
 10354                           wreg	equ	0xFE8
 10355                           indf1	equ	0xFE7
 10356                           postdec1	equ	0xFE5
 10357                           fsr1h	equ	0xFE2
 10358                           fsr1l	equ	0xFE1
 10359                           indf2	equ	0xFDF
 10360                           postinc2	equ	0xFDE
 10361                           postdec2	equ	0xFDD
 10362                           plusw2	equ	0xFDB
 10363                           fsr2h	equ	0xFDA
 10364                           fsr2l	equ	0xFD9
 10365                           status	equ	0xFD8
 10366                           
 10367 ;; *************** function ___lmul *****************
 10368 ;; Defined at:
 10369 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;  multiplier      4    0[COMRAM] unsigned long 
 10372 ;;  multiplicand    4    4[COMRAM] unsigned long 
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;  product         4    8[COMRAM] unsigned long 
 10375 ;; Return value:  Size  Location     Type
 10376 ;;                  4    0[COMRAM] unsigned long 
 10377 ;; Registers used:
 10378 ;;		wreg, status,2, status,0
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 0/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10384 ;;      Params:         8       0       0       0       0       0       0       0       0
 10385 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10386 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10387 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10388 ;;Total ram usage:       12 bytes
 10389 ;; Hardware stack levels used:    1
 10390 ;; This function calls:
 10391 ;;		Nothing
 10392 ;; This function is called by:
 10393 ;;		_clust2sect
 10394 ;;		_pf_mount
 10395 ;; This function uses a non-reentrant model
 10396 ;;
 10397                           
 10398                           	psect	text37
 10399  004EDC                     __ptext37:
 10400                           	opt stack 0
 10401  004EDC                     ___lmul:
 10402                           	opt stack 27
 10403                           
 10404                           ;incstack = 0
 10405  004EDC  0E00               	movlw	0
 10406  004EDE  6E09               	movwf	___lmul@product,c
 10407  004EE0  0E00               	movlw	0
 10408  004EE2  6E0A               	movwf	___lmul@product+1,c
 10409  004EE4  0E00               	movlw	0
 10410  004EE6  6E0B               	movwf	___lmul@product+2,c
 10411  004EE8  0E00               	movlw	0
 10412  004EEA  6E0C               	movwf	___lmul@product+3,c
 10413  004EEC                     l3124:
 10414  004EEC  A001               	btfss	___lmul@multiplier,0,c
 10415  004EEE  D008               	goto	l3128
 10416  004EF0  5005               	movf	___lmul@multiplicand,w,c
 10417  004EF2  2609               	addwf	___lmul@product,f,c
 10418  004EF4  5006               	movf	___lmul@multiplicand+1,w,c
 10419  004EF6  220A               	addwfc	___lmul@product+1,f,c
 10420  004EF8  5007               	movf	___lmul@multiplicand+2,w,c
 10421  004EFA  220B               	addwfc	___lmul@product+2,f,c
 10422  004EFC  5008               	movf	___lmul@multiplicand+3,w,c
 10423  004EFE  220C               	addwfc	___lmul@product+3,f,c
 10424  004F00                     l3128:
 10425  004F00  90D8               	bcf	status,0,c
 10426  004F02  3605               	rlcf	___lmul@multiplicand,f,c
 10427  004F04  3606               	rlcf	___lmul@multiplicand+1,f,c
 10428  004F06  3607               	rlcf	___lmul@multiplicand+2,f,c
 10429  004F08  3608               	rlcf	___lmul@multiplicand+3,f,c
 10430  004F0A  90D8               	bcf	status,0,c
 10431  004F0C  3204               	rrcf	___lmul@multiplier+3,f,c
 10432  004F0E  3203               	rrcf	___lmul@multiplier+2,f,c
 10433  004F10  3202               	rrcf	___lmul@multiplier+1,f,c
 10434  004F12  3201               	rrcf	___lmul@multiplier,f,c
 10435  004F14  5004               	movf	___lmul@multiplier+3,w,c
 10436  004F16  1001               	iorwf	___lmul@multiplier,w,c
 10437  004F18  1002               	iorwf	___lmul@multiplier+1,w,c
 10438  004F1A  1003               	iorwf	___lmul@multiplier+2,w,c
 10439  004F1C  A4D8               	btfss	status,2,c
 10440  004F1E  D7E6               	goto	l3124
 10441  004F20  C009  F001         	movff	___lmul@product,?___lmul
 10442  004F24  C00A  F002         	movff	___lmul@product+1,?___lmul+1
 10443  004F28  C00B  F003         	movff	___lmul@product+2,?___lmul+2
 10444  004F2C  C00C  F004         	movff	___lmul@product+3,?___lmul+3
 10445  004F30  0012               	return	
 10446  004F32                     __end_of___lmul:
 10447                           	opt stack 0
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           prodh	equ	0xFF4
 10453                           prodl	equ	0xFF3
 10454                           indf0	equ	0xFEF
 10455                           postinc0	equ	0xFEE
 10456                           fsr0h	equ	0xFEA
 10457                           fsr0l	equ	0xFE9
 10458                           wreg	equ	0xFE8
 10459                           indf1	equ	0xFE7
 10460                           postdec1	equ	0xFE5
 10461                           fsr1h	equ	0xFE2
 10462                           fsr1l	equ	0xFE1
 10463                           indf2	equ	0xFDF
 10464                           postinc2	equ	0xFDE
 10465                           postdec2	equ	0xFDD
 10466                           plusw2	equ	0xFDB
 10467                           fsr2h	equ	0xFDA
 10468                           fsr2l	equ	0xFD9
 10469                           status	equ	0xFD8
 10470                           
 10471 ;; *************** function ___lldiv *****************
 10472 ;; Defined at:
 10473 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 10474 ;; Parameters:    Size  Location     Type
 10475 ;;  dividend        4    0[COMRAM] unsigned long 
 10476 ;;  divisor         4    4[COMRAM] unsigned long 
 10477 ;; Auto vars:     Size  Location     Type
 10478 ;;  quotient        4    8[COMRAM] unsigned long 
 10479 ;;  counter         1   12[COMRAM] unsigned char 
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  4    0[COMRAM] unsigned long 
 10482 ;; Registers used:
 10483 ;;		wreg, status,2, status,0
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10489 ;;      Params:         8       0       0       0       0       0       0       0       0
 10490 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10491 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10492 ;;      Totals:        13       0       0       0       0       0       0       0       0
 10493 ;;Total ram usage:       13 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; This function calls:
 10496 ;;		Nothing
 10497 ;; This function is called by:
 10498 ;;		_pf_mount
 10499 ;;		_pf_lseek
 10500 ;; This function uses a non-reentrant model
 10501 ;;
 10502                           
 10503                           	psect	text38
 10504  005136                     __ptext38:
 10505                           	opt stack 0
 10506  005136                     ___lldiv:
 10507                           	opt stack 28
 10508                           
 10509                           ;incstack = 0
 10510  005136  0E00               	movlw	0
 10511  005138  6E09               	movwf	___lldiv@quotient,c
 10512  00513A  0E00               	movlw	0
 10513  00513C  6E0A               	movwf	___lldiv@quotient+1,c
 10514  00513E  0E00               	movlw	0
 10515  005140  6E0B               	movwf	___lldiv@quotient+2,c
 10516  005142  0E00               	movlw	0
 10517  005144  6E0C               	movwf	___lldiv@quotient+3,c
 10518  005146  5008               	movf	___lldiv@divisor+3,w,c
 10519  005148  1005               	iorwf	___lldiv@divisor,w,c
 10520  00514A  1006               	iorwf	___lldiv@divisor+1,w,c
 10521  00514C  1007               	iorwf	___lldiv@divisor+2,w,c
 10522  00514E  B4D8               	btfsc	status,2,c
 10523  005150  D02A               	goto	l1124
 10524  005152  0E01               	movlw	1
 10525  005154  6E0D               	movwf	___lldiv@counter,c
 10526  005156  D006               	goto	l3690
 10527  005158                     l3688:
 10528  005158  90D8               	bcf	status,0,c
 10529  00515A  3605               	rlcf	___lldiv@divisor,f,c
 10530  00515C  3606               	rlcf	___lldiv@divisor+1,f,c
 10531  00515E  3607               	rlcf	___lldiv@divisor+2,f,c
 10532  005160  3608               	rlcf	___lldiv@divisor+3,f,c
 10533  005162  2A0D               	incf	___lldiv@counter,f,c
 10534  005164                     l3690:
 10535  005164  AE08               	btfss	___lldiv@divisor+3,7,c
 10536  005166  D7F8               	goto	l3688
 10537  005168                     l3692:
 10538  005168  90D8               	bcf	status,0,c
 10539  00516A  3609               	rlcf	___lldiv@quotient,f,c
 10540  00516C  360A               	rlcf	___lldiv@quotient+1,f,c
 10541  00516E  360B               	rlcf	___lldiv@quotient+2,f,c
 10542  005170  360C               	rlcf	___lldiv@quotient+3,f,c
 10543  005172  5005               	movf	___lldiv@divisor,w,c
 10544  005174  5C01               	subwf	___lldiv@dividend,w,c
 10545  005176  5006               	movf	___lldiv@divisor+1,w,c
 10546  005178  5802               	subwfb	___lldiv@dividend+1,w,c
 10547  00517A  5007               	movf	___lldiv@divisor+2,w,c
 10548  00517C  5803               	subwfb	___lldiv@dividend+2,w,c
 10549  00517E  5008               	movf	___lldiv@divisor+3,w,c
 10550  005180  5804               	subwfb	___lldiv@dividend+3,w,c
 10551  005182  A0D8               	btfss	status,0,c
 10552  005184  D009               	goto	l3700
 10553  005186  5005               	movf	___lldiv@divisor,w,c
 10554  005188  5E01               	subwf	___lldiv@dividend,f,c
 10555  00518A  5006               	movf	___lldiv@divisor+1,w,c
 10556  00518C  5A02               	subwfb	___lldiv@dividend+1,f,c
 10557  00518E  5007               	movf	___lldiv@divisor+2,w,c
 10558  005190  5A03               	subwfb	___lldiv@dividend+2,f,c
 10559  005192  5008               	movf	___lldiv@divisor+3,w,c
 10560  005194  5A04               	subwfb	___lldiv@dividend+3,f,c
 10561  005196  8009               	bsf	___lldiv@quotient,0,c
 10562  005198                     l3700:
 10563  005198  90D8               	bcf	status,0,c
 10564  00519A  3208               	rrcf	___lldiv@divisor+3,f,c
 10565  00519C  3207               	rrcf	___lldiv@divisor+2,f,c
 10566  00519E  3206               	rrcf	___lldiv@divisor+1,f,c
 10567  0051A0  3205               	rrcf	___lldiv@divisor,f,c
 10568  0051A2  2E0D               	decfsz	___lldiv@counter,f,c
 10569  0051A4  D7E1               	goto	l3692
 10570  0051A6                     l1124:
 10571  0051A6  C009  F001         	movff	___lldiv@quotient,?___lldiv
 10572  0051AA  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
 10573  0051AE  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
 10574  0051B2  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
 10575  0051B6  0012               	return	
 10576  0051B8                     __end_of___lldiv:
 10577                           	opt stack 0
 10578                           tblptru	equ	0xFF8
 10579                           tblptrh	equ	0xFF7
 10580                           tblptrl	equ	0xFF6
 10581                           tablat	equ	0xFF5
 10582                           prodh	equ	0xFF4
 10583                           prodl	equ	0xFF3
 10584                           indf0	equ	0xFEF
 10585                           postinc0	equ	0xFEE
 10586                           fsr0h	equ	0xFEA
 10587                           fsr0l	equ	0xFE9
 10588                           wreg	equ	0xFE8
 10589                           indf1	equ	0xFE7
 10590                           postdec1	equ	0xFE5
 10591                           fsr1h	equ	0xFE2
 10592                           fsr1l	equ	0xFE1
 10593                           indf2	equ	0xFDF
 10594                           postinc2	equ	0xFDE
 10595                           postdec2	equ	0xFDD
 10596                           plusw2	equ	0xFDB
 10597                           fsr2h	equ	0xFDA
 10598                           fsr2l	equ	0xFD9
 10599                           status	equ	0xFD8
 10600                           
 10601 ;; *************** function _OpenUART *****************
 10602 ;; Defined at:
 10603 ;;		line 30 in file "openuart.c"
 10604 ;; Parameters:    Size  Location     Type
 10605 ;;		None
 10606 ;; Auto vars:     Size  Location     Type
 10607 ;;		None
 10608 ;; Return value:  Size  Location     Type
 10609 ;;		None               void
 10610 ;; Registers used:
 10611 ;;		None
 10612 ;; Tracked objects:
 10613 ;;		On entry : 0/0
 10614 ;;		On exit  : 0/0
 10615 ;;		Unchanged: 0/0
 10616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10617 ;;      Params:         0       0       0       0       0       0       0       0       0
 10618 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10619 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10620 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10621 ;;Total ram usage:        0 bytes
 10622 ;; Hardware stack levels used:    1
 10623 ;; This function calls:
 10624 ;;		Nothing
 10625 ;; This function is called by:
 10626 ;;		_main
 10627 ;; This function uses a non-reentrant model
 10628 ;;
 10629                           
 10630                           	psect	text39
 10631  004CD4                     __ptext39:
 10632                           	opt stack 0
 10633  004CD4                     _OpenUART:
 10634                           	opt stack 29
 10635                           
 10636                           ;openuart.c: 32: TRISDbits.RD4 = 0;
 10637                           
 10638                           ;incstack = 0
 10639  004CD4  9895               	bcf	3989,4,c	;volatile
 10640                           
 10641                           ;openuart.c: 33: RD4 = 1;
 10642  004CD6  8883               	bsf	3971,4,c	;volatile
 10643                           
 10644                           ;openuart.c: 35: TRISDbits.RD5 = 1;
 10645  004CD8  8A95               	bsf	3989,5,c	;volatile
 10646                           
 10647                           ;openuart.c: 36: RD5 = 1;
 10648  004CDA  8A83               	bsf	3971,5,c	;volatile
 10649  004CDC  0012               	return	
 10650  004CDE                     __end_of_OpenUART:
 10651                           	opt stack 0
 10652                           tblptru	equ	0xFF8
 10653                           tblptrh	equ	0xFF7
 10654                           tblptrl	equ	0xFF6
 10655                           tablat	equ	0xFF5
 10656                           prodh	equ	0xFF4
 10657                           prodl	equ	0xFF3
 10658                           indf0	equ	0xFEF
 10659                           postinc0	equ	0xFEE
 10660                           fsr0h	equ	0xFEA
 10661                           fsr0l	equ	0xFE9
 10662                           wreg	equ	0xFE8
 10663                           indf1	equ	0xFE7
 10664                           postdec1	equ	0xFE5
 10665                           fsr1h	equ	0xFE2
 10666                           fsr1l	equ	0xFE1
 10667                           indf2	equ	0xFDF
 10668                           postinc2	equ	0xFDE
 10669                           postdec2	equ	0xFDD
 10670                           plusw2	equ	0xFDB
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           tblptru	equ	0xFF8
 10675                           tblptrh	equ	0xFF7
 10676                           tblptrl	equ	0xFF6
 10677                           tablat	equ	0xFF5
 10678                           prodh	equ	0xFF4
 10679                           prodl	equ	0xFF3
 10680                           indf0	equ	0xFEF
 10681                           postinc0	equ	0xFEE
 10682                           fsr0h	equ	0xFEA
 10683                           fsr0l	equ	0xFE9
 10684                           wreg	equ	0xFE8
 10685                           indf1	equ	0xFE7
 10686                           postdec1	equ	0xFE5
 10687                           fsr1h	equ	0xFE2
 10688                           fsr1l	equ	0xFE1
 10689                           indf2	equ	0xFDF
 10690                           postinc2	equ	0xFDE
 10691                           postdec2	equ	0xFDD
 10692                           plusw2	equ	0xFDB
 10693                           fsr2h	equ	0xFDA
 10694                           fsr2l	equ	0xFD9
 10695                           status	equ	0xFD8
 10696                           
 10697                           	psect	rparam
 10698  0000                     tblptru	equ	0xFF8
 10699                           tblptrh	equ	0xFF7
 10700                           tblptrl	equ	0xFF6
 10701                           tablat	equ	0xFF5
 10702                           prodh	equ	0xFF4
 10703                           prodl	equ	0xFF3
 10704                           indf0	equ	0xFEF
 10705                           postinc0	equ	0xFEE
 10706                           fsr0h	equ	0xFEA
 10707                           fsr0l	equ	0xFE9
 10708                           wreg	equ	0xFE8
 10709                           indf1	equ	0xFE7
 10710                           postdec1	equ	0xFE5
 10711                           fsr1h	equ	0xFE2
 10712                           fsr1l	equ	0xFE1
 10713                           indf2	equ	0xFDF
 10714                           postinc2	equ	0xFDE
 10715                           postdec2	equ	0xFDD
 10716                           plusw2	equ	0xFDB
 10717                           fsr2h	equ	0xFDA
 10718                           fsr2l	equ	0xFD9
 10719                           status	equ	0xFD8


Data Sizes:
    Strings     534
    Constant    128
    Data        10
    BSS         1650
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     95      95
    BANK0           160    143     157
    BANK1           256      0     110
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    pf_open@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_6(CODE[10]), 

    rd	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    putsUART@data	PTR unsigned char  size(2) Largest target is 39
		 -> STR_30(CODE[3]), STR_29(CODE[28]), STR_28(CODE[18]), STR_27(CODE[11]), 
		 -> STR_26(CODE[10]), STR_25(CODE[3]), STR_24(CODE[21]), STR_23(CODE[38]), 
		 -> STR_22(CODE[4]), STR_21(CODE[39]), STR_20(CODE[39]), STR_19(CODE[5]), 
		 -> STR_18(CODE[4]), STR_17(CODE[37]), STR_16(CODE[4]), STR_15(CODE[30]), 
		 -> STR_14(CODE[4]), STR_13(CODE[30]), STR_12(CODE[33]), STR_11(CODE[4]), 
		 -> STR_10(CODE[34]), STR_9(CODE[23]), STR_7(CODE[34]), STR_5(CODE[17]), 
		 -> STR_4(CODE[4]), fileName(BANK1[10]), STR_3(CODE[29]), STR_2(CODE[37]), 

    disk_writep@wr	PTR const unsigned char  size(3) Largest target is 32767
		 -> STR_8(CODE[8]), ROM(CODE[32767]), 

    disk_readp@rd	PTR unsigned char  size(2) Largest target is 36
		 -> data_buffer_32(BANK1[32]), pf_readdir@dir(COMRAM[32]), pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 
		 -> pf_mount@buf(BANK0[36]), NULL(NULL[0]), get_fat@buf(COMRAM[4]), 

    pf_readdir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_opendir@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_write@bw	PTR unsigned int  size(2) Largest target is 2
		 -> main@br(BANK0[2]), 

    pf_write@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    pf_write@buff	PTR const void  size(2) Largest target is 8
		 -> STR_8(CODE[8]), 

    pf_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_8(CODE[8]), 

    pf_read$366	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), NULL(NULL[0]), 

    pf_read@br	PTR unsigned int  size(2) Largest target is 2
		 -> main@br(BANK0[2]), 

    pf_read@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    pf_read@buff	PTR void  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_read@rbuff	PTR unsigned char  size(2) Largest target is 32
		 -> data_buffer_32(BANK1[32]), 

    pf_open@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    pf_mount@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), 

    check_fs@buf	PTR unsigned char  size(2) Largest target is 36
		 -> pf_mount@buf(BANK0[36]), 

    follow_path@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    follow_path@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    follow_path@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    follow_path@path	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    get_fileinfo@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    create_name@path	PTR PTR const unsigned char  size(2) Largest target is 2
		 -> follow_path@path(BANK0[2]), 

    create_name@p	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    create_name@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    create_name@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    create_name@sfn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_read@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_find@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_find@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    dir_find@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_next@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_next@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_next@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    S49$fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_rewind@dj.fn	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    dir_rewind@dj	PTR struct . size(2) Largest target is 17
		 -> pf_open@dj(BANK0[16]), 

    dir_rewind@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    get_clust@dir	PTR unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    get_clust@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    clust2sect@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    FatFs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    get_fat@fs	PTR struct . size(2) Largest target is 42
		 -> main@fs(BANK0[42]), NULL(NULL[0]), 

    mem_cmp@src	PTR const void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_cmp@s	PTR const unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_cmp@dst	PTR const void  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    mem_cmp@d	PTR const unsigned char  size(2) Largest target is 32
		 -> pf_opendir@dir(COMRAM[32]), pf_open@dir(BANK0[32]), 

    mem_set@dst	PTR void  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 

    mem_set@d	PTR unsigned char  size(2) Largest target is 12
		 -> pf_readdir@sp(COMRAM[12]), pf_opendir@sp(COMRAM[12]), pf_open@sp(BANK0[12]), 


Critical Paths under _main in COMRAM

    _soft_hard_init->_OpenSPI
    _pf_write->_get_fat
    _disk_writep->_Command
    _disk_writep->_dummy_clocks
    _pf_read->_get_fat
    _follow_path->_dir_find
    _dir_find->_dir_next
    _dir_rewind->_clust2sect
    _dir_next->_get_fat
    _get_fat->_disk_readp
    _clust2sect->___lmul
    _create_name->_mem_set
    _pf_mount->_check_fs
    _disk_initialize->_reset
    _reset->_Command
    _reset->_dummy_clocks
    _reset->_putsUART
    _check_fs->_disk_readp
    _disk_readp->_Command
    _disk_readp->_dummy_clocks
    _disk_readp->_putsUART
    _response->_ReadSPI_
    _putsUART->_WriteUART
    _DelayTXBitUART->_Delay100TCYx
    _proceed->_WriteSPI
    _dummy_clocks->_delay_ms
    _Delay_s->_delay_ms
    _delay_ms->_Delay1KTCYx
    _Command->_WriteSPI_

Critical Paths under _main in BANK0

    _main->_pf_open
    _pf_open->_follow_path

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                45    45      0   94369
                                             98 BANK0     45    45      0
                           _OpenUART
                          _WriteUART
                           _pf_mount
                            _pf_open
                            _pf_read
                           _pf_write
                            _proceed
                           _putsUART
                           _readover
                     _soft_hard_init
 ---------------------------------------------------------------------------------
 (1) _soft_hard_init                                       5     5      0     289
                                              3 COMRAM     5     5      0
                            _OpenSPI
 ---------------------------------------------------------------------------------
 (2) _OpenSPI                                              3     1      2     216
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _readover                                             2     0      2      86
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _pf_write                                            33    27      6   15165
                                             70 COMRAM    14     8      6
                                              0 BANK0     19    19      0
                         _clust2sect
                        _disk_writep
                            _get_fat
 ---------------------------------------------------------------------------------
 (2) _disk_writep                                         17    10      7    3307
                                              8 COMRAM    16     9      7
                            _Command
                            _Delay_s
                          _WriteSPI_
                       _dummy_clocks
                            _proceed
                           _response
 ---------------------------------------------------------------------------------
 (1) _pf_read                                             36    30      6   20301
                                             70 COMRAM    14     8      6
                                              0 BANK0     22    22      0
                         _clust2sect
                         _disk_readp
                            _get_fat
 ---------------------------------------------------------------------------------
 (1) _pf_open                                             87    85      2   26469
                                             11 BANK0     87    85      2
                        _follow_path
                          _get_clust
 ---------------------------------------------------------------------------------
 (2) _follow_path                                         11     5      6   25594
                                              0 BANK0     11     5      6
                        _create_name
                           _dir_find
                         _dir_rewind
                          _get_clust
 ---------------------------------------------------------------------------------
 (2) _get_clust                                           18    14      4     329
                                              0 COMRAM    18    14      4
 ---------------------------------------------------------------------------------
 (3) _dir_find                                             8     4      4   21927
                                             87 COMRAM     8     4      4
                           _dir_next
                         _dir_rewind
                         _disk_readp
                            _mem_cmp
 ---------------------------------------------------------------------------------
 (4) _mem_cmp                                             15     9      6     328
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) _dir_rewind                                          16    14      2    1397
                                             27 COMRAM    16    14      2
                         _clust2sect
 ---------------------------------------------------------------------------------
 (4) _dir_next                                            17    15      2   11145
                                             70 COMRAM    17    15      2
                         _clust2sect
                            _get_fat
 ---------------------------------------------------------------------------------
 (2) _get_fat                                             40    36      4    9704
                                             30 COMRAM    40    36      4
                         _disk_readp
 ---------------------------------------------------------------------------------
 (2) _clust2sect                                          15    11      4     806
                                             12 COMRAM    15    11      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) _create_name                                         20    16      4    1174
                                              8 COMRAM    20    16      4
                            _mem_set
 ---------------------------------------------------------------------------------
 (4) _mem_set                                              8     2      6     282
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _pf_mount                                            77    75      2   29640
                                             40 COMRAM    24    22      2
                                              0 BANK0     53    53      0
                            ___lldiv
                             ___lmul
                           _check_fs
                    _disk_initialize
                         _disk_readp
 ---------------------------------------------------------------------------------
 (2) _disk_initialize                                      8     8      0    9408
                                             13 COMRAM     8     8      0
                            _Command
                            _Delay_s
                           _delay_ms
                       _dummy_clocks
                            _proceed
                           _putsUART
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (3) _reset                                                5     5      0    4587
                                              8 COMRAM     5     5      0
                            _Command
                            _Delay_s
                       _dummy_clocks
                            _proceed
                           _putsUART
                           _response
 ---------------------------------------------------------------------------------
 (2) _check_fs                                            10     4      6    9114
                                             30 COMRAM    10     4      6
                         _disk_readp
 ---------------------------------------------------------------------------------
 (3) _disk_readp                                          25    15     10    8594
                                              8 COMRAM    22    12     10
                            _Command
                            _Delay_s
                          _WriteUART
                       _dummy_clocks
                            _proceed
                           _putsUART
                           _response
 ---------------------------------------------------------------------------------
 (4) _response                                             1     1      0      24
                                              1 COMRAM     1     1      0
                           _ReadSPI_
 ---------------------------------------------------------------------------------
 (5) _ReadSPI_                                             1     1      0       1
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _putsUART                                             4     2      2    1904
                                              4 COMRAM     4     2      2
                          _WriteUART
 ---------------------------------------------------------------------------------
 (2) _WriteUART                                            3     3      0      68
                                              1 COMRAM     3     3      0
                     _DelayTXBitUART
 ---------------------------------------------------------------------------------
 (3) _DelayTXBitUART                                       0     0      0      22
                       _Delay100TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay100TCYx                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _proceed                                              0     0      0      23
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (4) _dummy_clocks                                         5     3      2     842
                                              3 COMRAM     5     3      2
                           _WriteSPI
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _WriteSPI                                             2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _Delay_s                                              3     3      0     160
                                              3 COMRAM     3     3      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (5) _delay_ms                                             2     2      0      68
                                              1 COMRAM     2     2      0
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (6) _Delay1KTCYx                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Command                                              6     1      5    1563
                                              2 COMRAM     6     1      5
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (5) _WriteSPI_                                            2     2      0      23
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     374
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     470
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _OpenUART                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OpenUART
   _WriteUART
     _DelayTXBitUART
       _Delay100TCYx
   _pf_mount
     ___lldiv
     ___lmul
     _check_fs
       _disk_readp
         _Command
           _WriteSPI_
         _Delay_s
           _delay_ms
             _Delay1KTCYx
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
         _dummy_clocks
           _WriteSPI
           _delay_ms
             _Delay1KTCYx
         _proceed
           _WriteSPI
         _putsUART
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
         _response
           _ReadSPI_
     _disk_initialize
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _delay_ms
         _Delay1KTCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
       _reset
         _Command
           _WriteSPI_
         _Delay_s
           _delay_ms
             _Delay1KTCYx
         _dummy_clocks
           _WriteSPI
           _delay_ms
             _Delay1KTCYx
         _proceed
           _WriteSPI
         _putsUART
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
         _response
           _ReadSPI_
       _response
         _ReadSPI_
     _disk_readp
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteUART
         _DelayTXBitUART
           _Delay100TCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
       _response
         _ReadSPI_
   _pf_open
     _follow_path
       _create_name
         _mem_set
       _dir_find
         _dir_next
           _clust2sect
             ___lmul
           _get_fat
             _disk_readp
               _Command
                 _WriteSPI_
               _Delay_s
                 _delay_ms
                   _Delay1KTCYx
               _WriteUART
                 _DelayTXBitUART
                   _Delay100TCYx
               _dummy_clocks
                 _WriteSPI
                 _delay_ms
                   _Delay1KTCYx
               _proceed
                 _WriteSPI
               _putsUART
                 _WriteUART
                   _DelayTXBitUART
                     _Delay100TCYx
               _response
                 _ReadSPI_
         _dir_rewind
           _clust2sect
             ___lmul
         _disk_readp
           _Command
             _WriteSPI_
           _Delay_s
             _delay_ms
               _Delay1KTCYx
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
           _dummy_clocks
             _WriteSPI
             _delay_ms
               _Delay1KTCYx
           _proceed
             _WriteSPI
           _putsUART
             _WriteUART
               _DelayTXBitUART
                 _Delay100TCYx
           _response
             _ReadSPI_
         _mem_cmp
       _dir_rewind
         _clust2sect
           ___lmul
       _get_clust
     _get_clust
   _pf_read
     _clust2sect
       ___lmul
     _disk_readp
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteUART
         _DelayTXBitUART
           _Delay100TCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
       _response
         _ReadSPI_
     _get_fat
       _disk_readp
         _Command
           _WriteSPI_
         _Delay_s
           _delay_ms
             _Delay1KTCYx
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
         _dummy_clocks
           _WriteSPI
           _delay_ms
             _Delay1KTCYx
         _proceed
           _WriteSPI
         _putsUART
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
         _response
           _ReadSPI_
   _pf_write
     _clust2sect
       ___lmul
     _disk_writep
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteSPI_
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _response
         _ReadSPI_
     _get_fat
       _disk_readp
         _Command
           _WriteSPI_
         _Delay_s
           _delay_ms
             _Delay1KTCYx
         _WriteUART
           _DelayTXBitUART
             _Delay100TCYx
         _dummy_clocks
           _WriteSPI
           _delay_ms
             _Delay1KTCYx
         _proceed
           _WriteSPI
         _putsUART
           _WriteUART
             _DelayTXBitUART
               _Delay100TCYx
         _response
           _ReadSPI_
   _proceed
     _WriteSPI
   _putsUART
     _WriteUART
       _DelayTXBitUART
         _Delay100TCYx
   _readover
   _soft_hard_init
     _OpenSPI

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0     400      21      100.0%
BIGRAM             3EE      0     200      22       50.9%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      6E       7       43.0%
BITBANK3            EF      0       0      12        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     8F      9D       5       98.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     5F      5F       1      100.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16A      11        0.0%
DATA                 0      0     76A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Jan 27 18:14:14 2017

             get_fat@clst 001F                         _s 00FB              create_name@c 001C  
            create_name@d 0014              create_name@i 001B              create_name@p 0015  
             _SSPSTATbits 000FC7                        l21 50B0                        l30 65D4  
                      l28 6952                        l60 56A6                        l61 561E  
                      l73 628A               __CFG_BOR$ON 000000                        _rd 00F7  
           pf_mount@bsect 008C               __CFG_BORV$3 000000             pf_mount@mclst 0088  
           pf_mount@fsize 0090             create_name@dj 0009             pf_mount@tsect 0084  
           create_name@ni 0017             create_name@si 0018                       l213 6EA4  
                     l152 5938                       l209 7310                       l218 7190  
                     l332 4D52                       l180 5E76                       l334 4D4E  
                     l343 4E78                       l351 4D34                       l159 7A66  
                     l193 6C4A                       l188 6DAE                       l620 4F4A  
                     l621 4F4C                       l390 607C                       l439 5BD4  
                     l383 602A                       l375 5FE2                       l640 4D6A  
                     l624 4F66                       l368 5F5E                       l625 4F80  
                     l642 4D66                       l626 4F68                       l618 4F46  
                     l627 4F6C                       l387 606E                       l379 6006  
                     l576 4F88                       l870 4D1E                       l891 4D0E  
                     _RD4 007C1C                       _RD5 007C1D               get_clust@fs 000D  
                     fsr2 000FD9                       _str 016E                       _txt 0130  
                     wreg 000FE8              __CFG_FOSC$HS 000000              disk_readp@rd 0009  
          create_name@cvt 7A69            create_name@sfn 0019           ?_soft_hard_init 0001  
            __CFG_LVP$OFF 000000              __CFG_WDT$OFF 000000                      l1124 51A6  
                    l3012 630C                      l3004 62F8                      l3022 633A  
                    l3112 6558                      l3114 656C                      l3050 63EA  
                    l3034 638C                      l3018 6324                      l4002 6D4C  
                    l4010 6DA4                      l3124 4EEC                      l3116 6578  
                    l3108 6542                      l3060 643E                      l3036 6390  
                    l3028 6376                      l3204 4DD2                      l3070 6460  
                    l3054 63FE                      l3046 63B0                      l3214 5062  
                    l3128 4F00                      l3064 6448                      l3208 4DE2  
                    l3400 5790                      l3160 6740                      l3232 55E8  
                    l4032 6E04                      l3090 64DE                      l3074 6476  
                    l3162 675E                      l3146 6664                      l3242 5664  
                    l3322 536A                      l4026 6DE6                      l3076 6488  
                    l3084 64B6                      l3092 64EE                      l3500 58C8  
                    l3420 50F4                      l3404 57A8                      l3244 5688  
                    l3228 55E4                      l3340 5434                      l3308 522C  
                    l4108 71EA                      l4060 6F4C                      l4044 6E4C  
                    l4052 6E64                      l3086 64C8                      l3414 50CA  
                    l3174 680C                      l3166 6768                      l3334 53F0  
                    l4134 72F0                      l4070 7030                      l3184 6926  
                    l3272 614A                      l3344 5448                      l3440 5942  
                    l4072 7066                      l4136 7306                      l3098 6522  
                    l3426 5114                      l3370 5736                      l3186 6942  
                    l3282 61E4                      l4138 730E                      l4082 70B6  
                    l4322 5F60                      l3700 5198                      l3508 5936  
                    l3524 5B00                      l3292 6278                      l3620 54A4  
                    l4332 5FC0                      l4316 5F3C                      l4340 5FE4  
                    l3550 5B7A                      l3542 5B5A                      l3358 56F4  
                    l3198 52E2                      l3454 59CC                      l3446 5974  
                    l3438 593C                      l2912 4E32                      l3376 5750  
                    l3288 6218                      l3640 5516                      l4352 602C  
                    l3562 5BB4                      l3538 5B2A                      l3394 577E  
                    l3474 5A66                      l3642 551C                      l4362 6070  
                    l4346 6008                      l3492 585E                      l3580 5C0A  
                    l3812 7458                      l3476 5AAE                      l2950 4E86  
                    l2918 4E4E                      l3486 5822                      l3830 74A4  
                    l3806 73AA                      l3910 5D14                      l3646 5522  
                    l3656 5562                      l3690 5164                      l3834 7560  
                    l3914 5D18                      l3906 5D06                      l3674 4F50  
                    l3692 5168                      l2884 4D74                      l2980 4DAE  
                    l3596 5C58                      l3588 5C28                      l2974 4DA8  
                    l3942 69A8                      l3678 4F70                      l3688 5158  
                    l2888 4D7C                      l3880 7956                      l3864 787A  
                    l3848 76E2                      l3960 6B6E                      l3936 698A  
                    l3874 78A6                      l3858 782C                      l3970 6BBE  
                    l2988 4DBE                      l3868 789C                      l3796 732C  
                    l3948 6A50                      l3894 5C9E                      l3990 6CBA  
                    l3958 6B38                      l3992 6CC6                      l3986 6CA4  
                    STR_1 7CE5                      STR_2 7B5D                      STR_3 7C48  
                    STR_4 7B59                      STR_5 7CBF                      STR_6 7CE5  
                    STR_7 7BA7                      STR_8 7CEF                      STR_9 7C81  
                    u2360 4FA8                      u2370 4FD8                      u2435 62AA  
                    u4060 6FAE                      u3270 5932                      u4150 72D6  
                    u2367 4F9E                      u2720 684E                      u2377 4FCE  
                    u2705 674C                      u4065 6FA4                      u3700 74A0  
                    u2725 6844                      u2645 65FE                      u2910 6214  
                    u2495 63C2                      u3375 5478                      u3805 79E6  
                    u3735 76FA                      u2935 521E                      u2960 53D0  
                    u4537 4D20                      u4547 4D10                      u2955 53A8  
                    u3780 78A2                      u2885 6156                      u2966 53D2  
                    u3960 6D32                      u3890 6AB6                      u3895 6AAC  
            get_clust@dir 0001         WriteSPI_@data_out 0002                      _flag 00F5  
                    _main 5E78                      fsr0h 000FEA                      fsr1h 000FE2  
                    indf0 000FEF                      fsr0l 000FE9                      fsr2h 000FDA  
                    indf1 000FE7                      fsr1l 000FE1                      indf2 000FDF  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0002             __CFG_IESO$OFF 000000           __end_of_Delay_s 4DC8  
           disk_readp@arr 0600             disk_readp@ptr 0017              disk_writep@i 0014  
            disk_writep@j 0016             __CFG_MCLRE$ON 000000           __end_of_Command 4E24  
            ?_follow_path 0060           create_name@path 000B           __end_of_OpenSPI 4F88  
             _Delay1KTCYx 4D0C             __CFG_PLLDIV$5 000000                     ?_main 0001  
                   STR_10 7BC9                     STR_11 7B59                     STR_12 7BEB  
                   STR_20 7AE9                     STR_13 7C0C                     STR_21 7B10  
                   STR_22 7B59                     STR_14 7B59                     STR_30 7CFC  
                   STR_15 7C2A                     STR_23 7B37                     STR_16 7B59  
                   STR_24 7C98                     STR_25 7CD8                     STR_17 7B82  
                   STR_18 7B59                     STR_26 7CDB                     STR_19 7CF7  
                   STR_27 7CD0                     STR_28 7CAD                     STR_29 7C65  
   __size_of_Delay100TCYx 0010                     _CMCON 000FB4           __end_of___lldiv 51B8  
                   _LATB0 007C50                     _LATA5 007C4D                     _LATB4 007C54  
          _data_buffer_32 0144             get_clust@clst 000F             __CFG_USBDIV$1 000000  
                   _FatFs 00F3    __end_ofcreate_name@cvt 7AE9             __CFG_PWRT$OFF 000000  
     ___lmul@multiplicand 0005            __CFG_FCMEN$OFF 000000           __end_of_get_fat 6954  
         __end_of_mem_cmp 50BA           __end_of_mem_set 4DF4           __end_of_pf_read 6DB0  
         __end_of_pf_open 5E78                     _reset 50BA                     tablat 000FF5  
         __end_of_proceed 4CFE                     plusw2 000FDB                     status 000FD8  
          disk_readp@buff 001C             disk_writep@sc 000C             disk_writep@wr 0009  
         __initialization 4FE0       disk_initialize@buff 0015              _Delay100TCYx 4D1C  
     disk_initialize@stat 0012              __end_of_main 607E              clust2sect@fs 001A  
        __end_of_ReadSPI_ 4D3C          __end_of_OpenUART 4CDE                    ??_main 0060  
            putsUART@data 0005       disk_readp@start_add 0018             __activetblptr 000002  
         __CFG_CCP2MX$OFF 000000                    _ADCON1 000FC1                    ?_reset 0001  
        __end_of_WriteSPI 4D6C             ?_dummy_clocks 0004                 ??_Delay_s 0004  
                  _TRISA5 007C95                    _TRISB4 007C9C                    _SSPBUF 000FC9  
               ??_Command 0008          __end_of_check_fs 593A          __end_of_delay_ms 4D86  
    __size_of_create_name 0144  __size_of_disk_initialize 01D0                 ??_OpenSPI 0003  
        ??_DelayTXBitUART 0002           ReadSPI_@TempVar 0001          __end_of_dir_find 544C  
        __end_of_dir_next 628C                    _Result 00FA                    ___lmul 4EDC  
          __CFG_STVREN$ON 000000      __size_of_disk_writep 0124                 ??___lldiv 0009  
  soft_hard_init@bus_mode 0007                    _folder 0100                    clear_0 4FE8  
                  clear_1 4FFC                    clear_2 500E                    clear_3 501A  
        __end_of_pf_mount 7A68          __end_of_readover 4CE8          __end_of_pf_write 7312  
             pf_read@buff 0047               pf_read@clst 006D               pf_read@sect 0065  
             pf_read@rcnt 0072                    main@br 00C2                 ??_get_fat 0023  
         WriteSPI@TempVar 0001                    main@fs 00C5                 ??_mem_cmp 0007  
               ??_mem_set 0007                 ??_pf_read 004D                 ??_pf_open 006D  
        __end_of_response 4D0C              __mediumconst 7A68                    reset@i 0009  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
               ??_proceed 0003          __end_of_putsUART 4FE0               pf_open@path 006B  
          ??_dummy_clocks 0006                __accesstop 0060   __end_of__initialization 5040  
         __CFG_PBADEN$OFF 000000        __size_of_WriteUART 003A        __size_of_WriteSPI_ 0018  
             pf_mount@buf 0060               pf_mount@fmt 0094           disk_readp@count 0011  
          __pcstackCOMRAM 0001              __pidataBANK1 4CE8      __size_of_follow_path 017A  
           __end_of_reset 5136               pf_write@btw 0049          ??_soft_hard_init 0004  
      __size_of_get_clust 00CA                   ??_reset 0009                __pbssBANK0 00EF  
              __pbssBANK1 0100            pf_write@remain 0066                 ?_ReadSPI_ 0001  
               ?_OpenUART 0001                   ?___lmul 0001         ??_disk_initialize 000E  
            ?_Delay1KTCYx 0001            ___lmul@product 0009                 ?_WriteSPI 0001  
       __end_of_WriteUART 4E5E         __end_of_WriteSPI_ 4D54                _dir_rewind 5570  
               ?_check_fs 001F                _disk_readp 628C            follow_path@dir 0062  
               ?_delay_ms 0001            follow_path@res 006A                 ?_dir_find 0058  
               ?_dir_next 0047                   _SSPCON1 000FC6                   _SSPSTAT 000FC7  
              _clust2sect 5282                ??_ReadSPI_ 0001                   _Delay_s 4DA0  
         __CFG_VREGEN$OFF 000000                   _Command 4DF4                 ?_pf_mount 0029  
               ?_readover 0001                 ?_pf_write 0047                ??_OpenUART 0001  
                 _OpenSPI 4F32                   __Hparam 0000                   __Lparam 0000  
       __end_of_get_clust 5282                 ?_response 0001           __size_of___lmul 0056  
                 ___lldiv 5136                 ?_putsUART 0005      __end_of_dummy_clocks 4E9C  
                 __pcinit 4FE0                   __ramtop 0800                ??_WriteSPI 0001  
                 __ptext0 5E78                   __ptext1 4E9C                   __ptext2 4F32  
                 __ptext3 4CDE                   __ptext4 6DB0                   __ptext5 544C  
                 __ptext6 6954                   __ptext7 5C84                   __ptext8 593A  
                 __ptext9 51B8                   _get_fat 6582                   _mem_cmp 504A  
                 _mem_set 4DC8                   _pf_read 6954                   _pf_open 5C84  
              ??_check_fs 0025                ??_delay_ms 0002                   _proceed 4CF2  
              ??_dir_find 005C                ??_dir_next 0049              pf_read@rbuff 0060  
    end_of_initialization 5040             __Lmediumconst 7A68                ??_pf_mount 002B  
              ??_readover 0003                ??_pf_write 004D           ___lldiv@divisor 0005  
         ___lldiv@counter 000D   soft_hard_init@smp_phase 0008                ??_response 0002  
                 postdec1 000FE5                   postdec2 000FDD          WriteSPI@data_out 0002  
                 postinc0 000FEE                   postinc2 000FDE                ??_putsUART 0007  
              dir_find@dj 0058                 _PORTDbits 000F83               ?_dir_rewind 001C  
 soft_hard_init@sync_mode 0006                dir_next@dj 0047                dir_next@fs 0050  
             ?_disk_readp 0009                 _TRISAbits 000F92                 _TRISBbits 000F93  
               _TRISCbits 000F94                 _TRISDbits 000F95                get_fat@buf 003F  
              get_fat@ofs 003D             __pbssBIGRAM_1 0400          WriteSPI_@TempVar 0001  
             ?_clust2sect 000D          disk_readp@length 001D          disk_readp@offset 000F  
        disk_readp@sector 000B             ??_create_name 000D          disk_initialize@i 000E  
         disk_writep@buff 0018             ??_disk_writep 0010          Delay100TCYx@unit 0001  
          Command@CRCbits 0007     disk_initialize@count1 0010     disk_initialize@count2 0013  
          __end_of___lmul 4F32            clust2sect@clst 000D          OpenSPI@smp_phase 0002  
    __size_of_Delay1KTCYx 0010       start_initialization 4FE0          OpenSPI@sync_mode 0003  
              mem_cmp@cnt 0005                mem_cmp@dst 0001              pf_write@buff 0047  
              mem_cmp@src 0003              pf_write@clst 006A              pf_write@sect 0062  
            pf_write@wcnt 006F           _disk_initialize 5AB4                mem_set@cnt 0005  
              mem_set@dst 0001                mem_set@val 0003         __size_of_ReadSPI_ 0010  
     __size_of_dir_rewind 0138     __size_of_dummy_clocks 003E             ??_follow_path 0066  
     __size_of_disk_readp 02F6         __size_of_OpenUART 000A       __end_of_create_name 57EC  
                ??___lmul 0009                pf_read@btr 0049               __pdataBANK1 0164  
        __CFG_LPT1OSC$OFF 000000       __size_of_clust2sect 00D4       __end_of_disk_writep 5570  
              pf_open@dir 008F                pf_open@res 00AF   __size_of_DelayTXBitUART 001A  
             __pbssBIGRAM 016E         __size_of_WriteSPI 0018                pf_mount@fs 0029  
           __pcstackBANK0 0060                 _WriteUART 4E24                 _WriteSPI_ 4D3C  
     __end_of__stringdata 7CFF         __size_of_check_fs 014E              check_fs@sect 0021  
       __size_of_delay_ms 001A                pf_write@cs 006E                pf_write@bw 004B  
              pf_write@fs 0071           Delay1KTCYx@unit 0001         __size_of_dir_find 00F6  
            _dummy_clocks 4E5E         __size_of_dir_next 020E                  ?_Delay_s 0001  
           _sector_buffer 0400                  ?_Command 0003                  ?_OpenSPI 0001  
       __size_of_pf_mount 0756         __size_of_readover 000A         __size_of_pf_write 0562  
           ?_Delay100TCYx 0001             __pmediumconst 7A68                  ?___lldiv 0001  
       __size_of_response 000E                 _get_clust 51B8             follow_path@dj 0060  
     __end_of_follow_path 5AB4         __size_of_putsUART 0058                  ?_get_fat 001F  
                ?_mem_cmp 0001                  ?_mem_set 0001                  ?_pf_read 0047  
                ?_pf_open 006B                reset@count 000B                ?_WriteUART 0001  
              ?_WriteSPI_ 0001            _dir_rewind$173 0022                  ?_proceed 0001  
 __end_of_disk_initialize 5C84               _get_fat$113 0039            __size_of_reset 007C  
 __size_of_soft_hard_init 0040               _create_name 56A8                 delay_ms@i 0003  
               delay_ms@t 0002                  Delay_s@i 0005                  Delay_s@j 0006  
                Delay_s@t 0004           soft_hard_init@i 0004            ??_Delay100TCYx 0001  
         follow_path@path 0064                  _PIR1bits 000F9E               _disk_writep 544C  
               dir_find@c 005E         WriteUART@bitcount 0004                 dir_next@i 0056  
              ?_get_clust 0001                 get_fat@bc 0043           OpenSPI@bus_mode 0001  
               get_fat@fs 0045                 get_fat@wc 003B               __stringdata 7AE9  
            ??_dir_rewind 001E              ??_disk_readp 0013                  _BitCount 00F9  
            ??_clust2sect 0011         WriteUART@uartdata 0003         ___lmul@multiplier 0001  
               copy_data0 5034                  _ReadSPI_ 4D2C          __size_of_Delay_s 0028  
                _OpenUART 4CD4          __size_of_Command 0030                  __Hrparam 0000  
      __end_of_dir_rewind 56A8                  __Lrparam 0000          __size_of_OpenSPI 0056  
             _follow_path 593A        __end_of_disk_readp 6582                 pf_read@br 004B  
               pf_read@cs 0071                 pf_read@dr 0064                 pf_read@fs 0074  
               pf_open@dj 00B2                 pf_open@fs 00B0                 pf_open@sp 0083  
        __size_of___lldiv 0082               _pf_read$366 0062        __end_of_clust2sect 5356  
                _WriteSPI 4D54            _DelayTXBitUART 4D86               check_fs@buf 001F  
               readover@a 0001                 pf_write@p 0060          __size_of_get_fat 03D2  
                _check_fs 57EC          __size_of_mem_cmp 0070          __size_of_mem_set 002C  
        __size_of_pf_read 045C          __size_of_pf_open 01F4                  _delay_ms 4D6C  
             ??_WriteUART 0002               ??_WriteSPI_ 0001                  _fileName 0164  
                __ptext10 5356                  __ptext11 504A                  __ptext20 50BA  
                __ptext12 5570                  __ptext21 57EC                  __ptext13 607E  
                __ptext30 4E5E                  __ptext22 628C                  __ptext14 6582  
                __ptext31 4D54                  __ptext23 4CFE                  __ptext15 5282  
                __ptext32 4DA0                  __ptext24 4D2C                  __ptext16 56A8  
                __ptext33 4D6C                  __ptext25 4F88                  __ptext17 4DC8  
                __ptext34 4D0C                  __ptext26 4E24                  __ptext18 7312  
                __ptext35 4DF4                  __ptext27 4D86                  __ptext19 5AB4  
                __ptext36 4D3C                  __ptext28 4D1C                  __ptext37 4EDC  
                __ptext29 4CF2                  __ptext38 5136                  __ptext39 4CD4  
                _dir_find 5356                  _fileSize 00EF                  _dir_next 607E  
        __size_of_proceed 000C          ?_disk_initialize 0001                 reset@buff 000D  
           __size_of_main 0206                  _pf_mount 7312                  _readover 4CDE  
                _pf_write 6DB0             dummy_clocks@i 0007             dummy_clocks@n 0004  
                _response 4CFE                  _uartdata 00FC                  _putsUART 4F88  
  __end_of_DelayTXBitUART 4DA0             ??_Delay1KTCYx 0001             pf_read@remain 0069  
             ??_get_clust 0005     __CFG_CPUDIV$OSC1_PLL2 000000                  mem_cmp@d 000A  
                mem_cmp@r 000E                  mem_cmp@s 000C                  mem_set@d 0007  
    __end_of_Delay100TCYx 4D2C            _soft_hard_init 4E9C          ___lldiv@dividend 0001  
         ?_DelayTXBitUART 0001              response@buff 0002          ___lldiv@quotient 0009  
     __end_of_Delay1KTCYx 4D1C            dir_rewind@clst 0028               dir_find@dir 005A  
             dir_find@res 005F               _SSPCON1bits 000FC6    __end_of_soft_hard_init 4EDC  
            dir_next@clst 0052                Command@cmd 0008                Command@arg 0003  
            ?_create_name 0009              dir_rewind@dj 001C              dir_rewind@fs 0026  
             main@FResult 00C4              ?_disk_writep 0009  
