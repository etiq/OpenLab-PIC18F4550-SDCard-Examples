
# 1 "fat_write.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 15 "fat_types.h"
typedef unsigned char uint8;
typedef unsigned short uint16;

# 23
typedef unsigned long uint32;

# 110 "fat_defs.h"

struct fat_dir_entry 
{
uint8 Name[11];
uint8 Attr;
uint8 NTRes;
uint8 CrtTimeTenth;
uint8 CrtTime[2];
uint8 CrtDate[2];
uint8 LstAccDate[2];
uint16 FstClusHI;
uint8 WrtTime[2];
uint8 WrtDate[2];
uint16 FstClusLO;
uint32 FileSize;
} ;


# 24 "fat_access.h"
typedef int (*fn_diskio_read) (uint32 sector, uint8 *buffer, uint32 sector_count);
typedef int (*fn_diskio_write)(uint32 sector, uint8 *buffer, uint32 sector_count);




struct disk_if
{

fn_diskio_read read_media;
fn_diskio_write write_media;
};


struct fat_buffer;

struct fat_buffer
{
uint8 sector[512 * 1];
uint32 address;
int dirty;
uint8 * ptr;


struct fat_buffer *next;
};

typedef enum eFatType
{
FAT_TYPE_16,
FAT_TYPE_32
} tFatType;

struct fatfs
{

uint8 sectors_per_cluster;
uint32 cluster_begin_lba;
uint32 rootdir_first_cluster;
uint32 rootdir_first_sector;
uint32 rootdir_sectors;
uint32 fat_begin_lba;
uint16 fs_info_sector;
uint32 lba_begin;
uint32 fat_sectors;
uint32 next_free_cluster;
uint16 root_entry_count;
uint16 reserved_sectors;
uint8 num_of_fats;
tFatType fat_type;


struct disk_if disk_io;


void (*fl_lock)(void);
void (*fl_unlock)(void);


struct fat_buffer currentsector;


struct fat_buffer *fat_buffer_head;
struct fat_buffer fat_buffers[1];
};

struct fs_dir_list_status
{
uint32 sector;
uint32 cluster;
uint8 offset;
};

struct fs_dir_ent
{
char filename[10];
uint8 is_dir;
uint32 cluster;
uint32 size;

# 111
};




int fatfs_init(struct fatfs *fs);
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number);
int fatfs_sector_reader(struct fatfs *fs, uint32 Startcluster, uint32 offset, uint8 *target);
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count);
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count);
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target);
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target);
void fatfs_show_details(struct fatfs *fs);
uint32 fatfs_get_root_cluster(struct fatfs *fs);
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *nametofind, struct fat_dir_entry *sfEntry);
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname);
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength);
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname);
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster);
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry);
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access);

# 138
void fatfs_show_details_(struct fatfs *fs);

# 30 "fat_misc.h"
struct lfn_cache
{


uint8 String[10][5];
uint8 Null;

uint8 no_of_strings;
};




void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable);
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer);
char* fatfs_lfn_cache_get(struct lfn_cache *lfn);
int fatfs_entry_lfn_text(struct fat_dir_entry *entry);
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry);
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry);
int fatfs_entry_sfn_only(struct fat_dir_entry *entry);
int fatfs_entry_is_dir(struct fat_dir_entry *entry);
int fatfs_entry_is_file(struct fat_dir_entry *entry);
int fatfs_lfn_entries_required(char *filename);
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk);
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir);
int fatfs_lfn_create_sfn(char *sfn_output, char *filename);
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum);
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds);
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year);
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds);
uint16 fatfs_convert_to_fat_date(int day, int month, int year);
void fatfs_print_sector(uint32 sector, uint8 *data);

# 10 "fat_table.h"
void fatfs_fat_init(struct fatfs *fs);
int fatfs_fat_purge(struct fatfs *fs);
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster);
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue);
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster);
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster);
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry);
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster);
uint32 fatfs_count_free_clusters(struct fatfs *fs);

# 10 "fat_write.h"
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir);
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters);
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size);

# 7 "fat_string.h"
int fatfs_total_path_levels(char *path);
int fatfs_get_substring(char *Path, int levelreq, char *output, int max_len);
int fatfs_split_path(char *FullPath, char *Path, int max_path, char *FileName, int max_filename);
int fatfs_compare_names(char* strA, char* strB);
int fatfs_string_ends_with_slash(char *path);
int fatfs_get_sfn_display_name(char* out, char* in);
int fatfs_get_extension(char* filename, char* out, int maxlen);
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen);

# 45 "fat_write.c"
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
uint32 i;
uint32 nextcluster;
uint32 start = *startCluster;


if (fs->next_free_cluster != 0xFFFFFFFF)
fatfs_set_fs_info_next_free_cluster(fs, 0xFFFFFFFF);

for (i=0;i<clusters;i++)
{

if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
{

fatfs_fat_set_cluster(fs, start, nextcluster);


fatfs_fat_set_cluster(fs, nextcluster, 0xFFFFFFFF);


start = nextcluster;
if (i == 0)
*startCluster = nextcluster;
}
else
return 0;
}

return 1;
}

# 82
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
uint32 clusterSize;
uint32 clusterCount;
uint32 nextcluster;

if (size==0)
return 0;


if (fs->next_free_cluster != 0xFFFFFFFF)
fatfs_set_fs_info_next_free_cluster(fs, 0xFFFFFFFF);


clusterSize = fs->sectors_per_cluster * 512;
clusterCount = (size / clusterSize);


if (size-(clusterSize*clusterCount))
clusterCount++;


if (newFile)
{
if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
return 0;


if (clusterCount==1)
{
fatfs_fat_set_cluster(fs, nextcluster, 0xFFFFFFFF);
*startCluster = nextcluster;
return 1;
}
}

else
nextcluster = *startCluster;

if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
return 0;

return 1;
}




static int fatfs_find_free_dir_offset(struct fatfs *fs, uint32 dirCluster, int entryCount, uint32 *pSector, uint8 *pOffset)
{
struct fat_dir_entry *directoryEntry;
uint8 item=0;
uint16 recordoffset = 0;
uint8 i=0;
int x=0;
int possible_spaces = 0;
int start_recorded = 0;


if (entryCount == 0)
return 0;


while (1)
{

if (fatfs_sector_reader(fs, dirCluster, x++, 0))
{

for (item = 0; item < (512 / 32); item++)
{

recordoffset = 32 * item;


directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);


if (fatfs_entry_lfn_text(directoryEntry))
{

if (possible_spaces == 0)
{

*pSector = x-1;
*pOffset = item;
start_recorded = 1;
}



possible_spaces++;
}

else
{

if (fs->currentsector.sector[recordoffset] == 0xE5)
{

if (possible_spaces == 0)
{

*pSector = x-1;
*pOffset = item;
start_recorded = 1;
}

possible_spaces++;


if (possible_spaces >= entryCount)
return 1;


}

else if (fs->currentsector.sector[recordoffset] == 0x00)
{

if (possible_spaces == 0)
{

*pSector = x-1;
*pOffset = item;
start_recorded = 1;
}


possible_spaces++;


if (possible_spaces >= entryCount)
return 1;
}

else
{

possible_spaces = 0;
start_recorded = 0;
}
}
}
}

else
{
uint32 newCluster;


if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
return 0;


if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
return 0;


memset(fs->currentsector.sector, 0x00, 512);
for (i=0;i<fs->sectors_per_cluster;i++)
{
if (!fatfs_write_sector(fs, newCluster, i, 0))
return 0;
}


if (!start_recorded)
{

*pSector = (x-1);
*pOffset = 0;
start_recorded = 1;
}

return 1;
}
}

return 0;
}



int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
uint8 item=0;
uint16 recordoffset = 0;
uint8 i=0;
uint32 x=0;
int entryCount;
struct fat_dir_entry shortEntry;
int dirtySector = 0;

uint32 dirSector = 0;
uint8 dirOffset = 0;
int foundEnd = 0;

uint8 checksum;
uint8 *pSname;


if (!fs->disk_io.write_media)
return 0;




entryCount = fatfs_lfn_entries_required(filename);
if (!entryCount)
return 0;

# 299
if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
return 0;


pSname = (uint8*)shortfilename;
checksum = 0;
for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;


x = dirSector;


while (1)
{

if (fatfs_sector_reader(fs, dirCluster, x++, 0))
{

for (item = 0; item < (512 / 32); item++)
{

recordoffset = 32 * item;


if (foundEnd==0)
if ( (dirSector==(x-1)) && (dirOffset==item) )
foundEnd = 1;


if (foundEnd)
{
if (entryCount==0)
{

fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);

# 340
memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));


return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
}

else
{
entryCount--;


fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
dirtySector = 1;
}

}
}


if (dirtySector)
{
if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
return 0;

dirtySector = 0;
}
}
else
return 0;
}

return 0;
}

