
# 1 "fat_access.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 15 "fat_types.h"
typedef unsigned char uint8;
typedef unsigned short uint16;

# 23
typedef unsigned long uint32;

# 110 "fat_defs.h"

struct fat_dir_entry 
{
uint8 Name[11];
uint8 Attr;
uint8 NTRes;
uint8 CrtTimeTenth;
uint8 CrtTime[2];
uint8 CrtDate[2];
uint8 LstAccDate[2];
uint16 FstClusHI;
uint8 WrtTime[2];
uint8 WrtDate[2];
uint16 FstClusLO;
uint32 FileSize;
} ;


# 24 "fat_access.h"
typedef int (*fn_diskio_read) (uint32 sector, uint8 *buffer, uint32 sector_count);
typedef int (*fn_diskio_write)(uint32 sector, uint8 *buffer, uint32 sector_count);




struct disk_if
{

fn_diskio_read read_media;
fn_diskio_write write_media;
};


struct fat_buffer;

struct fat_buffer
{
uint8 sector[512 * 1];
uint32 address;
int dirty;
uint8 * ptr;


struct fat_buffer *next;
};

typedef enum eFatType
{
FAT_TYPE_16,
FAT_TYPE_32
} tFatType;

struct fatfs
{

uint8 sectors_per_cluster;
uint32 cluster_begin_lba;
uint32 rootdir_first_cluster;
uint32 rootdir_first_sector;
uint32 rootdir_sectors;
uint32 fat_begin_lba;
uint16 fs_info_sector;
uint32 lba_begin;
uint32 fat_sectors;
uint32 next_free_cluster;
uint16 root_entry_count;
uint16 reserved_sectors;
uint8 num_of_fats;
tFatType fat_type;


struct disk_if disk_io;


void (*fl_lock)(void);
void (*fl_unlock)(void);


struct fat_buffer currentsector;


struct fat_buffer *fat_buffer_head;
struct fat_buffer fat_buffers[1];
};

struct fs_dir_list_status
{
uint32 sector;
uint32 cluster;
uint8 offset;
};

struct fs_dir_ent
{
char filename[10];
uint8 is_dir;
uint32 cluster;
uint32 size;

# 111
};




int fatfs_init(struct fatfs *fs);
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number);
int fatfs_sector_reader(struct fatfs *fs, uint32 Startcluster, uint32 offset, uint8 *target);
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count);
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count);
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target);
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target);
void fatfs_show_details(struct fatfs *fs);
uint32 fatfs_get_root_cluster(struct fatfs *fs);
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *nametofind, struct fat_dir_entry *sfEntry);
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname);
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength);
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname);
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster);
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry);
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access);

# 138
void fatfs_show_details_(struct fatfs *fs);

# 30 "fat_misc.h"
struct lfn_cache
{


uint8 String[10][5];
uint8 Null;

uint8 no_of_strings;
};




void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable);
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer);
char* fatfs_lfn_cache_get(struct lfn_cache *lfn);
int fatfs_entry_lfn_text(struct fat_dir_entry *entry);
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry);
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry);
int fatfs_entry_sfn_only(struct fat_dir_entry *entry);
int fatfs_entry_is_dir(struct fat_dir_entry *entry);
int fatfs_entry_is_file(struct fat_dir_entry *entry);
int fatfs_lfn_entries_required(char *filename);
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk);
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir);
int fatfs_lfn_create_sfn(char *sfn_output, char *filename);
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum);
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds);
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year);
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds);
uint16 fatfs_convert_to_fat_date(int day, int month, int year);
void fatfs_print_sector(uint32 sector, uint8 *data);

# 10 "fat_table.h"
void fatfs_fat_init(struct fatfs *fs);
int fatfs_fat_purge(struct fatfs *fs);
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster);
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue);
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster);
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster);
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry);
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster);
uint32 fatfs_count_free_clusters(struct fatfs *fs);

# 10 "fat_write.h"
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir);
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters);
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size);

# 7 "fat_string.h"
int fatfs_total_path_levels(char *path);
int fatfs_get_substring(char *Path, int levelreq, char *output, int max_len);
int fatfs_split_path(char *FullPath, char *Path, int max_path, char *FileName, int max_filename);
int fatfs_compare_names(char* strA, char* strB);
int fatfs_string_ends_with_slash(char *path);
int fatfs_get_sfn_display_name(char* out, char* in);
int fatfs_get_extension(char* filename, char* out, int maxlen);
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen);

# 16 "uart.h"
void ConfigUSART(unsigned char config_1, unsigned char config_2);

# 27
unsigned char ReadUART(void);

# 38
void Write_str(unsigned char* str);

# 49
void Read_str(unsigned char* str, unsigned char n);

# 60
void Write(char data);

# 75
void Read_str_(unsigned char *buffer);

# 43 "fat_access.c"
int fatfs_init(struct fatfs *fs)
{
uint8 num_of_fats;
uint16 reserved_sectors;
uint32 FATSz;
uint32 root_dir_sectors;
uint32 total_sectors;
uint32 data_sectors;
uint32 count_of_clusters;
uint8 valid_partition = 0;

fs->currentsector.address = 0xFFFFFFFF;
fs->currentsector.dirty = 0;

fs->next_free_cluster = 0;

fatfs_fat_init(fs);


if (!fs->disk_io.read_media)
return (-1);

# 69
if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
return (-1);



if (fs->currentsector.sector[510] != 0x55 || fs->currentsector.sector[510+1] != 0xAA)
return (-3);


if (( ((uint16)fs->currentsector.sector[510+1]<<8) + (uint16)fs->currentsector.sector[510+0] ) != 0xAA55)
return (-4);


if (sizeof(struct fat_dir_entry) != 32)
return (-7);


switch(fs->currentsector.sector[450])
{
case 0x0B:
case 0x06:
case 0x0C:
case 0x0E:
case 0x0F:
case 0x05:
valid_partition = 1;
break;
case 0x00:
valid_partition = 0;
break;
default:
if (fs->currentsector.sector[450] <= 0x06)
valid_partition = 1;
break;
}


if (valid_partition)
fs->lba_begin = ( ((uint32)fs->currentsector.sector[454+3]<<24) + ((uint32)fs->currentsector.sector[454+2]<<16) + ((uint32)fs->currentsector.sector[454+1]<<8) + (uint32)fs->currentsector.sector[454+0] );

else
fs->lba_begin = 0;



if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
return (-1);


if (( ((uint16)fs->currentsector.sector[0x0B+1]<<8) + (uint16)fs->currentsector.sector[0x0B+0] ) != 512)
return (-2);


fs->sectors_per_cluster = fs->currentsector.sector[13];
reserved_sectors = ( ((uint16)fs->currentsector.sector[14+1]<<8) + (uint16)fs->currentsector.sector[14+0] );
num_of_fats = fs->currentsector.sector[16];
fs->root_entry_count = ( ((uint16)fs->currentsector.sector[17+1]<<8) + (uint16)fs->currentsector.sector[17+0] );

if(( ((uint16)fs->currentsector.sector[22+1]<<8) + (uint16)fs->currentsector.sector[22+0] ) != 0)
fs->fat_sectors = ( ((uint16)fs->currentsector.sector[22+1]<<8) + (uint16)fs->currentsector.sector[22+0] );
else
fs->fat_sectors = ( ((uint32)fs->currentsector.sector[36+3]<<24) + ((uint32)fs->currentsector.sector[36+2]<<16) + ((uint32)fs->currentsector.sector[36+1]<<8) + (uint32)fs->currentsector.sector[36+0] );


fs->rootdir_first_cluster = ( ((uint32)fs->currentsector.sector[44+3]<<24) + ((uint32)fs->currentsector.sector[44+2]<<16) + ((uint32)fs->currentsector.sector[44+1]<<8) + (uint32)fs->currentsector.sector[44+0] );
fs->fs_info_sector = ( ((uint16)fs->currentsector.sector[48+1]<<8) + (uint16)fs->currentsector.sector[48+0] );


fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
fs->rootdir_sectors = ((fs->root_entry_count * 32) + (512 - 1)) / 512;


fs->fat_begin_lba = fs->lba_begin + reserved_sectors;


fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);

if (( ((uint16)fs->currentsector.sector[0x1FE+1]<<8) + (uint16)fs->currentsector.sector[0x1FE+0] ) != 0xAA55)
return (-3);


root_dir_sectors = ((( ((uint16)fs->currentsector.sector[17+1]<<8) + (uint16)fs->currentsector.sector[17+0] ) * 32) + (( ((uint16)fs->currentsector.sector[11+1]<<8) + (uint16)fs->currentsector.sector[11+0] ) - 1)) / ( ((uint16)fs->currentsector.sector[11+1]<<8) + (uint16)fs->currentsector.sector[11+0] );

if(( ((uint16)fs->currentsector.sector[22+1]<<8) + (uint16)fs->currentsector.sector[22+0] ) != 0)
FATSz = ( ((uint16)fs->currentsector.sector[22+1]<<8) + (uint16)fs->currentsector.sector[22+0] );
else
FATSz = ( ((uint32)fs->currentsector.sector[36+3]<<24) + ((uint32)fs->currentsector.sector[36+2]<<16) + ((uint32)fs->currentsector.sector[36+1]<<8) + (uint32)fs->currentsector.sector[36+0] );

if(( ((uint16)fs->currentsector.sector[19+1]<<8) + (uint16)fs->currentsector.sector[19+0] ) != 0)
total_sectors = ( ((uint16)fs->currentsector.sector[19+1]<<8) + (uint16)fs->currentsector.sector[19+0] );
else
total_sectors = ( ((uint32)fs->currentsector.sector[32+3]<<24) + ((uint32)fs->currentsector.sector[32+2]<<16) + ((uint32)fs->currentsector.sector[32+1]<<8) + (uint32)fs->currentsector.sector[32+0] );

data_sectors = total_sectors - (( ((uint16)fs->currentsector.sector[14+1]<<8) + (uint16)fs->currentsector.sector[14+0] ) + (fs->currentsector.sector[16] * FATSz) + root_dir_sectors);


if (fs->sectors_per_cluster != 0)
{
count_of_clusters = data_sectors / fs->sectors_per_cluster;

if(count_of_clusters < 4085)

return (-5);
else if(count_of_clusters < 65525)
{

fs->rootdir_first_cluster = 0;


fs->fat_type = FAT_TYPE_16;
return 0;
}
else
{

fs->fat_type = FAT_TYPE_32;
return 0;
}
}
else
return (-5);
}




uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
if (fs->fat_type == FAT_TYPE_16)
return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / 512) + ((Cluster_Number-2) * fs->sectors_per_cluster));
else
return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
}



int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
return fs->disk_io.read_media(lba, target, count);
}



int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
return fs->disk_io.write_media(lba, target, count);
}




int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
uint32 sector_to_read = 0;
uint32 cluster_to_read = 0;
uint32 cluster_chain = 0;
uint32 i;
uint32 lba;


if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
{
if (offset < fs->rootdir_sectors)
lba = fs->lba_begin + fs->rootdir_first_sector + offset;
else
return 0;
}

else
{

cluster_chain = start_cluster;


cluster_to_read = offset / fs->sectors_per_cluster;
sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);


for (i=0; i<cluster_to_read; i++)
cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);


if (cluster_chain == 0xFFFFFFFF)
return 0;


lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
}


if (target)
return fs->disk_io.read_media(lba, target, 1);

else if (lba != fs->currentsector.address)
{
fs->currentsector.address = lba;
return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
}
else
return 1;
}




int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{

if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
{
uint32 lba;


if (sector < fs->rootdir_sectors)
lba = fs->lba_begin + fs->rootdir_first_sector + sector;
else
return 0;


if (target)
{

return fs->disk_io.read_media(lba, target, 1);
}
else
{

fs->currentsector.address = lba;


return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
}
}

else
{

if (target)
{

uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;


return fs->disk_io.read_media(lba, target, 1);
}
else
{

fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;


return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
}
}
}

# 329
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{

if (!fs->disk_io.write_media)
return 0;


if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
{
uint32 lba;


if (sector < fs->rootdir_sectors)
lba = fs->lba_begin + fs->rootdir_first_sector + sector;
else
return 0;


if (target)
{

return fs->disk_io.write_media(lba, target, 1);
}
else
{

fs->currentsector.address = lba;


return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
}
}

else
{

if (target)
{

uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;


return fs->disk_io.write_media(lba, target, 1);
}
else
{

fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;


return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
}
}
}




void fatfs_show_details(struct fatfs *fs)
{
printf ("FAT details:\r\n");
printf (" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16");
printf (" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster);
printf (" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba);
printf (" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba);
printf (" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster);
}

void fatfs_show_details_(struct fatfs *fs)
{
unsigned char str[];
sprintf(str,"FAT details:\r\n");
Write_str(str);
sprintf(str," Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16");
Write_str(str);
sprintf(str," Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster);
Write_str(str);
sprintf(str," FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba);
Write_str(str);
sprintf(str," Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba);
Write_str(str);
sprintf(str," Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster);
Write_str(str);
}



uint32 fatfs_get_root_cluster(struct fatfs *fs)
{

return fs->rootdir_first_cluster;
}



uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
uint8 item=0;
uint16 recordoffset = 0;
uint8 i=0;
int x=0;
char *long_filename = (0);
char short_filename[13];
struct lfn_cache lfn;
int dotRequired = 0;
struct fat_dir_entry *directoryEntry;

fatfs_lfn_cache_init(&lfn, 1);


while (1)
{

if (fatfs_sector_reader(fs, Cluster, x++, 0))
{

for (item = 0; item < (512 / 32); item++)
{

recordoffset = 32 * item;


directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);



if (fatfs_entry_lfn_text(directoryEntry) )
fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);


else if (fatfs_entry_lfn_invalid(directoryEntry) )
fatfs_lfn_cache_init(&lfn, 0);


else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
{
long_filename = fatfs_lfn_cache_get(&lfn);


if (fatfs_compare_names(long_filename, name_to_find))
{
memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
return 1;
}

fatfs_lfn_cache_init(&lfn, 0);
}
else


if (fatfs_entry_sfn_only(directoryEntry) )
{
memset(short_filename, 0, sizeof(short_filename));


for (i=0; i<8; i++)
short_filename[i] = directoryEntry->Name[i];


dotRequired = 0;
for (i=8; i<11; i++)
{
short_filename[i+1] = directoryEntry->Name[i];
if (directoryEntry->Name[i] != ' ')
dotRequired = 1;
}


if (dotRequired)
{

if (short_filename[0]!='.')
short_filename[8] = '.';
else
short_filename[8] = ' ';
}
else
short_filename[8] = ' ';


if (fatfs_compare_names(short_filename, name_to_find))
{
memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
return 1;
}

fatfs_lfn_cache_init(&lfn, 0);
}
}
}
else
break;
}

return 0;
}

# 530
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
uint8 item=0;
uint16 recordoffset = 0;
int x=0;
struct fat_dir_entry *directoryEntry;


while (1)
{

if (fatfs_sector_reader(fs, Cluster, x++, 0))
{

for (item = 0; item < (512 / 32); item++)
{

recordoffset = 32 * item;


directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);



if (fatfs_entry_lfn_text(directoryEntry) )
;


else if (fatfs_entry_lfn_invalid(directoryEntry) )
;
else


if (fatfs_entry_sfn_only(directoryEntry) )
{
if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
return 1;
}
}
}
else
break;
}

return 0;
}

# 633
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
uint8 item=0;
uint16 recordoffset = 0;
int x=0;
struct fat_dir_entry *directoryEntry;


if (!fs->disk_io.write_media)
return 0;


while (1)
{

if (fatfs_sector_reader(fs, Cluster, x++, 0))
{

for (item = 0; item < (512 / 32); item++)
{

recordoffset = 32 * item;


directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);



if (fatfs_entry_lfn_text(directoryEntry) )
;


else if (fatfs_entry_lfn_invalid(directoryEntry) )
;


else

if (fatfs_entry_sfn_only(directoryEntry) )
{
if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
{
directoryEntry->FileSize = (fileLength);

# 683
memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));


return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
}
}
}
}
else
break;
}

return 0;
}

# 703
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
uint8 item=0;
uint16 recordoffset = 0;
int x=0;
struct fat_dir_entry *directoryEntry;


if (!fs->disk_io.write_media)
return 0;


while (1)
{

if (fatfs_sector_reader(fs, Cluster, x++, 0))
{

for (item = 0; item < (512 / 32); item++)
{

recordoffset = 32 * item;


directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);



if (fatfs_entry_lfn_text(directoryEntry) )
;


else if (fatfs_entry_lfn_invalid(directoryEntry) )
;


else

if (fatfs_entry_sfn_only(directoryEntry) )
{
if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
{

directoryEntry->Name[0] = 0xE5;

# 754
memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));


return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
}
}
}
}
else
break;
}

return 0;
}

# 773
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
dirls->cluster = StartCluster;
dirls->sector = 0;
dirls->offset = 0;
}

# 785
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
uint8 i,item;
uint16 recordoffset;
struct fat_dir_entry *directoryEntry;
char *long_filename = (0);
char short_filename[13];
struct lfn_cache lfn;
int dotRequired = 0;
int result = 0;


fatfs_lfn_cache_init(&lfn, 0);

while (1)
{

if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
{

for (item = dirls->offset; item < (512 / 32); item++)
{

recordoffset = 32 * item;


directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);



if ( fatfs_entry_lfn_text(directoryEntry) )
fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);


else if ( fatfs_entry_lfn_invalid(directoryEntry) )
fatfs_lfn_cache_init(&lfn, 0);


else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
{

long_filename = fatfs_lfn_cache_get(&lfn);
strncpy(entry->filename, long_filename, 10-1);

if (fatfs_entry_is_dir(directoryEntry))
entry->is_dir = 1;
else
entry->is_dir = 0;

# 843
entry->size = (directoryEntry->FileSize);
entry->cluster = ((directoryEntry->FstClusHI)<<16) | (directoryEntry->FstClusLO);


dirls->offset = item + 1;
result = 1;
return 1;
}

else

if ( fatfs_entry_sfn_only(directoryEntry) )
{
fatfs_lfn_cache_init(&lfn, 0);

memset(short_filename, 0, sizeof(short_filename));


for (i=0; i<8; i++)
short_filename[i] = directoryEntry->Name[i];


dotRequired = 0;
for (i=8; i<11; i++)
{
short_filename[i+1] = directoryEntry->Name[i];
if (directoryEntry->Name[i] != ' ')
dotRequired = 1;
}


if (dotRequired)
{

if (short_filename[0]!='.')
short_filename[8] = '.';
else
short_filename[8] = ' ';
}
else
short_filename[8] = ' ';

fatfs_get_sfn_display_name(entry->filename, short_filename);

if (fatfs_entry_is_dir(directoryEntry))
entry->is_dir = 1;
else
entry->is_dir = 0;

# 901
entry->size = (directoryEntry->FileSize);
entry->cluster = ((directoryEntry->FstClusHI)<<16) | (directoryEntry->FstClusLO);


dirls->offset = item + 1;
result = 1;
return 1;
}
}


dirls->sector++;
dirls->offset = 0;
}
else
break;
}

return result;
}

