Version 3.2 HI-TECH Software Intermediate Code
"62 C:\Program Files (x86)\Microchip\xc8\v1.32\include\string.h
[v _strlen `(ui ~T0 @X0 0 ef1`*Cuc ]
"22
[v _memcpy `(*v ~T0 @X0 0 ef3`*v`*Cv`ui ]
[; ;string.h: 4: typedef int ptrdiff_t;
[; ;string.h: 5: typedef unsigned size_t;
[; ;string.h: 6: typedef unsigned short wchar_t;
[; ;string.h: 9: extern int errno;
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 42: extern char * strcat(char *, const char *);
[; ;string.h: 43: extern char * strcpy(char *, const char *);
[; ;string.h: 44: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 45: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 46: extern char * strdup(const char *);
[; ;string.h: 47: extern char * strtok(char *, const char *);
[; ;string.h: 50: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 51: extern int strcmp(const char *, const char *);
[; ;string.h: 52: extern int stricmp(const char *, const char *);
[; ;string.h: 53: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 54: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 55: extern void * memchr(const void *, int, size_t);
[; ;string.h: 56: extern size_t strcspn(const char *, const char *);
[; ;string.h: 57: extern char * strpbrk(const char *, const char *);
[; ;string.h: 58: extern size_t strspn(const char *, const char *);
[; ;string.h: 59: extern char * strstr(const char *, const char *);
[; ;string.h: 60: extern char * stristr(const char *, const char *);
[; ;string.h: 61: extern char * strerror(int);
[; ;string.h: 62: extern size_t strlen(const char *);
[; ;string.h: 63: extern char * strchr(const char *, int);
[; ;string.h: 64: extern char * strichr(const char *, int);
[; ;string.h: 65: extern char * strrchr(const char *, int);
[; ;string.h: 66: extern char * strrichr(const char *, int);
[; ;assert.h: 16: extern void _fassert(int, const char *, const char *);
[; ;fat_string.h: 7: int fatfs_total_path_levels(char *path);
[; ;fat_string.h: 8: int fatfs_get_substring(char *Path, int levelreq, char *output, int max_len);
[; ;fat_string.h: 9: int fatfs_split_path(char *FullPath, char *Path, int max_path, char *FileName, int max_filename);
[; ;fat_string.h: 10: int fatfs_compare_names(char* strA, char* strB);
[; ;fat_string.h: 11: int fatfs_string_ends_with_slash(char *path);
[; ;fat_string.h: 12: int fatfs_get_sfn_display_name(char* out, char* in);
[; ;fat_string.h: 13: int fatfs_get_extension(char* filename, char* out, int maxlen);
[; ;fat_string.h: 14: int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen);
"44 fat_string.c
[v _fatfs_total_path_levels `(i ~T0 @X0 1 ef1`*uc ]
"45
{
[; ;fat_string.c: 44: int fatfs_total_path_levels(char *path)
[; ;fat_string.c: 45: {
[e :U _fatfs_total_path_levels ]
"44
[v _path `*uc ~T0 @X0 1 r1 ]
"45
[f ]
"46
[v _levels `i ~T0 @X0 1 a ]
[; ;fat_string.c: 46: int levels = 0;
[e = _levels -> 0 `i ]
"47
[v _expectedchar `uc ~T0 @X0 1 a ]
[; ;fat_string.c: 47: char expectedchar;
[; ;fat_string.c: 49: if (!path)
"49
[e $ ! ! != _path -> -> 0 `i `*uc 2  ]
[; ;fat_string.c: 50: return -1;
"50
[e ) -U -> 1 `i ]
[e $UE 1  ]
[e :U 2 ]
[; ;fat_string.c: 55: if (*path == '/')
"55
[e $ ! == -> *U _path `ui -> 47 `ui 3  ]
[; ;fat_string.c: 56: {
"56
{
[; ;fat_string.c: 57: expectedchar = '/';
"57
[e = _expectedchar -> -> 47 `ui `uc ]
[; ;fat_string.c: 58: path++;
"58
[e ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
"59
}
[; ;fat_string.c: 59: }
[e $U 4  ]
"60
[e :U 3 ]
[; ;fat_string.c: 60: else if (path[1] == ':' || path[2] == '\\')
[e $ ! || == -> *U + _path * -> -> 1 `i `x -> -> # *U _path `i `x `ui -> 58 `ui == -> *U + _path * -> -> 2 `i `x -> -> # *U _path `i `x `ui -> 92 `ui 5  ]
[; ;fat_string.c: 61: {
"61
{
[; ;fat_string.c: 62: expectedchar = '\\';
"62
[e = _expectedchar -> -> 92 `ui `uc ]
[; ;fat_string.c: 63: path += 3;
"63
[e =+ _path * -> -> 3 `i `x -> -> # *U _path `i `x ]
"64
}
[; ;fat_string.c: 64: }
[e $U 6  ]
"65
[e :U 5 ]
[; ;fat_string.c: 65: else
[; ;fat_string.c: 66: return -1;
"66
[e ) -U -> 1 `i ]
[e $UE 1  ]
[e :U 6 ]
[e :U 4 ]
[; ;fat_string.c: 69: while (*path)
"69
[e $U 7  ]
[e :U 8 ]
[; ;fat_string.c: 70: {
"70
{
[; ;fat_string.c: 72: for (; *path; )
"72
{
[e $U 13  ]
"73
[e :U 10 ]
[; ;fat_string.c: 73: {
{
[; ;fat_string.c: 75: if (*path == expectedchar) { path++; break; }
"75
[e $ ! == -> *U _path `i -> _expectedchar `i 14  ]
{
[e ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
[e $U 11  ]
}
[e :U 14 ]
[; ;fat_string.c: 76: path++;
"76
[e ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
"77
}
"72
[e :U 13 ]
[e $ != -> *U _path `i -> -> -> 0 `i `uc `i 10  ]
[e :U 11 ]
"77
}
[; ;fat_string.c: 77: }
[; ;fat_string.c: 80: levels++;
"80
[e ++ _levels -> 1 `i ]
"81
}
[e :U 7 ]
"69
[e $ != -> *U _path `i -> -> -> 0 `i `uc `i 8  ]
[e :U 9 ]
[; ;fat_string.c: 81: }
[; ;fat_string.c: 84: return levels-1;
"84
[e ) - _levels -> 1 `i ]
[e $UE 1  ]
[; ;fat_string.c: 85: }
"85
[e :UE 1 ]
}
"92
[v _fatfs_get_substring `(i ~T0 @X0 1 ef4`*uc`i`*uc`i ]
"93
{
[; ;fat_string.c: 92: int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
[; ;fat_string.c: 93: {
[e :U _fatfs_get_substring ]
"92
[v _path `*uc ~T0 @X0 1 r1 ]
[v _levelreq `i ~T0 @X0 1 r2 ]
[v _output `*uc ~T0 @X0 1 r3 ]
[v _max_len `i ~T0 @X0 1 r4 ]
"93
[f ]
"94
[v _i `i ~T0 @X0 1 a ]
"95
[v _pathlen `i ~T0 @X0 1 a ]
[; ;fat_string.c: 94: int i;
[; ;fat_string.c: 95: int pathlen=0;
[e = _pathlen -> 0 `i ]
"96
[v _levels `i ~T0 @X0 1 a ]
[; ;fat_string.c: 96: int levels=0;
[e = _levels -> 0 `i ]
"97
[v _copypnt `i ~T0 @X0 1 a ]
[; ;fat_string.c: 97: int copypnt=0;
[e = _copypnt -> 0 `i ]
"98
[v _expectedchar `uc ~T0 @X0 1 a ]
[; ;fat_string.c: 98: char expectedchar;
[; ;fat_string.c: 100: if (!path || max_len <= 0)
"100
[e $ ! || ! != _path -> -> 0 `i `*uc <= _max_len -> 0 `i 16  ]
[; ;fat_string.c: 101: return -1;
"101
[e ) -U -> 1 `i ]
[e $UE 15  ]
[e :U 16 ]
[; ;fat_string.c: 106: if (*path == '/')
"106
[e $ ! == -> *U _path `ui -> 47 `ui 17  ]
[; ;fat_string.c: 107: {
"107
{
[; ;fat_string.c: 108: expectedchar = '/';
"108
[e = _expectedchar -> -> 47 `ui `uc ]
[; ;fat_string.c: 109: path++;
"109
[e ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
"110
}
[; ;fat_string.c: 110: }
[e $U 18  ]
"111
[e :U 17 ]
[; ;fat_string.c: 111: else if (path[1] == ':' || path[2] == '\\')
[e $ ! || == -> *U + _path * -> -> 1 `i `x -> -> # *U _path `i `x `ui -> 58 `ui == -> *U + _path * -> -> 2 `i `x -> -> # *U _path `i `x `ui -> 92 `ui 19  ]
[; ;fat_string.c: 112: {
"112
{
[; ;fat_string.c: 113: expectedchar = '\\';
"113
[e = _expectedchar -> -> 92 `ui `uc ]
[; ;fat_string.c: 114: path += 3;
"114
[e =+ _path * -> -> 3 `i `x -> -> # *U _path `i `x ]
"115
}
[; ;fat_string.c: 115: }
[e $U 20  ]
"116
[e :U 19 ]
[; ;fat_string.c: 116: else
[; ;fat_string.c: 117: return -1;
"117
[e ) -U -> 1 `i ]
[e $UE 15  ]
[e :U 20 ]
[e :U 18 ]
[; ;fat_string.c: 120: pathlen = (int)strlen (path);
"120
[e = _pathlen -> ( _strlen (1 -> _path `*Cuc `i ]
[; ;fat_string.c: 123: for (i = 0; i<pathlen; i++)
"123
{
[e = _i -> 0 `i ]
[e $U 24  ]
"124
[e :U 21 ]
[; ;fat_string.c: 124: {
{
[; ;fat_string.c: 126: if (*path == expectedchar) levels++;
"126
[e $ ! == -> *U _path `i -> _expectedchar `i 25  ]
[e ++ _levels -> 1 `i ]
[e :U 25 ]
[; ;fat_string.c: 129: if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
"129
[e $ ! && && == _levels _levelreq != -> *U _path `i -> _expectedchar `i < _copypnt - _max_len -> 1 `i 26  ]
[; ;fat_string.c: 130: output[copypnt++] = *path;
"130
[e = *U + _output * -> ++ _copypnt -> 1 `i `x -> -> # *U _output `i `x *U _path ]
[e :U 26 ]
[; ;fat_string.c: 133: path++;
"133
[e ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
"134
}
"123
[e ++ _i -> 1 `i ]
[e :U 24 ]
[e $ < _i _pathlen 21  ]
[e :U 22 ]
"134
}
[; ;fat_string.c: 134: }
[; ;fat_string.c: 137: output[copypnt] = '\0';
"137
[e = *U + _output * -> _copypnt `x -> -> # *U _output `i `x -> -> 0 `ui `uc ]
[; ;fat_string.c: 140: if (output[0] != '\0')
"140
[e $ ! != -> *U + _output * -> -> 0 `i `x -> -> # *U _output `i `x `ui -> 0 `ui 27  ]
[; ;fat_string.c: 141: return 0;
"141
[e ) -> 0 `i ]
[e $UE 15  ]
[e $U 28  ]
"142
[e :U 27 ]
[; ;fat_string.c: 142: else
[; ;fat_string.c: 143: return -1;
"143
[e ) -U -> 1 `i ]
[e $UE 15  ]
[e :U 28 ]
[; ;fat_string.c: 144: }
"144
[e :UE 15 ]
}
"151
[v _fatfs_split_path `(i ~T0 @X0 1 ef5`*uc`*uc`i`*uc`i ]
"152
{
[; ;fat_string.c: 151: int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
[; ;fat_string.c: 152: {
[e :U _fatfs_split_path ]
"151
[v _full_path `*uc ~T0 @X0 1 r1 ]
[v _path `*uc ~T0 @X0 1 r2 ]
[v _max_path `i ~T0 @X0 1 r3 ]
[v _filename `*uc ~T0 @X0 1 r4 ]
[v _max_filename `i ~T0 @X0 1 r5 ]
"152
[f ]
"153
[v _strindex `i ~T0 @X0 1 a ]
"156
[v _levels `i ~T0 @X0 1 a ]
[; ;fat_string.c: 153: int strindex;
[; ;fat_string.c: 156: int levels = fatfs_total_path_levels(full_path);
[e = _levels ( _fatfs_total_path_levels (1 _full_path ]
[; ;fat_string.c: 157: if (levels == -1)
"157
[e $ ! == _levels -U -> 1 `i 30  ]
[; ;fat_string.c: 158: return -1;
"158
[e ) -U -> 1 `i ]
[e $UE 29  ]
[e :U 30 ]
[; ;fat_string.c: 161: if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
"161
[e $ ! != ( _fatfs_get_substring (4 , , , _full_path _levels _filename _max_filename -> 0 `i 31  ]
[; ;fat_string.c: 162: return -1;
"162
[e ) -U -> 1 `i ]
[e $UE 29  ]
[e :U 31 ]
[; ;fat_string.c: 165: if (levels == 0)
"165
[e $ ! == _levels -> 0 `i 32  ]
[; ;fat_string.c: 166: path[0] = '\0';
"166
[e = *U + _path * -> -> 0 `i `x -> -> # *U _path `i `x -> -> 0 `ui `uc ]
[e $U 33  ]
"167
[e :U 32 ]
[; ;fat_string.c: 167: else
[; ;fat_string.c: 168: {
"168
{
[; ;fat_string.c: 169: strindex = (int)strlen(full_path) - (int)strlen(filename);
"169
[e = _strindex - -> ( _strlen (1 -> _full_path `*Cuc `i -> ( _strlen (1 -> _filename `*Cuc `i ]
[; ;fat_string.c: 170: if (strindex > max_path)
"170
[e $ ! > _strindex _max_path 34  ]
[; ;fat_string.c: 171: strindex = max_path;
"171
[e = _strindex _max_path ]
[e :U 34 ]
[; ;fat_string.c: 173: memcpy(path, full_path, strindex);
"173
[e ( _memcpy (3 , , -> _path `*v -> _full_path `*Cv -> _strindex `ui ]
[; ;fat_string.c: 174: path[strindex-1] = '\0';
"174
[e = *U + _path * -> - _strindex -> 1 `i `x -> -> # *U _path `i `x -> -> 0 `ui `uc ]
"175
}
[e :U 33 ]
[; ;fat_string.c: 175: }
[; ;fat_string.c: 177: return 0;
"177
[e ) -> 0 `i ]
[e $UE 29  ]
[; ;fat_string.c: 178: }
"178
[e :UE 29 ]
}
"182
[v _FileString_StrCmpNoCase `(i ~T0 @X0 1 sf3`*uc`*uc`i ]
"183
{
[; ;fat_string.c: 182: static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
[; ;fat_string.c: 183: {
[e :U _FileString_StrCmpNoCase ]
"182
[v _s1 `*uc ~T0 @X0 1 r1 ]
[v _s2 `*uc ~T0 @X0 1 r2 ]
[v _n `i ~T0 @X0 1 r3 ]
"183
[f ]
"184
[v _diff `i ~T0 @X0 1 a ]
"185
[v _a `uc ~T0 @X0 1 a ]
[v _b `uc ~T0 @X0 1 a ]
[; ;fat_string.c: 184: int diff;
[; ;fat_string.c: 185: char a,b;
[; ;fat_string.c: 187: while (n--)
"187
[e $U 36  ]
[e :U 37 ]
[; ;fat_string.c: 188: {
"188
{
[; ;fat_string.c: 189: a = *s1;
"189
[e = _a *U _s1 ]
[; ;fat_string.c: 190: b = *s2;
"190
[e = _b *U _s2 ]
[; ;fat_string.c: 193: if ((a>='A') && (a<='Z'))
"193
[e $ ! && >= -> _a `ui -> 65 `ui <= -> _a `ui -> 90 `ui 39  ]
[; ;fat_string.c: 194: a+= 32;
"194
[e =+ _a -> -> 32 `i `uc ]
[e :U 39 ]
[; ;fat_string.c: 195: if ((b>='A') && (b<='Z'))
"195
[e $ ! && >= -> _b `ui -> 65 `ui <= -> _b `ui -> 90 `ui 40  ]
[; ;fat_string.c: 196: b+= 32;
"196
[e =+ _b -> -> 32 `i `uc ]
[e :U 40 ]
[; ;fat_string.c: 198: diff = a - b;
"198
[e = _diff - -> _a `i -> _b `i ]
[; ;fat_string.c: 201: if (diff)
"201
[e $ ! != _diff -> 0 `i 41  ]
[; ;fat_string.c: 202: return diff;
"202
[e ) _diff ]
[e $UE 35  ]
[e :U 41 ]
[; ;fat_string.c: 205: if ( (*s1 == 0) || (*s2 == 0) )
"205
[e $ ! || == -> *U _s1 `i -> 0 `i == -> *U _s2 `i -> 0 `i 42  ]
[; ;fat_string.c: 206: break;
"206
[e $U 38  ]
[e :U 42 ]
[; ;fat_string.c: 208: s1++;
"208
[e ++ _s1 * -> -> 1 `i `x -> -> # *U _s1 `i `x ]
[; ;fat_string.c: 209: s2++;
"209
[e ++ _s2 * -> -> 1 `i `x -> -> # *U _s2 `i `x ]
"210
}
[e :U 36 ]
"187
[e $ != -- _n -> 1 `i -> 0 `i 37  ]
[e :U 38 ]
[; ;fat_string.c: 210: }
[; ;fat_string.c: 211: return 0;
"211
[e ) -> 0 `i ]
[e $UE 35  ]
[; ;fat_string.c: 212: }
"212
[e :UE 35 ]
}
"217
[v _FileString_GetExtension `(i ~T0 @X0 1 sf1`*uc ]
"218
{
[; ;fat_string.c: 217: static int FileString_GetExtension(char *str)
[; ;fat_string.c: 218: {
[e :U _FileString_GetExtension ]
"217
[v _str `*uc ~T0 @X0 1 r1 ]
"218
[f ]
"219
[v _dotPos `i ~T0 @X0 1 a ]
[; ;fat_string.c: 219: int dotPos = -1;
[e = _dotPos -U -> 1 `i ]
"220
[v _strSrc `*uc ~T0 @X0 1 a ]
[; ;fat_string.c: 220: char *strSrc = str;
[e = _strSrc _str ]
[; ;fat_string.c: 223: while (*strSrc)
"223
[e $U 44  ]
[e :U 45 ]
[; ;fat_string.c: 224: {
"224
{
[; ;fat_string.c: 225: if (*strSrc=='.')
"225
[e $ ! == -> *U _strSrc `ui -> 46 `ui 47  ]
[; ;fat_string.c: 226: dotPos = (int)(strSrc-str);
"226
[e = _dotPos -> / - -> _strSrc `x -> _str `x -> -> # *U _strSrc `i `x `i ]
[e :U 47 ]
[; ;fat_string.c: 228: strSrc++;
"228
[e ++ _strSrc * -> -> 1 `i `x -> -> # *U _strSrc `i `x ]
"229
}
[e :U 44 ]
"223
[e $ != -> *U _strSrc `i -> -> -> 0 `i `uc `i 45  ]
[e :U 46 ]
[; ;fat_string.c: 229: }
[; ;fat_string.c: 231: return dotPos;
"231
[e ) _dotPos ]
[e $UE 43  ]
[; ;fat_string.c: 232: }
"232
[e :UE 43 ]
}
"237
[v _FileString_TrimLength `(i ~T0 @X0 1 sf2`*uc`i ]
"238
{
[; ;fat_string.c: 237: static int FileString_TrimLength(char *str, int strLen)
[; ;fat_string.c: 238: {
[e :U _FileString_TrimLength ]
"237
[v _str `*uc ~T0 @X0 1 r1 ]
[v _strLen `i ~T0 @X0 1 r2 ]
"238
[f ]
"239
[v _length `i ~T0 @X0 1 a ]
[; ;fat_string.c: 239: int length = strLen;
[e = _length _strLen ]
"240
[v _strSrc `*uc ~T0 @X0 1 a ]
[; ;fat_string.c: 240: char *strSrc = str+strLen-1;
[e = _strSrc - + _str * -> _strLen `x -> -> # *U _str `i `x * -> -> 1 `i `x -> -> # *U + _str * -> _strLen `x -> -> # *U _str `i `x `i `x ]
[; ;fat_string.c: 243: while (strLen != 0)
"243
[e $U 49  ]
[e :U 50 ]
[; ;fat_string.c: 244: {
"244
{
[; ;fat_string.c: 245: if (*strSrc == ' ')
"245
[e $ ! == -> *U _strSrc `ui -> 32 `ui 52  ]
[; ;fat_string.c: 246: length = (int)(strSrc - str);
"246
[e = _length -> / - -> _strSrc `x -> _str `x -> -> # *U _strSrc `i `x `i ]
[e $U 53  ]
"247
[e :U 52 ]
[; ;fat_string.c: 247: else
[; ;fat_string.c: 248: break;
"248
[e $U 51  ]
[e :U 53 ]
[; ;fat_string.c: 250: strSrc--;
"250
[e -- _strSrc * -> -> 1 `i `x -> -> # *U _strSrc `i `x ]
[; ;fat_string.c: 251: strLen--;
"251
[e -- _strLen -> 1 `i ]
"252
}
[e :U 49 ]
"243
[e $ != _strLen -> 0 `i 50  ]
[e :U 51 ]
[; ;fat_string.c: 252: }
[; ;fat_string.c: 254: return length;
"254
[e ) _length ]
[e $UE 48  ]
[; ;fat_string.c: 255: }
"255
[e :UE 48 ]
}
"260
[v _fatfs_compare_names `(i ~T0 @X0 1 ef2`*uc`*uc ]
"261
{
[; ;fat_string.c: 260: int fatfs_compare_names(char* strA, char* strB)
[; ;fat_string.c: 261: {
[e :U _fatfs_compare_names ]
"260
[v _strA `*uc ~T0 @X0 1 r1 ]
[v _strB `*uc ~T0 @X0 1 r2 ]
"261
[f ]
"262
[v _ext1 `*uc ~T0 @X0 1 a ]
[; ;fat_string.c: 262: char *ext1 = (0);
[e = _ext1 -> -> 0 `i `*uc ]
"263
[v _ext2 `*uc ~T0 @X0 1 a ]
[; ;fat_string.c: 263: char *ext2 = (0);
[e = _ext2 -> -> 0 `i `*uc ]
"264
[v _ext1Pos `i ~T0 @X0 1 a ]
[v _ext2Pos `i ~T0 @X0 1 a ]
"265
[v _file1Len `i ~T0 @X0 1 a ]
[v _file2Len `i ~T0 @X0 1 a ]
[; ;fat_string.c: 264: int ext1Pos, ext2Pos;
[; ;fat_string.c: 265: int file1Len, file2Len;
[; ;fat_string.c: 268: ext1Pos = FileString_GetExtension(strA);
"268
[e = _ext1Pos ( _FileString_GetExtension (1 _strA ]
[; ;fat_string.c: 269: ext2Pos = FileString_GetExtension(strB);
"269
[e = _ext2Pos ( _FileString_GetExtension (1 _strB ]
[; ;fat_string.c: 274: if ((ext1Pos==-1) && (ext2Pos!=-1))
"274
[e $ ! && == _ext1Pos -U -> 1 `i != _ext2Pos -U -> 1 `i 55  ]
[; ;fat_string.c: 275: return 0;
"275
[e ) -> 0 `i ]
[e $UE 54  ]
[e :U 55 ]
[; ;fat_string.c: 276: if ((ext2Pos==-1) && (ext1Pos!=-1))
"276
[e $ ! && == _ext2Pos -U -> 1 `i != _ext1Pos -U -> 1 `i 56  ]
[; ;fat_string.c: 277: return 0;
"277
[e ) -> 0 `i ]
[e $UE 54  ]
[e :U 56 ]
[; ;fat_string.c: 280: if (ext1Pos!=-1)
"280
[e $ ! != _ext1Pos -U -> 1 `i 57  ]
[; ;fat_string.c: 281: {
"281
{
[; ;fat_string.c: 283: ext1 = strA+ext1Pos+1;
"283
[e = _ext1 + + _strA * -> _ext1Pos `x -> -> # *U _strA `i `x * -> -> 1 `i `x -> -> # *U + _strA * -> _ext1Pos `x -> -> # *U _strA `i `x `i `x ]
[; ;fat_string.c: 284: ext2 = strB+ext2Pos+1;
"284
[e = _ext2 + + _strB * -> _ext2Pos `x -> -> # *U _strB `i `x * -> -> 1 `i `x -> -> # *U + _strB * -> _ext2Pos `x -> -> # *U _strB `i `x `i `x ]
[; ;fat_string.c: 287: if (strlen(ext1) != strlen(ext2))
"287
[e $ ! != ( _strlen (1 -> _ext1 `*Cuc ( _strlen (1 -> _ext2 `*Cuc 58  ]
[; ;fat_string.c: 288: return 0;
"288
[e ) -> 0 `i ]
[e $UE 54  ]
[e :U 58 ]
[; ;fat_string.c: 291: if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
"291
[e $ ! != ( _FileString_StrCmpNoCase (3 , , _ext1 _ext2 -> ( _strlen (1 -> _ext1 `*Cuc `i -> 0 `i 59  ]
[; ;fat_string.c: 292: return 0;
"292
[e ) -> 0 `i ]
[e $UE 54  ]
[e :U 59 ]
[; ;fat_string.c: 295: file1Len = ext1Pos;
"295
[e = _file1Len _ext1Pos ]
[; ;fat_string.c: 296: file2Len = ext2Pos;
"296
[e = _file2Len _ext2Pos ]
"297
}
[; ;fat_string.c: 297: }
[e $U 60  ]
"299
[e :U 57 ]
[; ;fat_string.c: 299: else
[; ;fat_string.c: 300: {
"300
{
[; ;fat_string.c: 302: file1Len = (int)strlen(strA);
"302
[e = _file1Len -> ( _strlen (1 -> _strA `*Cuc `i ]
[; ;fat_string.c: 303: file2Len = (int)strlen(strB);
"303
[e = _file2Len -> ( _strlen (1 -> _strB `*Cuc `i ]
"304
}
[e :U 60 ]
[; ;fat_string.c: 304: }
[; ;fat_string.c: 307: file1Len = FileString_TrimLength(strA, file1Len);
"307
[e = _file1Len ( _FileString_TrimLength (2 , _strA _file1Len ]
[; ;fat_string.c: 308: file2Len = FileString_TrimLength(strB, file2Len);
"308
[e = _file2Len ( _FileString_TrimLength (2 , _strB _file2Len ]
[; ;fat_string.c: 311: if (file1Len!=file2Len)
"311
[e $ ! != _file1Len _file2Len 61  ]
[; ;fat_string.c: 312: return 0;
"312
[e ) -> 0 `i ]
[e $UE 54  ]
[e :U 61 ]
[; ;fat_string.c: 315: if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
"315
[e $ ! != ( _FileString_StrCmpNoCase (3 , , _strA _strB _file1Len -> 0 `i 62  ]
[; ;fat_string.c: 316: return 0;
"316
[e ) -> 0 `i ]
[e $UE 54  ]
[e $U 63  ]
"317
[e :U 62 ]
[; ;fat_string.c: 317: else
[; ;fat_string.c: 318: return 1;
"318
[e ) -> 1 `i ]
[e $UE 54  ]
[e :U 63 ]
[; ;fat_string.c: 319: }
"319
[e :UE 54 ]
}
"323
[v _fatfs_string_ends_with_slash `(i ~T0 @X0 1 ef1`*uc ]
"324
{
[; ;fat_string.c: 323: int fatfs_string_ends_with_slash(char *path)
[; ;fat_string.c: 324: {
[e :U _fatfs_string_ends_with_slash ]
"323
[v _path `*uc ~T0 @X0 1 r1 ]
"324
[f ]
[; ;fat_string.c: 325: if (path)
"325
[e $ ! != _path -> -> 0 `i `*uc 65  ]
[; ;fat_string.c: 326: {
"326
{
[; ;fat_string.c: 327: while (*path)
"327
[e $U 66  ]
[e :U 67 ]
[; ;fat_string.c: 328: {
"328
{
[; ;fat_string.c: 330: if (!(*(path+1)))
"330
[e $ ! ! != -> *U + _path * -> -> 1 `i `x -> -> # *U _path `i `x `i -> -> -> 0 `i `uc `i 69  ]
[; ;fat_string.c: 331: {
"331
{
[; ;fat_string.c: 332: if (*path == '\\' || *path == '/')
"332
[e $ ! || == -> *U _path `ui -> 92 `ui == -> *U _path `ui -> 47 `ui 70  ]
[; ;fat_string.c: 333: return 1;
"333
[e ) -> 1 `i ]
[e $UE 64  ]
[e :U 70 ]
"334
}
[e :U 69 ]
[; ;fat_string.c: 334: }
[; ;fat_string.c: 336: path++;
"336
[e ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
"337
}
[e :U 66 ]
"327
[e $ != -> *U _path `i -> -> -> 0 `i `uc `i 67  ]
[e :U 68 ]
"338
}
[e :U 65 ]
[; ;fat_string.c: 337: }
[; ;fat_string.c: 338: }
[; ;fat_string.c: 340: return 0;
"340
[e ) -> 0 `i ]
[e $UE 64  ]
[; ;fat_string.c: 341: }
"341
[e :UE 64 ]
}
"345
[v _fatfs_get_sfn_display_name `(i ~T0 @X0 1 ef2`*uc`*uc ]
"346
{
[; ;fat_string.c: 345: int fatfs_get_sfn_display_name(char* out, char* in)
[; ;fat_string.c: 346: {
[e :U _fatfs_get_sfn_display_name ]
"345
[v _out `*uc ~T0 @X0 1 r1 ]
[v _in `*uc ~T0 @X0 1 r2 ]
"346
[f ]
"347
[v _len `i ~T0 @X0 1 a ]
[; ;fat_string.c: 347: int len = 0;
[e = _len -> 0 `i ]
[; ;fat_string.c: 348: while (*in && len <= 11)
"348
[e $U 72  ]
[e :U 73 ]
[; ;fat_string.c: 349: {
"349
{
"350
[v _a `uc ~T0 @X0 1 a ]
[; ;fat_string.c: 350: char a = *in++;
[e = _a *U ++ _in * -> -> 1 `i `x -> -> # *U _in `i `x ]
[; ;fat_string.c: 352: if (a == ' ')
"352
[e $ ! == -> _a `ui -> 32 `ui 75  ]
[; ;fat_string.c: 353: continue;
"353
[e $U 72  ]
[e $U 76  ]
"355
[e :U 75 ]
[; ;fat_string.c: 355: else if ((a>='A') && (a<='Z'))
[e $ ! && >= -> _a `ui -> 65 `ui <= -> _a `ui -> 90 `ui 77  ]
[; ;fat_string.c: 356: a+= 32;
"356
[e =+ _a -> -> 32 `i `uc ]
[e :U 77 ]
"358
[e :U 76 ]
[; ;fat_string.c: 358: *out++ = a;
[e = *U ++ _out * -> -> 1 `i `x -> -> # *U _out `i `x _a ]
[; ;fat_string.c: 359: len++;
"359
[e ++ _len -> 1 `i ]
"360
}
[e :U 72 ]
"348
[e $ && != -> *U _in `i -> -> -> 0 `i `uc `i <= _len -> 11 `i 73  ]
[e :U 74 ]
[; ;fat_string.c: 360: }
[; ;fat_string.c: 362: *out = '\0';
"362
[e = *U _out -> -> 0 `ui `uc ]
[; ;fat_string.c: 363: return 1;
"363
[e ) -> 1 `i ]
[e $UE 71  ]
[; ;fat_string.c: 364: }
"364
[e :UE 71 ]
}
"370
[v _fatfs_get_extension `(i ~T0 @X0 1 ef3`*uc`*uc`i ]
"371
{
[; ;fat_string.c: 370: int fatfs_get_extension(char* filename, char* out, int maxlen)
[; ;fat_string.c: 371: {
[e :U _fatfs_get_extension ]
"370
[v _filename `*uc ~T0 @X0 1 r1 ]
[v _out `*uc ~T0 @X0 1 r2 ]
[v _maxlen `i ~T0 @X0 1 r3 ]
"371
[f ]
"372
[v _len `i ~T0 @X0 1 a ]
[; ;fat_string.c: 372: int len = 0;
[e = _len -> 0 `i ]
"375
[v _ext_pos `i ~T0 @X0 1 a ]
[; ;fat_string.c: 375: int ext_pos = FileString_GetExtension(filename);
[e = _ext_pos ( _FileString_GetExtension (1 _filename ]
[; ;fat_string.c: 377: if (ext_pos > 0 && out && maxlen)
"377
[e $ ! && && > _ext_pos -> 0 `i != _out -> -> 0 `i `*uc != _maxlen -> 0 `i 79  ]
[; ;fat_string.c: 378: {
"378
{
[; ;fat_string.c: 379: filename += ext_pos + 1;
"379
[e =+ _filename * -> + _ext_pos -> 1 `i `x -> -> # *U _filename `i `x ]
[; ;fat_string.c: 381: while (*filename && len < (maxlen-1))
"381
[e $U 80  ]
[e :U 81 ]
[; ;fat_string.c: 382: {
"382
{
"383
[v _a `uc ~T0 @X0 1 a ]
[; ;fat_string.c: 383: char a = *filename++;
[e = _a *U ++ _filename * -> -> 1 `i `x -> -> # *U _filename `i `x ]
[; ;fat_string.c: 386: if ((a>='A') && (a<='Z'))
"386
[e $ ! && >= -> _a `ui -> 65 `ui <= -> _a `ui -> 90 `ui 83  ]
[; ;fat_string.c: 387: a+= 32;
"387
[e =+ _a -> -> 32 `i `uc ]
[e :U 83 ]
[; ;fat_string.c: 389: *out++ = a;
"389
[e = *U ++ _out * -> -> 1 `i `x -> -> # *U _out `i `x _a ]
[; ;fat_string.c: 390: len++;
"390
[e ++ _len -> 1 `i ]
"391
}
[e :U 80 ]
"381
[e $ && != -> *U _filename `i -> -> -> 0 `i `uc `i < _len - _maxlen -> 1 `i 81  ]
[e :U 82 ]
[; ;fat_string.c: 391: }
[; ;fat_string.c: 393: *out = '\0';
"393
[e = *U _out -> -> 0 `ui `uc ]
[; ;fat_string.c: 394: return 1;
"394
[e ) -> 1 `i ]
[e $UE 78  ]
"395
}
[e :U 79 ]
[; ;fat_string.c: 395: }
[; ;fat_string.c: 397: return 0;
"397
[e ) -> 0 `i ]
[e $UE 78  ]
[; ;fat_string.c: 398: }
"398
[e :UE 78 ]
}
"403
[v _fatfs_create_path_string `(i ~T0 @X0 1 ef4`*uc`*uc`*uc`i ]
"404
{
[; ;fat_string.c: 403: int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
[; ;fat_string.c: 404: {
[e :U _fatfs_create_path_string ]
"403
[v _path `*uc ~T0 @X0 1 r1 ]
[v _filename `*uc ~T0 @X0 1 r2 ]
[v _out `*uc ~T0 @X0 1 r3 ]
[v _maxlen `i ~T0 @X0 1 r4 ]
"404
[f ]
"405
[v _len `i ~T0 @X0 1 a ]
[; ;fat_string.c: 405: int len = 0;
[e = _len -> 0 `i ]
"406
[v _last `uc ~T0 @X0 1 a ]
[; ;fat_string.c: 406: char last = 0;
[e = _last -> -> 0 `i `uc ]
"407
[v _seperator `uc ~T0 @X0 1 a ]
[; ;fat_string.c: 407: char seperator = '/';
[e = _seperator -> -> 47 `ui `uc ]
[; ;fat_string.c: 409: if (path && filename && out && maxlen > 0)
"409
[e $ ! && && && != _path -> -> 0 `i `*uc != _filename -> -> 0 `i `*uc != _out -> -> 0 `i `*uc > _maxlen -> 0 `i 85  ]
[; ;fat_string.c: 410: {
"410
{
[; ;fat_string.c: 411: while (*path && len < (maxlen-2))
"411
[e $U 86  ]
[e :U 87 ]
[; ;fat_string.c: 412: {
"412
{
[; ;fat_string.c: 413: last = *path++;
"413
[e = _last *U ++ _path * -> -> 1 `i `x -> -> # *U _path `i `x ]
[; ;fat_string.c: 414: if (last == '\\')
"414
[e $ ! == -> _last `ui -> 92 `ui 89  ]
[; ;fat_string.c: 415: seperator = '\\';
"415
[e = _seperator -> -> 92 `ui `uc ]
[e :U 89 ]
[; ;fat_string.c: 416: *out++ = last;
"416
[e = *U ++ _out * -> -> 1 `i `x -> -> # *U _out `i `x _last ]
[; ;fat_string.c: 417: len++;
"417
[e ++ _len -> 1 `i ]
"418
}
[e :U 86 ]
"411
[e $ && != -> *U _path `i -> -> -> 0 `i `uc `i < _len - _maxlen -> 2 `i 87  ]
[e :U 88 ]
[; ;fat_string.c: 418: }
[; ;fat_string.c: 421: if (last != '\\' && last != '/')
"421
[e $ ! && != -> _last `ui -> 92 `ui != -> _last `ui -> 47 `ui 90  ]
[; ;fat_string.c: 422: *out++ = seperator;
"422
[e = *U ++ _out * -> -> 1 `i `x -> -> # *U _out `i `x _seperator ]
[e :U 90 ]
[; ;fat_string.c: 424: while (*filename && len < (maxlen-1))
"424
[e $U 91  ]
[e :U 92 ]
[; ;fat_string.c: 425: {
"425
{
[; ;fat_string.c: 426: *out++ = *filename++;
"426
[e = *U ++ _out * -> -> 1 `i `x -> -> # *U _out `i `x *U ++ _filename * -> -> 1 `i `x -> -> # *U _filename `i `x ]
[; ;fat_string.c: 427: len++;
"427
[e ++ _len -> 1 `i ]
"428
}
[e :U 91 ]
"424
[e $ && != -> *U _filename `i -> -> -> 0 `i `uc `i < _len - _maxlen -> 1 `i 92  ]
[e :U 93 ]
[; ;fat_string.c: 428: }
[; ;fat_string.c: 430: *out = '\0';
"430
[e = *U _out -> -> 0 `ui `uc ]
[; ;fat_string.c: 432: return 1;
"432
[e ) -> 1 `i ]
[e $UE 84  ]
"433
}
[e :U 85 ]
[; ;fat_string.c: 433: }
[; ;fat_string.c: 435: return 0;
"435
[e ) -> 0 `i ]
[e $UE 84  ]
[; ;fat_string.c: 436: }
"436
[e :UE 84 ]
}
