

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sat Jan 21 13:44:39 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     _ADCON1	set	4033
    41  0000                     _CMCON	set	4020
    42  0000                     _PIR1bits	set	3998
    43  0000                     _PORTDbits	set	3971
    44  0000                     _SSPBUF	set	4041
    45  0000                     _SSPCON1	set	4038
    46  0000                     _SSPCON1bits	set	4038
    47  0000                     _SSPSTAT	set	4039
    48  0000                     _SSPSTATbits	set	4039
    49  0000                     _TRISAbits	set	3986
    50  0000                     _TRISBbits	set	3987
    51  0000                     _TRISCbits	set	3988
    52  0000                     _TRISDbits	set	3989
    53  0000                     _LATA5	set	31821
    54  0000                     _LATB4	set	31828
    55  0000                     _RD4	set	31772
    56  0000                     _RD5	set	31773
    57  0000                     _TRISA5	set	31893
    58  0000                     _TRISB0	set	31896
    59  0000                     _TRISB1	set	31897
    60  0000                     _TRISB4	set	31900
    61  0000                     _TRISC7	set	31911
    62                           
    63                           	psect	mediumconst
    64  007ECE                     __pmediumconst:
    65                           	opt stack 0
    66  007ECE  00                 	db	0
    67  007ECF                     __stringdata:
    68                           	opt stack 0
    69  007ECF                     STR_1:
    70  007ECF  0A                 	db	10
    71  007ED0  0D                 	db	13
    72  007ED1  50                 	db	80	;'P'
    73  007ED2  6C                 	db	108	;'l'
    74  007ED3  65                 	db	101	;'e'
    75  007ED4  61                 	db	97	;'a'
    76  007ED5  73                 	db	115	;'s'
    77  007ED6  65                 	db	101	;'e'
    78  007ED7  20                 	db	32
    79  007ED8  73                 	db	115	;'s'
    80  007ED9  65                 	db	101	;'e'
    81  007EDA  6C                 	db	108	;'l'
    82  007EDB  65                 	db	101	;'e'
    83  007EDC  63                 	db	99	;'c'
    84  007EDD  74                 	db	116	;'t'
    85  007EDE  20                 	db	32
    86  007EDF  61                 	db	97	;'a'
    87  007EE0  20                 	db	32
    88  007EE1  66                 	db	102	;'f'
    89  007EE2  69                 	db	105	;'i'
    90  007EE3  6C                 	db	108	;'l'
    91  007EE4  65                 	db	101	;'e'
    92  007EE5  20                 	db	32
    93  007EE6  6F                 	db	111	;'o'
    94  007EE7  70                 	db	112	;'p'
    95  007EE8  65                 	db	101	;'e'
    96  007EE9  72                 	db	114	;'r'
    97  007EEA  61                 	db	97	;'a'
    98  007EEB  74                 	db	116	;'t'
    99  007EEC  69                 	db	105	;'i'
   100  007EED  6F                 	db	111	;'o'
   101  007EEE  6E                 	db	110	;'n'
   102  007EEF  3F                 	db	63	;'?'
   103  007EF0  0A                 	db	10
   104  007EF1  0D                 	db	13
   105  007EF2  57                 	db	87	;'W'
   106  007EF3  72                 	db	114	;'r'
   107  007EF4  69                 	db	105	;'i'
   108  007EF5  74                 	db	116	;'t'
   109  007EF6  65                 	db	101	;'e'
   110  007EF7  20                 	db	32
   111  007EF8  20                 	db	32
   112  007EF9  20                 	db	32
   113  007EFA  20                 	db	32
   114  007EFB  2D                 	db	45
   115  007EFC  20                 	db	32
   116  007EFD  77                 	db	119	;'w'
   117  007EFE  0A                 	db	10
   118  007EFF  0D                 	db	13
   119  007F00  52                 	db	82	;'R'
   120  007F01  65                 	db	101	;'e'
   121  007F02  61                 	db	97	;'a'
   122  007F03  64                 	db	100	;'d'
   123  007F04  20                 	db	32
   124  007F05  20                 	db	32
   125  007F06  20                 	db	32
   126  007F07  20                 	db	32
   127  007F08  20                 	db	32
   128  007F09  2D                 	db	45
   129  007F0A  20                 	db	32
   130  007F0B  72                 	db	114	;'r'
   131  007F0C  0A                 	db	10
   132  007F0D  0D                 	db	13
   133  007F0E  4D                 	db	77	;'M'
   134  007F0F  75                 	db	117	;'u'
   135  007F10  6C                 	db	108	;'l'
   136  007F11  74                 	db	116	;'t'
   137  007F12  69                 	db	105	;'i'
   138  007F13  5F                 	db	95	;'_'
   139  007F14  57                 	db	87	;'W'
   140  007F15  72                 	db	114	;'r'
   141  007F16  69                 	db	105	;'i'
   142  007F17  74                 	db	116	;'t'
   143  007F18  65                 	db	101	;'e'
   144  007F19  20                 	db	32
   145  007F1A  20                 	db	32
   146  007F1B  20                 	db	32
   147  007F1C  2D                 	db	45
   148  007F1D  20                 	db	32
   149  007F1E  61                 	db	97	;'a'
   150  007F1F  0A                 	db	10
   151  007F20  0D                 	db	13
   152  007F21  4D                 	db	77	;'M'
   153  007F22  75                 	db	117	;'u'
   154  007F23  6C                 	db	108	;'l'
   155  007F24  74                 	db	116	;'t'
   156  007F25  69                 	db	105	;'i'
   157  007F26  5F                 	db	95	;'_'
   158  007F27  52                 	db	82	;'R'
   159  007F28  65                 	db	101	;'e'
   160  007F29  61                 	db	97	;'a'
   161  007F2A  64                 	db	100	;'d'
   162  007F2B  20                 	db	32
   163  007F2C  20                 	db	32
   164  007F2D  20                 	db	32
   165  007F2E  2D                 	db	45
   166  007F2F  20                 	db	32
   167  007F30  64                 	db	100	;'d'
   168  007F31  0A                 	db	10
   169  007F32  0D                 	db	13
   170  007F33  00                 	db	0
   171  007F34                     STR_9:
   172  007F34  0D                 	db	13
   173  007F35  0A                 	db	10
   174  007F36  0D                 	db	13
   175  007F37  0A                 	db	10
   176  007F38  4D                 	db	77	;'M'
   177  007F39  75                 	db	117	;'u'
   178  007F3A  6C                 	db	108	;'l'
   179  007F3B  74                 	db	116	;'t'
   180  007F3C  69                 	db	105	;'i'
   181  007F3D  20                 	db	32
   182  007F3E  52                 	db	82	;'R'
   183  007F3F  65                 	db	101	;'e'
   184  007F40  61                 	db	97	;'a'
   185  007F41  64                 	db	100	;'d'
   186  007F42  20                 	db	32
   187  007F43  4F                 	db	79	;'O'
   188  007F44  76                 	db	118	;'v'
   189  007F45  65                 	db	101	;'e'
   190  007F46  72                 	db	114	;'r'
   191  007F47  0A                 	db	10
   192  007F48  0D                 	db	13
   193  007F49  00                 	db	0
   194  007F4A                     STR_11:
   195  007F4A  0A                 	db	10
   196  007F4B  0D                 	db	13
   197  007F4C  53                 	db	83	;'S'
   198  007F4D  44                 	db	68	;'D'
   199  007F4E  20                 	db	32
   200  007F4F  43                 	db	67	;'C'
   201  007F50  61                 	db	97	;'a'
   202  007F51  72                 	db	114	;'r'
   203  007F52  64                 	db	100	;'d'
   204  007F53  20                 	db	32
   205  007F54  49                 	db	73	;'I'
   206  007F55  6E                 	db	110	;'n'
   207  007F56  73                 	db	115	;'s'
   208  007F57  65                 	db	101	;'e'
   209  007F58  72                 	db	114	;'r'
   210  007F59  74                 	db	116	;'t'
   211  007F5A  65                 	db	101	;'e'
   212  007F5B  64                 	db	100	;'d'
   213  007F5C  0A                 	db	10
   214  007F5D  0D                 	db	13
   215  007F5E  00                 	db	0
   216  007F5F                     STR_7:
   217  007F5F  4D                 	db	77	;'M'
   218  007F60  55                 	db	85	;'U'
   219  007F61  4C                 	db	76	;'L'
   220  007F62  54                 	db	84	;'T'
   221  007F63  49                 	db	73	;'I'
   222  007F64  20                 	db	32
   223  007F65  57                 	db	87	;'W'
   224  007F66  52                 	db	82	;'R'
   225  007F67  49                 	db	73	;'I'
   226  007F68  54                 	db	84	;'T'
   227  007F69  45                 	db	69	;'E'
   228  007F6A  20                 	db	32
   229  007F6B  4F                 	db	79	;'O'
   230  007F6C  56                 	db	86	;'V'
   231  007F6D  45                 	db	69	;'E'
   232  007F6E  52                 	db	82	;'R'
   233  007F6F  0A                 	db	10
   234  007F70  0D                 	db	13
   235  007F71  00                 	db	0
   236  007F72                     STR_2:
   237  007F72  0A                 	db	10
   238  007F73  0D                 	db	13
   239  007F74  49                 	db	73	;'I'
   240  007F75  6E                 	db	110	;'n'
   241  007F76  76                 	db	118	;'v'
   242  007F77  61                 	db	97	;'a'
   243  007F78  6C                 	db	108	;'l'
   244  007F79  69                 	db	105	;'i'
   245  007F7A  64                 	db	100	;'d'
   246  007F7B  20                 	db	32
   247  007F7C  45                 	db	69	;'E'
   248  007F7D  6E                 	db	110	;'n'
   249  007F7E  74                 	db	116	;'t'
   250  007F7F  72                 	db	114	;'r'
   251  007F80  79                 	db	121	;'y'
   252  007F81  2E                 	db	46
   253  007F82  2E                 	db	46
   254  007F83  21                 	db	33
   255  007F84  00                 	db	0
   256  007F85                     STR_10:
   257  007F85  42                 	db	66	;'B'
   258  007F86  4C                 	db	76	;'L'
   259  007F87  4F                 	db	79	;'O'
   260  007F88  43                 	db	67	;'C'
   261  007F89  4B                 	db	75	;'K'
   262  007F8A  20                 	db	32
   263  007F8B  52                 	db	82	;'R'
   264  007F8C  45                 	db	69	;'E'
   265  007F8D  41                 	db	65	;'A'
   266  007F8E  44                 	db	68	;'D'
   267  007F8F  20                 	db	32
   268  007F90  4F                 	db	79	;'O'
   269  007F91  56                 	db	86	;'V'
   270  007F92  45                 	db	69	;'E'
   271  007F93  52                 	db	82	;'R'
   272  007F94  0A                 	db	10
   273  007F95  0D                 	db	13
   274  007F96  00                 	db	0
   275  007F97                     STR_6:
   276  007F97  43                 	db	67	;'C'
   277  007F98  4D                 	db	77	;'M'
   278  007F99  44                 	db	68	;'D'
   279  007F9A  32                 	db	50	;'2'
   280  007F9B  35                 	db	53	;'5'
   281  007F9C  20                 	db	32
   282  007F9D  41                 	db	65	;'A'
   283  007F9E  63                 	db	99	;'c'
   284  007F9F  63                 	db	99	;'c'
   285  007FA0  65                 	db	101	;'e'
   286  007FA1  70                 	db	112	;'p'
   287  007FA2  74                 	db	116	;'t'
   288  007FA3  65                 	db	101	;'e'
   289  007FA4  64                 	db	100	;'d'
   290  007FA5  0A                 	db	10
   291  007FA6  0D                 	db	13
   292  007FA7  00                 	db	0
   293  007FA8                     STR_5:
   294  007FA8  42                 	db	66	;'B'
   295  007FA9  4C                 	db	76	;'L'
   296  007FAA  4F                 	db	79	;'O'
   297  007FAB  43                 	db	67	;'C'
   298  007FAC  4B                 	db	75	;'K'
   299  007FAD  20                 	db	32
   300  007FAE  57                 	db	87	;'W'
   301  007FAF  52                 	db	82	;'R'
   302  007FB0  49                 	db	73	;'I'
   303  007FB1  54                 	db	84	;'T'
   304  007FB2  45                 	db	69	;'E'
   305  007FB3  20                 	db	32
   306  007FB4  4F                 	db	79	;'O'
   307  007FB5  56                 	db	86	;'V'
   308  007FB6  45                 	db	69	;'E'
   309  007FB7  52                 	db	82	;'R'
   310  007FB8  00                 	db	0
   311  007FB9                     STR_15:
   312  007FB9  35                 	db	53	;'5'
   313  007FBA  31                 	db	49	;'1'
   314  007FBB  32                 	db	50	;'2'
   315  007FBC  20                 	db	32
   316  007FBD  42                 	db	66	;'B'
   317  007FBE  79                 	db	121	;'y'
   318  007FBF  74                 	db	116	;'t'
   319  007FC0  65                 	db	101	;'e'
   320  007FC1  73                 	db	115	;'s'
   321  007FC2  20                 	db	32
   322  007FC3  53                 	db	83	;'S'
   323  007FC4  65                 	db	101	;'e'
   324  007FC5  74                 	db	116	;'t'
   325  007FC6  0A                 	db	10
   326  007FC7  0D                 	db	13
   327  007FC8  00                 	db	0
   328  007FC9                     STR_4:
   329  007FC9  43                 	db	67	;'C'
   330  007FCA  4D                 	db	77	;'M'
   331  007FCB  44                 	db	68	;'D'
   332  007FCC  32                 	db	50	;'2'
   333  007FCD  34                 	db	52	;'4'
   334  007FCE  20                 	db	32
   335  007FCF  41                 	db	65	;'A'
   336  007FD0  63                 	db	99	;'c'
   337  007FD1  63                 	db	99	;'c'
   338  007FD2  65                 	db	101	;'e'
   339  007FD3  70                 	db	112	;'p'
   340  007FD4  74                 	db	116	;'t'
   341  007FD5  65                 	db	101	;'e'
   342  007FD6  64                 	db	100	;'d'
   343  007FD7  00                 	db	0
   344  007FD8                     STR_3:
   345  007FD8  49                 	db	73	;'I'
   346  007FD9  6E                 	db	110	;'n'
   347  007FDA  73                 	db	115	;'s'
   348  007FDB  65                 	db	101	;'e'
   349  007FDC  72                 	db	114	;'r'
   350  007FDD  74                 	db	116	;'t'
   351  007FDE  20                 	db	32
   352  007FDF  53                 	db	83	;'S'
   353  007FE0  44                 	db	68	;'D'
   354  007FE1  20                 	db	32
   355  007FE2  43                 	db	67	;'C'
   356  007FE3  61                 	db	97	;'a'
   357  007FE4  72                 	db	114	;'r'
   358  007FE5  64                 	db	100	;'d'
   359  007FE6  00                 	db	0
   360  007FE7                     STR_14:
   361  007FE7  45                 	db	69	;'E'
   362  007FE8  72                 	db	114	;'r'
   363  007FE9  72                 	db	114	;'r'
   364  007FEA  6F                 	db	111	;'o'
   365  007FEB  72                 	db	114	;'r'
   366  007FEC  21                 	db	33
   367  007FED  21                 	db	33
   368  007FEE  21                 	db	33
   369  007FEF  0A                 	db	10
   370  007FF0  0D                 	db	13
   371  007FF1  00                 	db	0
   372  007FF2                     STR_13:
   373  007FF2  53                 	db	83	;'S'
   374  007FF3  55                 	db	85	;'U'
   375  007FF4  43                 	db	67	;'C'
   376  007FF5  43                 	db	67	;'C'
   377  007FF6  45                 	db	69	;'E'
   378  007FF7  53                 	db	83	;'S'
   379  007FF8  53                 	db	83	;'S'
   380  007FF9  0A                 	db	10
   381  007FFA  0D                 	db	13
   382  007FFB  00                 	db	0
   383  007FFC                     STR_8:
   384  007FFC  0D                 	db	13
   385  007FFD  0A                 	db	10
   386  007FFE  00                 	db	0
   387  007FFF                     __end_of__stringdata:
   388                           	opt stack 0
   389                           
   390                           ; #config settings
   391  007FFF  00                 	db	0	; dummy byte at the end
   392  0000                     
   393                           	psect	cinit
   394  0074CC                     __pcinit:
   395                           	opt stack 0
   396  0074CC                     start_initialization:
   397                           	opt stack 0
   398  0074CC                     __initialization:
   399                           	opt stack 0
   400                           
   401                           ; Clear objects allocated to BIGRAM (1024 bytes)
   402  0074CC  EE04  F000         	lfsr	0,__pbssBIGRAM
   403  0074D0  EE14 F000          	lfsr	1,1024
   404  0074D4                     clear_0:
   405  0074D4  6AEE               	clrf	postinc0,c
   406  0074D6  50E5               	movf	postdec1,w,c
   407  0074D8  50E1               	movf	fsr1l,w,c
   408  0074DA  E1FC               	bnz	clear_0
   409  0074DC  50E2               	movf	fsr1h,w,c
   410  0074DE  E1FA               	bnz	clear_0
   411  0074E0                     end_of_initialization:
   412                           	opt stack 0
   413  0074E0                     __end_of__initialization:
   414                           	opt stack 0
   415  0074E0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   416  0074E2  6EF8               	movwf	tblptru,c
   417  0074E4  0100               	movlb	0
   418  0074E6  EF57  F03A         	goto	_main	;jump to C main() function
   419                           tblptru	equ	0xFF8
   420                           postinc0	equ	0xFEE
   421                           postdec1	equ	0xFE5
   422                           fsr1h	equ	0xFE2
   423                           fsr1l	equ	0xFE1
   424                           
   425                           	psect	bssBIGRAM
   426  000400                     __pbssBIGRAM:
   427                           	opt stack 0
   428  000400                     _ctr:
   429                           	opt stack 0
   430  000400                     	ds	512
   431  000600                     _str:
   432                           	opt stack 0
   433  000600                     	ds	512
   434                           tblptru	equ	0xFF8
   435                           postinc0	equ	0xFEE
   436                           postdec1	equ	0xFE5
   437                           fsr1h	equ	0xFE2
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	cstackCOMRAM
   441  000001                     __pcstackCOMRAM:
   442                           	opt stack 0
   443  000001                     ReadSPI__@TempVar:
   444                           	opt stack 0
   445  000001                     WriteSPI_@TempVar:
   446                           	opt stack 0
   447  000001                     OpenSPI@bus_mode:
   448                           	opt stack 0
   449  000001                     WriteSPI@TempVar:
   450                           	opt stack 0
   451  000001                     Delay100TCYx@unit:
   452                           	opt stack 0
   453  000001                     Delay10TCYx@unit:
   454                           	opt stack 0
   455  000001                     Delay1KTCYx@unit:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x0
   459  000001                     	ds	1
   460  000002                     ??_ReadUART_:
   461  000002                     ??_WriteUART_:
   462  000002                     delay_ms@t:
   463                           	opt stack 0
   464  000002                     WriteSPI_@data_out:
   465                           	opt stack 0
   466  000002                     response@buff:
   467                           	opt stack 0
   468  000002                     OpenSPI@smp_phase:
   469                           	opt stack 0
   470  000002                     WriteSPI@data_out:
   471                           	opt stack 0
   472                           
   473                           ; 1 bytes @ 0x1
   474  000002                     	ds	1
   475  000003                     ?_proceed:
   476                           	opt stack 0
   477  000003                     delay_ms@i:
   478                           	opt stack 0
   479  000003                     WriteUART_@uartdata:
   480                           	opt stack 0
   481  000003                     OpenSPI@sync_mode:
   482                           	opt stack 0
   483  000003                     Command@arg:
   484                           	opt stack 0
   485                           
   486                           ; 4 bytes @ 0x2
   487  000003                     	ds	1
   488  000004                     Delay_s@t:
   489                           	opt stack 0
   490  000004                     WriteUART_@bitcount:
   491                           	opt stack 0
   492  000004                     ReadUART_@d:
   493                           	opt stack 0
   494  000004                     Soft_Hard_Init@i:
   495                           	opt stack 0
   496  000004                     dummy_clocks@n:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x3
   500  000004                     	ds	1
   501  000005                     Delay_s@i:
   502                           	opt stack 0
   503  000005                     ReadUART_@bitcount:
   504                           	opt stack 0
   505  000005                     putsUART_@data:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x4
   509  000005                     	ds	1
   510  000006                     ??_dummy_clocks:
   511  000006                     Delay_s@j:
   512                           	opt stack 0
   513  000006                     ReadUART_@c:
   514                           	opt stack 0
   515  000006                     Soft_Hard_Init@sync_mode:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x5
   519  000006                     	ds	1
   520  000007                     ReadUART_@datauart:
   521                           	opt stack 0
   522  000007                     Soft_Hard_Init@bus_mode:
   523                           	opt stack 0
   524  000007                     Command@CRCbits:
   525                           	opt stack 0
   526  000007                     dummy_clocks@i:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x6
   530  000007                     	ds	1
   531  000008                     ReadUART_@uartdata:
   532                           	opt stack 0
   533  000008                     Soft_Hard_Init@smp_phase:
   534                           	opt stack 0
   535  000008                     Command@cmd:
   536                           	opt stack 0
   537                           
   538                           ; 1 bytes @ 0x7
   539  000008                     	ds	1
   540  000009                     multi_read@ptr:
   541                           	opt stack 0
   542  000009                     write_block@i:
   543                           	opt stack 0
   544  000009                     multi_write@i:
   545                           	opt stack 0
   546  000009                     read_block@count:
   547                           	opt stack 0
   548  000009                     reset@i:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x8
   552  000009                     	ds	1
   553  00000A                     multi_read@count:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x9
   557  00000A                     	ds	1
   558  00000B                     write_block@buff:
   559                           	opt stack 0
   560  00000B                     multi_write@data:
   561                           	opt stack 0
   562  00000B                     read_block@i:
   563                           	opt stack 0
   564  00000B                     reset@count:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0xA
   568  00000B                     	ds	1
   569  00000C                     multi_read@buff:
   570                           	opt stack 0
   571  00000C                     multi_write@j:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0xB
   575  00000C                     	ds	1
   576  00000D                     read_block@buff:
   577                           	opt stack 0
   578  00000D                     reset@buff:
   579                           	opt stack 0
   580  00000D                     multi_read@length:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0xC
   584  00000D                     	ds	1
   585  00000E                     multi_write@buff:
   586                           	opt stack 0
   587  00000E                     read_block@length:
   588                           	opt stack 0
   589  00000E                     init@i:
   590                           	opt stack 0
   591                           
   592                           ; 2 bytes @ 0xD
   593  00000E                     	ds	2
   594  000010                     File_IO@c:
   595                           	opt stack 0
   596  000010                     init@count1:
   597                           	opt stack 0
   598                           
   599                           ; 2 bytes @ 0xF
   600  000010                     	ds	2
   601  000012                     init@count:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x11
   605  000012                     	ds	2
   606  000014                     init@count2:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0x13
   610  000014                     	ds	2
   611  000016                     init@buff:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x15
   615  000016                     	ds	1
   616  000017                     tblptru	equ	0xFF8
   617                           postinc0	equ	0xFEE
   618                           postdec1	equ	0xFE5
   619                           fsr1h	equ	0xFE2
   620                           fsr1l	equ	0xFE1
   621                           
   622                           ; 0 bytes @ 0x16
   623 ;;
   624 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   625 ;;
   626 ;; *************** function _main *****************
   627 ;; Defined at:
   628 ;;		line 55 in file "main.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;		None
   631 ;; Auto vars:     Size  Location     Type
   632 ;;		None
   633 ;; Return value:  Size  Location     Type
   634 ;;		None               void
   635 ;; Registers used:
   636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   637 ;; Tracked objects:
   638 ;;		On entry : 0/0
   639 ;;		On exit  : 0/0
   640 ;;		Unchanged: 0/0
   641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   642 ;;      Params:         0       0       0       0       0       0       0       0       0
   643 ;;      Locals:         0       0       0       0       0       0       0       0       0
   644 ;;      Temps:          0       0       0       0       0       0       0       0       0
   645 ;;      Totals:         0       0       0       0       0       0       0       0       0
   646 ;;Total ram usage:        0 bytes
   647 ;; Hardware stack levels required when called:    6
   648 ;; This function calls:
   649 ;;		_File_IO
   650 ;;		_OpenUART_
   651 ;;		_Soft_Hard_Init
   652 ;;		_init
   653 ;;		_putsUART_
   654 ;; This function is called by:
   655 ;;		Startup code after reset
   656 ;; This function uses a non-reentrant model
   657 ;;
   658                           
   659                           	psect	text0
   660  0074AE                     __ptext0:
   661                           	opt stack 0
   662  0074AE                     _main:
   663                           	opt stack 25
   664                           
   665                           ;main.c: 57: Soft_Hard_Init();
   666                           
   667                           ;incstack = 0
   668  0074AE  ECEF  F03A         	call	_Soft_Hard_Init	;wreg free
   669                           
   670                           ;main.c: 58: OpenUART_();
   671  0074B2  ECDF  F039         	call	_OpenUART_	;wreg free
   672                           
   673                           ;main.c: 59: putsUART_("Insert SD Card");
   674  0074B6  0E7F               	movlw	high STR_3
   675  0074B8  6E06               	movwf	putsUART_@data+1,c
   676  0074BA  0ED8               	movlw	low STR_3
   677  0074BC  6E05               	movwf	putsUART_@data,c
   678  0074BE  EC89  F03A         	call	_putsUART_	;wreg free
   679                           
   680                           ;main.c: 60: init();
   681  0074C2  EC77  F03E         	call	_init	;wreg free
   682  0074C6                     l1658:
   683                           
   684                           ;main.c: 62: {
   685                           ;main.c: 63: File_IO();
   686  0074C6  EC41  F03B         	call	_File_IO	;wreg free
   687  0074CA  D7FD               	goto	l1658
   688  0074CC                     __end_of_main:
   689                           	opt stack 0
   690                           tblptru	equ	0xFF8
   691                           postinc0	equ	0xFEE
   692                           postdec1	equ	0xFE5
   693                           fsr1h	equ	0xFE2
   694                           fsr1l	equ	0xFE1
   695                           
   696 ;; *************** function _init *****************
   697 ;; Defined at:
   698 ;;		line 66 in file "initialization.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;		None
   701 ;; Auto vars:     Size  Location     Type
   702 ;;  count2          2   19[COMRAM] int 
   703 ;;  count           2   17[COMRAM] int 
   704 ;;  count1          2   15[COMRAM] int 
   705 ;;  i               2   13[COMRAM] int 
   706 ;;  buff            1   21[COMRAM] unsigned char 
   707 ;; Return value:  Size  Location     Type
   708 ;;                  2   18[COMRAM] int 
   709 ;; Registers used:
   710 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   711 ;; Tracked objects:
   712 ;;		On entry : 0/0
   713 ;;		On exit  : 0/0
   714 ;;		Unchanged: 0/0
   715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   716 ;;      Params:         0       0       0       0       0       0       0       0       0
   717 ;;      Locals:         9       0       0       0       0       0       0       0       0
   718 ;;      Temps:          0       0       0       0       0       0       0       0       0
   719 ;;      Totals:         9       0       0       0       0       0       0       0       0
   720 ;;Total ram usage:        9 bytes
   721 ;; Hardware stack levels used:    1
   722 ;; Hardware stack levels required when called:    5
   723 ;; This function calls:
   724 ;;		_Command
   725 ;;		_Delay_s
   726 ;;		_delay_ms
   727 ;;		_dummy_clocks
   728 ;;		_proceed
   729 ;;		_putsUART_
   730 ;;		_reset
   731 ;;		_response
   732 ;; This function is called by:
   733 ;;		_main
   734 ;; This function uses a non-reentrant model
   735 ;;
   736                           
   737                           	psect	text1
   738  007CEE                     __ptext1:
   739                           	opt stack 0
   740  007CEE                     _init:
   741                           	opt stack 25
   742                           
   743                           ;initialization.c: 68: int i = 0, count = 0, count1 = 0, count2 = 0;
   744                           
   745                           ;incstack = 0
   746  007CEE  0E00               	movlw	0
   747  007CF0  6E0F               	movwf	init@i+1,c
   748  007CF2  0E00               	movlw	0
   749  007CF4  6E0E               	movwf	init@i,c
   750  007CF6  0E00               	movlw	0
   751  007CF8  6E13               	movwf	init@count+1,c
   752  007CFA  0E00               	movlw	0
   753  007CFC  6E12               	movwf	init@count,c
   754  007CFE  0E00               	movlw	0
   755  007D00  6E11               	movwf	init@count1+1,c
   756  007D02  0E00               	movlw	0
   757  007D04  6E10               	movwf	init@count1,c
   758  007D06  0E00               	movlw	0
   759  007D08  6E15               	movwf	init@count2+1,c
   760  007D0A  0E00               	movlw	0
   761  007D0C  6E14               	movwf	init@count2,c
   762                           
   763                           ;initialization.c: 69: unsigned char buff;
   764                           ;initialization.c: 70: reset();
   765  007D0E  EC7D  F03B         	call	_reset	;wreg free
   766                           
   767                           ;initialization.c: 71: delay_ms(500);
   768  007D12  0EF4               	movlw	244
   769  007D14  EC3D  F03A         	call	_delay_ms
   770  007D18                     l1554:
   771                           
   772                           ;initialization.c: 75: dummy_clocks(8);
   773  007D18  0E00               	movlw	0
   774  007D1A  6E05               	movwf	dummy_clocks@n+1,c
   775  007D1C  0E08               	movlw	8
   776  007D1E  6E04               	movwf	dummy_clocks@n,c
   777  007D20  ECD1  F03A         	call	_dummy_clocks	;wreg free
   778                           
   779                           ;initialization.c: 76: Command(0X41, 0X00000000, 0X00);
   780  007D24  0E00               	movlw	0
   781  007D26  6E03               	movwf	Command@arg,c
   782  007D28  0E00               	movlw	0
   783  007D2A  6E04               	movwf	Command@arg+1,c
   784  007D2C  0E00               	movlw	0
   785  007D2E  6E05               	movwf	Command@arg+2,c
   786  007D30  0E00               	movlw	0
   787  007D32  6E06               	movwf	Command@arg+3,c
   788  007D34  0E00               	movlw	0
   789  007D36  6E07               	movwf	Command@CRCbits,c
   790  007D38  0E41               	movlw	65
   791  007D3A  EC9D  F03A         	call	_Command
   792                           
   793                           ;initialization.c: 77: proceed();
   794  007D3E  ECE4  F039         	call	_proceed	;wreg free
   795  007D42                     l1560:
   796                           
   797                           ;initialization.c: 79: buff = response();
   798  007D42  ECEA  F039         	call	_response	;wreg free
   799  007D46  6E16               	movwf	init@buff,c
   800                           
   801                           ;initialization.c: 80: count++;
   802  007D48  4A12               	infsnz	init@count,f,c
   803  007D4A  2A13               	incf	init@count+1,f,c
   804                           
   805                           ;initialization.c: 81: }while((buff!=0X00) && (count<10));
   806  007D4C  5016               	movf	init@buff,w,c
   807  007D4E  B4D8               	btfsc	status,2,c
   808  007D50  D008               	goto	l1568
   809  007D52  5013               	movf	init@count+1,w,c
   810  007D54  0A80               	xorlw	128
   811  007D56  0F80               	addlw	-128
   812  007D58  0E0A               	movlw	10
   813  007D5A  B4D8               	btfsc	status,2,c
   814  007D5C  5C12               	subwf	init@count,w,c
   815  007D5E  A0D8               	btfss	status,0,c
   816  007D60  D7F0               	goto	l1560
   817  007D62                     l1568:
   818                           
   819                           ;initialization.c: 82: count = 0;
   820  007D62  0E00               	movlw	0
   821  007D64  6E13               	movwf	init@count+1,c
   822  007D66  0E00               	movlw	0
   823  007D68  6E12               	movwf	init@count,c
   824                           
   825                           ;initialization.c: 83: }while(buff!=0x00);
   826  007D6A  6616               	tstfsz	init@buff,c
   827  007D6C  D7D5               	goto	l1554
   828                           
   829                           ;initialization.c: 86: Delay_s(1);
   830  007D6E  0E01               	movlw	1
   831  007D70  EC75  F03A         	call	_Delay_s
   832                           
   833                           ;initialization.c: 87: proceed();
   834  007D74  ECE4  F039         	call	_proceed	;wreg free
   835                           
   836                           ;initialization.c: 88: if (buff == 0x00)
   837  007D78  6616               	tstfsz	init@buff,c
   838  007D7A  D075               	goto	l1626
   839                           
   840                           ;initialization.c: 89: {
   841                           ;initialization.c: 91: delay_ms(1);
   842  007D7C  0E01               	movlw	1
   843  007D7E  EC3D  F03A         	call	_delay_ms
   844                           
   845                           ;initialization.c: 92: count1 = 0;
   846  007D82  0E00               	movlw	0
   847  007D84  6E11               	movwf	init@count1+1,c
   848  007D86  0E00               	movlw	0
   849  007D88  6E10               	movwf	init@count1,c
   850  007D8A                     l1582:
   851                           
   852                           ;initialization.c: 94: count2 = 0;
   853  007D8A  0E00               	movlw	0
   854  007D8C  6E15               	movwf	init@count2+1,c
   855  007D8E  0E00               	movlw	0
   856  007D90  6E14               	movwf	init@count2,c
   857                           
   858                           ;initialization.c: 95: dummy_clocks(8);
   859  007D92  0E00               	movlw	0
   860  007D94  6E05               	movwf	dummy_clocks@n+1,c
   861  007D96  0E08               	movlw	8
   862  007D98  6E04               	movwf	dummy_clocks@n,c
   863  007D9A  ECD1  F03A         	call	_dummy_clocks	;wreg free
   864                           
   865                           ;initialization.c: 96: Command(0X77, 0X00000000, 0X95);
   866  007D9E  0E00               	movlw	0
   867  007DA0  6E03               	movwf	Command@arg,c
   868  007DA2  0E00               	movlw	0
   869  007DA4  6E04               	movwf	Command@arg+1,c
   870  007DA6  0E00               	movlw	0
   871  007DA8  6E05               	movwf	Command@arg+2,c
   872  007DAA  0E00               	movlw	0
   873  007DAC  6E06               	movwf	Command@arg+3,c
   874  007DAE  0E95               	movlw	149
   875  007DB0  6E07               	movwf	Command@CRCbits,c
   876  007DB2  0E77               	movlw	119
   877  007DB4  EC9D  F03A         	call	_Command
   878                           
   879                           ;initialization.c: 97: buff = 0XFF;
   880  007DB8  6816               	setf	init@buff,c
   881  007DBA                     l1588:
   882                           
   883                           ;initialization.c: 100: buff = response();
   884  007DBA  ECEA  F039         	call	_response	;wreg free
   885  007DBE  6E16               	movwf	init@buff,c
   886                           
   887                           ;initialization.c: 101: count2++;
   888  007DC0  4A14               	infsnz	init@count2,f,c
   889  007DC2  2A15               	incf	init@count2+1,f,c
   890                           
   891                           ;initialization.c: 102: }while((buff!=0X01)&&(count2<10));
   892  007DC4  0416               	decf	init@buff,w,c
   893  007DC6  B4D8               	btfsc	status,2,c
   894  007DC8  D008               	goto	l1596
   895  007DCA  5015               	movf	init@count2+1,w,c
   896  007DCC  0A80               	xorlw	128
   897  007DCE  0F80               	addlw	-128
   898  007DD0  0E0A               	movlw	10
   899  007DD2  B4D8               	btfsc	status,2,c
   900  007DD4  5C14               	subwf	init@count2,w,c
   901  007DD6  A0D8               	btfss	status,0,c
   902  007DD8  D7F0               	goto	l1588
   903  007DDA                     l1596:
   904                           
   905                           ;initialization.c: 104: delay_ms(1);
   906  007DDA  0E01               	movlw	1
   907  007DDC  EC3D  F03A         	call	_delay_ms
   908                           
   909                           ;initialization.c: 105: count2 = 0;
   910  007DE0  0E00               	movlw	0
   911  007DE2  6E15               	movwf	init@count2+1,c
   912  007DE4  0E00               	movlw	0
   913  007DE6  6E14               	movwf	init@count2,c
   914                           
   915                           ;initialization.c: 106: dummy_clocks(8);
   916  007DE8  0E00               	movlw	0
   917  007DEA  6E05               	movwf	dummy_clocks@n+1,c
   918  007DEC  0E08               	movlw	8
   919  007DEE  6E04               	movwf	dummy_clocks@n,c
   920  007DF0  ECD1  F03A         	call	_dummy_clocks	;wreg free
   921                           
   922                           ;initialization.c: 108: Command(0X69,0X40000000,0X95);
   923  007DF4  0E00               	movlw	0
   924  007DF6  6E03               	movwf	Command@arg,c
   925  007DF8  0E00               	movlw	0
   926  007DFA  6E04               	movwf	Command@arg+1,c
   927  007DFC  0E00               	movlw	0
   928  007DFE  6E05               	movwf	Command@arg+2,c
   929  007E00  0E40               	movlw	64
   930  007E02  6E06               	movwf	Command@arg+3,c
   931  007E04  0E95               	movlw	149
   932  007E06  6E07               	movwf	Command@CRCbits,c
   933  007E08  0E69               	movlw	105
   934  007E0A  EC9D  F03A         	call	_Command
   935                           
   936                           ;initialization.c: 109: buff = 0XFF;
   937  007E0E  6816               	setf	init@buff,c
   938                           
   939                           ;initialization.c: 111: proceed();
   940  007E10  ECE4  F039         	call	_proceed	;wreg free
   941  007E14                     l1608:
   942                           
   943                           ;initialization.c: 113: buff = response();
   944  007E14  ECEA  F039         	call	_response	;wreg free
   945  007E18  6E16               	movwf	init@buff,c
   946                           
   947                           ;initialization.c: 114: count2++;
   948  007E1A  4A14               	infsnz	init@count2,f,c
   949  007E1C  2A15               	incf	init@count2+1,f,c
   950                           
   951                           ;initialization.c: 115: }while((buff!=0X00)&&(count2<10));
   952  007E1E  5016               	movf	init@buff,w,c
   953  007E20  B4D8               	btfsc	status,2,c
   954  007E22  D008               	goto	l277
   955  007E24  5015               	movf	init@count2+1,w,c
   956  007E26  0A80               	xorlw	128
   957  007E28  0F80               	addlw	-128
   958  007E2A  0E0A               	movlw	10
   959  007E2C  B4D8               	btfsc	status,2,c
   960  007E2E  5C14               	subwf	init@count2,w,c
   961  007E30  A0D8               	btfss	status,0,c
   962  007E32  D7F0               	goto	l1608
   963  007E34                     l277:
   964                           
   965                           ;initialization.c: 116: }while(buff != 0X00);
   966  007E34  6616               	tstfsz	init@buff,c
   967  007E36  D7A9               	goto	l1582
   968                           
   969                           ;initialization.c: 119: count1 = 0;
   970  007E38  0E00               	movlw	0
   971  007E3A  6E11               	movwf	init@count1+1,c
   972  007E3C  0E00               	movlw	0
   973  007E3E  6E10               	movwf	init@count1,c
   974                           
   975                           ;initialization.c: 121: delay_ms(1);
   976  007E40  0E01               	movlw	1
   977  007E42  EC3D  F03A         	call	_delay_ms
   978                           
   979                           ;initialization.c: 122: putsUART_("\n\r");
   980  007E46  0E7F               	movlw	high (STR_14+8)
   981  007E48  6E06               	movwf	putsUART_@data+1,c
   982  007E4A  0EEF               	movlw	low (STR_14+8)
   983  007E4C  6E05               	movwf	putsUART_@data,c
   984  007E4E  EC89  F03A         	call	_putsUART_	;wreg free
   985                           
   986                           ;initialization.c: 123: putsUART_("SUCCESS\n\r");
   987  007E52  0E7F               	movlw	high STR_13
   988  007E54  6E06               	movwf	putsUART_@data+1,c
   989  007E56  0EF2               	movlw	low STR_13
   990  007E58  6E05               	movwf	putsUART_@data,c
   991  007E5A  EC89  F03A         	call	_putsUART_	;wreg free
   992                           
   993                           ;initialization.c: 124: Delay_s(2);
   994  007E5E  0E02               	movlw	2
   995  007E60  EC75  F03A         	call	_Delay_s
   996                           
   997                           ;initialization.c: 125: }
   998  007E64  D00D               	goto	l1632
   999  007E66                     l1626:
  1000                           
  1001                           ;initialization.c: 127: else if(buff == 0x05)
  1002  007E66  5016               	movf	init@buff,w,c
  1003  007E68  0A05               	xorlw	5
  1004  007E6A  A4D8               	btfss	status,2,c
  1005  007E6C  D009               	goto	l1632
  1006                           
  1007                           ;initialization.c: 128: {
  1008                           ;initialization.c: 129: putsUART_("Error!!!\n\r");
  1009  007E6E  0E7F               	movlw	high STR_14
  1010  007E70  6E06               	movwf	putsUART_@data+1,c
  1011  007E72  0EE7               	movlw	low STR_14
  1012  007E74  6E05               	movwf	putsUART_@data,c
  1013  007E76  EC89  F03A         	call	_putsUART_	;wreg free
  1014                           
  1015                           ;initialization.c: 130: Delay_s(3);
  1016  007E7A  0E03               	movlw	3
  1017  007E7C  EC75  F03A         	call	_Delay_s
  1018  007E80                     l1632:
  1019                           
  1020                           ;initialization.c: 131: }
  1021                           ;initialization.c: 132: Delay_s(1);
  1022  007E80  0E01               	movlw	1
  1023  007E82  EC75  F03A         	call	_Delay_s
  1024                           
  1025                           ;initialization.c: 135: dummy_clocks(8);
  1026  007E86  0E00               	movlw	0
  1027  007E88  6E05               	movwf	dummy_clocks@n+1,c
  1028  007E8A  0E08               	movlw	8
  1029  007E8C  6E04               	movwf	dummy_clocks@n,c
  1030  007E8E  ECD1  F03A         	call	_dummy_clocks	;wreg free
  1031                           
  1032                           ;initialization.c: 136: Command(0X50,0X00000200,0XFF);
  1033  007E92  0E00               	movlw	0
  1034  007E94  6E03               	movwf	Command@arg,c
  1035  007E96  0E02               	movlw	2
  1036  007E98  6E04               	movwf	Command@arg+1,c
  1037  007E9A  0E00               	movlw	0
  1038  007E9C  6E05               	movwf	Command@arg+2,c
  1039  007E9E  0E00               	movlw	0
  1040  007EA0  6E06               	movwf	Command@arg+3,c
  1041  007EA2  0EFF               	movlw	255
  1042  007EA4  6E07               	movwf	Command@CRCbits,c
  1043  007EA6  0E50               	movlw	80
  1044  007EA8  EC9D  F03A         	call	_Command
  1045                           
  1046                           ;initialization.c: 137: proceed();
  1047  007EAC  ECE4  F039         	call	_proceed	;wreg free
  1048  007EB0                     l1640:
  1049                           
  1050                           ;initialization.c: 139: buff = response();
  1051  007EB0  ECEA  F039         	call	_response	;wreg free
  1052  007EB4  6E16               	movwf	init@buff,c
  1053                           
  1054                           ;initialization.c: 140: }while(buff!=0x00);
  1055  007EB6  6616               	tstfsz	init@buff,c
  1056  007EB8  D7FB               	goto	l1640
  1057                           
  1058                           ;initialization.c: 142: putsUART_("512 Bytes Set\n\r");
  1059  007EBA  0E7F               	movlw	high STR_15
  1060  007EBC  6E06               	movwf	putsUART_@data+1,c
  1061  007EBE  0EB9               	movlw	low STR_15
  1062  007EC0  6E05               	movwf	putsUART_@data,c
  1063  007EC2  EC89  F03A         	call	_putsUART_	;wreg free
  1064                           
  1065                           ;initialization.c: 143: Delay_s(2);
  1066  007EC6  0E02               	movlw	2
  1067  007EC8  EC75  F03A         	call	_Delay_s
  1068                           
  1069                           ;initialization.c: 144: return;
  1070  007ECC  0012               	return	
  1071  007ECE                     __end_of_init:
  1072                           	opt stack 0
  1073                           tblptru	equ	0xFF8
  1074                           postinc0	equ	0xFEE
  1075                           postdec1	equ	0xFE5
  1076                           fsr1h	equ	0xFE2
  1077                           fsr1l	equ	0xFE1
  1078                           status	equ	0xFD8
  1079                           
  1080 ;; *************** function _reset *****************
  1081 ;; Defined at:
  1082 ;;		line 46 in file "initialization.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;		None
  1085 ;; Auto vars:     Size  Location     Type
  1086 ;;  count           2   10[COMRAM] int 
  1087 ;;  i               2    8[COMRAM] int 
  1088 ;;  buff            1   12[COMRAM] unsigned char 
  1089 ;; Return value:  Size  Location     Type
  1090 ;;		None               void
  1091 ;; Registers used:
  1092 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1098 ;;      Params:         0       0       0       0       0       0       0       0       0
  1099 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1100 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1101 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1102 ;;Total ram usage:        5 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; Hardware stack levels required when called:    4
  1105 ;; This function calls:
  1106 ;;		_Command
  1107 ;;		_Delay_s
  1108 ;;		_dummy_clocks
  1109 ;;		_proceed
  1110 ;;		_putsUART_
  1111 ;;		_response
  1112 ;; This function is called by:
  1113 ;;		_init
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           	psect	text2
  1118  0076FA                     __ptext2:
  1119                           	opt stack 0
  1120  0076FA                     _reset:
  1121                           	opt stack 25
  1122                           
  1123                           ;initialization.c: 48: int i = 0, count = 0;
  1124                           
  1125                           ;incstack = 0
  1126  0076FA  0E00               	movlw	0
  1127  0076FC  6E0A               	movwf	reset@i+1,c
  1128  0076FE  0E00               	movlw	0
  1129  007700  6E09               	movwf	reset@i,c
  1130  007702  0E00               	movlw	0
  1131  007704  6E0C               	movwf	reset@count+1,c
  1132  007706  0E00               	movlw	0
  1133  007708  6E0B               	movwf	reset@count,c
  1134  00770A                     l1464:
  1135                           
  1136                           ;initialization.c: 51: dummy_clocks(8);
  1137  00770A  0E00               	movlw	0
  1138  00770C  6E05               	movwf	dummy_clocks@n+1,c
  1139  00770E  0E08               	movlw	8
  1140  007710  6E04               	movwf	dummy_clocks@n,c
  1141  007712  ECD1  F03A         	call	_dummy_clocks	;wreg free
  1142                           
  1143                           ;initialization.c: 52: Command(0X40, 0X00000000, 0X95);
  1144  007716  0E00               	movlw	0
  1145  007718  6E03               	movwf	Command@arg,c
  1146  00771A  0E00               	movlw	0
  1147  00771C  6E04               	movwf	Command@arg+1,c
  1148  00771E  0E00               	movlw	0
  1149  007720  6E05               	movwf	Command@arg+2,c
  1150  007722  0E00               	movlw	0
  1151  007724  6E06               	movwf	Command@arg+3,c
  1152  007726  0E95               	movlw	149
  1153  007728  6E07               	movwf	Command@CRCbits,c
  1154  00772A  0E40               	movlw	64
  1155  00772C  EC9D  F03A         	call	_Command
  1156                           
  1157                           ;initialization.c: 53: proceed(1);
  1158  007730  0E00               	movlw	0
  1159  007732  6E04               	movwf	?_proceed+1,c
  1160  007734  0E01               	movlw	1
  1161  007736  6E03               	movwf	?_proceed,c
  1162  007738  ECE4  F039         	call	_proceed	;wreg free
  1163  00773C                     l1470:
  1164                           
  1165                           ;initialization.c: 55: buff = response();
  1166  00773C  ECEA  F039         	call	_response	;wreg free
  1167  007740  6E0D               	movwf	reset@buff,c
  1168                           
  1169                           ;initialization.c: 56: count++;
  1170  007742  4A0B               	infsnz	reset@count,f,c
  1171  007744  2A0C               	incf	reset@count+1,f,c
  1172                           
  1173                           ;initialization.c: 57: }while((buff!=0X01) && (count<10));
  1174  007746  040D               	decf	reset@buff,w,c
  1175  007748  B4D8               	btfsc	status,2,c
  1176  00774A  D008               	goto	l1478
  1177  00774C  500C               	movf	reset@count+1,w,c
  1178  00774E  0A80               	xorlw	128
  1179  007750  0F80               	addlw	-128
  1180  007752  0E0A               	movlw	10
  1181  007754  B4D8               	btfsc	status,2,c
  1182  007756  5C0B               	subwf	reset@count,w,c
  1183  007758  A0D8               	btfss	status,0,c
  1184  00775A  D7F0               	goto	l1470
  1185  00775C                     l1478:
  1186                           
  1187                           ;initialization.c: 58: count = 0;
  1188  00775C  0E00               	movlw	0
  1189  00775E  6E0C               	movwf	reset@count+1,c
  1190  007760  0E00               	movlw	0
  1191  007762  6E0B               	movwf	reset@count,c
  1192                           
  1193                           ;initialization.c: 59: }while(buff!=0X01);
  1194  007764  040D               	decf	reset@buff,w,c
  1195  007766  A4D8               	btfss	status,2,c
  1196  007768  D7D0               	goto	l1464
  1197                           
  1198                           ;initialization.c: 61: putsUART_("\n\rSD Card Inserted\n\r");
  1199  00776A  0E7F               	movlw	high STR_11
  1200  00776C  6E06               	movwf	putsUART_@data+1,c
  1201  00776E  0E4A               	movlw	low STR_11
  1202  007770  6E05               	movwf	putsUART_@data,c
  1203  007772  EC89  F03A         	call	_putsUART_	;wreg free
  1204                           
  1205                           ;initialization.c: 62: Delay_s(2);
  1206  007776  0E02               	movlw	2
  1207  007778  EC75  F03A         	call	_Delay_s
  1208                           
  1209                           ;initialization.c: 63: return;
  1210  00777C  0012               	return	
  1211  00777E                     __end_of_reset:
  1212                           	opt stack 0
  1213                           tblptru	equ	0xFF8
  1214                           postinc0	equ	0xFEE
  1215                           postdec1	equ	0xFE5
  1216                           fsr1h	equ	0xFE2
  1217                           fsr1l	equ	0xFE1
  1218                           status	equ	0xFD8
  1219                           
  1220 ;; *************** function _Soft_Hard_Init *****************
  1221 ;; Defined at:
  1222 ;;		line 16 in file "initialization.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;		None
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;  i               2    3[COMRAM] int 
  1227 ;;  smp_phase       1    7[COMRAM] unsigned char 
  1228 ;;  bus_mode        1    6[COMRAM] unsigned char 
  1229 ;;  sync_mode       1    5[COMRAM] unsigned char 
  1230 ;; Return value:  Size  Location     Type
  1231 ;;                  2   14[COMRAM] int 
  1232 ;; Registers used:
  1233 ;;		wreg, status,2, status,0, cstack
  1234 ;; Tracked objects:
  1235 ;;		On entry : 0/0
  1236 ;;		On exit  : 0/0
  1237 ;;		Unchanged: 0/0
  1238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1239 ;;      Params:         0       0       0       0       0       0       0       0       0
  1240 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1241 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1242 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1243 ;;Total ram usage:        5 bytes
  1244 ;; Hardware stack levels used:    1
  1245 ;; Hardware stack levels required when called:    1
  1246 ;; This function calls:
  1247 ;;		_OpenSPI
  1248 ;; This function is called by:
  1249 ;;		_main
  1250 ;; This function uses a non-reentrant model
  1251 ;;
  1252                           
  1253                           	psect	text3
  1254  0075DE                     __ptext3:
  1255                           	opt stack 0
  1256  0075DE                     _Soft_Hard_Init:
  1257                           	opt stack 29
  1258                           
  1259                           ;initialization.c: 18: unsigned char sync_mode=0;
  1260                           
  1261                           ;incstack = 0
  1262  0075DE  0E00               	movlw	0
  1263  0075E0  6E06               	movwf	Soft_Hard_Init@sync_mode,c
  1264                           
  1265                           ;initialization.c: 19: unsigned char bus_mode=0;
  1266  0075E2  0E00               	movlw	0
  1267  0075E4  6E07               	movwf	Soft_Hard_Init@bus_mode,c
  1268                           
  1269                           ;initialization.c: 20: unsigned char smp_phase=0;
  1270  0075E6  0E00               	movlw	0
  1271  0075E8  6E08               	movwf	Soft_Hard_Init@smp_phase,c
  1272                           
  1273                           ;initialization.c: 21: int i = 0;
  1274  0075EA  0E00               	movlw	0
  1275  0075EC  6E05               	movwf	Soft_Hard_Init@i+1,c
  1276  0075EE  0E00               	movlw	0
  1277  0075F0  6E04               	movwf	Soft_Hard_Init@i,c
  1278                           
  1279                           ;initialization.c: 23: (SSPCON1 &=0xDF);
  1280  0075F2  9AC6               	bcf	4038,5,c	;volatile
  1281                           
  1282                           ;initialization.c: 25: ADCON1 = 0X0F;
  1283  0075F4  0E0F               	movlw	15
  1284  0075F6  6EC1               	movwf	4033,c	;volatile
  1285                           
  1286                           ;initialization.c: 26: CMCON |= 7;
  1287  0075F8  0E07               	movlw	7
  1288  0075FA  12B4               	iorwf	4020,f,c	;volatile
  1289                           
  1290                           ;initialization.c: 28: TRISA5 = 0;
  1291  0075FC  9A92               	bcf	3986,5,c	;volatile
  1292                           
  1293                           ;initialization.c: 29: LATA5 = 0;
  1294  0075FE  9A89               	bcf	3977,5,c	;volatile
  1295                           
  1296                           ;initialization.c: 31: TRISB4 = 0;
  1297  007600  9893               	bcf	3987,4,c	;volatile
  1298                           
  1299                           ;initialization.c: 32: TRISC7 = 0;
  1300  007602  9E94               	bcf	3988,7,c	;volatile
  1301                           
  1302                           ;initialization.c: 33: TRISB1 = 0;
  1303  007604  9293               	bcf	3987,1,c	;volatile
  1304                           
  1305                           ;initialization.c: 34: TRISB0 = 1;
  1306  007606  8093               	bsf	3987,0,c	;volatile
  1307                           
  1308                           ;initialization.c: 36: sync_mode = 0b00000010;
  1309  007608  0E02               	movlw	2
  1310  00760A  6E06               	movwf	Soft_Hard_Init@sync_mode,c
  1311                           
  1312                           ;initialization.c: 37: bus_mode = 0b00000000;
  1313  00760C  0E00               	movlw	0
  1314  00760E  6E07               	movwf	Soft_Hard_Init@bus_mode,c
  1315                           
  1316                           ;initialization.c: 38: smp_phase = 0b00000000;
  1317  007610  0E00               	movlw	0
  1318  007612  6E08               	movwf	Soft_Hard_Init@smp_phase,c
  1319                           
  1320                           ;initialization.c: 39: OpenSPI(sync_mode, bus_mode, smp_phase);
  1321  007614  C007  F001         	movff	Soft_Hard_Init@bus_mode,OpenSPI@bus_mode
  1322  007618  C008  F002         	movff	Soft_Hard_Init@smp_phase,OpenSPI@smp_phase
  1323  00761C  5006               	movf	Soft_Hard_Init@sync_mode,w,c
  1324  00761E  EC16  F03B         	call	_OpenSPI
  1325                           
  1326                           ;initialization.c: 40: SSPSTAT = 0XC0;
  1327  007622  0EC0               	movlw	192
  1328  007624  6EC7               	movwf	4039,c	;volatile
  1329                           
  1330                           ;initialization.c: 41: SSPCON1 = 0X22;
  1331  007626  0E22               	movlw	34
  1332  007628  6EC6               	movwf	4038,c	;volatile
  1333  00762A  0012               	return	
  1334  00762C                     __end_of_Soft_Hard_Init:
  1335                           	opt stack 0
  1336                           tblptru	equ	0xFF8
  1337                           postinc0	equ	0xFEE
  1338                           postdec1	equ	0xFE5
  1339                           fsr1h	equ	0xFE2
  1340                           fsr1l	equ	0xFE1
  1341                           status	equ	0xFD8
  1342                           
  1343 ;; *************** function _OpenSPI *****************
  1344 ;; Defined at:
  1345 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi_open.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  sync_mode       1    wreg     unsigned char 
  1348 ;;  bus_mode        1    0[COMRAM] unsigned char 
  1349 ;;  smp_phase       1    1[COMRAM] unsigned char 
  1350 ;; Auto vars:     Size  Location     Type
  1351 ;;  sync_mode       1    2[COMRAM] unsigned char 
  1352 ;; Return value:  Size  Location     Type
  1353 ;;		None               void
  1354 ;; Registers used:
  1355 ;;		wreg, status,2, status,0
  1356 ;; Tracked objects:
  1357 ;;		On entry : 0/0
  1358 ;;		On exit  : 0/0
  1359 ;;		Unchanged: 0/0
  1360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1361 ;;      Params:         2       0       0       0       0       0       0       0       0
  1362 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1363 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1364 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1365 ;;Total ram usage:        3 bytes
  1366 ;; Hardware stack levels used:    1
  1367 ;; This function calls:
  1368 ;;		Nothing
  1369 ;; This function is called by:
  1370 ;;		_Soft_Hard_Init
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text4
  1375  00762C                     __ptext4:
  1376                           	opt stack 0
  1377  00762C                     _OpenSPI:
  1378                           	opt stack 29
  1379                           
  1380                           ;incstack = 0
  1381                           ;OpenSPI@sync_mode stored from wreg
  1382  00762C  6E03               	movwf	OpenSPI@sync_mode,c
  1383  00762E  0E3F               	movlw	63
  1384  007630  16C7               	andwf	4039,f,c	;volatile
  1385  007632  0E00               	movlw	0
  1386  007634  6EC6               	movwf	4038,c	;volatile
  1387  007636  5003               	movf	OpenSPI@sync_mode,w,c
  1388  007638  12C6               	iorwf	4038,f,c	;volatile
  1389  00763A  5002               	movf	OpenSPI@smp_phase,w,c
  1390  00763C  12C7               	iorwf	4039,f,c	;volatile
  1391  00763E  D005               	goto	l1454
  1392  007640                     l346:
  1393  007640  8CC7               	bsf	4039,6,c	;volatile
  1394  007642  D013               	goto	l1458
  1395  007644                     l348:
  1396  007644  8CC7               	bsf	4039,6,c	;volatile
  1397  007646                     l349:
  1398  007646  88C6               	bsf	4038,4,c	;volatile
  1399  007648  D010               	goto	l1458
  1400  00764A                     l1454:
  1401  00764A  5001               	movf	OpenSPI@bus_mode,w,c
  1402                           
  1403                           ; Switch size 1, requested type "space"
  1404                           ; Number of cases is 3, Range of values is 0 to 3
  1405                           ; switch strategies available:
  1406                           ; Name         Instructions Cycles
  1407                           ; simple_byte           10     6 (average)
  1408                           ;	Chosen strategy is simple_byte
  1409  00764C  0A00               	xorlw	0	; case 0
  1410  00764E  B4D8               	btfsc	status,2,c
  1411  007650  D7F7               	goto	l346
  1412  007652  0A02               	xorlw	2	; case 2
  1413  007654  B4D8               	btfsc	status,2,c
  1414  007656  D7F6               	goto	l348
  1415  007658  0A01               	xorlw	1	; case 3
  1416  00765A  B4D8               	btfsc	status,2,c
  1417  00765C  D7F4               	goto	l349
  1418  00765E  D005               	goto	l1458
  1419  007660                     l352:
  1420  007660  8A92               	bsf	3986,5,c	;volatile
  1421  007662                     l354:
  1422  007662  8293               	bsf	3987,1,c	;volatile
  1423  007664  D00A               	goto	l353
  1424  007666                     l355:
  1425  007666  9293               	bcf	3987,1,c	;volatile
  1426  007668  D008               	goto	l353
  1427  00766A                     l1458:
  1428  00766A  5003               	movf	OpenSPI@sync_mode,w,c
  1429                           
  1430                           ; Switch size 1, requested type "space"
  1431                           ; Number of cases is 2, Range of values is 4 to 5
  1432                           ; switch strategies available:
  1433                           ; Name         Instructions Cycles
  1434                           ; simple_byte            7     4 (average)
  1435                           ;	Chosen strategy is simple_byte
  1436  00766C  0A04               	xorlw	4	; case 4
  1437  00766E  B4D8               	btfsc	status,2,c
  1438  007670  D7F7               	goto	l352
  1439  007672  0A01               	xorlw	1	; case 5
  1440  007674  B4D8               	btfsc	status,2,c
  1441  007676  D7F5               	goto	l354
  1442  007678  D7F6               	goto	l355
  1443  00767A                     l353:
  1444  00767A  8093               	bsf	3987,0,c	;volatile
  1445  00767C  9E94               	bcf	3988,7,c	;volatile
  1446  00767E  8AC6               	bsf	4038,5,c	;volatile
  1447  007680  0012               	return	
  1448  007682                     __end_of_OpenSPI:
  1449                           	opt stack 0
  1450                           tblptru	equ	0xFF8
  1451                           postinc0	equ	0xFEE
  1452                           postdec1	equ	0xFE5
  1453                           fsr1h	equ	0xFE2
  1454                           fsr1l	equ	0xFE1
  1455                           status	equ	0xFD8
  1456                           
  1457 ;; *************** function _OpenUART_ *****************
  1458 ;; Defined at:
  1459 ;;		line 20 in file "my_openuart.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;		None
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;		None
  1464 ;; Return value:  Size  Location     Type
  1465 ;;		None               void
  1466 ;; Registers used:
  1467 ;;		None
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1473 ;;      Params:         0       0       0       0       0       0       0       0       0
  1474 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1476 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1477 ;;Total ram usage:        0 bytes
  1478 ;; Hardware stack levels used:    1
  1479 ;; This function calls:
  1480 ;;		Nothing
  1481 ;; This function is called by:
  1482 ;;		_main
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text5
  1487  0073BE                     __ptext5:
  1488                           	opt stack 0
  1489  0073BE                     _OpenUART_:
  1490                           	opt stack 30
  1491                           
  1492                           ;my_openuart.c: 22: TRISDbits.RD4 = 0;
  1493                           
  1494                           ;incstack = 0
  1495  0073BE  9895               	bcf	3989,4,c	;volatile
  1496                           
  1497                           ;my_openuart.c: 23: RD4 = 1;
  1498  0073C0  8883               	bsf	3971,4,c	;volatile
  1499                           
  1500                           ;my_openuart.c: 25: TRISDbits.RD5 = 1;
  1501  0073C2  8A95               	bsf	3989,5,c	;volatile
  1502                           
  1503                           ;my_openuart.c: 26: RD5 = 1;
  1504  0073C4  8A83               	bsf	3971,5,c	;volatile
  1505  0073C6  0012               	return	
  1506  0073C8                     __end_of_OpenUART_:
  1507                           	opt stack 0
  1508                           tblptru	equ	0xFF8
  1509                           postinc0	equ	0xFEE
  1510                           postdec1	equ	0xFE5
  1511                           fsr1h	equ	0xFE2
  1512                           fsr1l	equ	0xFE1
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _File_IO *****************
  1516 ;; Defined at:
  1517 ;;		line 26 in file "main.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;		None
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;  c               1   15[COMRAM] unsigned char 
  1522 ;; Return value:  Size  Location     Type
  1523 ;;		None               void
  1524 ;; Registers used:
  1525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0
  1532 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1533 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1534 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1535 ;;Total ram usage:        1 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    5
  1538 ;; This function calls:
  1539 ;;		_ReadUART_
  1540 ;;		_multi_read
  1541 ;;		_multi_write
  1542 ;;		_putsUART_
  1543 ;;		_read_block
  1544 ;;		_write_block
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           	psect	text6
  1551  007682                     __ptext6:
  1552                           	opt stack 0
  1553  007682                     _File_IO:
  1554                           	opt stack 25
  1555  007682                     l21:
  1556                           
  1557                           ;main.c: 30: putsUART_("\n\rPlease select a file operation?\n\rWrite    - w\n\rRead     
      +                          - r\n\rMulti_Write   - a\n\rMulti_Read   - d\n\r");
  1558  007682  0E7E               	movlw	high STR_1
  1559  007684  6E06               	movwf	putsUART_@data+1,c
  1560  007686  0ECF               	movlw	low STR_1
  1561  007688  6E05               	movwf	putsUART_@data,c
  1562  00768A  EC89  F03A         	call	_putsUART_	;wreg free
  1563                           
  1564                           ;main.c: 31: c = ReadUART_();
  1565  00768E  ECBF  F03B         	call	_ReadUART_	;wreg free
  1566  007692  6E10               	movwf	File_IO@c,c
  1567                           
  1568                           ;main.c: 32: switch(c)
  1569  007694  D013               	goto	l1504
  1570  007696                     l1492:
  1571                           
  1572                           ;main.c: 35: write_block();
  1573  007696  EC13  F03C         	call	_write_block	;wreg free
  1574                           
  1575                           ;main.c: 36: break;
  1576  00769A  D01E               	goto	l1506
  1577  00769C                     l1494:
  1578                           
  1579                           ;main.c: 38: read_block();
  1580  00769C  EC87  F03C         	call	_read_block	;wreg free
  1581                           
  1582                           ;main.c: 39: break;
  1583  0076A0  D01B               	goto	l1506
  1584  0076A2                     l1496:
  1585                           
  1586                           ;main.c: 41: multi_write();
  1587  0076A2  EC18  F03D         	call	_multi_write	;wreg free
  1588                           
  1589                           ;main.c: 42: break;
  1590  0076A6  D018               	goto	l1506
  1591  0076A8                     l1498:
  1592                           
  1593                           ;main.c: 44: multi_read();
  1594  0076A8  ECAC  F03D         	call	_multi_read	;wreg free
  1595                           
  1596                           ;main.c: 45: break;
  1597  0076AC  D015               	goto	l1506
  1598  0076AE                     l1500:
  1599                           
  1600                           ;main.c: 47: putsUART_("\n\rInvalid Entry..!");
  1601  0076AE  0E7F               	movlw	high STR_2
  1602  0076B0  6E06               	movwf	putsUART_@data+1,c
  1603  0076B2  0E72               	movlw	low STR_2
  1604  0076B4  6E05               	movwf	putsUART_@data,c
  1605  0076B6  EC89  F03A         	call	_putsUART_	;wreg free
  1606                           
  1607                           ;main.c: 48: break;
  1608  0076BA  D00E               	goto	l1506
  1609  0076BC                     l1504:
  1610  0076BC  5010               	movf	File_IO@c,w,c
  1611                           
  1612                           ; Switch size 1, requested type "space"
  1613                           ; Number of cases is 4, Range of values is 97 to 119
  1614                           ; switch strategies available:
  1615                           ; Name         Instructions Cycles
  1616                           ; simple_byte           13     7 (average)
  1617                           ;	Chosen strategy is simple_byte
  1618  0076BE  0A61               	xorlw	97	; case 97
  1619  0076C0  B4D8               	btfsc	status,2,c
  1620  0076C2  D7EF               	goto	l1496
  1621  0076C4  0A05               	xorlw	5	; case 100
  1622  0076C6  B4D8               	btfsc	status,2,c
  1623  0076C8  D7EF               	goto	l1498
  1624  0076CA  0A16               	xorlw	22	; case 114
  1625  0076CC  B4D8               	btfsc	status,2,c
  1626  0076CE  D7E6               	goto	l1494
  1627  0076D0  0A05               	xorlw	5	; case 119
  1628  0076D2  B4D8               	btfsc	status,2,c
  1629  0076D4  D7E0               	goto	l1492
  1630  0076D6  D7EB               	goto	l1500
  1631  0076D8                     l1506:
  1632                           
  1633                           ;main.c: 50: }while((c != 'w') && (c != 'r') && (c != 'd') && (c != 'a'));
  1634  0076D8  5010               	movf	File_IO@c,w,c
  1635  0076DA  0A77               	xorlw	119
  1636  0076DC  B4D8               	btfsc	status,2,c
  1637  0076DE  D00C               	goto	l32
  1638  0076E0  5010               	movf	File_IO@c,w,c
  1639  0076E2  0A72               	xorlw	114
  1640  0076E4  B4D8               	btfsc	status,2,c
  1641  0076E6  D008               	goto	l32
  1642  0076E8  5010               	movf	File_IO@c,w,c
  1643  0076EA  0A64               	xorlw	100
  1644  0076EC  B4D8               	btfsc	status,2,c
  1645  0076EE  D004               	goto	l32
  1646  0076F0  5010               	movf	File_IO@c,w,c
  1647  0076F2  0A61               	xorlw	97
  1648  0076F4  A4D8               	btfss	status,2,c
  1649  0076F6  D7C5               	goto	l21
  1650  0076F8                     l32:
  1651  0076F8  0012               	return	
  1652  0076FA                     __end_of_File_IO:
  1653                           	opt stack 0
  1654                           tblptru	equ	0xFF8
  1655                           postinc0	equ	0xFEE
  1656                           postdec1	equ	0xFE5
  1657                           fsr1h	equ	0xFE2
  1658                           fsr1l	equ	0xFE1
  1659                           status	equ	0xFD8
  1660                           
  1661 ;; *************** function _write_block *****************
  1662 ;; Defined at:
  1663 ;;		line 18 in file "raw_io.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  i               2    8[COMRAM] int 
  1668 ;;  buff            1   10[COMRAM] unsigned char 
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  2    6[COMRAM] int 
  1671 ;; Registers used:
  1672 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: 0/0
  1677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1678 ;;      Params:         0       0       0       0       0       0       0       0       0
  1679 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1681 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1682 ;;Total ram usage:        3 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    4
  1685 ;; This function calls:
  1686 ;;		_Command
  1687 ;;		_Delay_s
  1688 ;;		_WriteSPI_
  1689 ;;		_dummy_clocks
  1690 ;;		_proceed
  1691 ;;		_putsUART_
  1692 ;;		_response
  1693 ;; This function is called by:
  1694 ;;		_File_IO
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           	psect	text7
  1699  007826                     __ptext7:
  1700                           	opt stack 0
  1701  007826                     _write_block:
  1702                           	opt stack 25
  1703                           
  1704                           ;raw_io.c: 20: unsigned char buff;
  1705                           ;raw_io.c: 21: int i=0;
  1706                           
  1707                           ;incstack = 0
  1708  007826  0E00               	movlw	0
  1709  007828  6E0A               	movwf	write_block@i+1,c
  1710  00782A  0E00               	movlw	0
  1711  00782C  6E09               	movwf	write_block@i,c
  1712                           
  1713                           ;raw_io.c: 23: dummy_clocks(8);
  1714  00782E  0E00               	movlw	0
  1715  007830  6E05               	movwf	dummy_clocks@n+1,c
  1716  007832  0E08               	movlw	8
  1717  007834  6E04               	movwf	dummy_clocks@n,c
  1718  007836  ECD1  F03A         	call	_dummy_clocks	;wreg free
  1719                           
  1720                           ;raw_io.c: 24: Command(0X58, 0X00000A00, 0X00);
  1721  00783A  0E00               	movlw	0
  1722  00783C  6E03               	movwf	Command@arg,c
  1723  00783E  0E0A               	movlw	10
  1724  007840  6E04               	movwf	Command@arg+1,c
  1725  007842  0E00               	movlw	0
  1726  007844  6E05               	movwf	Command@arg+2,c
  1727  007846  0E00               	movlw	0
  1728  007848  6E06               	movwf	Command@arg+3,c
  1729  00784A  0E00               	movlw	0
  1730  00784C  6E07               	movwf	Command@CRCbits,c
  1731  00784E  0E58               	movlw	88
  1732  007850  EC9D  F03A         	call	_Command
  1733                           
  1734                           ;raw_io.c: 25: proceed();
  1735  007854  ECE4  F039         	call	_proceed	;wreg free
  1736  007858                     l1190:
  1737                           
  1738                           ;raw_io.c: 27: buff = response();
  1739  007858  ECEA  F039         	call	_response	;wreg free
  1740  00785C  6E0B               	movwf	write_block@buff,c
  1741                           
  1742                           ;raw_io.c: 28: }while(buff!=0x00);
  1743  00785E  660B               	tstfsz	write_block@buff,c
  1744  007860  D7FB               	goto	l1190
  1745                           
  1746                           ;raw_io.c: 30: putsUART_("CMD24 Accepted");
  1747  007862  0E7F               	movlw	high STR_4
  1748  007864  6E06               	movwf	putsUART_@data+1,c
  1749  007866  0EC9               	movlw	low STR_4
  1750  007868  6E05               	movwf	putsUART_@data,c
  1751  00786A  EC89  F03A         	call	_putsUART_	;wreg free
  1752                           
  1753                           ;raw_io.c: 32: Delay_s(1);
  1754  00786E  0E01               	movlw	1
  1755  007870  EC75  F03A         	call	_Delay_s
  1756                           
  1757                           ;raw_io.c: 33: dummy_clocks(8);
  1758  007874  0E00               	movlw	0
  1759  007876  6E05               	movwf	dummy_clocks@n+1,c
  1760  007878  0E08               	movlw	8
  1761  00787A  6E04               	movwf	dummy_clocks@n,c
  1762  00787C  ECD1  F03A         	call	_dummy_clocks	;wreg free
  1763                           
  1764                           ;raw_io.c: 34: WriteSPI_(0XFE);
  1765  007880  0EFE               	movlw	254
  1766  007882  EC25  F03A         	call	_WriteSPI_
  1767                           
  1768                           ;raw_io.c: 36: for(i=0;i<(512*2);i++)
  1769  007886  0E00               	movlw	0
  1770  007888  6E0A               	movwf	write_block@i+1,c
  1771  00788A  0E00               	movlw	0
  1772  00788C  6E09               	movwf	write_block@i,c
  1773  00788E  500A               	movf	write_block@i+1,w,c
  1774  007890  0A80               	xorlw	128
  1775  007892  0F7C               	addlw	-132
  1776  007894  0E00               	movlw	0
  1777  007896  B4D8               	btfsc	status,2,c
  1778  007898  5C09               	subwf	write_block@i,w,c
  1779  00789A  B0D8               	btfsc	status,0,c
  1780  00789C  D008               	goto	l1216
  1781                           
  1782                           ;raw_io.c: 37: {
  1783                           ;raw_io.c: 38: WriteSPI_(0X41);
  1784  00789E  0E41               	movlw	65
  1785  0078A0  EC25  F03A         	call	_WriteSPI_
  1786                           
  1787                           ;raw_io.c: 39: i++;
  1788  0078A4  4A09               	infsnz	write_block@i,f,c
  1789  0078A6  2A0A               	incf	write_block@i+1,f,c
  1790  0078A8  4A09               	infsnz	write_block@i,f,c
  1791  0078AA  2A0A               	incf	write_block@i+1,f,c
  1792  0078AC  D7F0               	goto	L1
  1793  0078AE                     l1216:
  1794                           
  1795                           ;raw_io.c: 40: }
  1796                           ;raw_io.c: 42: WriteSPI_(0XFF);
  1797  0078AE  0EFF               	movlw	255
  1798  0078B0  EC25  F03A         	call	_WriteSPI_
  1799                           
  1800                           ;raw_io.c: 43: WriteSPI_(0XFF);
  1801  0078B4  0EFF               	movlw	255
  1802  0078B6  EC25  F03A         	call	_WriteSPI_
  1803                           
  1804                           ;raw_io.c: 45: dummy_clocks(1);
  1805  0078BA  0E00               	movlw	0
  1806  0078BC  6E05               	movwf	dummy_clocks@n+1,c
  1807  0078BE  0E01               	movlw	1
  1808  0078C0  6E04               	movwf	dummy_clocks@n,c
  1809  0078C2  ECD1  F03A         	call	_dummy_clocks	;wreg free
  1810                           
  1811                           ;raw_io.c: 48: Delay_s(1);
  1812  0078C6  0E01               	movlw	1
  1813  0078C8  EC75  F03A         	call	_Delay_s
  1814                           
  1815                           ;raw_io.c: 49: dummy_clocks(8);
  1816  0078CC  0E00               	movlw	0
  1817  0078CE  6E05               	movwf	dummy_clocks@n+1,c
  1818  0078D0  0E08               	movlw	8
  1819  0078D2  6E04               	movwf	dummy_clocks@n,c
  1820  0078D4  ECD1  F03A         	call	_dummy_clocks	;wreg free
  1821                           
  1822                           ;raw_io.c: 50: Command(0X4D,0X00000000,0XFF);
  1823  0078D8  0E00               	movlw	0
  1824  0078DA  6E03               	movwf	Command@arg,c
  1825  0078DC  0E00               	movlw	0
  1826  0078DE  6E04               	movwf	Command@arg+1,c
  1827  0078E0  0E00               	movlw	0
  1828  0078E2  6E05               	movwf	Command@arg+2,c
  1829  0078E4  0E00               	movlw	0
  1830  0078E6  6E06               	movwf	Command@arg+3,c
  1831  0078E8  0EFF               	movlw	255
  1832  0078EA  6E07               	movwf	Command@CRCbits,c
  1833  0078EC  0E4D               	movlw	77
  1834  0078EE  EC9D  F03A         	call	_Command
  1835                           
  1836                           ;raw_io.c: 51: proceed();
  1837  0078F2  ECE4  F039         	call	_proceed	;wreg free
  1838  0078F6                     l1228:
  1839                           
  1840                           ;raw_io.c: 53: buff = response();
  1841  0078F6  ECEA  F039         	call	_response	;wreg free
  1842  0078FA  6E0B               	movwf	write_block@buff,c
  1843                           
  1844                           ;raw_io.c: 54: }while(buff!=0x00);
  1845  0078FC  660B               	tstfsz	write_block@buff,c
  1846  0078FE  D7FB               	goto	l1228
  1847                           
  1848                           ;raw_io.c: 55: putsUART_("BLOCK WRITE OVER");
  1849  007900  0E7F               	movlw	high STR_5
  1850  007902  6E06               	movwf	putsUART_@data+1,c
  1851  007904  0EA8               	movlw	low STR_5
  1852  007906  6E05               	movwf	putsUART_@data,c
  1853  007908  EC89  F03A         	call	_putsUART_	;wreg free
  1854                           
  1855                           ;raw_io.c: 56: return;
  1856  00790C  0012               	return	
  1857  00790E                     __end_of_write_block:
  1858                           	opt stack 0
  1859                           tblptru	equ	0xFF8
  1860                           postinc0	equ	0xFEE
  1861                           postdec1	equ	0xFE5
  1862                           fsr1h	equ	0xFE2
  1863                           fsr1l	equ	0xFE1
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _read_block *****************
  1867 ;; Defined at:
  1868 ;;		line 179 in file "raw_io.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;		None
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  length          2   13[COMRAM] int 
  1873 ;;  i               2   10[COMRAM] int 
  1874 ;;  count           2    8[COMRAM] int 
  1875 ;;  buff            1   12[COMRAM] unsigned char 
  1876 ;;  readdata        1    0        unsigned char 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  2    8[COMRAM] int 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         0       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         7       0       0       0       0       0       0       0       0
  1888 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1889 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1890 ;;Total ram usage:        7 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; Hardware stack levels required when called:    4
  1893 ;; This function calls:
  1894 ;;		_Command
  1895 ;;		_Delay_s
  1896 ;;		_WriteUART_
  1897 ;;		_dummy_clocks
  1898 ;;		_proceed
  1899 ;;		_putsUART_
  1900 ;;		_response
  1901 ;; This function is called by:
  1902 ;;		_File_IO
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text8
  1907  00790E                     __ptext8:
  1908                           	opt stack 0
  1909  00790E                     _read_block:
  1910                           	opt stack 25
  1911                           
  1912                           ;raw_io.c: 181: unsigned char buff, readdata;
  1913                           ;raw_io.c: 182: int length,count,i=0;
  1914                           
  1915                           ;incstack = 0
  1916  00790E  0E00               	movlw	0
  1917  007910  6E0C               	movwf	read_block@i+1,c
  1918  007912  0E00               	movlw	0
  1919  007914  6E0B               	movwf	read_block@i,c
  1920                           
  1921                           ;raw_io.c: 183: Delay_s(1);
  1922  007916  0E01               	movlw	1
  1923  007918  EC75  F03A         	call	_Delay_s
  1924                           
  1925                           ;raw_io.c: 184: dummy_clocks(8);
  1926  00791C  0E00               	movlw	0
  1927  00791E  6E05               	movwf	dummy_clocks@n+1,c
  1928  007920  0E08               	movlw	8
  1929  007922  6E04               	movwf	dummy_clocks@n,c
  1930  007924  ECD1  F03A         	call	_dummy_clocks	;wreg free
  1931                           
  1932                           ;raw_io.c: 185: count = 6;
  1933  007928  0E00               	movlw	0
  1934  00792A  6E0A               	movwf	read_block@count+1,c
  1935  00792C  0E06               	movlw	6
  1936  00792E  6E09               	movwf	read_block@count,c
  1937                           
  1938                           ;raw_io.c: 186: Command(0X51,0X00000000,0XFF);
  1939  007930  0E00               	movlw	0
  1940  007932  6E03               	movwf	Command@arg,c
  1941  007934  0E00               	movlw	0
  1942  007936  6E04               	movwf	Command@arg+1,c
  1943  007938  0E00               	movlw	0
  1944  00793A  6E05               	movwf	Command@arg+2,c
  1945  00793C  0E00               	movlw	0
  1946  00793E  6E06               	movwf	Command@arg+3,c
  1947  007940  0EFF               	movlw	255
  1948  007942  6E07               	movwf	Command@CRCbits,c
  1949  007944  0E51               	movlw	81
  1950  007946  EC9D  F03A         	call	_Command
  1951  00794A                     l1244:
  1952                           
  1953                           ;raw_io.c: 189: buff = response();
  1954  00794A  ECEA  F039         	call	_response	;wreg free
  1955  00794E  6E0D               	movwf	read_block@buff,c
  1956                           
  1957                           ;raw_io.c: 190: }while(buff!=0x00);
  1958  007950  660D               	tstfsz	read_block@buff,c
  1959  007952  D7FB               	goto	l1244
  1960  007954                     l1248:
  1961                           
  1962                           ;raw_io.c: 192: buff = response();
  1963  007954  ECEA  F039         	call	_response	;wreg free
  1964  007958  6E0D               	movwf	read_block@buff,c
  1965                           
  1966                           ;raw_io.c: 193: }while(buff!=0xFE);
  1967  00795A  500D               	movf	read_block@buff,w,c
  1968  00795C  0AFE               	xorlw	254
  1969  00795E  A4D8               	btfss	status,2,c
  1970  007960  D7F9               	goto	l1248
  1971                           
  1972                           ;raw_io.c: 195: length = 0;
  1973  007962  0E00               	movlw	0
  1974  007964  6E0F               	movwf	read_block@length+1,c
  1975  007966  0E00               	movlw	0
  1976  007968  6E0E               	movwf	read_block@length,c
  1977                           
  1978                           ;raw_io.c: 196: LATB4 = 0;
  1979  00796A  988A               	bcf	3978,4,c	;volatile
  1980                           
  1981                           ;raw_io.c: 198: while(length<512)
  1982  00796C  D00B               	goto	l1260
  1983  00796E                     l1256:
  1984                           
  1985                           ;raw_io.c: 199: {
  1986                           ;raw_io.c: 200: str[length]=response();
  1987  00796E  0E00               	movlw	low _str
  1988  007970  240E               	addwf	read_block@length,w,c
  1989  007972  6ED9               	movwf	fsr2l,c
  1990  007974  0E06               	movlw	high _str
  1991  007976  200F               	addwfc	read_block@length+1,w,c
  1992  007978  6EDA               	movwf	fsr2h,c
  1993  00797A  ECEA  F039         	call	_response	;wreg free
  1994  00797E  6EDF               	movwf	indf2,c
  1995                           
  1996                           ;raw_io.c: 201: length++;
  1997  007980  4A0E               	infsnz	read_block@length,f,c
  1998  007982  2A0F               	incf	read_block@length+1,f,c
  1999  007984                     l1260:
  2000  007984  500F               	movf	read_block@length+1,w,c
  2001  007986  0A80               	xorlw	128
  2002  007988  0F7E               	addlw	-130
  2003  00798A  0E00               	movlw	0
  2004  00798C  B4D8               	btfsc	status,2,c
  2005  00798E  5C0E               	subwf	read_block@length,w,c
  2006  007990  A0D8               	btfss	status,0,c
  2007  007992  D7ED               	goto	l1256
  2008                           
  2009                           ;raw_io.c: 202: }
  2010                           ;raw_io.c: 203: length = 0;
  2011  007994  0E00               	movlw	0
  2012  007996  6E0F               	movwf	read_block@length+1,c
  2013  007998  0E00               	movlw	0
  2014  00799A  6E0E               	movwf	read_block@length,c
  2015                           
  2016                           ;raw_io.c: 205: WriteUART_(0XFF);
  2017  00799C  0EFF               	movlw	255
  2018  00799E  ECB4  F03A         	call	_WriteUART_
  2019                           
  2020                           ;raw_io.c: 206: WriteUART_(0XFF);
  2021  0079A2  0EFF               	movlw	255
  2022  0079A4  ECB4  F03A         	call	_WriteUART_
  2023                           
  2024                           ;raw_io.c: 208: Delay_s(1);
  2025  0079A8  0E01               	movlw	1
  2026  0079AA  EC75  F03A         	call	_Delay_s
  2027                           
  2028                           ;raw_io.c: 209: dummy_clocks(8);
  2029  0079AE  0E00               	movlw	0
  2030  0079B0  6E05               	movwf	dummy_clocks@n+1,c
  2031  0079B2  0E08               	movlw	8
  2032  0079B4  6E04               	movwf	dummy_clocks@n,c
  2033  0079B6  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2034                           
  2035                           ;raw_io.c: 210: Command(0X4C,0X00000000,0X00);
  2036  0079BA  0E00               	movlw	0
  2037  0079BC  6E03               	movwf	Command@arg,c
  2038  0079BE  0E00               	movlw	0
  2039  0079C0  6E04               	movwf	Command@arg+1,c
  2040  0079C2  0E00               	movlw	0
  2041  0079C4  6E05               	movwf	Command@arg+2,c
  2042  0079C6  0E00               	movlw	0
  2043  0079C8  6E06               	movwf	Command@arg+3,c
  2044  0079CA  0E00               	movlw	0
  2045  0079CC  6E07               	movwf	Command@CRCbits,c
  2046  0079CE  0E4C               	movlw	76
  2047  0079D0  EC9D  F03A         	call	_Command
  2048                           
  2049                           ;raw_io.c: 211: proceed();
  2050  0079D4  ECE4  F039         	call	_proceed	;wreg free
  2051  0079D8                     l1276:
  2052                           
  2053                           ;raw_io.c: 213: buff = response();
  2054  0079D8  ECEA  F039         	call	_response	;wreg free
  2055  0079DC  6E0D               	movwf	read_block@buff,c
  2056                           
  2057                           ;raw_io.c: 214: }while(buff!=0xFF);
  2058  0079DE  280D               	incf	read_block@buff,w,c
  2059  0079E0  A4D8               	btfss	status,2,c
  2060  0079E2  D7FA               	goto	l1276
  2061                           
  2062                           ;raw_io.c: 216: putsUART_("BLOCK READ OVER\n\r");
  2063  0079E4  0E7F               	movlw	high STR_10
  2064  0079E6  6E06               	movwf	putsUART_@data+1,c
  2065  0079E8  0E85               	movlw	low STR_10
  2066  0079EA  6E05               	movwf	putsUART_@data,c
  2067  0079EC  EC89  F03A         	call	_putsUART_	;wreg free
  2068                           
  2069                           ;raw_io.c: 217: Delay_s(2);
  2070  0079F0  0E02               	movlw	2
  2071  0079F2  EC75  F03A         	call	_Delay_s
  2072                           
  2073                           ;raw_io.c: 218: length = 0;
  2074  0079F6  0E00               	movlw	0
  2075  0079F8  6E0F               	movwf	read_block@length+1,c
  2076  0079FA  0E00               	movlw	0
  2077  0079FC  6E0E               	movwf	read_block@length,c
  2078                           
  2079                           ;raw_io.c: 219: i = 0;
  2080  0079FE  0E00               	movlw	0
  2081  007A00  6E0C               	movwf	read_block@i+1,c
  2082  007A02  0E00               	movlw	0
  2083  007A04  6E0B               	movwf	read_block@i,c
  2084                           
  2085                           ;raw_io.c: 221: while(length<512)
  2086  007A06  D00B               	goto	l1292
  2087  007A08                     l1288:
  2088                           
  2089                           ;raw_io.c: 222: {
  2090                           ;raw_io.c: 223: WriteUART_(str[length]);
  2091  007A08  0E00               	movlw	low _str
  2092  007A0A  240E               	addwf	read_block@length,w,c
  2093  007A0C  6ED9               	movwf	fsr2l,c
  2094  007A0E  0E06               	movlw	high _str
  2095  007A10  200F               	addwfc	read_block@length+1,w,c
  2096  007A12  6EDA               	movwf	fsr2h,c
  2097  007A14  50DF               	movf	indf2,w,c
  2098  007A16  ECB4  F03A         	call	_WriteUART_
  2099                           
  2100                           ;raw_io.c: 224: length++;
  2101  007A1A  4A0E               	infsnz	read_block@length,f,c
  2102  007A1C  2A0F               	incf	read_block@length+1,f,c
  2103  007A1E                     l1292:
  2104  007A1E  500F               	movf	read_block@length+1,w,c
  2105  007A20  0A80               	xorlw	128
  2106  007A22  0F7E               	addlw	-130
  2107  007A24  0E00               	movlw	0
  2108  007A26  B4D8               	btfsc	status,2,c
  2109  007A28  5C0E               	subwf	read_block@length,w,c
  2110  007A2A  B0D8               	btfsc	status,0,c
  2111                           
  2112                           ;raw_io.c: 225: }
  2113                           ;raw_io.c: 226: return;
  2114  007A2C  0012               	return	
  2115  007A2E  D7EC               	goto	l1288
  2116  007A30                     __end_of_read_block:
  2117                           	opt stack 0
  2118                           tblptru	equ	0xFF8
  2119                           postinc0	equ	0xFEE
  2120                           postdec1	equ	0xFE5
  2121                           fsr1h	equ	0xFE2
  2122                           fsr1l	equ	0xFE1
  2123                           indf2	equ	0xFDF
  2124                           fsr2h	equ	0xFDA
  2125                           fsr2l	equ	0xFD9
  2126                           status	equ	0xFD8
  2127                           
  2128 ;; *************** function _multi_write *****************
  2129 ;; Defined at:
  2130 ;;		line 59 in file "raw_io.c"
  2131 ;; Parameters:    Size  Location     Type
  2132 ;;		None
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  j               2   11[COMRAM] int 
  2135 ;;  i               2    8[COMRAM] int 
  2136 ;;  buff            1   13[COMRAM] unsigned char 
  2137 ;;  data            1   10[COMRAM] unsigned char 
  2138 ;; Return value:  Size  Location     Type
  2139 ;;                  2   10[COMRAM] int 
  2140 ;; Registers used:
  2141 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2142 ;; Tracked objects:
  2143 ;;		On entry : 0/0
  2144 ;;		On exit  : 0/0
  2145 ;;		Unchanged: 0/0
  2146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2147 ;;      Params:         0       0       0       0       0       0       0       0       0
  2148 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2149 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2150 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2151 ;;Total ram usage:        6 bytes
  2152 ;; Hardware stack levels used:    1
  2153 ;; Hardware stack levels required when called:    4
  2154 ;; This function calls:
  2155 ;;		_Command
  2156 ;;		_Delay_s
  2157 ;;		_WriteSPI_
  2158 ;;		_dummy_clocks
  2159 ;;		_proceed
  2160 ;;		_putsUART_
  2161 ;;		_response
  2162 ;; This function is called by:
  2163 ;;		_File_IO
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           	psect	text9
  2168  007A30                     __ptext9:
  2169                           	opt stack 0
  2170  007A30                     _multi_write:
  2171                           	opt stack 25
  2172                           
  2173                           ;raw_io.c: 61: unsigned char data = 0X41,buff;
  2174                           
  2175                           ;incstack = 0
  2176  007A30  0E41               	movlw	65
  2177  007A32  6E0B               	movwf	multi_write@data,c
  2178                           
  2179                           ;raw_io.c: 62: int i=0,j;
  2180  007A34  0E00               	movlw	0
  2181  007A36  6E0A               	movwf	multi_write@i+1,c
  2182  007A38  0E00               	movlw	0
  2183  007A3A  6E09               	movwf	multi_write@i,c
  2184                           
  2185                           ;raw_io.c: 64: dummy_clocks(8);
  2186  007A3C  0E00               	movlw	0
  2187  007A3E  6E05               	movwf	dummy_clocks@n+1,c
  2188  007A40  0E08               	movlw	8
  2189  007A42  6E04               	movwf	dummy_clocks@n,c
  2190  007A44  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2191                           
  2192                           ;raw_io.c: 66: Command(0X59, 0X00000A00, 0X00);
  2193  007A48  0E00               	movlw	0
  2194  007A4A  6E03               	movwf	Command@arg,c
  2195  007A4C  0E0A               	movlw	10
  2196  007A4E  6E04               	movwf	Command@arg+1,c
  2197  007A50  0E00               	movlw	0
  2198  007A52  6E05               	movwf	Command@arg+2,c
  2199  007A54  0E00               	movlw	0
  2200  007A56  6E06               	movwf	Command@arg+3,c
  2201  007A58  0E00               	movlw	0
  2202  007A5A  6E07               	movwf	Command@CRCbits,c
  2203  007A5C  0E59               	movlw	89
  2204  007A5E  EC9D  F03A         	call	_Command
  2205                           
  2206                           ;raw_io.c: 67: proceed();
  2207  007A62  ECE4  F039         	call	_proceed	;wreg free
  2208  007A66                     l1302:
  2209                           
  2210                           ;raw_io.c: 69: buff = response();
  2211  007A66  ECEA  F039         	call	_response	;wreg free
  2212  007A6A  6E0E               	movwf	multi_write@buff,c
  2213                           
  2214                           ;raw_io.c: 70: }while(buff!=0x00);
  2215  007A6C  660E               	tstfsz	multi_write@buff,c
  2216  007A6E  D7FB               	goto	l1302
  2217                           
  2218                           ;raw_io.c: 72: putsUART_("CMD25 Accepted\n\r");
  2219  007A70  0E7F               	movlw	high STR_6
  2220  007A72  6E06               	movwf	putsUART_@data+1,c
  2221  007A74  0E97               	movlw	low STR_6
  2222  007A76  6E05               	movwf	putsUART_@data,c
  2223  007A78  EC89  F03A         	call	_putsUART_	;wreg free
  2224                           
  2225                           ;raw_io.c: 73: Delay_s(2);
  2226  007A7C  0E02               	movlw	2
  2227  007A7E  EC75  F03A         	call	_Delay_s
  2228                           
  2229                           ;raw_io.c: 75: dummy_clocks(8);
  2230  007A82  0E00               	movlw	0
  2231  007A84  6E05               	movwf	dummy_clocks@n+1,c
  2232  007A86  0E08               	movlw	8
  2233  007A88  6E04               	movwf	dummy_clocks@n,c
  2234  007A8A  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2235                           
  2236                           ;raw_io.c: 76: while(i!=4)
  2237  007A8E  D02F               	goto	l1342
  2238  007A90                     l1312:
  2239                           
  2240                           ;raw_io.c: 77: {
  2241                           ;raw_io.c: 78: WriteSPI_(0XFC);
  2242  007A90  0EFC               	movlw	252
  2243  007A92  EC25  F03A         	call	_WriteSPI_
  2244                           
  2245                           ;raw_io.c: 79: i++;
  2246  007A96  4A09               	infsnz	multi_write@i,f,c
  2247  007A98  2A0A               	incf	multi_write@i+1,f,c
  2248                           
  2249                           ;raw_io.c: 80: for(j=0;j<1024;j++)
  2250  007A9A  0E00               	movlw	0
  2251  007A9C  6E0D               	movwf	multi_write@j+1,c
  2252  007A9E  0E00               	movlw	0
  2253  007AA0  6E0C               	movwf	multi_write@j,c
  2254  007AA2  500D               	movf	multi_write@j+1,w,c
  2255  007AA4  0A80               	xorlw	128
  2256  007AA6  0F7C               	addlw	-132
  2257  007AA8  0E00               	movlw	0
  2258  007AAA  B4D8               	btfsc	status,2,c
  2259  007AAC  5C0C               	subwf	multi_write@j,w,c
  2260  007AAE  B0D8               	btfsc	status,0,c
  2261  007AB0  D008               	goto	l1330
  2262                           
  2263                           ;raw_io.c: 81: {
  2264                           ;raw_io.c: 82: WriteSPI_(data);
  2265  007AB2  500B               	movf	multi_write@data,w,c
  2266  007AB4  EC25  F03A         	call	_WriteSPI_
  2267                           
  2268                           ;raw_io.c: 83: j++;
  2269  007AB8  4A0C               	infsnz	multi_write@j,f,c
  2270  007ABA  2A0D               	incf	multi_write@j+1,f,c
  2271  007ABC  4A0C               	infsnz	multi_write@j,f,c
  2272  007ABE  2A0D               	incf	multi_write@j+1,f,c
  2273  007AC0  D7F0               	goto	L2
  2274  007AC2                     l1330:
  2275                           
  2276                           ;raw_io.c: 84: }
  2277                           ;raw_io.c: 85: data++;
  2278  007AC2  2A0B               	incf	multi_write@data,f,c
  2279                           
  2280                           ;raw_io.c: 86: WriteSPI_(0XFF);
  2281  007AC4  0EFF               	movlw	255
  2282  007AC6  EC25  F03A         	call	_WriteSPI_
  2283                           
  2284                           ;raw_io.c: 87: WriteSPI_(0XFF);
  2285  007ACA  0EFF               	movlw	255
  2286  007ACC  EC25  F03A         	call	_WriteSPI_
  2287                           
  2288                           ;raw_io.c: 88: dummy_clocks(1);
  2289  007AD0  0E00               	movlw	0
  2290  007AD2  6E05               	movwf	dummy_clocks@n+1,c
  2291  007AD4  0E01               	movlw	1
  2292  007AD6  6E04               	movwf	dummy_clocks@n,c
  2293  007AD8  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2294                           
  2295                           ;raw_io.c: 89: Delay_s(1);
  2296  007ADC  0E01               	movlw	1
  2297  007ADE  EC75  F03A         	call	_Delay_s
  2298                           
  2299                           ;raw_io.c: 90: dummy_clocks(8);
  2300  007AE2  0E00               	movlw	0
  2301  007AE4  6E05               	movwf	dummy_clocks@n+1,c
  2302  007AE6  0E08               	movlw	8
  2303  007AE8  6E04               	movwf	dummy_clocks@n,c
  2304  007AEA  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2305  007AEE                     l1342:
  2306  007AEE  5009               	movf	multi_write@i,w,c
  2307  007AF0  0A04               	xorlw	4
  2308  007AF2  100A               	iorwf	multi_write@i+1,w,c
  2309  007AF4  A4D8               	btfss	status,2,c
  2310  007AF6  D7CC               	goto	l1312
  2311                           
  2312                           ;raw_io.c: 91: }
  2313                           ;raw_io.c: 94: WriteSPI_(0XFD);
  2314  007AF8  0EFD               	movlw	253
  2315  007AFA  EC25  F03A         	call	_WriteSPI_
  2316                           
  2317                           ;raw_io.c: 95: dummy_clocks(1);
  2318  007AFE  0E00               	movlw	0
  2319  007B00  6E05               	movwf	dummy_clocks@n+1,c
  2320  007B02  0E01               	movlw	1
  2321  007B04  6E04               	movwf	dummy_clocks@n,c
  2322  007B06  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2323                           
  2324                           ;raw_io.c: 96: Delay_s(1);
  2325  007B0A  0E01               	movlw	1
  2326  007B0C  EC75  F03A         	call	_Delay_s
  2327                           
  2328                           ;raw_io.c: 97: dummy_clocks(8);
  2329  007B10  0E00               	movlw	0
  2330  007B12  6E05               	movwf	dummy_clocks@n+1,c
  2331  007B14  0E08               	movlw	8
  2332  007B16  6E04               	movwf	dummy_clocks@n,c
  2333  007B18  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2334                           
  2335                           ;raw_io.c: 98: Command(0X4D,0X00000000,0X00);
  2336  007B1C  0E00               	movlw	0
  2337  007B1E  6E03               	movwf	Command@arg,c
  2338  007B20  0E00               	movlw	0
  2339  007B22  6E04               	movwf	Command@arg+1,c
  2340  007B24  0E00               	movlw	0
  2341  007B26  6E05               	movwf	Command@arg+2,c
  2342  007B28  0E00               	movlw	0
  2343  007B2A  6E06               	movwf	Command@arg+3,c
  2344  007B2C  0E00               	movlw	0
  2345  007B2E  6E07               	movwf	Command@CRCbits,c
  2346  007B30  0E4D               	movlw	77
  2347  007B32  EC9D  F03A         	call	_Command
  2348                           
  2349                           ;raw_io.c: 99: proceed();
  2350  007B36  ECE4  F039         	call	_proceed	;wreg free
  2351  007B3A                     l1356:
  2352                           
  2353                           ;raw_io.c: 101: buff = response();
  2354  007B3A  ECEA  F039         	call	_response	;wreg free
  2355  007B3E  6E0E               	movwf	multi_write@buff,c
  2356                           
  2357                           ;raw_io.c: 102: }while(buff!=0x00);
  2358  007B40  660E               	tstfsz	multi_write@buff,c
  2359  007B42  D7FB               	goto	l1356
  2360                           
  2361                           ;raw_io.c: 103: putsUART_("MULTI WRITE OVER\n\r");
  2362  007B44  0E7F               	movlw	high STR_7
  2363  007B46  6E06               	movwf	putsUART_@data+1,c
  2364  007B48  0E5F               	movlw	low STR_7
  2365  007B4A  6E05               	movwf	putsUART_@data,c
  2366  007B4C  EC89  F03A         	call	_putsUART_	;wreg free
  2367                           
  2368                           ;raw_io.c: 104: Delay_s(2);
  2369  007B50  0E02               	movlw	2
  2370  007B52  EC75  F03A         	call	_Delay_s
  2371                           
  2372                           ;raw_io.c: 105: return;
  2373  007B56  0012               	return	
  2374  007B58                     __end_of_multi_write:
  2375                           	opt stack 0
  2376                           tblptru	equ	0xFF8
  2377                           postinc0	equ	0xFEE
  2378                           postdec1	equ	0xFE5
  2379                           fsr1h	equ	0xFE2
  2380                           fsr1l	equ	0xFE1
  2381                           indf2	equ	0xFDF
  2382                           fsr2h	equ	0xFDA
  2383                           fsr2l	equ	0xFD9
  2384                           status	equ	0xFD8
  2385                           
  2386 ;; *************** function _multi_read *****************
  2387 ;; Defined at:
  2388 ;;		line 108 in file "raw_io.c"
  2389 ;; Parameters:    Size  Location     Type
  2390 ;;		None
  2391 ;; Auto vars:     Size  Location     Type
  2392 ;;  start_add       4    0        unsigned long 
  2393 ;;  length          2   12[COMRAM] int 
  2394 ;;  count           2    9[COMRAM] int 
  2395 ;;  buff            1   11[COMRAM] unsigned char 
  2396 ;;  ptr             1    8[COMRAM] unsigned char 
  2397 ;; Return value:  Size  Location     Type
  2398 ;;                  2   12[COMRAM] int 
  2399 ;; Registers used:
  2400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2401 ;; Tracked objects:
  2402 ;;		On entry : 0/0
  2403 ;;		On exit  : 0/0
  2404 ;;		Unchanged: 0/0
  2405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2406 ;;      Params:         0       0       0       0       0       0       0       0       0
  2407 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2409 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2410 ;;Total ram usage:        6 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    4
  2413 ;; This function calls:
  2414 ;;		_Command
  2415 ;;		_Delay_s
  2416 ;;		_WriteUART_
  2417 ;;		_dummy_clocks
  2418 ;;		_proceed
  2419 ;;		_putsUART_
  2420 ;;		_response
  2421 ;; This function is called by:
  2422 ;;		_File_IO
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           	psect	text10
  2427  007B58                     __ptext10:
  2428                           	opt stack 0
  2429  007B58                     _multi_read:
  2430                           	opt stack 25
  2431                           
  2432                           ;raw_io.c: 110: unsigned char ptr=0X00,buff;
  2433                           
  2434                           ;incstack = 0
  2435  007B58  0E00               	movlw	0
  2436  007B5A  6E09               	movwf	multi_read@ptr,c
  2437                           
  2438                           ;raw_io.c: 111: unsigned long int start_add;
  2439                           ;raw_io.c: 112: int length,count;
  2440                           ;raw_io.c: 114: Delay_s(1);
  2441  007B5C  0E01               	movlw	1
  2442  007B5E  EC75  F03A         	call	_Delay_s
  2443                           
  2444                           ;raw_io.c: 115: dummy_clocks(8);
  2445  007B62  0E00               	movlw	0
  2446  007B64  6E05               	movwf	dummy_clocks@n+1,c
  2447  007B66  0E08               	movlw	8
  2448  007B68  6E04               	movwf	dummy_clocks@n,c
  2449  007B6A  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2450                           
  2451                           ;raw_io.c: 117: Command(0X52,0X00000A00,0X00);
  2452  007B6E  0E00               	movlw	0
  2453  007B70  6E03               	movwf	Command@arg,c
  2454  007B72  0E0A               	movlw	10
  2455  007B74  6E04               	movwf	Command@arg+1,c
  2456  007B76  0E00               	movlw	0
  2457  007B78  6E05               	movwf	Command@arg+2,c
  2458  007B7A  0E00               	movlw	0
  2459  007B7C  6E06               	movwf	Command@arg+3,c
  2460  007B7E  0E00               	movlw	0
  2461  007B80  6E07               	movwf	Command@CRCbits,c
  2462  007B82  0E52               	movlw	82
  2463  007B84  EC9D  F03A         	call	_Command
  2464                           
  2465                           ;raw_io.c: 118: proceed();
  2466  007B88  ECE4  F039         	call	_proceed	;wreg free
  2467  007B8C                     l1376:
  2468                           
  2469                           ;raw_io.c: 120: buff = response();
  2470  007B8C  ECEA  F039         	call	_response	;wreg free
  2471  007B90  6E0C               	movwf	multi_read@buff,c
  2472                           
  2473                           ;raw_io.c: 121: }while(buff!=0x00);
  2474  007B92  660C               	tstfsz	multi_read@buff,c
  2475  007B94  D7FB               	goto	l1376
  2476                           
  2477                           ;raw_io.c: 123: dummy_clocks(1);
  2478  007B96  0E00               	movlw	0
  2479  007B98  6E05               	movwf	dummy_clocks@n+1,c
  2480  007B9A  0E01               	movlw	1
  2481  007B9C  6E04               	movwf	dummy_clocks@n,c
  2482  007B9E  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2483  007BA2                     l1382:
  2484                           
  2485                           ;raw_io.c: 125: buff = response();
  2486  007BA2  ECEA  F039         	call	_response	;wreg free
  2487  007BA6  6E0C               	movwf	multi_read@buff,c
  2488                           
  2489                           ;raw_io.c: 126: }while(buff!=0xFE);
  2490  007BA8  500C               	movf	multi_read@buff,w,c
  2491  007BAA  0AFE               	xorlw	254
  2492  007BAC  A4D8               	btfss	status,2,c
  2493  007BAE  D7F9               	goto	l1382
  2494                           
  2495                           ;raw_io.c: 128: count = 2;
  2496  007BB0  0E00               	movlw	0
  2497  007BB2  6E0B               	movwf	multi_read@count+1,c
  2498  007BB4  0E02               	movlw	2
  2499  007BB6  6E0A               	movwf	multi_read@count,c
  2500                           
  2501                           ;raw_io.c: 129: length = 0;
  2502  007BB8  0E00               	movlw	0
  2503  007BBA  6E0E               	movwf	multi_read@length+1,c
  2504  007BBC  0E00               	movlw	0
  2505  007BBE  6E0D               	movwf	multi_read@length,c
  2506                           
  2507                           ;raw_io.c: 131: while(count){
  2508  007BC0  D031               	goto	l1406
  2509  007BC2                     l1388:
  2510                           
  2511                           ;raw_io.c: 133: {
  2512                           ;raw_io.c: 134: ctr[length] = response();
  2513  007BC2  0E00               	movlw	low _ctr
  2514  007BC4  240D               	addwf	multi_read@length,w,c
  2515  007BC6  6ED9               	movwf	fsr2l,c
  2516  007BC8  0E04               	movlw	high _ctr
  2517  007BCA  200E               	addwfc	multi_read@length+1,w,c
  2518  007BCC  6EDA               	movwf	fsr2h,c
  2519  007BCE  ECEA  F039         	call	_response	;wreg free
  2520  007BD2  6EDF               	movwf	indf2,c
  2521                           
  2522                           ;raw_io.c: 135: length++;
  2523  007BD4  4A0D               	infsnz	multi_read@length,f,c
  2524  007BD6  2A0E               	incf	multi_read@length+1,f,c
  2525  007BD8                     l1392:
  2526  007BD8  500E               	movf	multi_read@length+1,w,c
  2527  007BDA  0A80               	xorlw	128
  2528  007BDC  0F7E               	addlw	-130
  2529  007BDE  0E00               	movlw	0
  2530  007BE0  B4D8               	btfsc	status,2,c
  2531  007BE2  5C0D               	subwf	multi_read@length,w,c
  2532  007BE4  A0D8               	btfss	status,0,c
  2533  007BE6  D7ED               	goto	l1388
  2534                           
  2535                           ;raw_io.c: 136: }
  2536                           ;raw_io.c: 137: count--;
  2537  007BE8  060A               	decf	multi_read@count,f,c
  2538  007BEA  A0D8               	btfss	status,0,c
  2539  007BEC  060B               	decf	multi_read@count+1,f,c
  2540                           
  2541                           ;raw_io.c: 138: length = 0;
  2542  007BEE  0E00               	movlw	0
  2543  007BF0  6E0E               	movwf	multi_read@length+1,c
  2544  007BF2  0E00               	movlw	0
  2545  007BF4  6E0D               	movwf	multi_read@length,c
  2546                           
  2547                           ;raw_io.c: 139: while ( length < 512 )
  2548  007BF6  D00B               	goto	l1402
  2549  007BF8                     l1398:
  2550                           
  2551                           ;raw_io.c: 140: {
  2552                           ;raw_io.c: 141: str[length] = response();
  2553  007BF8  0E00               	movlw	low _str
  2554  007BFA  240D               	addwf	multi_read@length,w,c
  2555  007BFC  6ED9               	movwf	fsr2l,c
  2556  007BFE  0E06               	movlw	high _str
  2557  007C00  200E               	addwfc	multi_read@length+1,w,c
  2558  007C02  6EDA               	movwf	fsr2h,c
  2559  007C04  ECEA  F039         	call	_response	;wreg free
  2560  007C08  6EDF               	movwf	indf2,c
  2561                           
  2562                           ;raw_io.c: 143: length++;
  2563  007C0A  4A0D               	infsnz	multi_read@length,f,c
  2564  007C0C  2A0E               	incf	multi_read@length+1,f,c
  2565  007C0E                     l1402:
  2566  007C0E  500E               	movf	multi_read@length+1,w,c
  2567  007C10  0A80               	xorlw	128
  2568  007C12  0F7E               	addlw	-130
  2569  007C14  0E00               	movlw	0
  2570  007C16  B4D8               	btfsc	status,2,c
  2571  007C18  5C0D               	subwf	multi_read@length,w,c
  2572  007C1A  A0D8               	btfss	status,0,c
  2573  007C1C  D7ED               	goto	l1398
  2574                           
  2575                           ;raw_io.c: 144: }
  2576                           ;raw_io.c: 145: count--;
  2577  007C1E  060A               	decf	multi_read@count,f,c
  2578  007C20  A0D8               	btfss	status,0,c
  2579  007C22  060B               	decf	multi_read@count+1,f,c
  2580  007C24                     l1406:
  2581  007C24  500B               	movf	multi_read@count+1,w,c
  2582  007C26  100A               	iorwf	multi_read@count,w,c
  2583  007C28  A4D8               	btfss	status,2,c
  2584  007C2A  D7D6               	goto	l1392
  2585                           
  2586                           ;raw_io.c: 146: }
  2587                           ;raw_io.c: 147: length = 0;
  2588  007C2C  0E00               	movlw	0
  2589  007C2E  6E0E               	movwf	multi_read@length+1,c
  2590  007C30  0E00               	movlw	0
  2591  007C32  6E0D               	movwf	multi_read@length,c
  2592                           
  2593                           ;raw_io.c: 150: Delay_s(1);
  2594  007C34  0E01               	movlw	1
  2595  007C36  EC75  F03A         	call	_Delay_s
  2596                           
  2597                           ;raw_io.c: 151: dummy_clocks(8);
  2598  007C3A  0E00               	movlw	0
  2599  007C3C  6E05               	movwf	dummy_clocks@n+1,c
  2600  007C3E  0E08               	movlw	8
  2601  007C40  6E04               	movwf	dummy_clocks@n,c
  2602  007C42  ECD1  F03A         	call	_dummy_clocks	;wreg free
  2603                           
  2604                           ;raw_io.c: 152: Command(0X4C,0X00000600,0X00);
  2605  007C46  0E00               	movlw	0
  2606  007C48  6E03               	movwf	Command@arg,c
  2607  007C4A  0E06               	movlw	6
  2608  007C4C  6E04               	movwf	Command@arg+1,c
  2609  007C4E  0E00               	movlw	0
  2610  007C50  6E05               	movwf	Command@arg+2,c
  2611  007C52  0E00               	movlw	0
  2612  007C54  6E06               	movwf	Command@arg+3,c
  2613  007C56  0E00               	movlw	0
  2614  007C58  6E07               	movwf	Command@CRCbits,c
  2615  007C5A  0E4C               	movlw	76
  2616  007C5C  EC9D  F03A         	call	_Command
  2617                           
  2618                           ;raw_io.c: 153: proceed();
  2619  007C60  ECE4  F039         	call	_proceed	;wreg free
  2620  007C64                     l1418:
  2621                           
  2622                           ;raw_io.c: 155: buff = response();
  2623  007C64  ECEA  F039         	call	_response	;wreg free
  2624  007C68  6E0C               	movwf	multi_read@buff,c
  2625                           
  2626                           ;raw_io.c: 156: }while(buff!=0xFF);
  2627  007C6A  280C               	incf	multi_read@buff,w,c
  2628  007C6C  B4D8               	btfsc	status,2,c
  2629  007C6E  D00C               	goto	l1426
  2630  007C70  D7F9               	goto	l1418
  2631  007C72                     l1422:
  2632                           
  2633                           ;raw_io.c: 159: {
  2634                           ;raw_io.c: 160: WriteUART_(ctr[length]);
  2635  007C72  0E00               	movlw	low _ctr
  2636  007C74  240D               	addwf	multi_read@length,w,c
  2637  007C76  6ED9               	movwf	fsr2l,c
  2638  007C78  0E04               	movlw	high _ctr
  2639  007C7A  200E               	addwfc	multi_read@length+1,w,c
  2640  007C7C  6EDA               	movwf	fsr2h,c
  2641  007C7E  50DF               	movf	indf2,w,c
  2642  007C80  ECB4  F03A         	call	_WriteUART_
  2643                           
  2644                           ;raw_io.c: 161: length++;
  2645  007C84  4A0D               	infsnz	multi_read@length,f,c
  2646  007C86  2A0E               	incf	multi_read@length+1,f,c
  2647  007C88                     l1426:
  2648  007C88  500E               	movf	multi_read@length+1,w,c
  2649  007C8A  0A80               	xorlw	128
  2650  007C8C  0F7E               	addlw	-130
  2651  007C8E  0E00               	movlw	0
  2652  007C90  B4D8               	btfsc	status,2,c
  2653  007C92  5C0D               	subwf	multi_read@length,w,c
  2654  007C94  A0D8               	btfss	status,0,c
  2655  007C96  D7ED               	goto	l1422
  2656                           
  2657                           ;raw_io.c: 162: }
  2658                           ;raw_io.c: 164: Delay_s(1);
  2659  007C98  0E01               	movlw	1
  2660  007C9A  EC75  F03A         	call	_Delay_s
  2661                           
  2662                           ;raw_io.c: 165: putsUART_("\r\n");
  2663  007C9E  0E7F               	movlw	high STR_8
  2664  007CA0  6E06               	movwf	putsUART_@data+1,c
  2665  007CA2  0EFC               	movlw	low STR_8
  2666  007CA4  6E05               	movwf	putsUART_@data,c
  2667  007CA6  EC89  F03A         	call	_putsUART_	;wreg free
  2668                           
  2669                           ;raw_io.c: 166: length = 0;
  2670  007CAA  0E00               	movlw	0
  2671  007CAC  6E0E               	movwf	multi_read@length+1,c
  2672  007CAE  0E00               	movlw	0
  2673  007CB0  6E0D               	movwf	multi_read@length,c
  2674                           
  2675                           ;raw_io.c: 168: while(length < 512)
  2676  007CB2  D00B               	goto	l1438
  2677  007CB4                     l1434:
  2678                           
  2679                           ;raw_io.c: 169: {
  2680                           ;raw_io.c: 170: WriteUART_(str[length]);
  2681  007CB4  0E00               	movlw	low _str
  2682  007CB6  240D               	addwf	multi_read@length,w,c
  2683  007CB8  6ED9               	movwf	fsr2l,c
  2684  007CBA  0E06               	movlw	high _str
  2685  007CBC  200E               	addwfc	multi_read@length+1,w,c
  2686  007CBE  6EDA               	movwf	fsr2h,c
  2687  007CC0  50DF               	movf	indf2,w,c
  2688  007CC2  ECB4  F03A         	call	_WriteUART_
  2689                           
  2690                           ;raw_io.c: 171: length++;
  2691  007CC6  4A0D               	infsnz	multi_read@length,f,c
  2692  007CC8  2A0E               	incf	multi_read@length+1,f,c
  2693  007CCA                     l1438:
  2694  007CCA  500E               	movf	multi_read@length+1,w,c
  2695  007CCC  0A80               	xorlw	128
  2696  007CCE  0F7E               	addlw	-130
  2697  007CD0  0E00               	movlw	0
  2698  007CD2  B4D8               	btfsc	status,2,c
  2699  007CD4  5C0D               	subwf	multi_read@length,w,c
  2700  007CD6  A0D8               	btfss	status,0,c
  2701  007CD8  D7ED               	goto	l1434
  2702                           
  2703                           ;raw_io.c: 172: }
  2704                           ;raw_io.c: 174: Delay_s(1);
  2705  007CDA  0E01               	movlw	1
  2706  007CDC  EC75  F03A         	call	_Delay_s
  2707                           
  2708                           ;raw_io.c: 175: putsUART_("\r\n\r\nMulti Read Over\n\r");
  2709  007CE0  0E7F               	movlw	high STR_9
  2710  007CE2  6E06               	movwf	putsUART_@data+1,c
  2711  007CE4  0E34               	movlw	low STR_9
  2712  007CE6  6E05               	movwf	putsUART_@data,c
  2713  007CE8  EC89  F03A         	call	_putsUART_	;wreg free
  2714  007CEC  0012               	return	
  2715  007CEE                     __end_of_multi_read:
  2716                           	opt stack 0
  2717                           tblptru	equ	0xFF8
  2718                           postinc0	equ	0xFEE
  2719                           postdec1	equ	0xFE5
  2720                           fsr1h	equ	0xFE2
  2721                           fsr1l	equ	0xFE1
  2722                           indf2	equ	0xFDF
  2723                           fsr2h	equ	0xFDA
  2724                           fsr2l	equ	0xFD9
  2725                           status	equ	0xFD8
  2726                           
  2727 ;; *************** function _response *****************
  2728 ;; Defined at:
  2729 ;;		line 57 in file "transceiver.c"
  2730 ;; Parameters:    Size  Location     Type
  2731 ;;		None
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  buff            1    1[COMRAM] unsigned char 
  2734 ;; Return value:  Size  Location     Type
  2735 ;;                  1    wreg      unsigned char 
  2736 ;; Registers used:
  2737 ;;		wreg, status,2, cstack
  2738 ;; Tracked objects:
  2739 ;;		On entry : 0/0
  2740 ;;		On exit  : 0/0
  2741 ;;		Unchanged: 0/0
  2742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2743 ;;      Params:         0       0       0       0       0       0       0       0       0
  2744 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2745 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2746 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2747 ;;Total ram usage:        1 bytes
  2748 ;; Hardware stack levels used:    1
  2749 ;; Hardware stack levels required when called:    1
  2750 ;; This function calls:
  2751 ;;		_ReadSPI__
  2752 ;; This function is called by:
  2753 ;;		_write_block
  2754 ;;		_multi_write
  2755 ;;		_multi_read
  2756 ;;		_read_block
  2757 ;;		_reset
  2758 ;;		_init
  2759 ;; This function uses a non-reentrant model
  2760 ;;
  2761                           
  2762                           	psect	text11
  2763  0073D4                     __ptext11:
  2764                           	opt stack 0
  2765  0073D4                     _response:
  2766                           	opt stack 28
  2767                           
  2768                           ;transceiver.c: 59: unsigned char buff;
  2769                           ;transceiver.c: 60: LATB4 = 0;
  2770                           
  2771                           ;incstack = 0
  2772  0073D4  988A               	bcf	3978,4,c	;volatile
  2773                           
  2774                           ;transceiver.c: 61: buff=ReadSPI__();
  2775  0073D6  EC09  F03A         	call	_ReadSPI__	;wreg free
  2776  0073DA  6E02               	movwf	response@buff,c
  2777                           
  2778                           ;transceiver.c: 62: LATB4 = 1;
  2779  0073DC  888A               	bsf	3978,4,c	;volatile
  2780                           
  2781                           ;transceiver.c: 63: return buff;
  2782  0073DE  5002               	movf	response@buff,w,c
  2783  0073E0  0012               	return	
  2784  0073E2                     __end_of_response:
  2785                           	opt stack 0
  2786                           tblptru	equ	0xFF8
  2787                           postinc0	equ	0xFEE
  2788                           postdec1	equ	0xFE5
  2789                           fsr1h	equ	0xFE2
  2790                           fsr1l	equ	0xFE1
  2791                           indf2	equ	0xFDF
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _ReadSPI__ *****************
  2797 ;; Defined at:
  2798 ;;		line 13 in file "transceiver.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  TempVar         1    0[COMRAM] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      unsigned char 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2812 ;;      Params:         0       0       0       0       0       0       0       0       0
  2813 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2815 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2816 ;;Total ram usage:        1 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; This function calls:
  2819 ;;		Nothing
  2820 ;; This function is called by:
  2821 ;;		_response
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text12
  2826  007412                     __ptext12:
  2827                           	opt stack 0
  2828  007412                     _ReadSPI__:
  2829                           	opt stack 28
  2830                           
  2831                           ;transceiver.c: 15: unsigned char TempVar;
  2832                           ;transceiver.c: 16: TempVar = SSPBUF;
  2833                           
  2834                           ;incstack = 0
  2835  007412  CFC9 F001          	movff	4041,ReadSPI__@TempVar	;volatile
  2836                           
  2837                           ;transceiver.c: 17: PIR1bits.SSPIF = 0;
  2838  007416  969E               	bcf	3998,3,c	;volatile
  2839                           
  2840                           ;transceiver.c: 18: SSPBUF = 0xFF;
  2841  007418  68C9               	setf	4041,c	;volatile
  2842  00741A                     l296:
  2843  00741A  A69E               	btfss	3998,3,c	;volatile
  2844  00741C  D7FE               	goto	l296
  2845                           
  2846                           ;transceiver.c: 21: return ( SSPBUF );
  2847  00741E  50C9               	movf	4041,w,c	;volatile
  2848  007420  0012               	return	
  2849  007422                     __end_of_ReadSPI__:
  2850                           	opt stack 0
  2851                           tblptru	equ	0xFF8
  2852                           postinc0	equ	0xFEE
  2853                           postdec1	equ	0xFE5
  2854                           fsr1h	equ	0xFE2
  2855                           fsr1l	equ	0xFE1
  2856                           indf2	equ	0xFDF
  2857                           fsr2h	equ	0xFDA
  2858                           fsr2l	equ	0xFD9
  2859                           status	equ	0xFD8
  2860                           
  2861 ;; *************** function _putsUART_ *****************
  2862 ;; Defined at:
  2863 ;;		line 71 in file "my_sw_uart.c"
  2864 ;; Parameters:    Size  Location     Type
  2865 ;;  data            2    4[COMRAM] PTR unsigned char 
  2866 ;;		 -> STR_15(16), STR_14(11), STR_13(10), STR_12(3), 
  2867 ;;		 -> STR_11(21), STR_10(18), STR_9(22), STR_8(3), 
  2868 ;;		 -> STR_7(19), STR_6(17), STR_5(17), STR_4(15), 
  2869 ;;		 -> STR_3(15), STR_2(19), STR_1(101), 
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;		None
  2872 ;; Return value:  Size  Location     Type
  2873 ;;		None               void
  2874 ;; Registers used:
  2875 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2881 ;;      Params:         2       0       0       0       0       0       0       0       0
  2882 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2883 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2884 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2885 ;;Total ram usage:        2 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    3
  2888 ;; This function calls:
  2889 ;;		_WriteUART_
  2890 ;; This function is called by:
  2891 ;;		_File_IO
  2892 ;;		_main
  2893 ;;		_write_block
  2894 ;;		_multi_write
  2895 ;;		_multi_read
  2896 ;;		_read_block
  2897 ;;		_reset
  2898 ;;		_init
  2899 ;; This function uses a non-reentrant model
  2900 ;;
  2901                           
  2902                           	psect	text13
  2903  007512                     __ptext13:
  2904                           	opt stack 0
  2905  007512                     _putsUART_:
  2906                           	opt stack 27
  2907  007512                     l109:
  2908                           
  2909                           ;my_sw_uart.c: 74: {
  2910                           ;my_sw_uart.c: 75: WriteUART_(*data);
  2911  007512  C005  FFF6         	movff	putsUART_@data,tblptrl
  2912  007516  C006  FFF7         	movff	putsUART_@data+1,tblptrh
  2913  00751A                     	if	0	;tblptru may be non-zero
  2914  00751A                     	endif
  2915  00751A                     	if	0	;tblptru may be non-zero
  2916  00751A                     	endif
  2917  00751A  0008               	tblrd		*
  2918  00751C  50F5               	movf	tablat,w,c
  2919  00751E  ECB4  F03A         	call	_WriteUART_
  2920                           
  2921                           ;my_sw_uart.c: 76: } while( *data++ );
  2922  007522  C005  FFF6         	movff	putsUART_@data,tblptrl
  2923  007526  C006  FFF7         	movff	putsUART_@data+1,tblptrh
  2924  00752A  4A05               	infsnz	putsUART_@data,f,c
  2925  00752C  2A06               	incf	putsUART_@data+1,f,c
  2926  00752E                     	if	0	;tblptru may be non-zero
  2927  00752E                     	endif
  2928  00752E                     	if	0	;tblptru may be non-zero
  2929  00752E                     	endif
  2930  00752E  0008               	tblrd		*
  2931  007530  50F5               	movf	tablat,w,c
  2932  007532  0900               	iorlw	0
  2933  007534  B4D8               	btfsc	status,2,c
  2934  007536  0012               	return	
  2935  007538  D7EC               	goto	l109
  2936  00753A                     __end_of_putsUART_:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           postinc0	equ	0xFEE
  2943                           postdec1	equ	0xFE5
  2944                           fsr1h	equ	0xFE2
  2945                           fsr1l	equ	0xFE1
  2946                           indf2	equ	0xFDF
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _WriteUART_ *****************
  2952 ;; Defined at:
  2953 ;;		line 51 in file "my_sw_uart.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  uartdata        1    wreg     unsigned char 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  uartdata        1    2[COMRAM] unsigned char 
  2958 ;;  bitcount        1    3[COMRAM] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;		None               void
  2961 ;; Registers used:
  2962 ;;		wreg, status,2, status,0, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2968 ;;      Params:         0       0       0       0       0       0       0       0       0
  2969 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2970 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2971 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2972 ;;Total ram usage:        3 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    2
  2975 ;; This function calls:
  2976 ;;		_DelayTXBitUART_
  2977 ;; This function is called by:
  2978 ;;		_putsUART_
  2979 ;;		_multi_read
  2980 ;;		_read_block
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text14
  2985  007568                     __ptext14:
  2986                           	opt stack 0
  2987  007568                     _WriteUART_:
  2988                           	opt stack 27
  2989                           
  2990                           ;incstack = 0
  2991                           ;WriteUART_@uartdata stored from wreg
  2992  007568  6E03               	movwf	WriteUART_@uartdata,c
  2993                           
  2994                           ;my_sw_uart.c: 53: unsigned char bitcount = 8;
  2995  00756A  0E08               	movlw	8
  2996  00756C  6E04               	movwf	WriteUART_@bitcount,c
  2997                           
  2998                           ;my_sw_uart.c: 56: PORTDbits.RD4 = 0;
  2999  00756E  9883               	bcf	3971,4,c	;volatile
  3000                           
  3001                           ;my_sw_uart.c: 57: DelayTXBitUART_();
  3002  007570  EC4A  F03A         	call	_DelayTXBitUART_	;wreg free
  3003                           
  3004                           ;my_sw_uart.c: 59: while (bitcount--){
  3005  007574  D00E               	goto	l1044
  3006  007576                     l1038:
  3007                           
  3008                           ;my_sw_uart.c: 61: PORTDbits.RD4 = (uartdata&0x01);
  3009  007576  C003  F002         	movff	WriteUART_@uartdata,??_WriteUART_
  3010  00757A  0E01               	movlw	1
  3011  00757C  1602               	andwf	??_WriteUART_,f,c
  3012  00757E  3A02               	swapf	??_WriteUART_,f,c
  3013  007580  5083               	movf	3971,w,c	;volatile
  3014  007582  1802               	xorwf	??_WriteUART_,w,c
  3015  007584  0BEF               	andlw	-17
  3016  007586  1802               	xorwf	??_WriteUART_,w,c
  3017  007588  6E83               	movwf	3971,c	;volatile
  3018                           
  3019                           ;my_sw_uart.c: 62: DelayTXBitUART_();
  3020  00758A  EC4A  F03A         	call	_DelayTXBitUART_	;wreg free
  3021                           
  3022                           ;my_sw_uart.c: 63: uartdata >>= 1;
  3023  00758E  90D8               	bcf	status,0,c
  3024  007590  3203               	rrcf	WriteUART_@uartdata,f,c
  3025  007592                     l1044:
  3026  007592  0604               	decf	WriteUART_@bitcount,f,c
  3027  007594  2804               	incf	WriteUART_@bitcount& (0+255),w,c
  3028  007596  A4D8               	btfss	status,2,c
  3029  007598  D7EE               	goto	l1038
  3030                           
  3031                           ;my_sw_uart.c: 64: }
  3032                           ;my_sw_uart.c: 67: PORTDbits.RD4 = 1;
  3033  00759A  8883               	bsf	3971,4,c	;volatile
  3034                           
  3035                           ;my_sw_uart.c: 68: DelayTXBitUART_();
  3036  00759C  EC4A  F03A         	call	_DelayTXBitUART_	;wreg free
  3037  0075A0  0012               	return	
  3038  0075A2                     __end_of_WriteUART_:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           tblptrh	equ	0xFF7
  3042                           tblptrl	equ	0xFF6
  3043                           tablat	equ	0xFF5
  3044                           postinc0	equ	0xFEE
  3045                           postdec1	equ	0xFE5
  3046                           fsr1h	equ	0xFE2
  3047                           fsr1l	equ	0xFE1
  3048                           indf2	equ	0xFDF
  3049                           fsr2h	equ	0xFDA
  3050                           fsr2l	equ	0xFD9
  3051                           status	equ	0xFD8
  3052                           
  3053 ;; *************** function _DelayTXBitUART_ *****************
  3054 ;; Defined at:
  3055 ;;		line 29 in file "my_sw_uart.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;		None               void
  3062 ;; Registers used:
  3063 ;;		wreg, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3069 ;;      Params:         0       0       0       0       0       0       0       0       0
  3070 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3071 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3072 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3073 ;;Total ram usage:        0 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    1
  3076 ;; This function calls:
  3077 ;;		_Delay100TCYx
  3078 ;; This function is called by:
  3079 ;;		_WriteUART_
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           	psect	text15
  3084  007494                     __ptext15:
  3085                           	opt stack 0
  3086  007494                     _DelayTXBitUART_:
  3087                           	opt stack 27
  3088                           
  3089                           ;my_sw_uart.c: 31: Delay100TCYx( 5 );
  3090                           
  3091                           ;incstack = 0
  3092  007494  0E05               	movlw	5
  3093  007496  ECF1  F039         	call	_Delay100TCYx
  3094                           
  3095                           ;my_sw_uart.c: 33: _delay(1); _delay(1); _delay(1); _delay(1); _delay(1);
  3096  00749A  F000               	nop	
  3097  00749C  F000               	nop	
  3098  00749E  F000               	nop	
  3099  0074A0  F000               	nop	
  3100  0074A2  F000               	nop	
  3101                           
  3102                           ;my_sw_uart.c: 34: _delay(1); _delay(1); _delay(1); _delay(1);
  3103  0074A4  F000               	nop	
  3104  0074A6  F000               	nop	
  3105  0074A8  F000               	nop	
  3106  0074AA  F000               	nop	
  3107  0074AC  0012               	return	
  3108  0074AE                     __end_of_DelayTXBitUART_:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           postinc0	equ	0xFEE
  3115                           postdec1	equ	0xFE5
  3116                           fsr1h	equ	0xFE2
  3117                           fsr1l	equ	0xFE1
  3118                           indf2	equ	0xFDF
  3119                           fsr2h	equ	0xFDA
  3120                           fsr2l	equ	0xFD9
  3121                           status	equ	0xFD8
  3122                           
  3123 ;; *************** function _proceed *****************
  3124 ;; Defined at:
  3125 ;;		line 25 in file "clocks.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;		None
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;		None
  3130 ;; Return value:  Size  Location     Type
  3131 ;;		None               void
  3132 ;; Registers used:
  3133 ;;		wreg, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3139 ;;      Params:         2       0       0       0       0       0       0       0       0
  3140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3142 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3143 ;;Total ram usage:        2 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    1
  3146 ;; This function calls:
  3147 ;;		_WriteSPI
  3148 ;; This function is called by:
  3149 ;;		_write_block
  3150 ;;		_multi_write
  3151 ;;		_multi_read
  3152 ;;		_read_block
  3153 ;;		_reset
  3154 ;;		_init
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text16
  3159  0073C8                     __ptext16:
  3160                           	opt stack 0
  3161  0073C8                     _proceed:
  3162                           	opt stack 27
  3163                           
  3164                           ;clocks.c: 27: LATB4 = 0;
  3165                           
  3166                           ;incstack = 0
  3167  0073C8  988A               	bcf	3978,4,c	;volatile
  3168                           
  3169                           ;clocks.c: 28: WriteSPI(0XFF);
  3170  0073CA  0EFF               	movlw	255
  3171  0073CC  EC31  F03A         	call	_WriteSPI
  3172                           
  3173                           ;clocks.c: 29: LATB4 = 1;
  3174  0073D0  888A               	bsf	3978,4,c	;volatile
  3175  0073D2  0012               	return	
  3176  0073D4                     __end_of_proceed:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           postinc0	equ	0xFEE
  3183                           postdec1	equ	0xFE5
  3184                           fsr1h	equ	0xFE2
  3185                           fsr1l	equ	0xFE1
  3186                           indf2	equ	0xFDF
  3187                           fsr2h	equ	0xFDA
  3188                           fsr2l	equ	0xFD9
  3189                           status	equ	0xFD8
  3190                           
  3191 ;; *************** function _dummy_clocks *****************
  3192 ;; Defined at:
  3193 ;;		line 13 in file "clocks.c"
  3194 ;; Parameters:    Size  Location     Type
  3195 ;;  n               2    3[COMRAM] int 
  3196 ;; Auto vars:     Size  Location     Type
  3197 ;;  i               2    6[COMRAM] int 
  3198 ;; Return value:  Size  Location     Type
  3199 ;;		None               void
  3200 ;; Registers used:
  3201 ;;		wreg, status,2, status,0, cstack
  3202 ;; Tracked objects:
  3203 ;;		On entry : 0/0
  3204 ;;		On exit  : 0/0
  3205 ;;		Unchanged: 0/0
  3206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3207 ;;      Params:         2       0       0       0       0       0       0       0       0
  3208 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3209 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3210 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3211 ;;Total ram usage:        5 bytes
  3212 ;; Hardware stack levels used:    1
  3213 ;; Hardware stack levels required when called:    2
  3214 ;; This function calls:
  3215 ;;		_WriteSPI
  3216 ;;		_delay_ms
  3217 ;; This function is called by:
  3218 ;;		_write_block
  3219 ;;		_multi_write
  3220 ;;		_multi_read
  3221 ;;		_read_block
  3222 ;;		_reset
  3223 ;;		_init
  3224 ;; This function uses a non-reentrant model
  3225 ;;
  3226                           
  3227                           	psect	text17
  3228  0075A2                     __ptext17:
  3229                           	opt stack 0
  3230  0075A2                     _dummy_clocks:
  3231                           	opt stack 26
  3232                           
  3233                           ;clocks.c: 15: int i = 0;
  3234                           
  3235                           ;incstack = 0
  3236  0075A2  0E00               	movlw	0
  3237  0075A4  6E08               	movwf	dummy_clocks@i+1,c
  3238  0075A6  0E00               	movlw	0
  3239  0075A8  6E07               	movwf	dummy_clocks@i,c
  3240                           
  3241                           ;clocks.c: 16: delay_ms(1);
  3242  0075AA  0E01               	movlw	1
  3243  0075AC  EC3D  F03A         	call	_delay_ms
  3244                           
  3245                           ;clocks.c: 17: for(i=0;i<n;i++)
  3246  0075B0  0E00               	movlw	0
  3247  0075B2  6E08               	movwf	dummy_clocks@i+1,c
  3248  0075B4  0E00               	movlw	0
  3249  0075B6  6E07               	movwf	dummy_clocks@i,c
  3250  0075B8  D007               	goto	l1130
  3251  0075BA                     l323:
  3252                           
  3253                           ;clocks.c: 18: {
  3254                           ;clocks.c: 19: LATB4 = 1;
  3255  0075BA  888A               	bsf	3978,4,c	;volatile
  3256                           
  3257                           ;clocks.c: 20: WriteSPI(0XFF);
  3258  0075BC  0EFF               	movlw	255
  3259  0075BE  EC31  F03A         	call	_WriteSPI
  3260                           
  3261                           ;clocks.c: 21: LATB4 = 0;
  3262  0075C2  988A               	bcf	3978,4,c	;volatile
  3263  0075C4  4A07               	infsnz	dummy_clocks@i,f,c
  3264  0075C6  2A08               	incf	dummy_clocks@i+1,f,c
  3265  0075C8                     l1130:
  3266  0075C8  5008               	movf	dummy_clocks@i+1,w,c
  3267  0075CA  0A80               	xorlw	128
  3268  0075CC  6E06               	movwf	??_dummy_clocks& (0+255),c
  3269  0075CE  5004               	movf	dummy_clocks@n,w,c
  3270  0075D0  5C07               	subwf	dummy_clocks@i,w,c
  3271  0075D2  5005               	movf	dummy_clocks@n+1,w,c
  3272  0075D4  0A80               	xorlw	128
  3273  0075D6  5806               	subwfb	??_dummy_clocks& (0+255),w,c
  3274  0075D8  B0D8               	btfsc	status,0,c
  3275  0075DA  0012               	return	
  3276  0075DC  D7EE               	goto	l323
  3277  0075DE                     __end_of_dummy_clocks:
  3278                           	opt stack 0
  3279                           tblptru	equ	0xFF8
  3280                           tblptrh	equ	0xFF7
  3281                           tblptrl	equ	0xFF6
  3282                           tablat	equ	0xFF5
  3283                           postinc0	equ	0xFEE
  3284                           postdec1	equ	0xFE5
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           indf2	equ	0xFDF
  3288                           fsr2h	equ	0xFDA
  3289                           fsr2l	equ	0xFD9
  3290                           status	equ	0xFD8
  3291                           
  3292 ;; *************** function _WriteSPI *****************
  3293 ;; Defined at:
  3294 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\SPI\spi_writ.c"
  3295 ;; Parameters:    Size  Location     Type
  3296 ;;  data_out        1    wreg     unsigned char 
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;  data_out        1    1[COMRAM] unsigned char 
  3299 ;;  TempVar         1    0[COMRAM] unsigned char 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      char 
  3302 ;; Registers used:
  3303 ;;		wreg
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3309 ;;      Params:         0       0       0       0       0       0       0       0       0
  3310 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3311 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3312 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3313 ;;Total ram usage:        2 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; This function calls:
  3316 ;;		Nothing
  3317 ;; This function is called by:
  3318 ;;		_dummy_clocks
  3319 ;;		_proceed
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text18
  3324  007462                     __ptext18:
  3325                           	opt stack 0
  3326  007462                     _WriteSPI:
  3327                           	opt stack 27
  3328                           
  3329                           ;incstack = 0
  3330                           ;WriteSPI@data_out stored from wreg
  3331  007462  6E02               	movwf	WriteSPI@data_out,c
  3332  007464  CFC9 F001          	movff	4041,WriteSPI@TempVar	;volatile
  3333  007468  969E               	bcf	3998,3,c	;volatile
  3334  00746A  9EC6               	bcf	4038,7,c	;volatile
  3335  00746C  C002  FFC9         	movff	WriteSPI@data_out,4041	;volatile
  3336  007470  BEC6               	btfsc	4038,7,c	;volatile
  3337  007472  D002               	goto	l368
  3338  007474                     l370:
  3339  007474  A69E               	btfss	3998,3,c	;volatile
  3340  007476  D7FE               	goto	l370
  3341  007478                     l368:
  3342  007478  0012               	return	
  3343  00747A                     __end_of_WriteSPI:
  3344                           	opt stack 0
  3345                           tblptru	equ	0xFF8
  3346                           tblptrh	equ	0xFF7
  3347                           tblptrl	equ	0xFF6
  3348                           tablat	equ	0xFF5
  3349                           postinc0	equ	0xFEE
  3350                           postdec1	equ	0xFE5
  3351                           fsr1h	equ	0xFE2
  3352                           fsr1l	equ	0xFE1
  3353                           indf2	equ	0xFDF
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _Delay_s *****************
  3359 ;; Defined at:
  3360 ;;		line 44 in file "delay.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  t               1    wreg     unsigned char 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  t               1    3[COMRAM] unsigned char 
  3365 ;;  j               1    5[COMRAM] unsigned char 
  3366 ;;  i               1    4[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;		None               void
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0, cstack
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3376 ;;      Params:         0       0       0       0       0       0       0       0       0
  3377 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3378 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3379 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3380 ;;Total ram usage:        3 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    2
  3383 ;; This function calls:
  3384 ;;		_delay_ms
  3385 ;; This function is called by:
  3386 ;;		_write_block
  3387 ;;		_multi_write
  3388 ;;		_multi_read
  3389 ;;		_read_block
  3390 ;;		_reset
  3391 ;;		_init
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	text19
  3396  0074EA                     __ptext19:
  3397                           	opt stack 0
  3398  0074EA                     _Delay_s:
  3399                           	opt stack 26
  3400                           
  3401                           ;incstack = 0
  3402                           ;Delay_s@t stored from wreg
  3403  0074EA  6E04               	movwf	Delay_s@t,c
  3404                           
  3405                           ;delay.c: 46: unsigned char i,j;
  3406                           ;delay.c: 47: for(i=0;i<t;i++)
  3407  0074EC  0E00               	movlw	0
  3408  0074EE  6E05               	movwf	Delay_s@i,c
  3409  0074F0  D00B               	goto	l1094
  3410  0074F2                     l1080:
  3411                           
  3412                           ;delay.c: 48: for(j=0;j<10;j++)
  3413  0074F2  0E00               	movlw	0
  3414  0074F4  6E06               	movwf	Delay_s@j,c
  3415  0074F6  D004               	goto	L3
  3416  0074F8                     l1086:
  3417                           
  3418                           ;delay.c: 49: delay_ms(100);
  3419  0074F8  0E64               	movlw	100
  3420  0074FA  EC3D  F03A         	call	_delay_ms
  3421  0074FE  2A06               	incf	Delay_s@j,f,c
  3422  007500                     L3:
  3423  007500  0E09               	movlw	9
  3424  007502  6406               	cpfsgt	Delay_s@j,c
  3425  007504  D7F9               	goto	l1086
  3426  007506  2A05               	incf	Delay_s@i,f,c
  3427  007508                     l1094:
  3428  007508  5004               	movf	Delay_s@t,w,c
  3429  00750A  5C05               	subwf	Delay_s@i,w,c
  3430  00750C  B0D8               	btfsc	status,0,c
  3431  00750E  0012               	return	
  3432  007510  D7F0               	goto	l1080
  3433  007512                     __end_of_Delay_s:
  3434                           	opt stack 0
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           postinc0	equ	0xFEE
  3440                           postdec1	equ	0xFE5
  3441                           fsr1h	equ	0xFE2
  3442                           fsr1l	equ	0xFE1
  3443                           indf2	equ	0xFDF
  3444                           fsr2h	equ	0xFDA
  3445                           fsr2l	equ	0xFD9
  3446                           status	equ	0xFD8
  3447                           
  3448 ;; *************** function _delay_ms *****************
  3449 ;; Defined at:
  3450 ;;		line 33 in file "delay.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;  t               1    wreg     unsigned char 
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;  t               1    1[COMRAM] unsigned char 
  3455 ;;  i               1    2[COMRAM] unsigned char 
  3456 ;; Return value:  Size  Location     Type
  3457 ;;		None               void
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3465 ;;      Params:         0       0       0       0       0       0       0       0       0
  3466 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3467 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3468 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3469 ;;Total ram usage:        2 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    1
  3472 ;; This function calls:
  3473 ;;		_Delay1KTCYx
  3474 ;; This function is called by:
  3475 ;;		_Delay_s
  3476 ;;		_init
  3477 ;;		_dummy_clocks
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text20
  3482  00747A                     __ptext20:
  3483                           	opt stack 0
  3484  00747A                     _delay_ms:
  3485                           	opt stack 26
  3486                           
  3487                           ;incstack = 0
  3488                           ;delay_ms@t stored from wreg
  3489  00747A  6E02               	movwf	delay_ms@t,c
  3490                           
  3491                           ;delay.c: 35: unsigned char i;
  3492                           ;delay.c: 36: for (i=0;i<=t;i++)
  3493  00747C  0E00               	movlw	0
  3494  00747E  6E03               	movwf	delay_ms@i,c
  3495  007480  D004               	goto	l1030
  3496  007482                     l1026:
  3497                           
  3498                           ;delay.c: 37: Delay1KTCYx(5);
  3499  007482  0E05               	movlw	5
  3500  007484  EC01  F03A         	call	_Delay1KTCYx
  3501  007488  2A03               	incf	delay_ms@i,f,c
  3502  00748A                     l1030:
  3503  00748A  5003               	movf	delay_ms@i,w,c
  3504  00748C  5C02               	subwf	delay_ms@t,w,c
  3505  00748E  A0D8               	btfss	status,0,c
  3506                           
  3507                           ;delay.c: 41: return;
  3508  007490  0012               	return	
  3509  007492  D7F7               	goto	l1026
  3510  007494                     __end_of_delay_ms:
  3511                           	opt stack 0
  3512                           tblptru	equ	0xFF8
  3513                           tblptrh	equ	0xFF7
  3514                           tblptrl	equ	0xFF6
  3515                           tablat	equ	0xFF5
  3516                           postinc0	equ	0xFEE
  3517                           postdec1	equ	0xFE5
  3518                           fsr1h	equ	0xFE2
  3519                           fsr1l	equ	0xFE1
  3520                           indf2	equ	0xFDF
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _Delay1KTCYx *****************
  3526 ;; Defined at:
  3527 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d1ktcyx.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  unit            1    wreg     unsigned char 
  3530 ;; Auto vars:     Size  Location     Type
  3531 ;;  unit            1    0[COMRAM] unsigned char 
  3532 ;; Return value:  Size  Location     Type
  3533 ;;		None               void
  3534 ;; Registers used:
  3535 ;;		wreg
  3536 ;; Tracked objects:
  3537 ;;		On entry : 0/0
  3538 ;;		On exit  : 0/0
  3539 ;;		Unchanged: 0/0
  3540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3541 ;;      Params:         0       0       0       0       0       0       0       0       0
  3542 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3544 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3545 ;;Total ram usage:        1 bytes
  3546 ;; Hardware stack levels used:    1
  3547 ;; This function calls:
  3548 ;;		Nothing
  3549 ;; This function is called by:
  3550 ;;		_delay_ms
  3551 ;;		_DelayPORXLCD
  3552 ;;		_DelayXLCD
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text21
  3557  007402                     __ptext21:
  3558                           	opt stack 0
  3559  007402                     _Delay1KTCYx:
  3560                           	opt stack 26
  3561                           
  3562                           ;incstack = 0
  3563                           ;Delay1KTCYx@unit stored from wreg
  3564  007402  6E01               	movwf	Delay1KTCYx@unit,c
  3565  007404                     l619:
  3566  007404  0EFA               	movlw	250
  3567  007406                     u637:
  3568  007406  F000               	nop	
  3569  007408  2EE8               	decfsz	wreg,f,c
  3570  00740A  D7FD               	goto	u637
  3571  00740C  2E01               	decfsz	Delay1KTCYx@unit,f,c
  3572  00740E  D7FA               	goto	l619
  3573  007410  0012               	return	
  3574  007412                     __end_of_Delay1KTCYx:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           postinc0	equ	0xFEE
  3581                           wreg	equ	0xFE8
  3582                           postdec1	equ	0xFE5
  3583                           fsr1h	equ	0xFE2
  3584                           fsr1l	equ	0xFE1
  3585                           indf2	equ	0xFDF
  3586                           fsr2h	equ	0xFDA
  3587                           fsr2l	equ	0xFD9
  3588                           status	equ	0xFD8
  3589                           
  3590 ;; *************** function _Command *****************
  3591 ;; Defined at:
  3592 ;;		line 44 in file "transceiver.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  cmd             1    wreg     unsigned char 
  3595 ;;  arg             4    2[COMRAM] unsigned long 
  3596 ;;  CRCbits         1    6[COMRAM] unsigned char 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  cmd             1    7[COMRAM] unsigned char 
  3599 ;;  temp            1    0        unsigned char 
  3600 ;; Return value:  Size  Location     Type
  3601 ;;		None               void
  3602 ;; Registers used:
  3603 ;;		wreg, status,2, cstack
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3609 ;;      Params:         5       0       0       0       0       0       0       0       0
  3610 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3612 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3613 ;;Total ram usage:        6 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    1
  3616 ;; This function calls:
  3617 ;;		_WriteSPI_
  3618 ;; This function is called by:
  3619 ;;		_write_block
  3620 ;;		_multi_write
  3621 ;;		_multi_read
  3622 ;;		_read_block
  3623 ;;		_reset
  3624 ;;		_init
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           	psect	text22
  3629  00753A                     __ptext22:
  3630                           	opt stack 0
  3631  00753A                     _Command:
  3632                           	opt stack 27
  3633                           
  3634                           ;incstack = 0
  3635                           ;Command@cmd stored from wreg
  3636  00753A  6E08               	movwf	Command@cmd,c
  3637                           
  3638                           ;transceiver.c: 46: unsigned char temp;
  3639                           ;transceiver.c: 47: WriteSPI_(0xff);
  3640  00753C  0EFF               	movlw	255
  3641  00753E  EC25  F03A         	call	_WriteSPI_
  3642                           
  3643                           ;transceiver.c: 48: WriteSPI_(cmd);
  3644  007542  5008               	movf	Command@cmd,w,c
  3645  007544  EC25  F03A         	call	_WriteSPI_
  3646                           
  3647                           ;transceiver.c: 49: WriteSPI_((unsigned char) (arg >> 24));
  3648  007548  5006               	movf	Command@arg+3,w,c
  3649  00754A  EC25  F03A         	call	_WriteSPI_
  3650                           
  3651                           ;transceiver.c: 50: WriteSPI_((unsigned char) (arg >> 16));
  3652  00754E  5005               	movf	Command@arg+2,w,c
  3653  007550  EC25  F03A         	call	_WriteSPI_
  3654                           
  3655                           ;transceiver.c: 51: WriteSPI_((unsigned char) (arg >> 8));
  3656  007554  5004               	movf	Command@arg+1,w,c
  3657  007556  EC25  F03A         	call	_WriteSPI_
  3658                           
  3659                           ;transceiver.c: 52: WriteSPI_((unsigned char) arg);
  3660  00755A  5003               	movf	Command@arg,w,c
  3661  00755C  EC25  F03A         	call	_WriteSPI_
  3662                           
  3663                           ;transceiver.c: 53: WriteSPI_(CRCbits);
  3664  007560  5007               	movf	Command@CRCbits,w,c
  3665  007562  EC25  F03A         	call	_WriteSPI_
  3666  007566  0012               	return	
  3667  007568                     __end_of_Command:
  3668                           	opt stack 0
  3669                           tblptru	equ	0xFF8
  3670                           tblptrh	equ	0xFF7
  3671                           tblptrl	equ	0xFF6
  3672                           tablat	equ	0xFF5
  3673                           postinc0	equ	0xFEE
  3674                           wreg	equ	0xFE8
  3675                           postdec1	equ	0xFE5
  3676                           fsr1h	equ	0xFE2
  3677                           fsr1l	equ	0xFE1
  3678                           indf2	equ	0xFDF
  3679                           fsr2h	equ	0xFDA
  3680                           fsr2l	equ	0xFD9
  3681                           status	equ	0xFD8
  3682                           
  3683 ;; *************** function _WriteSPI_ *****************
  3684 ;; Defined at:
  3685 ;;		line 24 in file "transceiver.c"
  3686 ;; Parameters:    Size  Location     Type
  3687 ;;  data_out        1    wreg     unsigned char 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  data_out        1    1[COMRAM] unsigned char 
  3690 ;;  TempVar         1    0[COMRAM] unsigned char 
  3691 ;; Return value:  Size  Location     Type
  3692 ;;                  1    wreg      char 
  3693 ;; Registers used:
  3694 ;;		wreg
  3695 ;; Tracked objects:
  3696 ;;		On entry : 0/0
  3697 ;;		On exit  : 0/0
  3698 ;;		Unchanged: 0/0
  3699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3700 ;;      Params:         0       0       0       0       0       0       0       0       0
  3701 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3702 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3703 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3704 ;;Total ram usage:        2 bytes
  3705 ;; Hardware stack levels used:    1
  3706 ;; This function calls:
  3707 ;;		Nothing
  3708 ;; This function is called by:
  3709 ;;		_write_block
  3710 ;;		_multi_write
  3711 ;;		_Command
  3712 ;; This function uses a non-reentrant model
  3713 ;;
  3714                           
  3715                           	psect	text23
  3716  00744A                     __ptext23:
  3717                           	opt stack 0
  3718  00744A                     _WriteSPI_:
  3719                           	opt stack 27
  3720                           
  3721                           ;incstack = 0
  3722                           ;WriteSPI_@data_out stored from wreg
  3723  00744A  6E02               	movwf	WriteSPI_@data_out,c
  3724                           
  3725                           ;transceiver.c: 26: unsigned char TempVar;
  3726                           ;transceiver.c: 29: TempVar = SSPBUF;
  3727  00744C  CFC9 F001          	movff	4041,WriteSPI_@TempVar	;volatile
  3728                           
  3729                           ;transceiver.c: 30: PIR1bits.SSPIF = 0;
  3730  007450  969E               	bcf	3998,3,c	;volatile
  3731                           
  3732                           ;transceiver.c: 31: SSPCON1bits.WCOL = 0;
  3733  007452  9EC6               	bcf	4038,7,c	;volatile
  3734                           
  3735                           ;transceiver.c: 32: SSPBUF = data_out;
  3736  007454  C002  FFC9         	movff	WriteSPI_@data_out,4041	;volatile
  3737                           
  3738                           ;transceiver.c: 33: if ( SSPCON1 & 0x80 )
  3739  007458  BEC6               	btfsc	4038,7,c	;volatile
  3740  00745A  D002               	goto	l303
  3741  00745C                     l305:
  3742  00745C  A69E               	btfss	3998,3,c	;volatile
  3743  00745E  D7FE               	goto	l305
  3744  007460                     l303:
  3745  007460  0012               	return	
  3746  007462                     __end_of_WriteSPI_:
  3747                           	opt stack 0
  3748                           tblptru	equ	0xFF8
  3749                           tblptrh	equ	0xFF7
  3750                           tblptrl	equ	0xFF6
  3751                           tablat	equ	0xFF5
  3752                           postinc0	equ	0xFEE
  3753                           wreg	equ	0xFE8
  3754                           postdec1	equ	0xFE5
  3755                           fsr1h	equ	0xFE2
  3756                           fsr1l	equ	0xFE1
  3757                           indf2	equ	0xFDF
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function _ReadUART_ *****************
  3763 ;; Defined at:
  3764 ;;		line 101 in file "my_sw_uart.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;  i               2    0        int 
  3769 ;;  uartdata        1    7[COMRAM] unsigned char 
  3770 ;;  datauart        1    6[COMRAM] unsigned char 
  3771 ;;  c               1    5[COMRAM] unsigned char 
  3772 ;;  bitcount        1    4[COMRAM] unsigned char 
  3773 ;;  d               1    3[COMRAM] unsigned char 
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      unsigned char 
  3776 ;; Registers used:
  3777 ;;		wreg, status,2, status,0, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3783 ;;      Params:         0       0       0       0       0       0       0       0       0
  3784 ;;      Locals:         5       0       0       0       0       0       0       0       0
  3785 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3786 ;;      Totals:         7       0       0       0       0       0       0       0       0
  3787 ;;Total ram usage:        7 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    2
  3790 ;; This function calls:
  3791 ;;		_DelayRXBitUART_
  3792 ;;		_DelayRXHalfBitUART_
  3793 ;; This function is called by:
  3794 ;;		_File_IO
  3795 ;;		_getsUART_
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text24
  3800  00777E                     __ptext24:
  3801                           	opt stack 0
  3802  00777E                     _ReadUART_:
  3803                           	opt stack 27
  3804                           
  3805                           ;my_sw_uart.c: 103: unsigned char bitcount=8;
  3806                           
  3807                           ;incstack = 0
  3808  00777E  0E08               	movlw	8
  3809  007780  6E05               	movwf	ReadUART_@bitcount,c
  3810                           
  3811                           ;my_sw_uart.c: 104: unsigned char uartdata,datauart = 0, c, d = 0X01;
  3812  007782  0E00               	movlw	0
  3813  007784  6E07               	movwf	ReadUART_@datauart,c
  3814  007786  0E01               	movlw	1
  3815  007788  6E04               	movwf	ReadUART_@d,c
  3816                           
  3817                           ;my_sw_uart.c: 105: int i;
  3818                           ;my_sw_uart.c: 106: while (PORTDbits.RD5){
  3819  00778A  D004               	goto	l1166
  3820  00778C                     l116:
  3821  00778C  BA83               	btfsc	3971,5,c	;volatile
  3822  00778E  D7FE               	goto	l116
  3823                           
  3824                           ;my_sw_uart.c: 108: DelayRXHalfBitUART_();
  3825  007790  EC11  F03A         	call	_DelayRXHalfBitUART_	;wreg free
  3826  007794                     l1166:
  3827  007794  AA83               	btfss	3971,5,c	;volatile
  3828  007796  D00B               	goto	l1174
  3829  007798  D7F9               	goto	l116
  3830  00779A                     l1168:
  3831                           
  3832                           ;my_sw_uart.c: 112: DelayRXBitUART_();
  3833  00779A  EC1A  F03A         	call	_DelayRXBitUART_	;wreg free
  3834                           
  3835                           ;my_sw_uart.c: 113: c = ((PORTDbits.RD5)?1:0);
  3836  00779E  0E00               	movlw	0
  3837  0077A0  BA83               	btfsc	3971,5,c	;volatile
  3838  0077A2  0E01               	movlw	1
  3839  0077A4  6E06               	movwf	ReadUART_@c,c
  3840                           
  3841                           ;my_sw_uart.c: 116: uartdata = ((uartdata<<1)|(c));
  3842  0077A6  5008               	movf	ReadUART_@uartdata,w,c
  3843  0077A8  2408               	addwf	ReadUART_@uartdata,w,c
  3844  0077AA  1006               	iorwf	ReadUART_@c,w,c
  3845  0077AC  6E08               	movwf	ReadUART_@uartdata,c
  3846  0077AE                     l1174:
  3847  0077AE  0605               	decf	ReadUART_@bitcount,f,c
  3848  0077B0  2805               	incf	ReadUART_@bitcount& (0+255),w,c
  3849  0077B2  A4D8               	btfss	status,2,c
  3850  0077B4  D7F2               	goto	l1168
  3851                           
  3852                           ;my_sw_uart.c: 117: }
  3853                           ;my_sw_uart.c: 119: datauart |= (((uartdata<<7)&0X80) | ((uartdata>>7)&0X01));
  3854  0077B6  6A02               	clrf	??_ReadUART_& (0+255),c
  3855  0077B8  AE08               	btfss	ReadUART_@uartdata,7,c
  3856  0077BA  D001               	bra	u165
  3857  0077BC  2A02               	incf	??_ReadUART_& (0+255),f,c
  3858  0077BE                     u165:
  3859  0077BE  0E01               	movlw	1
  3860  0077C0  1602               	andwf	??_ReadUART_,f,c
  3861  0077C2  4008               	rrncf	ReadUART_@uartdata,w,c
  3862  0077C4  0B80               	andlw	128
  3863  0077C6  0B80               	andlw	128
  3864  0077C8  1002               	iorwf	??_ReadUART_,w,c
  3865  0077CA  1207               	iorwf	ReadUART_@datauart,f,c
  3866                           
  3867                           ;my_sw_uart.c: 120: datauart |= (((uartdata<<5)&0X40) | ((uartdata>>5)&0X02));
  3868  0077CC  C008  F002         	movff	ReadUART_@uartdata,??_ReadUART_
  3869  0077D0  0E05               	movlw	5
  3870  0077D2  6E03               	movwf	(??_ReadUART_+1)& (0+255),c
  3871  0077D4                     u175:
  3872  0077D4  90D8               	bcf	status,0,c
  3873  0077D6  3202               	rrcf	??_ReadUART_,f,c
  3874  0077D8  2E03               	decfsz	(??_ReadUART_+1)& (0+255),f,c
  3875  0077DA  D7FC               	goto	u175
  3876  0077DC  0E02               	movlw	2
  3877  0077DE  1602               	andwf	??_ReadUART_,f,c
  3878  0077E0  3808               	swapf	ReadUART_@uartdata,w,c
  3879  0077E2  46E8               	rlncf	wreg,f,c
  3880  0077E4  0BE0               	andlw	224
  3881  0077E6  0B40               	andlw	64
  3882  0077E8  1002               	iorwf	??_ReadUART_,w,c
  3883  0077EA  1207               	iorwf	ReadUART_@datauart,f,c
  3884                           
  3885                           ;my_sw_uart.c: 121: datauart |= (((uartdata<<3)&0X20) | ((uartdata>>3)&0X04));
  3886  0077EC  C008  F002         	movff	ReadUART_@uartdata,??_ReadUART_
  3887  0077F0  90D8               	bcf	status,0,c
  3888  0077F2  3202               	rrcf	??_ReadUART_,f,c
  3889  0077F4  90D8               	bcf	status,0,c
  3890  0077F6  3202               	rrcf	??_ReadUART_,f,c
  3891  0077F8  90D8               	bcf	status,0,c
  3892  0077FA  3202               	rrcf	??_ReadUART_,f,c
  3893  0077FC  0E04               	movlw	4
  3894  0077FE  1602               	andwf	??_ReadUART_,f,c
  3895  007800  3808               	swapf	ReadUART_@uartdata,w,c
  3896  007802  42E8               	rrncf	wreg,f,c
  3897  007804  0BF8               	andlw	248
  3898  007806  0B20               	andlw	32
  3899  007808  1002               	iorwf	??_ReadUART_,w,c
  3900  00780A  1207               	iorwf	ReadUART_@datauart,f,c
  3901                           
  3902                           ;my_sw_uart.c: 122: datauart |= (((uartdata<<1)&0X10) | ((uartdata>>1)&0X08));
  3903  00780C  C008  F002         	movff	ReadUART_@uartdata,??_ReadUART_
  3904  007810  90D8               	bcf	status,0,c
  3905  007812  3202               	rrcf	??_ReadUART_,f,c
  3906  007814  0E08               	movlw	8
  3907  007816  1602               	andwf	??_ReadUART_,f,c
  3908  007818  5008               	movf	ReadUART_@uartdata,w,c
  3909  00781A  2408               	addwf	ReadUART_@uartdata,w,c
  3910  00781C  0B10               	andlw	16
  3911  00781E  1002               	iorwf	??_ReadUART_,w,c
  3912  007820  1207               	iorwf	ReadUART_@datauart,f,c
  3913                           
  3914                           ;my_sw_uart.c: 124: return datauart;
  3915  007822  5007               	movf	ReadUART_@datauart,w,c
  3916  007824  0012               	return	
  3917  007826                     __end_of_ReadUART_:
  3918                           	opt stack 0
  3919                           tblptru	equ	0xFF8
  3920                           tblptrh	equ	0xFF7
  3921                           tblptrl	equ	0xFF6
  3922                           tablat	equ	0xFF5
  3923                           postinc0	equ	0xFEE
  3924                           wreg	equ	0xFE8
  3925                           postdec1	equ	0xFE5
  3926                           fsr1h	equ	0xFE2
  3927                           fsr1l	equ	0xFE1
  3928                           indf2	equ	0xFDF
  3929                           fsr2h	equ	0xFDA
  3930                           fsr2l	equ	0xFD9
  3931                           status	equ	0xFD8
  3932                           
  3933 ;; *************** function _DelayRXHalfBitUART_ *****************
  3934 ;; Defined at:
  3935 ;;		line 12 in file "my_sw_uart.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;		None
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;		None               void
  3942 ;; Registers used:
  3943 ;;		wreg, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3949 ;;      Params:         0       0       0       0       0       0       0       0       0
  3950 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3952 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3953 ;;Total ram usage:        0 bytes
  3954 ;; Hardware stack levels used:    1
  3955 ;; Hardware stack levels required when called:    1
  3956 ;; This function calls:
  3957 ;;		_Delay100TCYx
  3958 ;;		_Delay10TCYx
  3959 ;; This function is called by:
  3960 ;;		_ReadUART_
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text25
  3965  007422                     __ptext25:
  3966                           	opt stack 0
  3967  007422                     _DelayRXHalfBitUART_:
  3968                           	opt stack 27
  3969                           
  3970                           ;my_sw_uart.c: 14: Delay100TCYx(2);
  3971                           
  3972                           ;incstack = 0
  3973  007422  0E02               	movlw	2
  3974  007424  ECF1  F039         	call	_Delay100TCYx
  3975                           
  3976                           ;my_sw_uart.c: 15: Delay10TCYx(5);
  3977  007428  0E05               	movlw	5
  3978  00742A  ECF9  F039         	call	_Delay10TCYx
  3979                           
  3980                           ;my_sw_uart.c: 16: _delay(1); _delay(1);
  3981  00742E  F000               	nop	
  3982  007430  F000               	nop	
  3983  007432  0012               	return	
  3984  007434                     __end_of_DelayRXHalfBitUART_:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           postdec1	equ	0xFE5
  3993                           fsr1h	equ	0xFE2
  3994                           fsr1l	equ	0xFE1
  3995                           indf2	equ	0xFDF
  3996                           fsr2h	equ	0xFDA
  3997                           fsr2l	equ	0xFD9
  3998                           status	equ	0xFD8
  3999                           
  4000 ;; *************** function _Delay10TCYx *****************
  4001 ;; Defined at:
  4002 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d10tcyx.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  unit            1    wreg     unsigned char 
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;  unit            1    0[COMRAM] unsigned char 
  4007 ;; Return value:  Size  Location     Type
  4008 ;;		None               void
  4009 ;; Registers used:
  4010 ;;		wreg
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4016 ;;      Params:         0       0       0       0       0       0       0       0       0
  4017 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4018 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4019 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4020 ;;Total ram usage:        1 bytes
  4021 ;; Hardware stack levels used:    1
  4022 ;; This function calls:
  4023 ;;		Nothing
  4024 ;; This function is called by:
  4025 ;;		_DelayRXHalfBitUART_
  4026 ;;		_DelayFor18TCY
  4027 ;; This function uses a non-reentrant model
  4028 ;;
  4029                           
  4030                           	psect	text26
  4031  0073F2                     __ptext26:
  4032                           	opt stack 0
  4033  0073F2                     _Delay10TCYx:
  4034                           	opt stack 27
  4035                           
  4036                           ;incstack = 0
  4037                           ;Delay10TCYx@unit stored from wreg
  4038  0073F2  6E01               	movwf	Delay10TCYx@unit,c
  4039  0073F4                     l612:
  4040  0073F4  0E03               	movlw	3
  4041  0073F6                     u647:
  4042  0073F6  2EE8               	decfsz	wreg,f,c
  4043  0073F8  D7FE               	goto	u647
  4044  0073FA  F000               	nop	
  4045  0073FC  2E01               	decfsz	Delay10TCYx@unit,f,c
  4046  0073FE  D7FA               	goto	l612
  4047  007400  0012               	return	
  4048  007402                     __end_of_Delay10TCYx:
  4049                           	opt stack 0
  4050                           tblptru	equ	0xFF8
  4051                           tblptrh	equ	0xFF7
  4052                           tblptrl	equ	0xFF6
  4053                           tablat	equ	0xFF5
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           postdec1	equ	0xFE5
  4057                           fsr1h	equ	0xFE2
  4058                           fsr1l	equ	0xFE1
  4059                           indf2	equ	0xFDF
  4060                           fsr2h	equ	0xFDA
  4061                           fsr2l	equ	0xFD9
  4062                           status	equ	0xFD8
  4063                           
  4064 ;; *************** function _DelayRXBitUART_ *****************
  4065 ;; Defined at:
  4066 ;;		line 20 in file "my_sw_uart.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;		None
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;		None
  4071 ;; Return value:  Size  Location     Type
  4072 ;;		None               void
  4073 ;; Registers used:
  4074 ;;		wreg, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4080 ;;      Params:         0       0       0       0       0       0       0       0       0
  4081 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4083 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4084 ;;Total ram usage:        0 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    1
  4087 ;; This function calls:
  4088 ;;		_Delay100TCYx
  4089 ;; This function is called by:
  4090 ;;		_ReadUART_
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text27
  4095  007434                     __ptext27:
  4096                           	opt stack 0
  4097  007434                     _DelayRXBitUART_:
  4098                           	opt stack 27
  4099                           
  4100                           ;my_sw_uart.c: 22: Delay100TCYx( 5 );
  4101                           
  4102                           ;incstack = 0
  4103  007434  0E05               	movlw	5
  4104  007436  ECF1  F039         	call	_Delay100TCYx
  4105                           
  4106                           ;my_sw_uart.c: 23: _delay(1); _delay(1); _delay(1); _delay(1); _delay(1);
  4107  00743A  F000               	nop	
  4108  00743C  F000               	nop	
  4109  00743E  F000               	nop	
  4110  007440  F000               	nop	
  4111  007442  F000               	nop	
  4112                           
  4113                           ;my_sw_uart.c: 24: _delay(1); _delay(1);
  4114  007444  F000               	nop	
  4115  007446  F000               	nop	
  4116  007448  0012               	return	
  4117  00744A                     __end_of_DelayRXBitUART_:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           postinc0	equ	0xFEE
  4124                           wreg	equ	0xFE8
  4125                           postdec1	equ	0xFE5
  4126                           fsr1h	equ	0xFE2
  4127                           fsr1l	equ	0xFE1
  4128                           indf2	equ	0xFDF
  4129                           fsr2h	equ	0xFDA
  4130                           fsr2l	equ	0xFD9
  4131                           status	equ	0xFD8
  4132                           
  4133 ;; *************** function _Delay100TCYx *****************
  4134 ;; Defined at:
  4135 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\d100tcyx.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  unit            1    wreg     unsigned char 
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;  unit            1    0[COMRAM] unsigned char 
  4140 ;; Return value:  Size  Location     Type
  4141 ;;		None               void
  4142 ;; Registers used:
  4143 ;;		wreg
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4149 ;;      Params:         0       0       0       0       0       0       0       0       0
  4150 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4152 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4153 ;;Total ram usage:        1 bytes
  4154 ;; Hardware stack levels used:    1
  4155 ;; This function calls:
  4156 ;;		Nothing
  4157 ;; This function is called by:
  4158 ;;		_DelayRXHalfBitUART_
  4159 ;;		_DelayRXBitUART_
  4160 ;;		_DelayTXBitUART_
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text28
  4165  0073E2                     __ptext28:
  4166                           	opt stack 0
  4167  0073E2                     _Delay100TCYx:
  4168                           	opt stack 27
  4169                           
  4170                           ;incstack = 0
  4171                           ;Delay100TCYx@unit stored from wreg
  4172  0073E2  6E01               	movwf	Delay100TCYx@unit,c
  4173  0073E4                     l598:
  4174  0073E4  0E21               	movlw	33
  4175  0073E6                     u657:
  4176  0073E6  2EE8               	decfsz	wreg,f,c
  4177  0073E8  D7FE               	goto	u657
  4178  0073EA  F000               	nop	
  4179  0073EC  2E01               	decfsz	Delay100TCYx@unit,f,c
  4180  0073EE  D7FA               	goto	l598
  4181  0073F0  0012               	return	
  4182  0073F2                     __end_of_Delay100TCYx:
  4183                           	opt stack 0
  4184                           tblptru	equ	0xFF8
  4185                           tblptrh	equ	0xFF7
  4186                           tblptrl	equ	0xFF6
  4187                           tablat	equ	0xFF5
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           fsr1h	equ	0xFE2
  4192                           fsr1l	equ	0xFE1
  4193                           indf2	equ	0xFDF
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           postinc0	equ	0xFEE
  4202                           wreg	equ	0xFE8
  4203                           postdec1	equ	0xFE5
  4204                           fsr1h	equ	0xFE2
  4205                           fsr1l	equ	0xFE1
  4206                           indf2	equ	0xFDF
  4207                           fsr2h	equ	0xFDA
  4208                           fsr2l	equ	0xFD9
  4209                           status	equ	0xFD8
  4210                           
  4211                           	psect	rparam
  4212  0000                     tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           postinc0	equ	0xFEE
  4217                           wreg	equ	0xFE8
  4218                           postdec1	equ	0xFE5
  4219                           fsr1h	equ	0xFE2
  4220                           fsr1l	equ	0xFE1
  4221                           indf2	equ	0xFDF
  4222                           fsr2h	equ	0xFDA
  4223                           fsr2l	equ	0xFD9
  4224                           status	equ	0xFD8


Data Sizes:
    Strings     304
    Constant    0
    Data        0
    BSS         1024
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      22
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    putsUART_@data	PTR unsigned char  size(2) Largest target is 101
		 -> STR_15(CODE[16]), STR_14(CODE[11]), STR_13(CODE[10]), STR_12(CODE[3]), 
		 -> STR_11(CODE[21]), STR_10(CODE[18]), STR_9(CODE[22]), STR_8(CODE[3]), 
		 -> STR_7(CODE[19]), STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[15]), 
		 -> STR_3(CODE[15]), STR_2(CODE[19]), STR_1(CODE[101]), 


Critical Paths under _main in COMRAM

    _main->_init
    _init->_reset
    _reset->_Command
    _reset->_dummy_clocks
    _Soft_Hard_Init->_OpenSPI
    _File_IO->_read_block
    _write_block->_Command
    _write_block->_dummy_clocks
    _read_block->_Command
    _read_block->_dummy_clocks
    _multi_write->_Command
    _multi_write->_dummy_clocks
    _multi_read->_Command
    _multi_read->_dummy_clocks
    _response->_ReadSPI__
    _putsUART_->_WriteUART_
    _DelayTXBitUART_->_Delay100TCYx
    _proceed->_WriteSPI
    _dummy_clocks->_delay_ms
    _Delay_s->_delay_ms
    _delay_ms->_Delay1KTCYx
    _Command->_WriteSPI_
    _DelayRXHalfBitUART_->_Delay100TCYx
    _DelayRXHalfBitUART_->_Delay10TCYx
    _DelayRXBitUART_->_Delay100TCYx

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   24889
                            _File_IO
                          _OpenUART_
                     _Soft_Hard_Init
                               _init
                          _putsUART_
 ---------------------------------------------------------------------------------
 (1) _init                                                 9     9      0    7531
                                             13 COMRAM     9     9      0
                            _Command
                            _Delay_s
                           _delay_ms
                       _dummy_clocks
                            _proceed
                          _putsUART_
                              _reset
                           _response
 ---------------------------------------------------------------------------------
 (2) _reset                                                5     5      0    3683
                                              8 COMRAM     5     5      0
                            _Command
                            _Delay_s
                       _dummy_clocks
                            _proceed
                          _putsUART_
                           _response
 ---------------------------------------------------------------------------------
 (1) _Soft_Hard_Init                                       5     5      0     211
                                              3 COMRAM     5     5      0
                            _OpenSPI
 ---------------------------------------------------------------------------------
 (2) _OpenSPI                                              3     1      2     166
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _OpenUART_                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _File_IO                                              1     1      0   16277
                                             15 COMRAM     1     1      0
                          _ReadUART_
                         _multi_read
                        _multi_write
                          _putsUART_
                         _read_block
                        _write_block
 ---------------------------------------------------------------------------------
 (2) _write_block                                          3     3      0    3713
                                              8 COMRAM     3     3      0
                            _Command
                            _Delay_s
                          _WriteSPI_
                       _dummy_clocks
                            _proceed
                          _putsUART_
                           _response
 ---------------------------------------------------------------------------------
 (2) _read_block                                           8     8      0    3788
                                              8 COMRAM     7     7      0
                            _Command
                            _Delay_s
                         _WriteUART_
                       _dummy_clocks
                            _proceed
                          _putsUART_
                           _response
 ---------------------------------------------------------------------------------
 (2) _multi_write                                          6     6      0    3743
                                              8 COMRAM     6     6      0
                            _Command
                            _Delay_s
                          _WriteSPI_
                       _dummy_clocks
                            _proceed
                          _putsUART_
                           _response
 ---------------------------------------------------------------------------------
 (2) _multi_read                                          10    10      0    3863
                                              8 COMRAM     6     6      0
                            _Command
                            _Delay_s
                         _WriteUART_
                       _dummy_clocks
                            _proceed
                          _putsUART_
                           _response
 ---------------------------------------------------------------------------------
 (2) _response                                             1     1      0      15
                                              1 COMRAM     1     1      0
                          _ReadSPI__
 ---------------------------------------------------------------------------------
 (3) _ReadSPI__                                            1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _putsUART_                                            2     0      2     870
                                              4 COMRAM     2     0      2
                         _WriteUART_
 ---------------------------------------------------------------------------------
 (2) _WriteUART_                                           3     3      0      45
                                              1 COMRAM     3     3      0
                    _DelayTXBitUART_
 ---------------------------------------------------------------------------------
 (3) _DelayTXBitUART_                                      0     0      0      15
                       _Delay100TCYx
 ---------------------------------------------------------------------------------
 (3) _proceed                                              2     0      2      15
                                              2 COMRAM     2     0      2
                           _WriteSPI
 ---------------------------------------------------------------------------------
 (3) _dummy_clocks                                         5     3      2    1150
                                              3 COMRAM     5     3      2
                           _WriteSPI
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _WriteSPI                                             2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _Delay_s                                              3     3      0     105
                                              3 COMRAM     3     3      0
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             2     2      0      45
                                              1 COMRAM     2     2      0
                        _Delay1KTCYx
 ---------------------------------------------------------------------------------
 (5) _Delay1KTCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Command                                              7     2      5    1483
                                              2 COMRAM     6     1      5
                          _WriteSPI_
 ---------------------------------------------------------------------------------
 (4) _WriteSPI_                                            2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _ReadUART_                                            9     9      0     225
                                              1 COMRAM     7     7      0
                    _DelayRXBitUART_
                _DelayRXHalfBitUART_
 ---------------------------------------------------------------------------------
 (3) _DelayRXHalfBitUART_                                  0     0      0      30
                       _Delay100TCYx
                        _Delay10TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay10TCYx                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _DelayRXBitUART_                                      0     0      0      15
                       _Delay100TCYx
 ---------------------------------------------------------------------------------
 (4) _Delay100TCYx                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _File_IO
     _ReadUART_
       _DelayRXBitUART_
         _Delay100TCYx
       _DelayRXHalfBitUART_
         _Delay100TCYx
         _Delay10TCYx
     _multi_read
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteUART_
         _DelayTXBitUART_
           _Delay100TCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART_
         _WriteUART_
           _DelayTXBitUART_
             _Delay100TCYx
       _response
         _ReadSPI__
     _multi_write
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteSPI_
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART_
         _WriteUART_
           _DelayTXBitUART_
             _Delay100TCYx
       _response
         _ReadSPI__
     _putsUART_
       _WriteUART_
         _DelayTXBitUART_
           _Delay100TCYx
     _read_block
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteUART_
         _DelayTXBitUART_
           _Delay100TCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART_
         _WriteUART_
           _DelayTXBitUART_
             _Delay100TCYx
       _response
         _ReadSPI__
     _write_block
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _WriteSPI_
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART_
         _WriteUART_
           _DelayTXBitUART_
             _Delay100TCYx
       _response
         _ReadSPI__
   _OpenUART_
   _Soft_Hard_Init
     _OpenSPI
   _init
     _Command
       _WriteSPI_
     _Delay_s
       _delay_ms
         _Delay1KTCYx
     _delay_ms
       _Delay1KTCYx
     _dummy_clocks
       _WriteSPI
       _delay_ms
         _Delay1KTCYx
     _proceed
       _WriteSPI
     _putsUART_
       _WriteUART_
         _DelayTXBitUART_
           _Delay100TCYx
     _reset
       _Command
         _WriteSPI_
       _Delay_s
         _delay_ms
           _Delay1KTCYx
       _dummy_clocks
         _WriteSPI
         _delay_ms
           _Delay1KTCYx
       _proceed
         _WriteSPI
       _putsUART_
         _WriteUART_
           _DelayTXBitUART_
             _Delay100TCYx
       _response
         _ReadSPI__
     _response
       _ReadSPI__
   _putsUART_
     _WriteUART_
       _DelayTXBitUART_
         _Delay100TCYx

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     400      21       50.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      16       1       23.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      16      20        0.0%
DATA                 0      0     416       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sat Jan 21 13:44:39 2017

     Soft_Hard_Init@smp_phase 0008                   _SSPSTATbits 000FC7                            l21 7682  
                          l32 76F8                   __CFG_BOR$ON 000000                   __CFG_BORV$3 000000  
                         l116 778C                           l109 7512                           l303 7460  
                         l305 745C                           l323 75BA                           l352 7660  
                         l353 767A                           l370 7474                           l354 7662  
                         l346 7640                           l355 7666                           l612 73F4  
                         l348 7644                           l349 7646                           l277 7E34  
                         l368 7478                           l296 741A                           l619 7404  
                         l598 73E4                           _RD4 007C1C                           _RD5 007C1D  
                         u165 77BE                           u175 77D4                           u637 7406  
                         u647 73F6                           u657 73E6       Soft_Hard_Init@sync_mode 0006  
                         _ctr 0400                           _str 0600                           wreg 000FE8  
                __CFG_FOSC$HS 000000           _DelayRXHalfBitUART_ 7422                    ReadUART_@c 0006  
                  ReadUART_@d 0004                  multi_write@i 0009                  multi_write@j 000C  
                __CFG_LVP$OFF 000000                  __CFG_WDT$OFF 000000                          l1030 748A  
                        l1026 7482                          l1130 75C8                          l1044 7592  
                        l1038 7576                          l1302 7A66                          l1080 74F2  
                        l1312 7A90                          l1216 78AE                          l1402 7C0E  
                        l1330 7AC2                          l1260 7984                          l1244 794A  
                        l1228 78F6                          l1500 76AE                          l1174 77AE  
                        l1166 7794                          l1086 74F8                          l1094 7508  
                        l1422 7C72                          l1406 7C24                          l1342 7AEE  
                        l1190 7858                          l1168 779A                          l1256 796E  
                        l1248 7954                          l1504 76BC                          l1434 7CB4  
                        l1426 7C88                          l1418 7C64                          l1506 76D8  
                        l1356 7B3A                          l1292 7A1E                          l1276 79D8  
               multi_read@ptr 0009                          l1438 7CCA                          l1382 7BA2  
                        l1454 764A                          l1470 773C                          l1392 7BD8  
                        l1376 7B8C                          l1288 7A08                          l1464 770A  
                        l1640 7EB0                          l1632 7E80                          l1608 7E14  
                        l1560 7D42                          l1458 766A                          l1626 7E66  
                        l1554 7D18                          l1388 7BC2                          l1492 7696  
                        l1398 7BF8                          l1494 769C                          l1478 775C  
                        l1582 7D8A                          l1496 76A2                          l1568 7D62  
                        l1498 76A8                          l1658 74C6                          l1596 7DDA  
                        l1588 7DBA                          STR_1 7ECF                          STR_2 7F72  
                        STR_3 7FD8                          STR_4 7FC9                          STR_5 7FA8  
                        STR_6 7F97                          STR_7 7F5F                          STR_8 7FFC  
                        STR_9 7F34             WriteSPI_@data_out 0002                          _main 74AE  
                        _init 7CEE                          fsr1h 000FE2                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          start 0000  
               __CFG_IESO$OFF 000000               __end_of_Delay_s 7512               __end_of_File_IO 76FA  
        ?_DelayRXHalfBitUART_ 0001                 __CFG_MCLRE$ON 000000               __end_of_Command 7568  
                 _Delay10TCYx 73F2               __end_of_OpenSPI 7682                   _Delay1KTCYx 7402  
               __CFG_PLLDIV$5 000000                multi_read@buff 000C                         ?_main 0001  
                       ?_init 0001                         STR_10 7F85                         STR_11 7F4A  
                       STR_12 7FEF                         STR_13 7FF2                         STR_14 7FE7  
                       STR_15 7FB9         __size_of_Delay100TCYx 0010                         _CMCON 000FB4  
                       _LATA5 007C4D                         _LATB4 007C54                 __CFG_USBDIV$1 000000  
               __CFG_PWRT$OFF 000000                   _write_block 7826                __CFG_FCMEN$OFF 000000  
                       _reset 76FA                         init@i 000E                         tablat 000FF5  
             __end_of_proceed 73D4                         status 000FD8         ??_DelayRXHalfBitUART_ 0002  
             __initialization 74CC                  _Delay100TCYx 73E2                  __end_of_main 74CC  
                __end_of_init 7ECE                        ??_main 0017                        ??_init 000E  
               __activetblptr 000002               write_block@buff 000B               __CFG_CCP2MX$OFF 000000  
             multi_read@count 000A                        _ADCON1 000FC1                        ?_reset 0001  
            __end_of_WriteSPI 747A                 ?_dummy_clocks 0004            __size_of_ReadUART_ 00A8  
                   ??_Delay_s 0004            __size_of_ReadSPI__ 0010                     ??_File_IO 0010  
                      _TRISB0 007C98                        _TRISB1 007C99                        _TRISA5 007C95  
                      _TRISB4 007C9C                        _TRISC7 007CA7                        _SSPBUF 000FC9  
                   ??_Command 0008              __end_of_delay_ms 7494                     ??_OpenSPI 0003  
          __size_of_OpenUART_ 000A                __CFG_STVREN$ON 000000                        clear_0 74D4  
             WriteSPI@TempVar 0001      __size_of_DelayRXBitUART_ 0016              __end_of_response 73E2  
                 read_block@i 000B                  __mediumconst 7ECE                        reset@i 0009  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
                   ??_proceed 0005       __size_of_Soft_Hard_Init 004E                  ?_multi_write 0001  
    __size_of_DelayTXBitUART_ 001A                ??_dummy_clocks 0006                    __accesstop 0060  
     __end_of__initialization 74E0               __CFG_PBADEN$OFF 000000            __size_of_WriteSPI_ 0018  
                  _WriteUART_ 7568                __pcstackCOMRAM 0001                 __end_of_reset 777E  
           __end_of_ReadUART_ 7826             __end_of_ReadSPI__ 7422             __end_of_OpenUART_ 73C8  
             multi_write@data 000B               multi_write@buff 000E                       ??_reset 0009  
               putsUART_@data 0005             ReadUART_@datauart 0007              multi_read@length 000D  
                ?_Delay10TCYx 0001             ReadUART_@bitcount 0005                  ?_Delay1KTCYx 0001  
                   ?_WriteSPI 0001             __end_of_WriteSPI_ 7462                  ?_write_block 0001  
                   ?_delay_ms 0001            __size_of_putsUART_ 0028              read_block@length 000E  
           ReadUART_@uartdata 0008                       _SSPCON1 000FC6                       _SSPSTAT 000FC7  
           ??_DelayRXBitUART_ 0002                       _Delay_s 74EA               __CFG_VREGEN$OFF 000000  
                     _File_IO 7682                       _Command 753A             ??_DelayTXBitUART_ 0002  
                     _OpenSPI 762C                       __Hparam 0000                       __Lparam 0000  
                 ?_WriteUART_ 0001                     ?_response 0001          __end_of_dummy_clocks 75DE  
                     __pcinit 74CC                    _read_block 790E               Delay10TCYx@unit 0001  
                     __ramtop 0800                    ??_WriteSPI 0001                       __ptext0 74AE  
                     __ptext1 7CEE                       __ptext2 76FA                       __ptext3 75DE  
                     __ptext4 762C                       __ptext5 73BE                       __ptext6 7682  
                     __ptext7 7826                       __ptext8 790E                       __ptext9 7A30  
                  ??_delay_ms 0002                       _proceed 73C8                _Soft_Hard_Init 75DE  
        end_of_initialization 74E0   __end_of_DelayRXHalfBitUART_ 7434          __size_of_multi_write 0128  
               __Lmediumconst 7ECE              ReadSPI__@TempVar 0001                    ??_response 0002  
                     postdec1 000FE5              WriteSPI@data_out 0002             __end_of_putsUART_ 753A  
                     postinc0 000FEE                    _multi_read 7B58                     _PORTDbits 000F83  
      __end_of_Soft_Hard_Init 762C                     _TRISAbits 000F92                     _TRISBbits 000F93  
                   _TRISCbits 000F94                     _TRISDbits 000F95           __size_of_WriteUART_ 003A  
            WriteSPI_@TempVar 0001                  write_block@i 0009              Delay100TCYx@unit 0001  
              Command@CRCbits 0007          __size_of_Delay10TCYx 0010                   ?_read_block 0001  
            OpenSPI@smp_phase 0002          __size_of_Delay1KTCYx 0010           start_initialization 74CC  
                   _ReadUART_ 777E                     _ReadSPI__ 7412               ?_Soft_Hard_Init 0001  
        __size_of_write_block 00E8              OpenSPI@sync_mode 0003                    init@count1 0010  
                  init@count2 0014            WriteUART_@bitcount 0004                     _OpenUART_ 73BE  
       __size_of_dummy_clocks 003C              __CFG_LPT1OSC$OFF 000000            WriteUART_@uartdata 0003  
                 ?_multi_read 0001               _DelayRXBitUART_ 7434                   __pbssBIGRAM 0400  
           __size_of_WriteSPI 0018                    ?_ReadUART_ 0001                    ?_ReadSPI__ 0001  
                   _WriteSPI_ 744A           __end_of__stringdata 7FFF               _DelayTXBitUART_ 7494  
           __size_of_delay_ms 001A               Delay1KTCYx@unit 0001                  _dummy_clocks 75A2  
                    ?_Delay_s 0001                    ?_OpenUART_ 0001                      ?_File_IO 0001  
         __size_of_read_block 0122                      ?_Command 0003                      ?_OpenSPI 0001  
                ??_WriteUART_ 0002                 ?_Delay100TCYx 0001                 __pmediumconst 7ECE  
           __size_of_response 000E               read_block@count 0009                    reset@count 000B  
                  ?_WriteSPI_ 0001                      ?_proceed 0003            __end_of_WriteUART_ 75A2  
              __size_of_reset 0084                     delay_ms@i 0003                     delay_ms@t 0002  
         __size_of_multi_read 0196                      Delay_s@i 0005                      Delay_s@j 0006  
                    Delay_s@t 0004                ??_Delay100TCYx 0001                      File_IO@c 0010  
                    _PIR1bits 000F9E       __end_of_DelayRXBitUART_ 744A               OpenSPI@bus_mode 0001  
                   _putsUART_ 7512                   __stringdata 7ECF       __end_of_DelayTXBitUART_ 74AE  
                 ??_ReadUART_ 0002                   ??_ReadSPI__ 0001                 ??_multi_write 0009  
                 ??_OpenUART_ 0001              __size_of_Delay_s 0028                     init@count 0012  
            __size_of_File_IO 0078              __size_of_Command 002E                      __Hrparam 0000  
__size_of_DelayRXHalfBitUART_ 0012                      __Lrparam 0000              __size_of_OpenSPI 0056  
                ??_read_block 0009              ??_Soft_Hard_Init 0004                      _WriteSPI 7462  
                  ?_putsUART_ 0005                      _delay_ms 747A                   ??_WriteSPI_ 0001  
             Soft_Hard_Init@i 0004                      __ptext10 7B58                      __ptext11 73D4  
                    __ptext20 747A                      __ptext12 7412                      __ptext21 7402  
                    __ptext13 7512                      __ptext22 753A                      __ptext14 7568  
                    __ptext23 744A                      __ptext15 7494                      __ptext24 777E  
                    __ptext16 73C8                      __ptext25 7422                      __ptext17 75A2  
                    __ptext26 73F2                      __ptext18 7462                      __ptext27 7434  
                    __ptext19 74EA                      __ptext28 73E2              __size_of_proceed 000C  
              read_block@buff 000D                     reset@buff 000D                 __size_of_main 001E  
               __size_of_init 01E0            __end_of_read_block 7A30           __end_of_multi_write 7B58  
               dummy_clocks@i 0007                 dummy_clocks@n 0004                      _response 73D4  
               ??_Delay10TCYx 0001              ?_DelayRXBitUART_ 0001                 ??_Delay1KTCYx 0001  
                ??_multi_read 0009         __CFG_CPUDIV$OSC1_PLL2 000000              ?_DelayTXBitUART_ 0001  
                    init@buff 0016                 ??_write_block 0009          __end_of_Delay100TCYx 73F2  
          __end_of_multi_read 7CEE                   ??_putsUART_ 0007                  response@buff 0002  
         __end_of_Delay10TCYx 7402           __end_of_Delay1KTCYx 7412                   _SSPCON1bits 000FC6  
                  Command@cmd 0008                    Command@arg 0003        Soft_Hard_Init@bus_mode 0007  
                 _multi_write 7A30           __end_of_write_block 790E  
