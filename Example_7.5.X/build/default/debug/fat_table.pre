
# 1 "fat_table.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 23 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdio.h"
extern int errno;

# 54
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 99 "C:\Program Files (x86)\Microchip\xc8\v1.21\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 191
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 15 "fat_types.h"
typedef unsigned char uint8;
typedef unsigned short uint16;

# 23
typedef unsigned long uint32;

# 110 "fat_defs.h"

struct fat_dir_entry 
{
uint8 Name[11];
uint8 Attr;
uint8 NTRes;
uint8 CrtTimeTenth;
uint8 CrtTime[2];
uint8 CrtDate[2];
uint8 LstAccDate[2];
uint16 FstClusHI;
uint8 WrtTime[2];
uint8 WrtDate[2];
uint16 FstClusLO;
uint32 FileSize;
} ;


# 24 "fat_access.h"
typedef int (*fn_diskio_read) (uint32 sector, uint8 *buffer, uint32 sector_count);
typedef int (*fn_diskio_write)(uint32 sector, uint8 *buffer, uint32 sector_count);




struct disk_if
{

fn_diskio_read read_media;
fn_diskio_write write_media;
};


struct fat_buffer;

struct fat_buffer
{
uint8 sector[512 * 1];
uint32 address;
int dirty;
uint8 * ptr;


struct fat_buffer *next;
};

typedef enum eFatType
{
FAT_TYPE_16,
FAT_TYPE_32
} tFatType;

struct fatfs
{

uint8 sectors_per_cluster;
uint32 cluster_begin_lba;
uint32 rootdir_first_cluster;
uint32 rootdir_first_sector;
uint32 rootdir_sectors;
uint32 fat_begin_lba;
uint16 fs_info_sector;
uint32 lba_begin;
uint32 fat_sectors;
uint32 next_free_cluster;
uint16 root_entry_count;
uint16 reserved_sectors;
uint8 num_of_fats;
tFatType fat_type;


struct disk_if disk_io;


void (*fl_lock)(void);
void (*fl_unlock)(void);


struct fat_buffer currentsector;


struct fat_buffer *fat_buffer_head;
struct fat_buffer fat_buffers[1];
};

struct fs_dir_list_status
{
uint32 sector;
uint32 cluster;
uint8 offset;
};

struct fs_dir_ent
{
char filename[10];
uint8 is_dir;
uint32 cluster;
uint32 size;

# 111
};




int fatfs_init(struct fatfs *fs);
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number);
int fatfs_sector_reader(struct fatfs *fs, uint32 Startcluster, uint32 offset, uint8 *target);
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count);
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count);
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target);
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target);
void fatfs_show_details(struct fatfs *fs);
uint32 fatfs_get_root_cluster(struct fatfs *fs);
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *nametofind, struct fat_dir_entry *sfEntry);
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname);
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength);
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname);
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster);
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry);
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access);

# 138
void fatfs_show_details_(struct fatfs *fs);

# 30 "fat_misc.h"
struct lfn_cache
{


uint8 String[10][5];
uint8 Null;

uint8 no_of_strings;
};




void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable);
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer);
char* fatfs_lfn_cache_get(struct lfn_cache *lfn);
int fatfs_entry_lfn_text(struct fat_dir_entry *entry);
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry);
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry);
int fatfs_entry_sfn_only(struct fat_dir_entry *entry);
int fatfs_entry_is_dir(struct fat_dir_entry *entry);
int fatfs_entry_is_file(struct fat_dir_entry *entry);
int fatfs_lfn_entries_required(char *filename);
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk);
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir);
int fatfs_lfn_create_sfn(char *sfn_output, char *filename);
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum);
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds);
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year);
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds);
uint16 fatfs_convert_to_fat_date(int day, int month, int year);
void fatfs_print_sector(uint32 sector, uint8 *data);

# 10 "fat_table.h"
void fatfs_fat_init(struct fatfs *fs);
int fatfs_fat_purge(struct fatfs *fs);
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster);
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue);
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster);
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster);
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry);
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster);
uint32 fatfs_count_free_clusters(struct fatfs *fs);

# 60 "fat_table.c"
void fatfs_fat_init(struct fatfs *fs)
{
int i;


fs->fat_buffer_head = (0);

for (i=0;i<1;i++)
{

fs->fat_buffers[i].address = 0xFFFFFFFF;
fs->fat_buffers[i].dirty = 0;
memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
fs->fat_buffers[i].ptr = (0);


fs->fat_buffers[i].next = fs->fat_buffer_head;
fs->fat_buffer_head = &fs->fat_buffers[i];
}
}



static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
if (pcur)
{

if (pcur->dirty)
{
if (fs->disk_io.write_media)
{
uint32 sectors = 1;
uint32 offset = pcur->address - fs->fat_begin_lba;


if ((offset + 1) <= fs->fat_sectors)
sectors = 1;
else
sectors = fs->fat_sectors - offset;

if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
return 0;
}

pcur->dirty = 0;
}

return 1;
}
else
return 0;
}



static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
struct fat_buffer *last = (0);
struct fat_buffer *pcur = fs->fat_buffer_head;


while (pcur)
{

if ((sector >= pcur->address) && (sector < (pcur->address + 1)))
break;


if (pcur->next == (0))
{

if (last)
last->next = (0);

else
fs->fat_buffer_head = (0);
}

last = pcur;
pcur = pcur->next;
}


if (pcur)
{
pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * 512));
return pcur;
}


pcur = last;


pcur->next = fs->fat_buffer_head;
fs->fat_buffer_head = pcur;


if (pcur->dirty)
if (!fatfs_fat_writeback(fs, pcur))
return 0;


pcur->address = sector;


if (!fs->disk_io.read_media(pcur->address, pcur->sector, 1))
{

pcur->address = 0xFFFFFFFF;
return (0);
}

pcur->ptr = pcur->sector;
return pcur;
}



int fatfs_fat_purge(struct fatfs *fs)
{
struct fat_buffer *pcur = fs->fat_buffer_head;


while (pcur)
{

if (pcur->dirty)
if (!fatfs_fat_writeback(fs, pcur))
return 0;

pcur = pcur->next;
}

return 1;
}

# 205
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
uint32 fat_sector_offset, position;
uint32 nextcluster;
struct fat_buffer *pbuf;


if (current_cluster == 0)
current_cluster = 2;


if (fs->fat_type == FAT_TYPE_16)
fat_sector_offset = current_cluster / 256;
else
fat_sector_offset = current_cluster / 128;


pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
if (!pbuf)
return (0xFFFFFFFF);

if (fs->fat_type == FAT_TYPE_16)
{

position = (current_cluster - (fat_sector_offset * 256)) * 2;


nextcluster = ( ( ((uint16)pbuf->ptr[(uint16)position+1]<<8) + (uint16)pbuf->ptr[(uint16)position+0] ) );


if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
return (0xFFFFFFFF);
}
else
{

position = (current_cluster - (fat_sector_offset * 128)) * 4;


nextcluster = ( ( ((uint32)pbuf->ptr[(uint16)position+3]<<24) + ((uint32)pbuf->ptr[(uint16)position+2]<<16) + ((uint32)pbuf->ptr[(uint16)position+1]<<8) + (uint32)pbuf->ptr[(uint16)position+0] ) );


nextcluster = nextcluster & 0x0FFFFFFF;


if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
return (0xFFFFFFFF);
}


return (nextcluster);
}



void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
if (fs->fat_type == FAT_TYPE_16)
;
else
{

struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
if (!pbuf)
return ;


{ { pbuf->ptr[492+0] = (uint8)((newValue)&0xFF); pbuf->ptr[492+1] = (uint8)((newValue>>8)&0xFF); pbuf->ptr[492+2] = (uint8)((newValue>>16)&0xFF); pbuf->ptr[492+3] = (uint8)((newValue>>24)&0xFF); }; pbuf->dirty = 1; };
fs->next_free_cluster = newValue;


if (fs->disk_io.write_media)
fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);


pbuf->address = 0xFFFFFFFF;
pbuf->dirty = 0;
}
}




int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
uint32 fat_sector_offset, position;
uint32 nextcluster;
uint32 current_cluster = start_cluster;
struct fat_buffer *pbuf;

do
{

if (fs->fat_type == FAT_TYPE_16)
fat_sector_offset = current_cluster / 256;
else
fat_sector_offset = current_cluster / 128;

if ( fat_sector_offset < fs->fat_sectors)
{

pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
if (!pbuf)
return 0;

if (fs->fat_type == FAT_TYPE_16)
{

position = (current_cluster - (fat_sector_offset * 256)) * 2;


nextcluster = ( ( ((uint16)pbuf->ptr[(uint16)position+1]<<8) + (uint16)pbuf->ptr[(uint16)position+0] ) );
}
else
{

position = (current_cluster - (fat_sector_offset * 128)) * 4;


nextcluster = ( ( ((uint32)pbuf->ptr[(uint16)position+3]<<24) + ((uint32)pbuf->ptr[(uint16)position+2]<<16) + ((uint32)pbuf->ptr[(uint16)position+1]<<8) + (uint32)pbuf->ptr[(uint16)position+0] ) );


nextcluster = nextcluster & 0x0FFFFFFF;
}

if (nextcluster !=0 )
current_cluster++;
}
else

return 0;
}
while (nextcluster != 0x0);


*free_cluster = current_cluster;
return 1;
}

# 349
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
struct fat_buffer *pbuf;
uint32 fat_sector_offset, position;


if (fs->fat_type == FAT_TYPE_16)
fat_sector_offset = cluster / 256;
else
fat_sector_offset = cluster / 128;


pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
if (!pbuf)
return 0;

if (fs->fat_type == FAT_TYPE_16)
{

position = (cluster - (fat_sector_offset * 256)) * 2;


{ { pbuf->ptr[(uint16)position+0] = (uint8)((((uint16)next_cluster))&0xFF); pbuf->ptr[(uint16)position+1] = (uint8)((((uint16)next_cluster)>>8)&0xFF); }; pbuf->dirty = 1; };
}
else
{

position = (cluster - (fat_sector_offset * 128)) * 4;


{ { pbuf->ptr[(uint16)position+0] = (uint8)((next_cluster)&0xFF); pbuf->ptr[(uint16)position+1] = (uint8)((next_cluster>>8)&0xFF); pbuf->ptr[(uint16)position+2] = (uint8)((next_cluster>>16)&0xFF); pbuf->ptr[(uint16)position+3] = (uint8)((next_cluster>>24)&0xFF); }; pbuf->dirty = 1; };
}

return 1;
}

# 389
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
uint32 last_cluster;
uint32 next_cluster = start_cluster;


while ( (next_cluster != 0xFFFFFFFF) && (next_cluster != 0x00000000) )
{
last_cluster = next_cluster;


next_cluster = fatfs_find_next_cluster(fs, next_cluster);


fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
}

return 1;
}

# 414
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
uint32 last_cluster = 0xFFFFFFFF;
uint32 next_cluster = start_cluster;

if (start_cluster == 0xFFFFFFFF)
return 0;


while ( next_cluster != 0xFFFFFFFF )
{
last_cluster = next_cluster;


next_cluster = fatfs_find_next_cluster(fs, next_cluster);
if (!next_cluster)
return 0;
}


fatfs_fat_set_cluster(fs, last_cluster, newEntry);


fatfs_fat_set_cluster(fs, newEntry, 0xFFFFFFFF);

return 1;
}




uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
uint32 i,j;
uint32 count = 0;
struct fat_buffer *pbuf;

for (i = 0; i < fs->fat_sectors; i++)
{

pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
if (!pbuf)
break;

for (j = 0; j < 512; )
{
if (fs->fat_type == FAT_TYPE_16)
{
if (( ( ((uint16)pbuf->ptr[(uint16)j+1]<<8) + (uint16)pbuf->ptr[(uint16)j+0] ) ) == 0)
count++;

j += 2;
}
else
{
if (( ( ((uint32)pbuf->ptr[(uint16)j+3]<<24) + ((uint32)pbuf->ptr[(uint16)j+2]<<16) + ((uint32)pbuf->ptr[(uint16)j+1]<<8) + (uint32)pbuf->ptr[(uint16)j+0] ) ) == 0)
count++;

j += 4;
}
}
}

return count;
}
